// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paint_preview.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paint_5fpreview_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paint_5fpreview_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace paint_preview {
class ContentIdEmbeddingTokenPairProto;
class ContentIdEmbeddingTokenPairProtoDefaultTypeInternal;
extern ContentIdEmbeddingTokenPairProtoDefaultTypeInternal _ContentIdEmbeddingTokenPairProto_default_instance_;
class LinkDataProto;
class LinkDataProtoDefaultTypeInternal;
extern LinkDataProtoDefaultTypeInternal _LinkDataProto_default_instance_;
class MetadataProto;
class MetadataProtoDefaultTypeInternal;
extern MetadataProtoDefaultTypeInternal _MetadataProto_default_instance_;
class PaintPreviewFrameProto;
class PaintPreviewFrameProtoDefaultTypeInternal;
extern PaintPreviewFrameProtoDefaultTypeInternal _PaintPreviewFrameProto_default_instance_;
class PaintPreviewProto;
class PaintPreviewProtoDefaultTypeInternal;
extern PaintPreviewProtoDefaultTypeInternal _PaintPreviewProto_default_instance_;
class RectProto;
class RectProtoDefaultTypeInternal;
extern RectProtoDefaultTypeInternal _RectProto_default_instance_;
}  // namespace paint_preview
PROTOBUF_NAMESPACE_OPEN
template<> ::paint_preview::ContentIdEmbeddingTokenPairProto* Arena::CreateMaybeMessage<::paint_preview::ContentIdEmbeddingTokenPairProto>(Arena*);
template<> ::paint_preview::LinkDataProto* Arena::CreateMaybeMessage<::paint_preview::LinkDataProto>(Arena*);
template<> ::paint_preview::MetadataProto* Arena::CreateMaybeMessage<::paint_preview::MetadataProto>(Arena*);
template<> ::paint_preview::PaintPreviewFrameProto* Arena::CreateMaybeMessage<::paint_preview::PaintPreviewFrameProto>(Arena*);
template<> ::paint_preview::PaintPreviewProto* Arena::CreateMaybeMessage<::paint_preview::PaintPreviewProto>(Arena*);
template<> ::paint_preview::RectProto* Arena::CreateMaybeMessage<::paint_preview::RectProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace paint_preview {

// ===================================================================

class RectProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.RectProto) */ {
 public:
  RectProto();
  virtual ~RectProto();

  RectProto(const RectProto& from);
  RectProto(RectProto&& from) noexcept
    : RectProto() {
    *this = ::std::move(from);
  }

  inline RectProto& operator=(const RectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectProto& operator=(RectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectProto* internal_default_instance() {
    return reinterpret_cast<const RectProto*>(
               &_RectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RectProto& a, RectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RectProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectProto* New() const final {
    return CreateMaybeMessage<RectProto>(nullptr);
  }

  RectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RectProto& from);
  void MergeFrom(const RectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.RectProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // required int64 x = 1;
  bool has_x() const;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int64 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 y = 2;
  bool has_y() const;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int64 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 width = 3;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 height = 4;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:paint_preview.RectProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 x_;
  ::PROTOBUF_NAMESPACE_ID::int64 y_;
  ::PROTOBUF_NAMESPACE_ID::int64 width_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class LinkDataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.LinkDataProto) */ {
 public:
  LinkDataProto();
  virtual ~LinkDataProto();

  LinkDataProto(const LinkDataProto& from);
  LinkDataProto(LinkDataProto&& from) noexcept
    : LinkDataProto() {
    *this = ::std::move(from);
  }

  inline LinkDataProto& operator=(const LinkDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkDataProto& operator=(LinkDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LinkDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkDataProto* internal_default_instance() {
    return reinterpret_cast<const LinkDataProto*>(
               &_LinkDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinkDataProto& a, LinkDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkDataProto* New() const final {
    return CreateMaybeMessage<LinkDataProto>(nullptr);
  }

  LinkDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LinkDataProto& from);
  void MergeFrom(const LinkDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.LinkDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kRectFieldNumber = 1,
  };
  // required string url = 2;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // required .paint_preview.RectProto rect = 1;
  bool has_rect() const;
  void clear_rect();
  const ::paint_preview::RectProto& rect() const;
  ::paint_preview::RectProto* release_rect();
  ::paint_preview::RectProto* mutable_rect();
  void set_allocated_rect(::paint_preview::RectProto* rect);

  // @@protoc_insertion_point(class_scope:paint_preview.LinkDataProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::paint_preview::RectProto* rect_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class ContentIdEmbeddingTokenPairProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.ContentIdEmbeddingTokenPairProto) */ {
 public:
  ContentIdEmbeddingTokenPairProto();
  virtual ~ContentIdEmbeddingTokenPairProto();

  ContentIdEmbeddingTokenPairProto(const ContentIdEmbeddingTokenPairProto& from);
  ContentIdEmbeddingTokenPairProto(ContentIdEmbeddingTokenPairProto&& from) noexcept
    : ContentIdEmbeddingTokenPairProto() {
    *this = ::std::move(from);
  }

  inline ContentIdEmbeddingTokenPairProto& operator=(const ContentIdEmbeddingTokenPairProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentIdEmbeddingTokenPairProto& operator=(ContentIdEmbeddingTokenPairProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentIdEmbeddingTokenPairProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentIdEmbeddingTokenPairProto* internal_default_instance() {
    return reinterpret_cast<const ContentIdEmbeddingTokenPairProto*>(
               &_ContentIdEmbeddingTokenPairProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentIdEmbeddingTokenPairProto& a, ContentIdEmbeddingTokenPairProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentIdEmbeddingTokenPairProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentIdEmbeddingTokenPairProto* New() const final {
    return CreateMaybeMessage<ContentIdEmbeddingTokenPairProto>(nullptr);
  }

  ContentIdEmbeddingTokenPairProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentIdEmbeddingTokenPairProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentIdEmbeddingTokenPairProto& from);
  void MergeFrom(const ContentIdEmbeddingTokenPairProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentIdEmbeddingTokenPairProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.ContentIdEmbeddingTokenPairProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingTokenLowFieldNumber = 2,
    kEmbeddingTokenHighFieldNumber = 3,
    kContentIdFieldNumber = 1,
  };
  // required uint64 embedding_token_low = 2;
  bool has_embedding_token_low() const;
  void clear_embedding_token_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_low() const;
  void set_embedding_token_low(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 embedding_token_high = 3;
  bool has_embedding_token_high() const;
  void clear_embedding_token_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_high() const;
  void set_embedding_token_high(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 content_id = 1;
  bool has_content_id() const;
  void clear_content_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 content_id() const;
  void set_content_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:paint_preview.ContentIdEmbeddingTokenPairProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_high_;
  ::PROTOBUF_NAMESPACE_ID::uint32 content_id_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class PaintPreviewFrameProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.PaintPreviewFrameProto) */ {
 public:
  PaintPreviewFrameProto();
  virtual ~PaintPreviewFrameProto();

  PaintPreviewFrameProto(const PaintPreviewFrameProto& from);
  PaintPreviewFrameProto(PaintPreviewFrameProto&& from) noexcept
    : PaintPreviewFrameProto() {
    *this = ::std::move(from);
  }

  inline PaintPreviewFrameProto& operator=(const PaintPreviewFrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaintPreviewFrameProto& operator=(PaintPreviewFrameProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PaintPreviewFrameProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaintPreviewFrameProto* internal_default_instance() {
    return reinterpret_cast<const PaintPreviewFrameProto*>(
               &_PaintPreviewFrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PaintPreviewFrameProto& a, PaintPreviewFrameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PaintPreviewFrameProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaintPreviewFrameProto* New() const final {
    return CreateMaybeMessage<PaintPreviewFrameProto>(nullptr);
  }

  PaintPreviewFrameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaintPreviewFrameProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PaintPreviewFrameProto& from);
  void MergeFrom(const PaintPreviewFrameProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaintPreviewFrameProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.PaintPreviewFrameProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 5,
    kContentIdToEmbeddingTokensFieldNumber = 6,
    kFilePathFieldNumber = 4,
    kEmbeddingTokenLowFieldNumber = 1,
    kEmbeddingTokenHighFieldNumber = 2,
    kIsMainFrameFieldNumber = 3,
  };
  // repeated .paint_preview.LinkDataProto links = 5;
  int links_size() const;
  void clear_links();
  ::paint_preview::LinkDataProto* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >*
      mutable_links();
  const ::paint_preview::LinkDataProto& links(int index) const;
  ::paint_preview::LinkDataProto* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >&
      links() const;

  // repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
  int content_id_to_embedding_tokens_size() const;
  void clear_content_id_to_embedding_tokens();
  ::paint_preview::ContentIdEmbeddingTokenPairProto* mutable_content_id_to_embedding_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >*
      mutable_content_id_to_embedding_tokens();
  const ::paint_preview::ContentIdEmbeddingTokenPairProto& content_id_to_embedding_tokens(int index) const;
  ::paint_preview::ContentIdEmbeddingTokenPairProto* add_content_id_to_embedding_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >&
      content_id_to_embedding_tokens() const;

  // optional string file_path = 4;
  bool has_file_path() const;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // required uint64 embedding_token_low = 1;
  bool has_embedding_token_low() const;
  void clear_embedding_token_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_low() const;
  void set_embedding_token_low(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 embedding_token_high = 2;
  bool has_embedding_token_high() const;
  void clear_embedding_token_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_high() const;
  void set_embedding_token_high(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool is_main_frame = 3;
  bool has_is_main_frame() const;
  void clear_is_main_frame();
  bool is_main_frame() const;
  void set_is_main_frame(bool value);

  // @@protoc_insertion_point(class_scope:paint_preview.PaintPreviewFrameProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto > links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto > content_id_to_embedding_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 embedding_token_high_;
  bool is_main_frame_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class MetadataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.MetadataProto) */ {
 public:
  MetadataProto();
  virtual ~MetadataProto();

  MetadataProto(const MetadataProto& from);
  MetadataProto(MetadataProto&& from) noexcept
    : MetadataProto() {
    *this = ::std::move(from);
  }

  inline MetadataProto& operator=(const MetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataProto& operator=(MetadataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetadataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataProto* internal_default_instance() {
    return reinterpret_cast<const MetadataProto*>(
               &_MetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MetadataProto& a, MetadataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataProto* New() const final {
    return CreateMaybeMessage<MetadataProto>(nullptr);
  }

  MetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetadataProto& from);
  void MergeFrom(const MetadataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetadataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.MetadataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // required string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:paint_preview.MetadataProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class PaintPreviewProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.PaintPreviewProto) */ {
 public:
  PaintPreviewProto();
  virtual ~PaintPreviewProto();

  PaintPreviewProto(const PaintPreviewProto& from);
  PaintPreviewProto(PaintPreviewProto&& from) noexcept
    : PaintPreviewProto() {
    *this = ::std::move(from);
  }

  inline PaintPreviewProto& operator=(const PaintPreviewProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaintPreviewProto& operator=(PaintPreviewProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PaintPreviewProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaintPreviewProto* internal_default_instance() {
    return reinterpret_cast<const PaintPreviewProto*>(
               &_PaintPreviewProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PaintPreviewProto& a, PaintPreviewProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PaintPreviewProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaintPreviewProto* New() const final {
    return CreateMaybeMessage<PaintPreviewProto>(nullptr);
  }

  PaintPreviewProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaintPreviewProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PaintPreviewProto& from);
  void MergeFrom(const PaintPreviewProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaintPreviewProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.PaintPreviewProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubframesFieldNumber = 2,
    kRootFrameFieldNumber = 1,
    kMetadataFieldNumber = 3,
  };
  // repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
  int subframes_size() const;
  void clear_subframes();
  ::paint_preview::PaintPreviewFrameProto* mutable_subframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >*
      mutable_subframes();
  const ::paint_preview::PaintPreviewFrameProto& subframes(int index) const;
  ::paint_preview::PaintPreviewFrameProto* add_subframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >&
      subframes() const;

  // required .paint_preview.PaintPreviewFrameProto root_frame = 1;
  bool has_root_frame() const;
  void clear_root_frame();
  const ::paint_preview::PaintPreviewFrameProto& root_frame() const;
  ::paint_preview::PaintPreviewFrameProto* release_root_frame();
  ::paint_preview::PaintPreviewFrameProto* mutable_root_frame();
  void set_allocated_root_frame(::paint_preview::PaintPreviewFrameProto* root_frame);

  // required .paint_preview.MetadataProto metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  const ::paint_preview::MetadataProto& metadata() const;
  ::paint_preview::MetadataProto* release_metadata();
  ::paint_preview::MetadataProto* mutable_metadata();
  void set_allocated_metadata(::paint_preview::MetadataProto* metadata);

  // @@protoc_insertion_point(class_scope:paint_preview.PaintPreviewProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto > subframes_;
  ::paint_preview::PaintPreviewFrameProto* root_frame_;
  ::paint_preview::MetadataProto* metadata_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RectProto

// required int64 x = 1;
inline bool RectProto::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RectProto::clear_x() {
  x_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RectProto::x() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.x)
  return x_;
}
inline void RectProto::set_x(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.x)
}

// required int64 y = 2;
inline bool RectProto::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RectProto::clear_y() {
  y_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RectProto::y() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.y)
  return y_;
}
inline void RectProto::set_y(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.y)
}

// required int64 width = 3;
inline bool RectProto::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RectProto::clear_width() {
  width_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RectProto::width() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.width)
  return width_;
}
inline void RectProto::set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.width)
}

// required int64 height = 4;
inline bool RectProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RectProto::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RectProto::height() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.height)
  return height_;
}
inline void RectProto::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.height)
}

// -------------------------------------------------------------------

// LinkDataProto

// required .paint_preview.RectProto rect = 1;
inline bool LinkDataProto::has_rect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkDataProto::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paint_preview::RectProto& LinkDataProto::rect() const {
  const ::paint_preview::RectProto* p = rect_;
  // @@protoc_insertion_point(field_get:paint_preview.LinkDataProto.rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::paint_preview::RectProto*>(
      &::paint_preview::_RectProto_default_instance_);
}
inline ::paint_preview::RectProto* LinkDataProto::release_rect() {
  // @@protoc_insertion_point(field_release:paint_preview.LinkDataProto.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::RectProto* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::paint_preview::RectProto* LinkDataProto::mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::RectProto>(GetArenaNoVirtual());
    rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:paint_preview.LinkDataProto.rect)
  return rect_;
}
inline void LinkDataProto::set_allocated_rect(::paint_preview::RectProto* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.LinkDataProto.rect)
}

// required string url = 2;
inline bool LinkDataProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkDataProto::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkDataProto::url() const {
  // @@protoc_insertion_point(field_get:paint_preview.LinkDataProto.url)
  return url_.GetNoArena();
}
inline void LinkDataProto::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paint_preview.LinkDataProto.url)
}
inline void LinkDataProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paint_preview.LinkDataProto.url)
}
inline void LinkDataProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paint_preview.LinkDataProto.url)
}
inline void LinkDataProto::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paint_preview.LinkDataProto.url)
}
inline std::string* LinkDataProto::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:paint_preview.LinkDataProto.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinkDataProto::release_url() {
  // @@protoc_insertion_point(field_release:paint_preview.LinkDataProto.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinkDataProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:paint_preview.LinkDataProto.url)
}

// -------------------------------------------------------------------

// ContentIdEmbeddingTokenPairProto

// required uint32 content_id = 1;
inline bool ContentIdEmbeddingTokenPairProto::has_content_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentIdEmbeddingTokenPairProto::clear_content_id() {
  content_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContentIdEmbeddingTokenPairProto::content_id() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.content_id)
  return content_id_;
}
inline void ContentIdEmbeddingTokenPairProto::set_content_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  content_id_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.content_id)
}

// required uint64 embedding_token_low = 2;
inline bool ContentIdEmbeddingTokenPairProto::has_embedding_token_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentIdEmbeddingTokenPairProto::clear_embedding_token_low() {
  embedding_token_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContentIdEmbeddingTokenPairProto::embedding_token_low() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_low)
  return embedding_token_low_;
}
inline void ContentIdEmbeddingTokenPairProto::set_embedding_token_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  embedding_token_low_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_low)
}

// required uint64 embedding_token_high = 3;
inline bool ContentIdEmbeddingTokenPairProto::has_embedding_token_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentIdEmbeddingTokenPairProto::clear_embedding_token_high() {
  embedding_token_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContentIdEmbeddingTokenPairProto::embedding_token_high() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_high)
  return embedding_token_high_;
}
inline void ContentIdEmbeddingTokenPairProto::set_embedding_token_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  embedding_token_high_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_high)
}

// -------------------------------------------------------------------

// PaintPreviewFrameProto

// required uint64 embedding_token_low = 1;
inline bool PaintPreviewFrameProto::has_embedding_token_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaintPreviewFrameProto::clear_embedding_token_low() {
  embedding_token_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaintPreviewFrameProto::embedding_token_low() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.embedding_token_low)
  return embedding_token_low_;
}
inline void PaintPreviewFrameProto::set_embedding_token_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  embedding_token_low_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.embedding_token_low)
}

// required uint64 embedding_token_high = 2;
inline bool PaintPreviewFrameProto::has_embedding_token_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaintPreviewFrameProto::clear_embedding_token_high() {
  embedding_token_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaintPreviewFrameProto::embedding_token_high() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.embedding_token_high)
  return embedding_token_high_;
}
inline void PaintPreviewFrameProto::set_embedding_token_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  embedding_token_high_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.embedding_token_high)
}

// required bool is_main_frame = 3;
inline bool PaintPreviewFrameProto::has_is_main_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PaintPreviewFrameProto::clear_is_main_frame() {
  is_main_frame_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PaintPreviewFrameProto::is_main_frame() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.is_main_frame)
  return is_main_frame_;
}
inline void PaintPreviewFrameProto::set_is_main_frame(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_main_frame_ = value;
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.is_main_frame)
}

// optional string file_path = 4;
inline bool PaintPreviewFrameProto::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaintPreviewFrameProto::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PaintPreviewFrameProto::file_path() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.file_path)
  return file_path_.GetNoArena();
}
inline void PaintPreviewFrameProto::set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.file_path)
}
inline void PaintPreviewFrameProto::set_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paint_preview.PaintPreviewFrameProto.file_path)
}
inline void PaintPreviewFrameProto::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paint_preview.PaintPreviewFrameProto.file_path)
}
inline void PaintPreviewFrameProto::set_file_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paint_preview.PaintPreviewFrameProto.file_path)
}
inline std::string* PaintPreviewFrameProto::mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaintPreviewFrameProto::release_file_path() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewFrameProto.file_path)
  if (!has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaintPreviewFrameProto::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewFrameProto.file_path)
}

// repeated .paint_preview.LinkDataProto links = 5;
inline int PaintPreviewFrameProto::links_size() const {
  return links_.size();
}
inline void PaintPreviewFrameProto::clear_links() {
  links_.Clear();
}
inline ::paint_preview::LinkDataProto* PaintPreviewFrameProto::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >*
PaintPreviewFrameProto::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewFrameProto.links)
  return &links_;
}
inline const ::paint_preview::LinkDataProto& PaintPreviewFrameProto::links(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.links)
  return links_.Get(index);
}
inline ::paint_preview::LinkDataProto* PaintPreviewFrameProto::add_links() {
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewFrameProto.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >&
PaintPreviewFrameProto::links() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewFrameProto.links)
  return links_;
}

// repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
inline int PaintPreviewFrameProto::content_id_to_embedding_tokens_size() const {
  return content_id_to_embedding_tokens_.size();
}
inline void PaintPreviewFrameProto::clear_content_id_to_embedding_tokens() {
  content_id_to_embedding_tokens_.Clear();
}
inline ::paint_preview::ContentIdEmbeddingTokenPairProto* PaintPreviewFrameProto::mutable_content_id_to_embedding_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >*
PaintPreviewFrameProto::mutable_content_id_to_embedding_tokens() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return &content_id_to_embedding_tokens_;
}
inline const ::paint_preview::ContentIdEmbeddingTokenPairProto& PaintPreviewFrameProto::content_id_to_embedding_tokens(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_.Get(index);
}
inline ::paint_preview::ContentIdEmbeddingTokenPairProto* PaintPreviewFrameProto::add_content_id_to_embedding_tokens() {
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >&
PaintPreviewFrameProto::content_id_to_embedding_tokens() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_;
}

// -------------------------------------------------------------------

// MetadataProto

// required string url = 1;
inline bool MetadataProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetadataProto::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetadataProto::url() const {
  // @@protoc_insertion_point(field_get:paint_preview.MetadataProto.url)
  return url_.GetNoArena();
}
inline void MetadataProto::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paint_preview.MetadataProto.url)
}
inline void MetadataProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paint_preview.MetadataProto.url)
}
inline void MetadataProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paint_preview.MetadataProto.url)
}
inline void MetadataProto::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paint_preview.MetadataProto.url)
}
inline std::string* MetadataProto::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:paint_preview.MetadataProto.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetadataProto::release_url() {
  // @@protoc_insertion_point(field_release:paint_preview.MetadataProto.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetadataProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:paint_preview.MetadataProto.url)
}

// -------------------------------------------------------------------

// PaintPreviewProto

// required .paint_preview.PaintPreviewFrameProto root_frame = 1;
inline bool PaintPreviewProto::has_root_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaintPreviewProto::clear_root_frame() {
  if (root_frame_ != nullptr) root_frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::root_frame() const {
  const ::paint_preview::PaintPreviewFrameProto* p = root_frame_;
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.root_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::paint_preview::PaintPreviewFrameProto*>(
      &::paint_preview::_PaintPreviewFrameProto_default_instance_);
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::release_root_frame() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewProto.root_frame)
  _has_bits_[0] &= ~0x00000001u;
  ::paint_preview::PaintPreviewFrameProto* temp = root_frame_;
  root_frame_ = nullptr;
  return temp;
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::mutable_root_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (root_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::PaintPreviewFrameProto>(GetArenaNoVirtual());
    root_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.root_frame)
  return root_frame_;
}
inline void PaintPreviewProto::set_allocated_root_frame(::paint_preview::PaintPreviewFrameProto* root_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_frame_;
  }
  if (root_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_frame_ = root_frame;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewProto.root_frame)
}

// repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
inline int PaintPreviewProto::subframes_size() const {
  return subframes_.size();
}
inline void PaintPreviewProto::clear_subframes() {
  subframes_.Clear();
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::mutable_subframes(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.subframes)
  return subframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >*
PaintPreviewProto::mutable_subframes() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewProto.subframes)
  return &subframes_;
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::subframes(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.subframes)
  return subframes_.Get(index);
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::add_subframes() {
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewProto.subframes)
  return subframes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >&
PaintPreviewProto::subframes() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewProto.subframes)
  return subframes_;
}

// required .paint_preview.MetadataProto metadata = 3;
inline bool PaintPreviewProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaintPreviewProto::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paint_preview::MetadataProto& PaintPreviewProto::metadata() const {
  const ::paint_preview::MetadataProto* p = metadata_;
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::paint_preview::MetadataProto*>(
      &::paint_preview::_MetadataProto_default_instance_);
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::release_metadata() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewProto.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::MetadataProto* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::MetadataProto>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.metadata)
  return metadata_;
}
inline void PaintPreviewProto::set_allocated_metadata(::paint_preview::MetadataProto* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewProto.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace paint_preview

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto
