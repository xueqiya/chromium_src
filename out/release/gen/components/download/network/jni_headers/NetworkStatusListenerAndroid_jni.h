// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/download/NetworkStatusListenerAndroid

#ifndef org_chromium_components_download_NetworkStatusListenerAndroid_JNI
#define org_chromium_components_download_NetworkStatusListenerAndroid_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_download_NetworkStatusListenerAndroid[];
const char kClassPath_org_chromium_components_download_NetworkStatusListenerAndroid[] =
    "org/chromium/components/download/NetworkStatusListenerAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_download_NetworkStatusListenerAndroid_clazz(nullptr);
#ifndef org_chromium_components_download_NetworkStatusListenerAndroid_clazz_defined
#define org_chromium_components_download_NetworkStatusListenerAndroid_clazz_defined
inline jclass org_chromium_components_download_NetworkStatusListenerAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_download_NetworkStatusListenerAndroid,
      &g_org_chromium_components_download_NetworkStatusListenerAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace download {

JNI_GENERATOR_EXPORT void Java_J_N_M9CWqWuv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNetworkStatusListenerAndroid,
    jobject caller,
    jint connectionType) {
  NetworkStatusListenerAndroid* native =
      reinterpret_cast<NetworkStatusListenerAndroid*>(nativeNetworkStatusListenerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyNetworkChange");
  return native->NotifyNetworkChange(env, base::android::JavaParamRef<jobject>(env, caller),
      connectionType);
}


static std::atomic<jmethodID>
    g_org_chromium_components_download_NetworkStatusListenerAndroid_getCurrentConnectionType(nullptr);
static jint Java_NetworkStatusListenerAndroid_getCurrentConnectionType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCurrentConnectionType",
          "()I",
&g_org_chromium_components_download_NetworkStatusListenerAndroid_getCurrentConnectionType);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_download_NetworkStatusListenerAndroid_clearNativePtr(nullptr);
static void Java_NetworkStatusListenerAndroid_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_components_download_NetworkStatusListenerAndroid_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_download_NetworkStatusListenerAndroid_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NetworkStatusListenerAndroid_create(JNIEnv*
    env, jlong nativePtr) {
  jclass clazz = org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_download_NetworkStatusListenerAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/download/NetworkStatusListenerAndroid;",
          &g_org_chromium_components_download_NetworkStatusListenerAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace download

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_download_NetworkStatusListenerAndroid_JNI
