// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: download_source.proto

#include "download_source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace download_pb {
}  // namespace download_pb
namespace download_pb {
bool DownloadSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadSource_strings[11] = {};

static const char DownloadSource_names[] =
  "CONTEXT_MENU"
  "DRAG_AND_DROP"
  "EXTENSION_API"
  "EXTENSION_INSTALLER"
  "FROM_RENDERER"
  "INTERNAL_API"
  "NAVIGATION"
  "OFFLINE_PAGE"
  "RETRY"
  "UNKNOWN"
  "WEB_CONTENTS_API";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadSource_entries[] = {
  { {DownloadSource_names + 0, 12}, 9 },
  { {DownloadSource_names + 12, 13}, 2 },
  { {DownloadSource_names + 25, 13}, 4 },
  { {DownloadSource_names + 38, 19}, 5 },
  { {DownloadSource_names + 57, 13}, 3 },
  { {DownloadSource_names + 70, 12}, 6 },
  { {DownloadSource_names + 82, 10}, 1 },
  { {DownloadSource_names + 92, 12}, 8 },
  { {DownloadSource_names + 104, 5}, 10 },
  { {DownloadSource_names + 109, 7}, 0 },
  { {DownloadSource_names + 116, 16}, 7 },
};

static const int DownloadSource_entries_by_number[] = {
  9, // 0 -> UNKNOWN
  6, // 1 -> NAVIGATION
  1, // 2 -> DRAG_AND_DROP
  4, // 3 -> FROM_RENDERER
  2, // 4 -> EXTENSION_API
  3, // 5 -> EXTENSION_INSTALLER
  5, // 6 -> INTERNAL_API
  10, // 7 -> WEB_CONTENTS_API
  7, // 8 -> OFFLINE_PAGE
  0, // 9 -> CONTEXT_MENU
  8, // 10 -> RETRY
};

const std::string& DownloadSource_Name(
    DownloadSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadSource_entries,
          DownloadSource_entries_by_number,
          11, DownloadSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadSource_entries,
      DownloadSource_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadSource_strings[idx].get();
}
bool DownloadSource_Parse(
    const std::string& name, DownloadSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadSource_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<DownloadSource>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace download_pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
