// components/printing/common/print.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/printing/common/print.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/shared_memory.mojom.h"
#include "mojo/public/mojom/base/values.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"


#ifndef COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_JUMBO_H_
#define COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif


namespace printing {
namespace mojom {


void PrintRendererInterceptorForTesting::CreatePreviewDocument(::base::Value job_settings, CreatePreviewDocumentCallback callback) {
  GetForwardingInterface()->CreatePreviewDocument(std::move(job_settings), std::move(callback));
}
PrintRendererAsyncWaiter::PrintRendererAsyncWaiter(
    PrintRenderer* proxy) : proxy_(proxy) {}

PrintRendererAsyncWaiter::~PrintRendererAsyncWaiter() = default;

void PrintRendererAsyncWaiter::CreatePreviewDocument(
    ::base::Value job_settings, ::base::ReadOnlySharedMemoryRegion* out_preview_document_region) {
  base::RunLoop loop;
  proxy_->CreatePreviewDocument(std::move(job_settings),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::ReadOnlySharedMemoryRegion* out_preview_document_region
,
             ::base::ReadOnlySharedMemoryRegion preview_document_region) {*out_preview_document_region = std::move(preview_document_region);
            loop->Quit();
          },
          &loop,
          out_preview_document_region));
  loop.Run();
}



void PrintRenderFrameInterceptorForTesting::PrintRequestedPages() {
  GetForwardingInterface()->PrintRequestedPages();
}
void PrintRenderFrameInterceptorForTesting::PrintForSystemDialog() {
  GetForwardingInterface()->PrintForSystemDialog();
}
void PrintRenderFrameInterceptorForTesting::PrintFrameContent(PrintFrameContentParamsPtr params) {
  GetForwardingInterface()->PrintFrameContent(std::move(params));
}
void PrintRenderFrameInterceptorForTesting::SetPrintingEnabled(bool enabled) {
  GetForwardingInterface()->SetPrintingEnabled(std::move(enabled));
}
void PrintRenderFrameInterceptorForTesting::PrintingDone(bool success) {
  GetForwardingInterface()->PrintingDone(std::move(success));
}
void PrintRenderFrameInterceptorForTesting::PrintNodeUnderContextMenu() {
  GetForwardingInterface()->PrintNodeUnderContextMenu();
}
PrintRenderFrameAsyncWaiter::PrintRenderFrameAsyncWaiter(
    PrintRenderFrame* proxy) : proxy_(proxy) {}

PrintRenderFrameAsyncWaiter::~PrintRenderFrameAsyncWaiter() = default;






}  // namespace mojom
}  // namespace printing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif