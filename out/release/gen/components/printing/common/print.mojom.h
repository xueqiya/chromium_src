// components/printing/common/print.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_H_
#define COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/printing/common/print.mojom-shared.h"
#include "components/printing/common/print.mojom-forward.h"
#include "mojo/public/mojom/base/shared_memory.mojom.h"
#include "mojo/public/mojom/base/values.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace printing {
namespace mojom {

class PrintRendererProxy;

template <typename ImplRefTraits>
class PrintRendererStub;

class PrintRendererRequestValidator;
class PrintRendererResponseValidator;


class  PrintRenderer
    : public PrintRendererInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PrintRendererInterfaceBase;
  using Proxy_ = PrintRendererProxy;

  template <typename ImplRefTraits>
  using Stub_ = PrintRendererStub<ImplRefTraits>;

  using RequestValidator_ = PrintRendererRequestValidator;
  using ResponseValidator_ = PrintRendererResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreatePreviewDocumentMinVersion = 0,
  };
  virtual ~PrintRenderer() {}


  using CreatePreviewDocumentCallback = base::OnceCallback<void(::base::ReadOnlySharedMemoryRegion)>;
  
  virtual void CreatePreviewDocument(::base::Value job_settings, CreatePreviewDocumentCallback callback) = 0;
};

class PrintRenderFrameProxy;

template <typename ImplRefTraits>
class PrintRenderFrameStub;

class PrintRenderFrameRequestValidator;


class  PrintRenderFrame
    : public PrintRenderFrameInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PrintRenderFrameInterfaceBase;
  using Proxy_ = PrintRenderFrameProxy;

  template <typename ImplRefTraits>
  using Stub_ = PrintRenderFrameStub<ImplRefTraits>;

  using RequestValidator_ = PrintRenderFrameRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPrintRequestedPagesMinVersion = 0,
    kPrintForSystemDialogMinVersion = 0,
    kPrintFrameContentMinVersion = 0,
    kSetPrintingEnabledMinVersion = 0,
    kPrintingDoneMinVersion = 0,
    kPrintNodeUnderContextMenuMinVersion = 0,
  };
  virtual ~PrintRenderFrame() {}

  
  virtual void PrintRequestedPages() = 0;

  
  virtual void PrintForSystemDialog() = 0;

  
  virtual void PrintFrameContent(PrintFrameContentParamsPtr params) = 0;

  
  virtual void SetPrintingEnabled(bool enabled) = 0;

  
  virtual void PrintingDone(bool success) = 0;

  
  virtual void PrintNodeUnderContextMenu() = 0;
};



class  PrintRendererProxy
    : public PrintRenderer {
 public:
  using InterfaceType = PrintRenderer;

  explicit PrintRendererProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreatePreviewDocument(::base::Value job_settings, CreatePreviewDocumentCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PrintRenderFrameProxy
    : public PrintRenderFrame {
 public:
  using InterfaceType = PrintRenderFrame;

  explicit PrintRenderFrameProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void PrintRequestedPages() final;
  
  void PrintForSystemDialog() final;
  
  void PrintFrameContent(PrintFrameContentParamsPtr params) final;
  
  void SetPrintingEnabled(bool enabled) final;
  
  void PrintingDone(bool success) final;
  
  void PrintNodeUnderContextMenu() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PrintRendererStubDispatch {
 public:
  static bool Accept(PrintRenderer* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PrintRenderer* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PrintRenderer>>
class PrintRendererStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PrintRendererStub() {}
  ~PrintRendererStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintRendererStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintRendererStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PrintRenderFrameStubDispatch {
 public:
  static bool Accept(PrintRenderFrame* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PrintRenderFrame* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PrintRenderFrame>>
class PrintRenderFrameStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PrintRenderFrameStub() {}
  ~PrintRenderFrameStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintRenderFrameStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintRenderFrameStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PrintRendererRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PrintRenderFrameRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PrintRendererResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class  PrintFrameContentParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PrintFrameContentParams, T>::value>;
  using DataView = PrintFrameContentParamsDataView;
  using Data_ = internal::PrintFrameContentParams_Data;

  template <typename... Args>
  static PrintFrameContentParamsPtr New(Args&&... args) {
    return PrintFrameContentParamsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PrintFrameContentParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrintFrameContentParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrintFrameContentParams>::Convert(*this);
  }


  PrintFrameContentParams();

  PrintFrameContentParams(
      const ::gfx::Rect& printable_area,
      int32_t document_cookie);

  ~PrintFrameContentParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PrintFrameContentParamsPtr>
  PrintFrameContentParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PrintFrameContentParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PrintFrameContentParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PrintFrameContentParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PrintFrameContentParams_UnserializedMessageContext<
            UserType, PrintFrameContentParams::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<PrintFrameContentParams::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PrintFrameContentParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PrintFrameContentParams_UnserializedMessageContext<
            UserType, PrintFrameContentParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PrintFrameContentParams::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::gfx::Rect printable_area;
  
  int32_t document_cookie;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PrintFrameContentParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PrintFrameContentParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PrintFrameContentParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PrintFrameContentParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PrintFrameContentParamsPtr PrintFrameContentParams::Clone() const {
  return New(
      mojo::Clone(printable_area),
      mojo::Clone(document_cookie)
  );
}

template <typename T, PrintFrameContentParams::EnableIfSame<T>*>
bool PrintFrameContentParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->printable_area, other_struct.printable_area))
    return false;
  if (!mojo::Equals(this->document_cookie, other_struct.document_cookie))
    return false;
  return true;
}

template <typename T, PrintFrameContentParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.printable_area < rhs.printable_area)
    return true;
  if (rhs.printable_area < lhs.printable_area)
    return false;
  if (lhs.document_cookie < rhs.document_cookie)
    return true;
  if (rhs.document_cookie < lhs.document_cookie)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace printing

namespace mojo {


template <>
struct  StructTraits<::printing::mojom::PrintFrameContentParams::DataView,
                                         ::printing::mojom::PrintFrameContentParamsPtr> {
  static bool IsNull(const ::printing::mojom::PrintFrameContentParamsPtr& input) { return !input; }
  static void SetToNull(::printing::mojom::PrintFrameContentParamsPtr* output) { output->reset(); }

  static const decltype(::printing::mojom::PrintFrameContentParams::printable_area)& printable_area(
      const ::printing::mojom::PrintFrameContentParamsPtr& input) {
    return input->printable_area;
  }

  static decltype(::printing::mojom::PrintFrameContentParams::document_cookie) document_cookie(
      const ::printing::mojom::PrintFrameContentParamsPtr& input) {
    return input->document_cookie;
  }

  static bool Read(::printing::mojom::PrintFrameContentParams::DataView input, ::printing::mojom::PrintFrameContentParamsPtr* output);
};

}  // namespace mojo

#endif  // COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_H_