// components/subresource_filter/core/mojom/subresource_filter.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SUBRESOURCE_FILTER_CORE_MOJOM_SUBRESOURCE_FILTER_MOJOM_SHARED_H_
#define COMPONENTS_SUBRESOURCE_FILTER_CORE_MOJOM_SUBRESOURCE_FILTER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/subresource_filter/core/mojom/subresource_filter.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace subresource_filter {
namespace mojom {
class ActivationStateDataView;

class DocumentLoadStatisticsDataView;



}  // namespace mojom
}  // namespace subresource_filter

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::subresource_filter::mojom::ActivationStateDataView> {
  using Data = ::subresource_filter::mojom::internal::ActivationState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::subresource_filter::mojom::DocumentLoadStatisticsDataView> {
  using Data = ::subresource_filter::mojom::internal::DocumentLoadStatistics_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace subresource_filter {
namespace mojom {


enum class ActivationLevel : int32_t {
  
  kDisabled,
  
  kDryRun,
  
  kEnabled,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, ActivationLevel value);
inline bool IsKnownEnumValue(ActivationLevel value) {
  return internal::ActivationLevel_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class SubresourceFilterHostInterfaceBase {};

using SubresourceFilterHostPtrDataView =
    mojo::InterfacePtrDataView<SubresourceFilterHostInterfaceBase>;
using SubresourceFilterHostRequestDataView =
    mojo::InterfaceRequestDataView<SubresourceFilterHostInterfaceBase>;
using SubresourceFilterHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SubresourceFilterHostInterfaceBase>;
using SubresourceFilterHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SubresourceFilterHostInterfaceBase>;
class ActivationStateDataView {
 public:
  ActivationStateDataView() {}

  ActivationStateDataView(
      internal::ActivationState_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadActivationLevel(UserType* output) const {
    auto data_value = data_->activation_level;
    return mojo::internal::Deserialize<::subresource_filter::mojom::ActivationLevel>(
        data_value, output);
  }

  ActivationLevel activation_level() const {
    return static_cast<ActivationLevel>(data_->activation_level);
  }
  bool filtering_disabled_for_document() const {
    return data_->filtering_disabled_for_document;
  }
  bool generic_blocking_rules_disabled() const {
    return data_->generic_blocking_rules_disabled;
  }
  bool measure_performance() const {
    return data_->measure_performance;
  }
  bool enable_logging() const {
    return data_->enable_logging;
  }
 private:
  internal::ActivationState_Data* data_ = nullptr;
};

class DocumentLoadStatisticsDataView {
 public:
  DocumentLoadStatisticsDataView() {}

  DocumentLoadStatisticsDataView(
      internal::DocumentLoadStatistics_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t num_loads_total() const {
    return data_->num_loads_total;
  }
  int32_t num_loads_evaluated() const {
    return data_->num_loads_evaluated;
  }
  int32_t num_loads_matching_rules() const {
    return data_->num_loads_matching_rules;
  }
  int32_t num_loads_disallowed() const {
    return data_->num_loads_disallowed;
  }
  inline void GetEvaluationTotalWallDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEvaluationTotalWallDuration(UserType* output) {
    auto* pointer = data_->evaluation_total_wall_duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetEvaluationTotalCpuDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEvaluationTotalCpuDuration(UserType* output) {
    auto* pointer = data_->evaluation_total_cpu_duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::DocumentLoadStatistics_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace subresource_filter

namespace std {

template <>
struct hash<::subresource_filter::mojom::ActivationLevel>
    : public mojo::internal::EnumHashImpl<::subresource_filter::mojom::ActivationLevel> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::subresource_filter::mojom::ActivationLevel, ::subresource_filter::mojom::ActivationLevel> {
  static ::subresource_filter::mojom::ActivationLevel ToMojom(::subresource_filter::mojom::ActivationLevel input) { return input; }
  static bool FromMojom(::subresource_filter::mojom::ActivationLevel input, ::subresource_filter::mojom::ActivationLevel* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::subresource_filter::mojom::ActivationLevel, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::subresource_filter::mojom::ActivationLevel, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::subresource_filter::mojom::ActivationLevel>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::subresource_filter::mojom::ActivationStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::subresource_filter::mojom::ActivationStateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::subresource_filter::mojom::internal::ActivationState_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::subresource_filter::mojom::ActivationLevel>(
        Traits::activation_level(input), &(*output)->activation_level);
    (*output)->filtering_disabled_for_document = Traits::filtering_disabled_for_document(input);
    (*output)->generic_blocking_rules_disabled = Traits::generic_blocking_rules_disabled(input);
    (*output)->measure_performance = Traits::measure_performance(input);
    (*output)->enable_logging = Traits::enable_logging(input);
  }

  static bool Deserialize(::subresource_filter::mojom::internal::ActivationState_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::subresource_filter::mojom::ActivationStateDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::subresource_filter::mojom::DocumentLoadStatisticsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::subresource_filter::mojom::DocumentLoadStatisticsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::subresource_filter::mojom::internal::DocumentLoadStatistics_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->num_loads_total = Traits::num_loads_total(input);
    (*output)->num_loads_evaluated = Traits::num_loads_evaluated(input);
    (*output)->num_loads_matching_rules = Traits::num_loads_matching_rules(input);
    (*output)->num_loads_disallowed = Traits::num_loads_disallowed(input);
    decltype(Traits::evaluation_total_wall_duration(input)) in_evaluation_total_wall_duration = Traits::evaluation_total_wall_duration(input);
    typename decltype((*output)->evaluation_total_wall_duration)::BaseType::BufferWriter
        evaluation_total_wall_duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_evaluation_total_wall_duration, buffer, &evaluation_total_wall_duration_writer, context);
    (*output)->evaluation_total_wall_duration.Set(
        evaluation_total_wall_duration_writer.is_null() ? nullptr : evaluation_total_wall_duration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->evaluation_total_wall_duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null evaluation_total_wall_duration in DocumentLoadStatistics struct");
    decltype(Traits::evaluation_total_cpu_duration(input)) in_evaluation_total_cpu_duration = Traits::evaluation_total_cpu_duration(input);
    typename decltype((*output)->evaluation_total_cpu_duration)::BaseType::BufferWriter
        evaluation_total_cpu_duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_evaluation_total_cpu_duration, buffer, &evaluation_total_cpu_duration_writer, context);
    (*output)->evaluation_total_cpu_duration.Set(
        evaluation_total_cpu_duration_writer.is_null() ? nullptr : evaluation_total_cpu_duration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->evaluation_total_cpu_duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null evaluation_total_cpu_duration in DocumentLoadStatistics struct");
  }

  static bool Deserialize(::subresource_filter::mojom::internal::DocumentLoadStatistics_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::subresource_filter::mojom::DocumentLoadStatisticsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace subresource_filter {
namespace mojom {



inline void DocumentLoadStatisticsDataView::GetEvaluationTotalWallDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->evaluation_total_wall_duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void DocumentLoadStatisticsDataView::GetEvaluationTotalCpuDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->evaluation_total_cpu_duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace subresource_filter

#endif  // COMPONENTS_SUBRESOURCE_FILTER_CORE_MOJOM_SUBRESOURCE_FILTER_MOJOM_SHARED_H_