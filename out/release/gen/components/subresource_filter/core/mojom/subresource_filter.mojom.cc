// components/subresource_filter/core/mojom/subresource_filter.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/subresource_filter/core/mojom/subresource_filter.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/subresource_filter/core/mojom/subresource_filter.mojom-params-data.h"
#include "components/subresource_filter/core/mojom/subresource_filter.mojom-shared-message-ids.h"

#include "components/subresource_filter/core/mojom/subresource_filter.mojom-import-headers.h"


#ifndef COMPONENTS_SUBRESOURCE_FILTER_CORE_MOJOM_SUBRESOURCE_FILTER_MOJOM_JUMBO_H_
#define COMPONENTS_SUBRESOURCE_FILTER_CORE_MOJOM_SUBRESOURCE_FILTER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#endif
namespace subresource_filter {
namespace mojom {
ActivationState::ActivationState()
    : activation_level(ActivationLevel::kDisabled),
      filtering_disabled_for_document(false),
      generic_blocking_rules_disabled(false),
      measure_performance(false),
      enable_logging(false) {}

ActivationState::ActivationState(
    ActivationLevel activation_level_in,
    bool filtering_disabled_for_document_in,
    bool generic_blocking_rules_disabled_in,
    bool measure_performance_in,
    bool enable_logging_in)
    : activation_level(std::move(activation_level_in)),
      filtering_disabled_for_document(std::move(filtering_disabled_for_document_in)),
      generic_blocking_rules_disabled(std::move(generic_blocking_rules_disabled_in)),
      measure_performance(std::move(measure_performance_in)),
      enable_logging(std::move(enable_logging_in)) {}

ActivationState::~ActivationState() = default;
size_t ActivationState::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->activation_level);
  seed = mojo::internal::Hash(seed, this->filtering_disabled_for_document);
  seed = mojo::internal::Hash(seed, this->generic_blocking_rules_disabled);
  seed = mojo::internal::Hash(seed, this->measure_performance);
  seed = mojo::internal::Hash(seed, this->enable_logging);
  return seed;
}

bool ActivationState::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DocumentLoadStatistics::DocumentLoadStatistics()
    : num_loads_total(0),
      num_loads_evaluated(0),
      num_loads_matching_rules(0),
      num_loads_disallowed(0),
      evaluation_total_wall_duration(),
      evaluation_total_cpu_duration() {}

DocumentLoadStatistics::DocumentLoadStatistics(
    int32_t num_loads_total_in,
    int32_t num_loads_evaluated_in,
    int32_t num_loads_matching_rules_in,
    int32_t num_loads_disallowed_in,
    ::base::TimeDelta evaluation_total_wall_duration_in,
    ::base::TimeDelta evaluation_total_cpu_duration_in)
    : num_loads_total(std::move(num_loads_total_in)),
      num_loads_evaluated(std::move(num_loads_evaluated_in)),
      num_loads_matching_rules(std::move(num_loads_matching_rules_in)),
      num_loads_disallowed(std::move(num_loads_disallowed_in)),
      evaluation_total_wall_duration(std::move(evaluation_total_wall_duration_in)),
      evaluation_total_cpu_duration(std::move(evaluation_total_cpu_duration_in)) {}

DocumentLoadStatistics::~DocumentLoadStatistics() = default;

bool DocumentLoadStatistics::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SubresourceFilterHost::Name_[] = "subresource_filter.mojom.SubresourceFilterHost";

SubresourceFilterHostProxy::SubresourceFilterHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SubresourceFilterHostProxy::DidDisallowFirstSubresource(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "subresource_filter::mojom::SubresourceFilterHost::DidDisallowFirstSubresource");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSubresourceFilterHost_DidDisallowFirstSubresource_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::subresource_filter::mojom::internal::SubresourceFilterHost_DidDisallowFirstSubresource_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubresourceFilterHost::Name_);
  message.set_method_name("DidDisallowFirstSubresource");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SubresourceFilterHostProxy::FrameIsAdSubframe(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "subresource_filter::mojom::SubresourceFilterHost::FrameIsAdSubframe");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSubresourceFilterHost_FrameIsAdSubframe_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::subresource_filter::mojom::internal::SubresourceFilterHost_FrameIsAdSubframe_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubresourceFilterHost::Name_);
  message.set_method_name("FrameIsAdSubframe");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SubresourceFilterHostProxy::SetDocumentLoadStatistics(
    DocumentLoadStatisticsPtr in_statistics) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "subresource_filter::mojom::SubresourceFilterHost::SetDocumentLoadStatistics");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSubresourceFilterHost_SetDocumentLoadStatistics_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::subresource_filter::mojom::internal::SubresourceFilterHost_SetDocumentLoadStatistics_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->statistics)::BaseType::BufferWriter
      statistics_writer;
  mojo::internal::Serialize<::subresource_filter::mojom::DocumentLoadStatisticsDataView>(
      in_statistics, buffer, &statistics_writer, &serialization_context);
  params->statistics.Set(
      statistics_writer.is_null() ? nullptr : statistics_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->statistics.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null statistics in SubresourceFilterHost.SetDocumentLoadStatistics request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SubresourceFilterHost::Name_);
  message.set_method_name("SetDocumentLoadStatistics");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool SubresourceFilterHostStubDispatch::Accept(
    SubresourceFilterHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSubresourceFilterHost_DidDisallowFirstSubresource_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)subresource_filter::mojom::SubresourceFilterHost::DidDisallowFirstSubresource",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)subresource_filter::mojom::SubresourceFilterHost::DidDisallowFirstSubresource");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SubresourceFilterHost_DidDisallowFirstSubresource_Params_Data* params =
          reinterpret_cast<internal::SubresourceFilterHost_DidDisallowFirstSubresource_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SubresourceFilterHost_DidDisallowFirstSubresource_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubresourceFilterHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidDisallowFirstSubresource();
      return true;
    }
    case internal::kSubresourceFilterHost_FrameIsAdSubframe_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)subresource_filter::mojom::SubresourceFilterHost::FrameIsAdSubframe",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)subresource_filter::mojom::SubresourceFilterHost::FrameIsAdSubframe");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SubresourceFilterHost_FrameIsAdSubframe_Params_Data* params =
          reinterpret_cast<internal::SubresourceFilterHost_FrameIsAdSubframe_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SubresourceFilterHost_FrameIsAdSubframe_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubresourceFilterHost::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FrameIsAdSubframe();
      return true;
    }
    case internal::kSubresourceFilterHost_SetDocumentLoadStatistics_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)subresource_filter::mojom::SubresourceFilterHost::SetDocumentLoadStatistics",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)subresource_filter::mojom::SubresourceFilterHost::SetDocumentLoadStatistics");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SubresourceFilterHost_SetDocumentLoadStatistics_Params_Data* params =
          reinterpret_cast<internal::SubresourceFilterHost_SetDocumentLoadStatistics_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      DocumentLoadStatisticsPtr p_statistics{};
      SubresourceFilterHost_SetDocumentLoadStatistics_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadStatistics(&p_statistics))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SubresourceFilterHost::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetDocumentLoadStatistics(
std::move(p_statistics));
      return true;
    }
  }
  return false;
}

// static
bool SubresourceFilterHostStubDispatch::AcceptWithResponder(
    SubresourceFilterHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kSubresourceFilterHost_DidDisallowFirstSubresource_Name: {
      break;
    }
    case internal::kSubresourceFilterHost_FrameIsAdSubframe_Name: {
      break;
    }
    case internal::kSubresourceFilterHost_SetDocumentLoadStatistics_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSubresourceFilterHostValidationInfo[] = {
    {&internal::SubresourceFilterHost_DidDisallowFirstSubresource_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SubresourceFilterHost_FrameIsAdSubframe_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SubresourceFilterHost_SetDocumentLoadStatistics_Params_Data::Validate,
     nullptr /* no response */},
};

bool SubresourceFilterHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::subresource_filter::mojom::SubresourceFilterHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSubresourceFilterHostValidationInfo);
}

}  // namespace mojom
}  // namespace subresource_filter

namespace mojo {


// static
bool StructTraits<::subresource_filter::mojom::ActivationState::DataView, ::subresource_filter::mojom::ActivationStatePtr>::Read(
    ::subresource_filter::mojom::ActivationState::DataView input,
    ::subresource_filter::mojom::ActivationStatePtr* output) {
  bool success = true;
  ::subresource_filter::mojom::ActivationStatePtr result(::subresource_filter::mojom::ActivationState::New());
  
      if (success && !input.ReadActivationLevel(&result->activation_level))
        success = false;
      if (success)
        result->filtering_disabled_for_document = input.filtering_disabled_for_document();
      if (success)
        result->generic_blocking_rules_disabled = input.generic_blocking_rules_disabled();
      if (success)
        result->measure_performance = input.measure_performance();
      if (success)
        result->enable_logging = input.enable_logging();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::subresource_filter::mojom::DocumentLoadStatistics::DataView, ::subresource_filter::mojom::DocumentLoadStatisticsPtr>::Read(
    ::subresource_filter::mojom::DocumentLoadStatistics::DataView input,
    ::subresource_filter::mojom::DocumentLoadStatisticsPtr* output) {
  bool success = true;
  ::subresource_filter::mojom::DocumentLoadStatisticsPtr result(::subresource_filter::mojom::DocumentLoadStatistics::New());
  
      if (success)
        result->num_loads_total = input.num_loads_total();
      if (success)
        result->num_loads_evaluated = input.num_loads_evaluated();
      if (success)
        result->num_loads_matching_rules = input.num_loads_matching_rules();
      if (success)
        result->num_loads_disallowed = input.num_loads_disallowed();
      if (success && !input.ReadEvaluationTotalWallDuration(&result->evaluation_total_wall_duration))
        success = false;
      if (success && !input.ReadEvaluationTotalCpuDuration(&result->evaluation_total_cpu_duration))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif