// components/subresource_filter/content/mojom/subresource_filter_agent.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_AGENT_MOJOM_H_
#define COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_AGENT_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/subresource_filter/content/mojom/subresource_filter_agent.mojom-shared.h"
#include "components/subresource_filter/content/mojom/subresource_filter_agent.mojom-forward.h"
#include "components/subresource_filter/core/mojom/subresource_filter.mojom-forward.h"
#include "third_party/blink/public/mojom/ad_tagging/ad_frame.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace subresource_filter {
namespace mojom {

class SubresourceFilterAgentProxy;

template <typename ImplRefTraits>
class SubresourceFilterAgentStub;

class SubresourceFilterAgentRequestValidator;


class  SubresourceFilterAgent
    : public SubresourceFilterAgentInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = SubresourceFilterAgentInterfaceBase;
  using Proxy_ = SubresourceFilterAgentProxy;

  template <typename ImplRefTraits>
  using Stub_ = SubresourceFilterAgentStub<ImplRefTraits>;

  using RequestValidator_ = SubresourceFilterAgentRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kActivateForNextCommittedLoadMinVersion = 0,
  };
  virtual ~SubresourceFilterAgent() {}

  
  virtual void ActivateForNextCommittedLoad(::subresource_filter::mojom::ActivationStatePtr activation_state, ::blink::mojom::AdFrameType ad_type) = 0;
};



class  SubresourceFilterAgentProxy
    : public SubresourceFilterAgent {
 public:
  using InterfaceType = SubresourceFilterAgent;

  explicit SubresourceFilterAgentProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ActivateForNextCommittedLoad(::subresource_filter::mojom::ActivationStatePtr activation_state, ::blink::mojom::AdFrameType ad_type) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  SubresourceFilterAgentStubDispatch {
 public:
  static bool Accept(SubresourceFilterAgent* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SubresourceFilterAgent* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SubresourceFilterAgent>>
class SubresourceFilterAgentStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SubresourceFilterAgentStub() {}
  ~SubresourceFilterAgentStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubresourceFilterAgentStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubresourceFilterAgentStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SubresourceFilterAgentRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace subresource_filter

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_AGENT_MOJOM_H_