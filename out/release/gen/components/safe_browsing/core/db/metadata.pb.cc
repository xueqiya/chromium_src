// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace safe_browsing {
class MalwarePatternTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MalwarePatternType> _instance;
} _MalwarePatternType_default_instance_;
class SocialEngineeringPatternTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocialEngineeringPatternType> _instance;
} _SocialEngineeringPatternType_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_MalwarePatternType_metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_MalwarePatternType_default_instance_;
    new (ptr) ::safe_browsing::MalwarePatternType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::MalwarePatternType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MalwarePatternType_metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MalwarePatternType_metadata_2eproto}, {}};

static void InitDefaultsscc_info_SocialEngineeringPatternType_metadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_SocialEngineeringPatternType_default_instance_;
    new (ptr) ::safe_browsing::SocialEngineeringPatternType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::SocialEngineeringPatternType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocialEngineeringPatternType_metadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SocialEngineeringPatternType_metadata_2eproto}, {}};

namespace safe_browsing {
bool MalwarePatternType_PATTERN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MalwarePatternType_PATTERN_TYPE_strings[3] = {};

static const char MalwarePatternType_PATTERN_TYPE_names[] =
  "DISTRIBUTION"
  "LANDING"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MalwarePatternType_PATTERN_TYPE_entries[] = {
  { {MalwarePatternType_PATTERN_TYPE_names + 0, 12}, 2 },
  { {MalwarePatternType_PATTERN_TYPE_names + 12, 7}, 1 },
  { {MalwarePatternType_PATTERN_TYPE_names + 19, 16}, 0 },
};

static const int MalwarePatternType_PATTERN_TYPE_entries_by_number[] = {
  2, // 0 -> TYPE_UNSPECIFIED
  1, // 1 -> LANDING
  0, // 2 -> DISTRIBUTION
};

const std::string& MalwarePatternType_PATTERN_TYPE_Name(
    MalwarePatternType_PATTERN_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MalwarePatternType_PATTERN_TYPE_entries,
          MalwarePatternType_PATTERN_TYPE_entries_by_number,
          3, MalwarePatternType_PATTERN_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MalwarePatternType_PATTERN_TYPE_entries,
      MalwarePatternType_PATTERN_TYPE_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MalwarePatternType_PATTERN_TYPE_strings[idx].get();
}
bool MalwarePatternType_PATTERN_TYPE_Parse(
    const std::string& name, MalwarePatternType_PATTERN_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MalwarePatternType_PATTERN_TYPE_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MalwarePatternType_PATTERN_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::TYPE_UNSPECIFIED;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::LANDING;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::DISTRIBUTION;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::PATTERN_TYPE_MIN;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::PATTERN_TYPE_MAX;
constexpr int MalwarePatternType::PATTERN_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SocialEngineeringPatternType_PATTERN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocialEngineeringPatternType_PATTERN_TYPE_strings[4] = {};

static const char SocialEngineeringPatternType_PATTERN_TYPE_names[] =
  "PHISHING"
  "SOCIAL_ENGINEERING_ADS"
  "SOCIAL_ENGINEERING_LANDING"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocialEngineeringPatternType_PATTERN_TYPE_entries[] = {
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 0, 8}, 3 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 8, 22}, 1 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 30, 26}, 2 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 56, 16}, 0 },
};

static const int SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number[] = {
  3, // 0 -> TYPE_UNSPECIFIED
  1, // 1 -> SOCIAL_ENGINEERING_ADS
  2, // 2 -> SOCIAL_ENGINEERING_LANDING
  0, // 3 -> PHISHING
};

const std::string& SocialEngineeringPatternType_PATTERN_TYPE_Name(
    SocialEngineeringPatternType_PATTERN_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocialEngineeringPatternType_PATTERN_TYPE_entries,
          SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number,
          4, SocialEngineeringPatternType_PATTERN_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocialEngineeringPatternType_PATTERN_TYPE_entries,
      SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocialEngineeringPatternType_PATTERN_TYPE_strings[idx].get();
}
bool SocialEngineeringPatternType_PATTERN_TYPE_Parse(
    const std::string& name, SocialEngineeringPatternType_PATTERN_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocialEngineeringPatternType_PATTERN_TYPE_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SocialEngineeringPatternType_PATTERN_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::TYPE_UNSPECIFIED;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::SOCIAL_ENGINEERING_ADS;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::SOCIAL_ENGINEERING_LANDING;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PHISHING;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PATTERN_TYPE_MIN;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PATTERN_TYPE_MAX;
constexpr int SocialEngineeringPatternType::PATTERN_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MalwarePatternType::InitAsDefaultInstance() {
}
class MalwarePatternType::_Internal {
 public:
  using HasBits = decltype(std::declval<MalwarePatternType>()._has_bits_);
  static void set_has_pattern_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MalwarePatternType::MalwarePatternType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.MalwarePatternType)
}
MalwarePatternType::MalwarePatternType(const MalwarePatternType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_type_ = from.pattern_type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.MalwarePatternType)
}

void MalwarePatternType::SharedCtor() {
  pattern_type_ = 0;
}

MalwarePatternType::~MalwarePatternType() {
  // @@protoc_insertion_point(destructor:safe_browsing.MalwarePatternType)
  SharedDtor();
}

void MalwarePatternType::SharedDtor() {
}

void MalwarePatternType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MalwarePatternType& MalwarePatternType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MalwarePatternType_metadata_2eproto.base);
  return *internal_default_instance();
}


void MalwarePatternType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.MalwarePatternType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MalwarePatternType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::MalwarePatternType_PATTERN_TYPE_IsValid(val))) {
            set_pattern_type(static_cast<::safe_browsing::MalwarePatternType_PATTERN_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MalwarePatternType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.MalwarePatternType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::MalwarePatternType_PATTERN_TYPE_IsValid(value)) {
            set_pattern_type(static_cast< ::safe_browsing::MalwarePatternType_PATTERN_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.MalwarePatternType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.MalwarePatternType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MalwarePatternType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.MalwarePatternType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->pattern_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.MalwarePatternType)
}

size_t MalwarePatternType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.MalwarePatternType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
  if (has_pattern_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pattern_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MalwarePatternType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MalwarePatternType*>(
      &from));
}

void MalwarePatternType::MergeFrom(const MalwarePatternType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.MalwarePatternType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pattern_type()) {
    set_pattern_type(from.pattern_type());
  }
}

void MalwarePatternType::CopyFrom(const MalwarePatternType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.MalwarePatternType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalwarePatternType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MalwarePatternType::InternalSwap(MalwarePatternType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pattern_type_, other->pattern_type_);
}

std::string MalwarePatternType::GetTypeName() const {
  return "safe_browsing.MalwarePatternType";
}


// ===================================================================

void SocialEngineeringPatternType::InitAsDefaultInstance() {
}
class SocialEngineeringPatternType::_Internal {
 public:
  using HasBits = decltype(std::declval<SocialEngineeringPatternType>()._has_bits_);
  static void set_has_pattern_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SocialEngineeringPatternType::SocialEngineeringPatternType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.SocialEngineeringPatternType)
}
SocialEngineeringPatternType::SocialEngineeringPatternType(const SocialEngineeringPatternType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_type_ = from.pattern_type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.SocialEngineeringPatternType)
}

void SocialEngineeringPatternType::SharedCtor() {
  pattern_type_ = 0;
}

SocialEngineeringPatternType::~SocialEngineeringPatternType() {
  // @@protoc_insertion_point(destructor:safe_browsing.SocialEngineeringPatternType)
  SharedDtor();
}

void SocialEngineeringPatternType::SharedDtor() {
}

void SocialEngineeringPatternType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocialEngineeringPatternType& SocialEngineeringPatternType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocialEngineeringPatternType_metadata_2eproto.base);
  return *internal_default_instance();
}


void SocialEngineeringPatternType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.SocialEngineeringPatternType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SocialEngineeringPatternType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE_IsValid(val))) {
            set_pattern_type(static_cast<::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SocialEngineeringPatternType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.SocialEngineeringPatternType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE_IsValid(value)) {
            set_pattern_type(static_cast< ::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.SocialEngineeringPatternType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.SocialEngineeringPatternType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SocialEngineeringPatternType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.SocialEngineeringPatternType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->pattern_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.SocialEngineeringPatternType)
}

size_t SocialEngineeringPatternType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.SocialEngineeringPatternType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pattern_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocialEngineeringPatternType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SocialEngineeringPatternType*>(
      &from));
}

void SocialEngineeringPatternType::MergeFrom(const SocialEngineeringPatternType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.SocialEngineeringPatternType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pattern_type()) {
    set_pattern_type(from.pattern_type());
  }
}

void SocialEngineeringPatternType::CopyFrom(const SocialEngineeringPatternType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.SocialEngineeringPatternType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialEngineeringPatternType::IsInitialized() const {
  return true;
}

void SocialEngineeringPatternType::InternalSwap(SocialEngineeringPatternType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pattern_type_, other->pattern_type_);
}

std::string SocialEngineeringPatternType::GetTypeName() const {
  return "safe_browsing.SocialEngineeringPatternType";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::MalwarePatternType* Arena::CreateMaybeMessage< ::safe_browsing::MalwarePatternType >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::MalwarePatternType >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::SocialEngineeringPatternType* Arena::CreateMaybeMessage< ::safe_browsing::SocialEngineeringPatternType >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::SocialEngineeringPatternType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
