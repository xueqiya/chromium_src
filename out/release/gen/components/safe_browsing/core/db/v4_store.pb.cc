// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v4_store.proto

#include "v4_store.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_safebrowsing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FetchThreatListUpdatesResponse_ListUpdateResponse_safebrowsing_2eproto;
namespace safe_browsing {
class V4StoreFileFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V4StoreFileFormat> _instance;
} _V4StoreFileFormat_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_V4StoreFileFormat_v4_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_V4StoreFileFormat_default_instance_;
    new (ptr) ::safe_browsing::V4StoreFileFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::V4StoreFileFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_V4StoreFileFormat_v4_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_V4StoreFileFormat_v4_5fstore_2eproto}, {
      &scc_info_FetchThreatListUpdatesResponse_ListUpdateResponse_safebrowsing_2eproto.base,}};

namespace safe_browsing {

// ===================================================================

void V4StoreFileFormat::InitAsDefaultInstance() {
  ::safe_browsing::_V4StoreFileFormat_default_instance_._instance.get_mutable()->list_update_response_ = const_cast< ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse*>(
      ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse::internal_default_instance());
}
class V4StoreFileFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<V4StoreFileFormat>()._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse& list_update_response(const V4StoreFileFormat* msg);
  static void set_has_list_update_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse&
V4StoreFileFormat::_Internal::list_update_response(const V4StoreFileFormat* msg) {
  return *msg->list_update_response_;
}
void V4StoreFileFormat::clear_list_update_response() {
  if (list_update_response_ != nullptr) list_update_response_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
V4StoreFileFormat::V4StoreFileFormat()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.V4StoreFileFormat)
}
V4StoreFileFormat::V4StoreFileFormat(const V4StoreFileFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_list_update_response()) {
    list_update_response_ = new ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse(*from.list_update_response_);
  } else {
    list_update_response_ = nullptr;
  }
  ::memcpy(&magic_number_, &from.magic_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&magic_number_)) + sizeof(version_number_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.V4StoreFileFormat)
}

void V4StoreFileFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_V4StoreFileFormat_v4_5fstore_2eproto.base);
  ::memset(&list_update_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_number_) -
      reinterpret_cast<char*>(&list_update_response_)) + sizeof(version_number_));
}

V4StoreFileFormat::~V4StoreFileFormat() {
  // @@protoc_insertion_point(destructor:safe_browsing.V4StoreFileFormat)
  SharedDtor();
}

void V4StoreFileFormat::SharedDtor() {
  if (this != internal_default_instance()) delete list_update_response_;
}

void V4StoreFileFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V4StoreFileFormat& V4StoreFileFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V4StoreFileFormat_v4_5fstore_2eproto.base);
  return *internal_default_instance();
}


void V4StoreFileFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.V4StoreFileFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(list_update_response_ != nullptr);
    list_update_response_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&magic_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_number_) -
        reinterpret_cast<char*>(&magic_number_)) + sizeof(version_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* V4StoreFileFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_magic_number(&has_bits);
          magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version_number(&has_bits);
          version_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_list_update_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool V4StoreFileFormat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.V4StoreFileFormat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 magic_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_magic_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_list_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.V4StoreFileFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.V4StoreFileFormat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void V4StoreFileFormat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.V4StoreFileFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 magic_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->magic_number(), output);
  }

  // optional uint32 version_number = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version_number(), output);
  }

  // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::list_update_response(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.V4StoreFileFormat)
}

size_t V4StoreFileFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.V4StoreFileFormat)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_update_response_);
    }

    // optional uint32 magic_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->magic_number());
    }

    // optional uint32 version_number = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4StoreFileFormat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const V4StoreFileFormat*>(
      &from));
}

void V4StoreFileFormat::MergeFrom(const V4StoreFileFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.V4StoreFileFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_list_update_response()->::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse::MergeFrom(from.list_update_response());
    }
    if (cached_has_bits & 0x00000002u) {
      magic_number_ = from.magic_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_number_ = from.version_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void V4StoreFileFormat::CopyFrom(const V4StoreFileFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.V4StoreFileFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4StoreFileFormat::IsInitialized() const {
  return true;
}

void V4StoreFileFormat::InternalSwap(V4StoreFileFormat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(list_update_response_, other->list_update_response_);
  swap(magic_number_, other->magic_number_);
  swap(version_number_, other->version_number_);
}

std::string V4StoreFileFormat::GetTypeName() const {
  return "safe_browsing.V4StoreFileFormat";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::V4StoreFileFormat* Arena::CreateMaybeMessage< ::safe_browsing::V4StoreFileFormat >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::V4StoreFileFormat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
