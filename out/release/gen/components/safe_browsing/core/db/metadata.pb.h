// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace safe_browsing {
class MalwarePatternType;
class MalwarePatternTypeDefaultTypeInternal;
extern MalwarePatternTypeDefaultTypeInternal _MalwarePatternType_default_instance_;
class SocialEngineeringPatternType;
class SocialEngineeringPatternTypeDefaultTypeInternal;
extern SocialEngineeringPatternTypeDefaultTypeInternal _SocialEngineeringPatternType_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::MalwarePatternType* Arena::CreateMaybeMessage<::safe_browsing::MalwarePatternType>(Arena*);
template<> ::safe_browsing::SocialEngineeringPatternType* Arena::CreateMaybeMessage<::safe_browsing::SocialEngineeringPatternType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

enum MalwarePatternType_PATTERN_TYPE : int {
  MalwarePatternType_PATTERN_TYPE_TYPE_UNSPECIFIED = 0,
  MalwarePatternType_PATTERN_TYPE_LANDING = 1,
  MalwarePatternType_PATTERN_TYPE_DISTRIBUTION = 2
};
bool MalwarePatternType_PATTERN_TYPE_IsValid(int value);
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_MIN = MalwarePatternType_PATTERN_TYPE_TYPE_UNSPECIFIED;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_MAX = MalwarePatternType_PATTERN_TYPE_DISTRIBUTION;
constexpr int MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_ARRAYSIZE = MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_MAX + 1;

const std::string& MalwarePatternType_PATTERN_TYPE_Name(MalwarePatternType_PATTERN_TYPE value);
template<typename T>
inline const std::string& MalwarePatternType_PATTERN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MalwarePatternType_PATTERN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MalwarePatternType_PATTERN_TYPE_Name.");
  return MalwarePatternType_PATTERN_TYPE_Name(static_cast<MalwarePatternType_PATTERN_TYPE>(enum_t_value));
}
bool MalwarePatternType_PATTERN_TYPE_Parse(
    const std::string& name, MalwarePatternType_PATTERN_TYPE* value);
enum SocialEngineeringPatternType_PATTERN_TYPE : int {
  SocialEngineeringPatternType_PATTERN_TYPE_TYPE_UNSPECIFIED = 0,
  SocialEngineeringPatternType_PATTERN_TYPE_SOCIAL_ENGINEERING_ADS = 1,
  SocialEngineeringPatternType_PATTERN_TYPE_SOCIAL_ENGINEERING_LANDING = 2,
  SocialEngineeringPatternType_PATTERN_TYPE_PHISHING = 3
};
bool SocialEngineeringPatternType_PATTERN_TYPE_IsValid(int value);
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_MIN = SocialEngineeringPatternType_PATTERN_TYPE_TYPE_UNSPECIFIED;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_MAX = SocialEngineeringPatternType_PATTERN_TYPE_PHISHING;
constexpr int SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_ARRAYSIZE = SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_MAX + 1;

const std::string& SocialEngineeringPatternType_PATTERN_TYPE_Name(SocialEngineeringPatternType_PATTERN_TYPE value);
template<typename T>
inline const std::string& SocialEngineeringPatternType_PATTERN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SocialEngineeringPatternType_PATTERN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SocialEngineeringPatternType_PATTERN_TYPE_Name.");
  return SocialEngineeringPatternType_PATTERN_TYPE_Name(static_cast<SocialEngineeringPatternType_PATTERN_TYPE>(enum_t_value));
}
bool SocialEngineeringPatternType_PATTERN_TYPE_Parse(
    const std::string& name, SocialEngineeringPatternType_PATTERN_TYPE* value);
// ===================================================================

class MalwarePatternType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.MalwarePatternType) */ {
 public:
  MalwarePatternType();
  virtual ~MalwarePatternType();

  MalwarePatternType(const MalwarePatternType& from);
  MalwarePatternType(MalwarePatternType&& from) noexcept
    : MalwarePatternType() {
    *this = ::std::move(from);
  }

  inline MalwarePatternType& operator=(const MalwarePatternType& from) {
    CopyFrom(from);
    return *this;
  }
  inline MalwarePatternType& operator=(MalwarePatternType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MalwarePatternType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MalwarePatternType* internal_default_instance() {
    return reinterpret_cast<const MalwarePatternType*>(
               &_MalwarePatternType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MalwarePatternType& a, MalwarePatternType& b) {
    a.Swap(&b);
  }
  inline void Swap(MalwarePatternType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MalwarePatternType* New() const final {
    return CreateMaybeMessage<MalwarePatternType>(nullptr);
  }

  MalwarePatternType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MalwarePatternType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MalwarePatternType& from);
  void MergeFrom(const MalwarePatternType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MalwarePatternType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.MalwarePatternType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MalwarePatternType_PATTERN_TYPE PATTERN_TYPE;
  static constexpr PATTERN_TYPE TYPE_UNSPECIFIED =
    MalwarePatternType_PATTERN_TYPE_TYPE_UNSPECIFIED;
  static constexpr PATTERN_TYPE LANDING =
    MalwarePatternType_PATTERN_TYPE_LANDING;
  static constexpr PATTERN_TYPE DISTRIBUTION =
    MalwarePatternType_PATTERN_TYPE_DISTRIBUTION;
  static inline bool PATTERN_TYPE_IsValid(int value) {
    return MalwarePatternType_PATTERN_TYPE_IsValid(value);
  }
  static constexpr PATTERN_TYPE PATTERN_TYPE_MIN =
    MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_MIN;
  static constexpr PATTERN_TYPE PATTERN_TYPE_MAX =
    MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_MAX;
  static constexpr int PATTERN_TYPE_ARRAYSIZE =
    MalwarePatternType_PATTERN_TYPE_PATTERN_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PATTERN_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PATTERN_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PATTERN_TYPE_Name.");
    return MalwarePatternType_PATTERN_TYPE_Name(enum_t_value);
  }
  static inline bool PATTERN_TYPE_Parse(const std::string& name,
      PATTERN_TYPE* value) {
    return MalwarePatternType_PATTERN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatternTypeFieldNumber = 1,
  };
  // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
  bool has_pattern_type() const;
  void clear_pattern_type();
  ::safe_browsing::MalwarePatternType_PATTERN_TYPE pattern_type() const;
  void set_pattern_type(::safe_browsing::MalwarePatternType_PATTERN_TYPE value);

  // @@protoc_insertion_point(class_scope:safe_browsing.MalwarePatternType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pattern_type_;
  friend struct ::TableStruct_metadata_2eproto;
};
// -------------------------------------------------------------------

class SocialEngineeringPatternType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.SocialEngineeringPatternType) */ {
 public:
  SocialEngineeringPatternType();
  virtual ~SocialEngineeringPatternType();

  SocialEngineeringPatternType(const SocialEngineeringPatternType& from);
  SocialEngineeringPatternType(SocialEngineeringPatternType&& from) noexcept
    : SocialEngineeringPatternType() {
    *this = ::std::move(from);
  }

  inline SocialEngineeringPatternType& operator=(const SocialEngineeringPatternType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocialEngineeringPatternType& operator=(SocialEngineeringPatternType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SocialEngineeringPatternType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SocialEngineeringPatternType* internal_default_instance() {
    return reinterpret_cast<const SocialEngineeringPatternType*>(
               &_SocialEngineeringPatternType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SocialEngineeringPatternType& a, SocialEngineeringPatternType& b) {
    a.Swap(&b);
  }
  inline void Swap(SocialEngineeringPatternType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocialEngineeringPatternType* New() const final {
    return CreateMaybeMessage<SocialEngineeringPatternType>(nullptr);
  }

  SocialEngineeringPatternType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocialEngineeringPatternType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SocialEngineeringPatternType& from);
  void MergeFrom(const SocialEngineeringPatternType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SocialEngineeringPatternType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.SocialEngineeringPatternType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SocialEngineeringPatternType_PATTERN_TYPE PATTERN_TYPE;
  static constexpr PATTERN_TYPE TYPE_UNSPECIFIED =
    SocialEngineeringPatternType_PATTERN_TYPE_TYPE_UNSPECIFIED;
  static constexpr PATTERN_TYPE SOCIAL_ENGINEERING_ADS =
    SocialEngineeringPatternType_PATTERN_TYPE_SOCIAL_ENGINEERING_ADS;
  static constexpr PATTERN_TYPE SOCIAL_ENGINEERING_LANDING =
    SocialEngineeringPatternType_PATTERN_TYPE_SOCIAL_ENGINEERING_LANDING;
  static constexpr PATTERN_TYPE PHISHING =
    SocialEngineeringPatternType_PATTERN_TYPE_PHISHING;
  static inline bool PATTERN_TYPE_IsValid(int value) {
    return SocialEngineeringPatternType_PATTERN_TYPE_IsValid(value);
  }
  static constexpr PATTERN_TYPE PATTERN_TYPE_MIN =
    SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_MIN;
  static constexpr PATTERN_TYPE PATTERN_TYPE_MAX =
    SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_MAX;
  static constexpr int PATTERN_TYPE_ARRAYSIZE =
    SocialEngineeringPatternType_PATTERN_TYPE_PATTERN_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PATTERN_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PATTERN_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PATTERN_TYPE_Name.");
    return SocialEngineeringPatternType_PATTERN_TYPE_Name(enum_t_value);
  }
  static inline bool PATTERN_TYPE_Parse(const std::string& name,
      PATTERN_TYPE* value) {
    return SocialEngineeringPatternType_PATTERN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatternTypeFieldNumber = 1,
  };
  // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
  bool has_pattern_type() const;
  void clear_pattern_type();
  ::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE pattern_type() const;
  void set_pattern_type(::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE value);

  // @@protoc_insertion_point(class_scope:safe_browsing.SocialEngineeringPatternType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pattern_type_;
  friend struct ::TableStruct_metadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MalwarePatternType

// required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
inline bool MalwarePatternType::has_pattern_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MalwarePatternType::clear_pattern_type() {
  pattern_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::safe_browsing::MalwarePatternType_PATTERN_TYPE MalwarePatternType::pattern_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.MalwarePatternType.pattern_type)
  return static_cast< ::safe_browsing::MalwarePatternType_PATTERN_TYPE >(pattern_type_);
}
inline void MalwarePatternType::set_pattern_type(::safe_browsing::MalwarePatternType_PATTERN_TYPE value) {
  assert(::safe_browsing::MalwarePatternType_PATTERN_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pattern_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.MalwarePatternType.pattern_type)
}

// -------------------------------------------------------------------

// SocialEngineeringPatternType

// optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
inline bool SocialEngineeringPatternType::has_pattern_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocialEngineeringPatternType::clear_pattern_type() {
  pattern_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::pattern_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.SocialEngineeringPatternType.pattern_type)
  return static_cast< ::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE >(pattern_type_);
}
inline void SocialEngineeringPatternType::set_pattern_type(::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE value) {
  assert(::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pattern_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.SocialEngineeringPatternType.pattern_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::safe_browsing::MalwarePatternType_PATTERN_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto
