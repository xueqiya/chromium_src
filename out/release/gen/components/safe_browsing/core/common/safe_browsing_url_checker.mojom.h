// components/safe_browsing/core/common/safe_browsing_url_checker.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_H_
#define COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/safe_browsing/core/common/safe_browsing_url_checker.mojom-shared.h"
#include "components/safe_browsing/core/common/safe_browsing_url_checker.mojom-forward.h"
#include "url/mojom/url.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace safe_browsing {
namespace mojom {

class SafeBrowsingUrlCheckerProxy;

template <typename ImplRefTraits>
class SafeBrowsingUrlCheckerStub;

class SafeBrowsingUrlCheckerRequestValidator;
class SafeBrowsingUrlCheckerResponseValidator;


class  SafeBrowsingUrlChecker
    : public SafeBrowsingUrlCheckerInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = SafeBrowsingUrlCheckerInterfaceBase;
  using Proxy_ = SafeBrowsingUrlCheckerProxy;

  template <typename ImplRefTraits>
  using Stub_ = SafeBrowsingUrlCheckerStub<ImplRefTraits>;

  using RequestValidator_ = SafeBrowsingUrlCheckerRequestValidator;
  using ResponseValidator_ = SafeBrowsingUrlCheckerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCheckUrlMinVersion = 0,
  };
  virtual ~SafeBrowsingUrlChecker() {}


  using CheckUrlCallback = base::OnceCallback<void(mojo::PendingReceiver<UrlCheckNotifier>, bool, bool)>;
  
  virtual void CheckUrl(const ::GURL& url, const std::string& method, CheckUrlCallback callback) = 0;
};

class UrlCheckNotifierProxy;

template <typename ImplRefTraits>
class UrlCheckNotifierStub;

class UrlCheckNotifierRequestValidator;


class  UrlCheckNotifier
    : public UrlCheckNotifierInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = UrlCheckNotifierInterfaceBase;
  using Proxy_ = UrlCheckNotifierProxy;

  template <typename ImplRefTraits>
  using Stub_ = UrlCheckNotifierStub<ImplRefTraits>;

  using RequestValidator_ = UrlCheckNotifierRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnCompleteCheckMinVersion = 0,
  };
  virtual ~UrlCheckNotifier() {}

  
  virtual void OnCompleteCheck(bool proceed, bool showed_interstitial) = 0;
};



class  SafeBrowsingUrlCheckerProxy
    : public SafeBrowsingUrlChecker {
 public:
  using InterfaceType = SafeBrowsingUrlChecker;

  explicit SafeBrowsingUrlCheckerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CheckUrl(const ::GURL& url, const std::string& method, CheckUrlCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  UrlCheckNotifierProxy
    : public UrlCheckNotifier {
 public:
  using InterfaceType = UrlCheckNotifier;

  explicit UrlCheckNotifierProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnCompleteCheck(bool proceed, bool showed_interstitial) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  SafeBrowsingUrlCheckerStubDispatch {
 public:
  static bool Accept(SafeBrowsingUrlChecker* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SafeBrowsingUrlChecker* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SafeBrowsingUrlChecker>>
class SafeBrowsingUrlCheckerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SafeBrowsingUrlCheckerStub() {}
  ~SafeBrowsingUrlCheckerStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SafeBrowsingUrlCheckerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SafeBrowsingUrlCheckerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  UrlCheckNotifierStubDispatch {
 public:
  static bool Accept(UrlCheckNotifier* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      UrlCheckNotifier* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<UrlCheckNotifier>>
class UrlCheckNotifierStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  UrlCheckNotifierStub() {}
  ~UrlCheckNotifierStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return UrlCheckNotifierStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return UrlCheckNotifierStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SafeBrowsingUrlCheckerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  UrlCheckNotifierRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SafeBrowsingUrlCheckerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace safe_browsing

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_H_