// components/safe_browsing/core/common/safe_browsing_url_checker.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace safe_browsing {
namespace mojom {
namespace internal {
class  SafeBrowsingUrlChecker_CheckUrl_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeBrowsingUrlChecker_CheckUrl_Params_Data));
      new (data()) SafeBrowsingUrlChecker_CheckUrl_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeBrowsingUrlChecker_CheckUrl_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeBrowsingUrlChecker_CheckUrl_Params_Data>(index_);
    }
    SafeBrowsingUrlChecker_CheckUrl_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> method;

 private:
  SafeBrowsingUrlChecker_CheckUrl_Params_Data();
  ~SafeBrowsingUrlChecker_CheckUrl_Params_Data() = delete;
};
static_assert(sizeof(SafeBrowsingUrlChecker_CheckUrl_Params_Data) == 24,
              "Bad sizeof(SafeBrowsingUrlChecker_CheckUrl_Params_Data)");
class  SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data));
      new (data()) SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data>(index_);
    }
    SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data slow_check_notifier;
  uint8_t proceed : 1;
  uint8_t showed_interstitial : 1;
  uint8_t padfinal_[3];

 private:
  SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data();
  ~SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data() = delete;
};
static_assert(sizeof(SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data) == 16,
              "Bad sizeof(SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data)");
class  UrlCheckNotifier_OnCompleteCheck_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UrlCheckNotifier_OnCompleteCheck_Params_Data));
      new (data()) UrlCheckNotifier_OnCompleteCheck_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UrlCheckNotifier_OnCompleteCheck_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UrlCheckNotifier_OnCompleteCheck_Params_Data>(index_);
    }
    UrlCheckNotifier_OnCompleteCheck_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t proceed : 1;
  uint8_t showed_interstitial : 1;
  uint8_t padfinal_[7];

 private:
  UrlCheckNotifier_OnCompleteCheck_Params_Data();
  ~UrlCheckNotifier_OnCompleteCheck_Params_Data() = delete;
};
static_assert(sizeof(UrlCheckNotifier_OnCompleteCheck_Params_Data) == 16,
              "Bad sizeof(UrlCheckNotifier_OnCompleteCheck_Params_Data)");

}  // namespace internal
class SafeBrowsingUrlChecker_CheckUrl_ParamsDataView {
 public:
  SafeBrowsingUrlChecker_CheckUrl_ParamsDataView() {}

  SafeBrowsingUrlChecker_CheckUrl_ParamsDataView(
      internal::SafeBrowsingUrlChecker_CheckUrl_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMethod(UserType* output) {
    auto* pointer = data_->method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeBrowsingUrlChecker_CheckUrl_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeBrowsingUrlChecker_CheckUrl_ResponseParamsDataView {
 public:
  SafeBrowsingUrlChecker_CheckUrl_ResponseParamsDataView() {}

  SafeBrowsingUrlChecker_CheckUrl_ResponseParamsDataView(
      internal::SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSlowCheckNotifier() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::UrlCheckNotifierInterfaceBase>>(
            &data_->slow_check_notifier, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool proceed() const {
    return data_->proceed;
  }
  bool showed_interstitial() const {
    return data_->showed_interstitial;
  }
 private:
  internal::SafeBrowsingUrlChecker_CheckUrl_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UrlCheckNotifier_OnCompleteCheck_ParamsDataView {
 public:
  UrlCheckNotifier_OnCompleteCheck_ParamsDataView() {}

  UrlCheckNotifier_OnCompleteCheck_ParamsDataView(
      internal::UrlCheckNotifier_OnCompleteCheck_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool proceed() const {
    return data_->proceed;
  }
  bool showed_interstitial() const {
    return data_->showed_interstitial;
  }
 private:
  internal::UrlCheckNotifier_OnCompleteCheck_Params_Data* data_ = nullptr;
};


inline void SafeBrowsingUrlChecker_CheckUrl_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void SafeBrowsingUrlChecker_CheckUrl_ParamsDataView::GetMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->method.Get();
  *output = mojo::StringDataView(pointer, context_);
}





}  // namespace mojom
}  // namespace safe_browsing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_SAFE_BROWSING_CORE_COMMON_SAFE_BROWSING_URL_CHECKER_MOJOM_PARAMS_DATA_H_