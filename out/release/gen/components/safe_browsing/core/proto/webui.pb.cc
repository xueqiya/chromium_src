// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webui.proto

#include "webui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto;
namespace safe_browsing {
class DatabaseManagerInfo_UpdateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseManagerInfo_UpdateInfo> _instance;
} _DatabaseManagerInfo_UpdateInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseManagerInfo_DatabaseInfo_StoreInfo> _instance;
} _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseManagerInfo_DatabaseInfo> _instance;
} _DatabaseManagerInfo_DatabaseInfo_default_instance_;
class DatabaseManagerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseManagerInfo> _instance;
} _DatabaseManagerInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier> _instance;
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo> _instance;
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo> _instance;
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_;
class FullHashCacheInfo_FullHashCacheDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache> _instance;
} _FullHashCacheInfo_FullHashCache_default_instance_;
class FullHashCacheInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullHashCacheInfo> _instance;
} _FullHashCacheInfo_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_DatabaseManagerInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DatabaseManagerInfo_default_instance_;
    new (ptr) ::safe_browsing::DatabaseManagerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DatabaseManagerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DatabaseManagerInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DatabaseManagerInfo_webui_2eproto}, {
      &scc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto.base,
      &scc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto.base,}};

static void InitDefaultsscc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DatabaseManagerInfo_DatabaseInfo_default_instance_;
    new (ptr) ::safe_browsing::DatabaseManagerInfo_DatabaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto}, {
      &scc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto.base,}};

static void InitDefaultsscc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_;
    new (ptr) ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto}, {}};

static void InitDefaultsscc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DatabaseManagerInfo_UpdateInfo_default_instance_;
    new (ptr) ::safe_browsing::DatabaseManagerInfo_UpdateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto}, {}};

static void InitDefaultsscc_info_FullHashCacheInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_FullHashCacheInfo_default_instance_;
    new (ptr) ::safe_browsing::FullHashCacheInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::FullHashCacheInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FullHashCacheInfo_webui_2eproto}, {
      &scc_info_FullHashCacheInfo_FullHashCache_webui_2eproto.base,}};

static void InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_FullHashCacheInfo_FullHashCache_default_instance_;
    new (ptr) ::safe_browsing::FullHashCacheInfo_FullHashCache();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::FullHashCacheInfo_FullHashCache::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_webui_2eproto}, {
      &scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto.base,}};

static void InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_;
    new (ptr) ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto}, {
      &scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto.base,}};

static void InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_;
    new (ptr) ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto}, {
      &scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto.base,}};

static void InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_;
    new (ptr) ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto}, {}};

namespace safe_browsing {

// ===================================================================

void DatabaseManagerInfo_UpdateInfo::InitAsDefaultInstance() {
}
class DatabaseManagerInfo_UpdateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_UpdateInfo>()._has_bits_);
  static void set_has_network_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}
DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo(const DatabaseManagerInfo_UpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_update_time_millis_, &from.last_update_time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_status_code_) -
    reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}

void DatabaseManagerInfo_UpdateInfo::SharedCtor() {
  ::memset(&last_update_time_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_status_code_) -
      reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
}

DatabaseManagerInfo_UpdateInfo::~DatabaseManagerInfo_UpdateInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  SharedDtor();
}

void DatabaseManagerInfo_UpdateInfo::SharedDtor() {
}

void DatabaseManagerInfo_UpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseManagerInfo_UpdateInfo& DatabaseManagerInfo_UpdateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseManagerInfo_UpdateInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void DatabaseManagerInfo_UpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_update_time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_status_code_) -
        reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseManagerInfo_UpdateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 network_status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_network_status_code(&has_bits);
          network_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_update_time_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_update_time_millis(&has_bits);
          last_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 next_update_time_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_update_time_millis(&has_bits);
          next_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseManagerInfo_UpdateInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 network_status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_network_status_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_update_time_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_update_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_update_time_millis = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_next_update_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_update_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseManagerInfo_UpdateInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_status_code = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->network_status_code(), output);
  }

  // optional uint64 last_update_time_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->last_update_time_millis(), output);
  }

  // optional uint64 next_update_time_millis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->next_update_time_millis(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}

size_t DatabaseManagerInfo_UpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 last_update_time_millis = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->last_update_time_millis());
    }

    // optional uint64 next_update_time_millis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->next_update_time_millis());
    }

    // optional int32 network_status_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->network_status_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_UpdateInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseManagerInfo_UpdateInfo*>(
      &from));
}

void DatabaseManagerInfo_UpdateInfo::MergeFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_update_time_millis_ = from.last_update_time_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      next_update_time_millis_ = from.next_update_time_millis_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_status_code_ = from.network_status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_UpdateInfo::CopyFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_UpdateInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_UpdateInfo::InternalSwap(DatabaseManagerInfo_UpdateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_update_time_millis_, other->last_update_time_millis_);
  swap(next_update_time_millis_, other->next_update_time_millis_);
  swap(network_status_code_, other->network_status_code_);
}

std::string DatabaseManagerInfo_UpdateInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.UpdateInfo";
}


// ===================================================================

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::InitAsDefaultInstance() {
}
class DatabaseManagerInfo_DatabaseInfo_StoreInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_DatabaseInfo_StoreInfo>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_apply_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_checks_attempted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}
DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_size_bytes_, &from.file_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&checks_attempted_) -
    reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checks_attempted_) -
      reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
}

DatabaseManagerInfo_DatabaseInfo_StoreInfo::~DatabaseManagerInfo_DatabaseInfo_StoreInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  SharedDtor();
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseManagerInfo_DatabaseInfo_StoreInfo& DatabaseManagerInfo_DatabaseInfo_StoreInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseManagerInfo_DatabaseInfo_StoreInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void DatabaseManagerInfo_DatabaseInfo_StoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&file_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checks_attempted_) -
        reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseManagerInfo_DatabaseInfo_StoreInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_file_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 file_size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_size_bytes(&has_bits);
          file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 update_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_update_status(&has_bits);
          update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_apply_update_time_millis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_apply_update_time_millis(&has_bits);
          last_apply_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 checks_attempted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_checks_attempted(&has_bits);
          checks_attempted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_size_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_file_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_update_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_apply_update_time_millis = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_apply_update_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_apply_update_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 checks_attempted = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_checks_attempted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checks_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional int64 file_size_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->file_size_bytes(), output);
  }

  // optional int32 update_status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->update_status(), output);
  }

  // optional uint64 last_apply_update_time_millis = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->last_apply_update_time_millis(), output);
  }

  // optional uint32 checks_attempted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->checks_attempted(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}

size_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int64 file_size_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->file_size_bytes());
    }

    // optional uint64 last_apply_update_time_millis = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->last_apply_update_time_millis());
    }

    // optional int32 update_status = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->update_status());
    }

    // optional uint32 checks_attempted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->checks_attempted());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseManagerInfo_DatabaseInfo_StoreInfo*>(
      &from));
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_bytes_ = from.file_size_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_apply_update_time_millis_ = from.last_apply_update_time_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      update_status_ = from.update_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      checks_attempted_ = from.checks_attempted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_bytes_, other->file_size_bytes_);
  swap(last_apply_update_time_millis_, other->last_apply_update_time_millis_);
  swap(update_status_, other->update_status_);
  swap(checks_attempted_, other->checks_attempted_);
}

std::string DatabaseManagerInfo_DatabaseInfo_StoreInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo";
}


// ===================================================================

void DatabaseManagerInfo_DatabaseInfo::InitAsDefaultInstance() {
}
class DatabaseManagerInfo_DatabaseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_DatabaseInfo>()._has_bits_);
  static void set_has_update_successful(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}
DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo(const DatabaseManagerInfo_DatabaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_info_(from.store_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&database_size_bytes_, &from.database_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_successful_) -
    reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}

void DatabaseManagerInfo_DatabaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto.base);
  ::memset(&database_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_successful_) -
      reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
}

DatabaseManagerInfo_DatabaseInfo::~DatabaseManagerInfo_DatabaseInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  SharedDtor();
}

void DatabaseManagerInfo_DatabaseInfo::SharedDtor() {
}

void DatabaseManagerInfo_DatabaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseManagerInfo_DatabaseInfo& DatabaseManagerInfo_DatabaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseManagerInfo_DatabaseInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void DatabaseManagerInfo_DatabaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&database_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_successful_) -
        reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseManagerInfo_DatabaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool update_successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_update_successful(&has_bits);
          update_successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 database_size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_database_size_bytes(&has_bits);
          database_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_store_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseManagerInfo_DatabaseInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool update_successful = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_update_successful(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 database_size_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_database_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &database_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_store_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseManagerInfo_DatabaseInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_successful = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->update_successful(), output);
  }

  // optional uint64 database_size_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->database_size_bytes(), output);
  }

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->store_info(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}

size_t DatabaseManagerInfo_DatabaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->store_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->store_info(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 database_size_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->database_size_bytes());
    }

    // optional bool update_successful = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseManagerInfo_DatabaseInfo*>(
      &from));
}

void DatabaseManagerInfo_DatabaseInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_info_.MergeFrom(from.store_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      database_size_bytes_ = from.database_size_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_successful_ = from.update_successful_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_DatabaseInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&store_info_)->InternalSwap(CastToBase(&other->store_info_));
  swap(database_size_bytes_, other->database_size_bytes_);
  swap(update_successful_, other->update_successful_);
}

std::string DatabaseManagerInfo_DatabaseInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo";
}


// ===================================================================

void DatabaseManagerInfo::InitAsDefaultInstance() {
  ::safe_browsing::_DatabaseManagerInfo_default_instance_._instance.get_mutable()->update_info_ = const_cast< ::safe_browsing::DatabaseManagerInfo_UpdateInfo*>(
      ::safe_browsing::DatabaseManagerInfo_UpdateInfo::internal_default_instance());
  ::safe_browsing::_DatabaseManagerInfo_default_instance_._instance.get_mutable()->database_info_ = const_cast< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo*>(
      ::safe_browsing::DatabaseManagerInfo_DatabaseInfo::internal_default_instance());
}
class DatabaseManagerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo>()._has_bits_);
  static const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& update_info(const DatabaseManagerInfo* msg);
  static void set_has_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& database_info(const DatabaseManagerInfo* msg);
  static void set_has_database_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::DatabaseManagerInfo_UpdateInfo&
DatabaseManagerInfo::_Internal::update_info(const DatabaseManagerInfo* msg) {
  return *msg->update_info_;
}
const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo&
DatabaseManagerInfo::_Internal::database_info(const DatabaseManagerInfo* msg) {
  return *msg->database_info_;
}
DatabaseManagerInfo::DatabaseManagerInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo)
}
DatabaseManagerInfo::DatabaseManagerInfo(const DatabaseManagerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_info()) {
    update_info_ = new ::safe_browsing::DatabaseManagerInfo_UpdateInfo(*from.update_info_);
  } else {
    update_info_ = nullptr;
  }
  if (from.has_database_info()) {
    database_info_ = new ::safe_browsing::DatabaseManagerInfo_DatabaseInfo(*from.database_info_);
  } else {
    database_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo)
}

void DatabaseManagerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseManagerInfo_webui_2eproto.base);
  ::memset(&update_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&database_info_) -
      reinterpret_cast<char*>(&update_info_)) + sizeof(database_info_));
}

DatabaseManagerInfo::~DatabaseManagerInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo)
  SharedDtor();
}

void DatabaseManagerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete update_info_;
  if (this != internal_default_instance()) delete database_info_;
}

void DatabaseManagerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseManagerInfo& DatabaseManagerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseManagerInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void DatabaseManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_info_ != nullptr);
      update_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(database_info_ != nullptr);
      database_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseManagerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_database_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseManagerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseManagerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_info(this), output);
  }

  // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::database_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo)
}

size_t DatabaseManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_info_);
    }

    // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_info_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseManagerInfo*>(
      &from));
}

void DatabaseManagerInfo::MergeFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_info()->::safe_browsing::DatabaseManagerInfo_UpdateInfo::MergeFrom(from.update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_database_info()->::safe_browsing::DatabaseManagerInfo_DatabaseInfo::MergeFrom(from.database_info());
    }
  }
}

void DatabaseManagerInfo::CopyFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo::InternalSwap(DatabaseManagerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_info_, other->update_info_);
  swap(database_info_, other->database_info_);
}

std::string DatabaseManagerInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo";
}


// ===================================================================

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::InitAsDefaultInstance() {
}
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier>()._has_bits_);
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&platform_type_, &from.platform_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&threat_type_) -
    reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedCtor() {
  ::memset(&platform_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threat_type_) -
      reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedDtor() {
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_webui_2eproto.base);
  return *internal_default_instance();
}


void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&platform_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&threat_type_) -
        reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 platform_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 threat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_threat_entry_type(&has_bits);
          threat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 threat_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_threat_type(&has_bits);
          threat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platform_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_platform_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threat_entry_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_threat_entry_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &threat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threat_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_threat_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &threat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platform_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->platform_type(), output);
  }

  // optional int32 threat_entry_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->threat_entry_type(), output);
  }

  // optional int32 threat_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->threat_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 platform_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->platform_type());
    }

    // optional int32 threat_entry_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->threat_entry_type());
    }

    // optional int32 threat_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->threat_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      threat_entry_type_ = from.threat_entry_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      threat_type_ = from.threat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(platform_type_, other->platform_type_);
  swap(threat_entry_type_, other->threat_entry_type_);
  swap(threat_type_, other->threat_type_);
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier";
}


// ===================================================================

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::InitAsDefaultInstance() {
  ::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_._instance.get_mutable()->list_identifier_ = const_cast< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::internal_default_instance());
}
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo>()._has_bits_);
  static void set_has_positive_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& list_identifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* msg);
  static void set_has_list_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier&
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_Internal::list_identifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* msg) {
  return *msg->list_identifier_;
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_hash()) {
    full_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_hash_);
  }
  if (from.has_list_identifier()) {
    list_identifier_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(*from.list_identifier_);
  } else {
    list_identifier_ = nullptr;
  }
  positive_expiry_ = from.positive_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto.base);
  full_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&list_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positive_expiry_) -
      reinterpret_cast<char*>(&list_identifier_)) + sizeof(positive_expiry_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedDtor() {
  full_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete list_identifier_;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      full_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(list_identifier_ != nullptr);
      list_identifier_->Clear();
    }
  }
  positive_expiry_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 positive_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positive_expiry(&has_bits);
          positive_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_full_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_list_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 positive_expiry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_positive_expiry(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &positive_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string full_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_full_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_list_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 positive_expiry = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->positive_expiry(), output);
  }

  // optional string full_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_hash(), output);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::list_identifier(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string full_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->full_hash());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_identifier_);
    }

    // optional int64 positive_expiry = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->positive_expiry());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      full_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_list_identifier()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(from.list_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      positive_expiry_ = from.positive_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_hash_.Swap(&other->full_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(list_identifier_, other->list_identifier_);
  swap(positive_expiry_, other->positive_expiry_);
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo";
}


// ===================================================================

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::InitAsDefaultInstance() {
}
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo>()._has_bits_);
  static void set_has_negative_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      full_hash_info_(from.full_hash_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_expiry_ = from.negative_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto.base);
  negative_expiry_ = PROTOBUF_LONGLONG(0);
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedDtor() {
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_hash_info_.Clear();
  negative_expiry_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 negative_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_negative_expiry(&has_bits);
          negative_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_full_hash_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 negative_expiry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_negative_expiry(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &negative_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_full_hash_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 negative_expiry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->negative_expiry(), output);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->full_hash_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->full_hash_info(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->full_hash_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->full_hash_info(static_cast<int>(i)));
    }
  }

  // optional int64 negative_expiry = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->negative_expiry());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_info_.MergeFrom(from.full_hash_info_);
  if (from.has_negative_expiry()) {
    set_negative_expiry(from.negative_expiry());
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&full_hash_info_)->InternalSwap(CastToBase(&other->full_hash_info_));
  swap(negative_expiry_, other->negative_expiry_);
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo";
}


// ===================================================================

void FullHashCacheInfo_FullHashCache::InitAsDefaultInstance() {
  ::safe_browsing::_FullHashCacheInfo_FullHashCache_default_instance_._instance.get_mutable()->cached_hash_prefix_info_ = const_cast< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::internal_default_instance());
}
class FullHashCacheInfo_FullHashCache::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache>()._has_bits_);
  static void set_has_hash_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& cached_hash_prefix_info(const FullHashCacheInfo_FullHashCache* msg);
  static void set_has_cached_hash_prefix_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo&
FullHashCacheInfo_FullHashCache::_Internal::cached_hash_prefix_info(const FullHashCacheInfo_FullHashCache* msg) {
  return *msg->cached_hash_prefix_info_;
}
FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}
FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache(const FullHashCacheInfo_FullHashCache& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash_prefix()) {
    hash_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_prefix_);
  }
  if (from.has_cached_hash_prefix_info()) {
    cached_hash_prefix_info_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(*from.cached_hash_prefix_info_);
  } else {
    cached_hash_prefix_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}

void FullHashCacheInfo_FullHashCache::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullHashCacheInfo_FullHashCache_webui_2eproto.base);
  hash_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cached_hash_prefix_info_ = nullptr;
}

FullHashCacheInfo_FullHashCache::~FullHashCacheInfo_FullHashCache() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache::SharedDtor() {
  hash_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cached_hash_prefix_info_;
}

void FullHashCacheInfo_FullHashCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullHashCacheInfo_FullHashCache& FullHashCacheInfo_FullHashCache::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullHashCacheInfo_FullHashCache_webui_2eproto.base);
  return *internal_default_instance();
}


void FullHashCacheInfo_FullHashCache::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cached_hash_prefix_info_ != nullptr);
      cached_hash_prefix_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullHashCacheInfo_FullHashCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hash_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash_prefix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_cached_hash_prefix_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullHashCacheInfo_FullHashCache::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash_prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cached_hash_prefix_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullHashCacheInfo_FullHashCache::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hash_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash_prefix(), output);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::cached_hash_prefix_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache)
}

size_t FullHashCacheInfo_FullHashCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string hash_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hash_prefix());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cached_hash_prefix_info_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FullHashCacheInfo_FullHashCache*>(
      &from));
}

void FullHashCacheInfo_FullHashCache::MergeFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hash_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cached_hash_prefix_info()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(from.cached_hash_prefix_info());
    }
  }
}

void FullHashCacheInfo_FullHashCache::CopyFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache::InternalSwap(FullHashCacheInfo_FullHashCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_prefix_.Swap(&other->hash_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cached_hash_prefix_info_, other->cached_hash_prefix_info_);
}

std::string FullHashCacheInfo_FullHashCache::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache";
}


// ===================================================================

void FullHashCacheInfo::InitAsDefaultInstance() {
}
class FullHashCacheInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo>()._has_bits_);
  static void set_has_number_of_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FullHashCacheInfo::FullHashCacheInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo)
}
FullHashCacheInfo::FullHashCacheInfo(const FullHashCacheInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      full_hash_cache_(from.full_hash_cache_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_of_hits_ = from.number_of_hits_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo)
}

void FullHashCacheInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullHashCacheInfo_webui_2eproto.base);
  number_of_hits_ = 0;
}

FullHashCacheInfo::~FullHashCacheInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo)
  SharedDtor();
}

void FullHashCacheInfo::SharedDtor() {
}

void FullHashCacheInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullHashCacheInfo& FullHashCacheInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullHashCacheInfo_webui_2eproto.base);
  return *internal_default_instance();
}


void FullHashCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_hash_cache_.Clear();
  number_of_hits_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullHashCacheInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 number_of_hits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_of_hits(&has_bits);
          number_of_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_full_hash_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullHashCacheInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number_of_hits = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_number_of_hits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_full_hash_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullHashCacheInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_hits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->number_of_hits(), output);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->full_hash_cache_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->full_hash_cache(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo)
}

size_t FullHashCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->full_hash_cache_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->full_hash_cache(static_cast<int>(i)));
    }
  }

  // optional int32 number_of_hits = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->number_of_hits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FullHashCacheInfo*>(
      &from));
}

void FullHashCacheInfo::MergeFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_cache_.MergeFrom(from.full_hash_cache_);
  if (from.has_number_of_hits()) {
    set_number_of_hits(from.number_of_hits());
  }
}

void FullHashCacheInfo::CopyFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo::InternalSwap(FullHashCacheInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&full_hash_cache_)->InternalSwap(CastToBase(&other->full_hash_cache_));
  swap(number_of_hits_, other->number_of_hits_);
}

std::string FullHashCacheInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_UpdateInfo* Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_UpdateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DatabaseManagerInfo_UpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo* Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DatabaseManagerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache* Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo* Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::FullHashCacheInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
