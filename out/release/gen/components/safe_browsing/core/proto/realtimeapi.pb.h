// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtimeapi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_realtimeapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_realtimeapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "csd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_realtimeapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_realtimeapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace safe_browsing {
class RTLookupRequest;
class RTLookupRequestDefaultTypeInternal;
extern RTLookupRequestDefaultTypeInternal _RTLookupRequest_default_instance_;
class RTLookupResponse;
class RTLookupResponseDefaultTypeInternal;
extern RTLookupResponseDefaultTypeInternal _RTLookupResponse_default_instance_;
class RTLookupResponse_ThreatInfo;
class RTLookupResponse_ThreatInfoDefaultTypeInternal;
extern RTLookupResponse_ThreatInfoDefaultTypeInternal _RTLookupResponse_ThreatInfo_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::RTLookupRequest* Arena::CreateMaybeMessage<::safe_browsing::RTLookupRequest>(Arena*);
template<> ::safe_browsing::RTLookupResponse* Arena::CreateMaybeMessage<::safe_browsing::RTLookupResponse>(Arena*);
template<> ::safe_browsing::RTLookupResponse_ThreatInfo* Arena::CreateMaybeMessage<::safe_browsing::RTLookupResponse_ThreatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

enum RTLookupRequest_LookupType : int {
  RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED = 0,
  RTLookupRequest_LookupType_NAVIGATION = 1,
  RTLookupRequest_LookupType_DOWNLOAD = 2
};
bool RTLookupRequest_LookupType_IsValid(int value);
constexpr RTLookupRequest_LookupType RTLookupRequest_LookupType_LookupType_MIN = RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_LookupType RTLookupRequest_LookupType_LookupType_MAX = RTLookupRequest_LookupType_DOWNLOAD;
constexpr int RTLookupRequest_LookupType_LookupType_ARRAYSIZE = RTLookupRequest_LookupType_LookupType_MAX + 1;

const std::string& RTLookupRequest_LookupType_Name(RTLookupRequest_LookupType value);
template<typename T>
inline const std::string& RTLookupRequest_LookupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupRequest_LookupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupRequest_LookupType_Name.");
  return RTLookupRequest_LookupType_Name(static_cast<RTLookupRequest_LookupType>(enum_t_value));
}
bool RTLookupRequest_LookupType_Parse(
    const std::string& name, RTLookupRequest_LookupType* value);
enum RTLookupResponse_ThreatInfo_ThreatType : int {
  RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_ThreatType_WEB_MALWARE = 1,
  RTLookupResponse_ThreatInfo_ThreatType_SOCIAL_ENGINEERING = 3,
  RTLookupResponse_ThreatInfo_ThreatType_UNWANTED_SOFTWARE = 4,
  RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING = 5
};
bool RTLookupResponse_ThreatInfo_ThreatType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MIN = RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX = RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING;
constexpr int RTLookupResponse_ThreatInfo_ThreatType_ThreatType_ARRAYSIZE = RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(RTLookupResponse_ThreatInfo_ThreatType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_ThreatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_ThreatType_Name.");
  return RTLookupResponse_ThreatInfo_ThreatType_Name(static_cast<RTLookupResponse_ThreatInfo_ThreatType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_ThreatType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_ThreatType* value);
enum RTLookupResponse_ThreatInfo_VerdictType : int {
  RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_VerdictType_SAFE = 1,
  RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS = 100
};
bool RTLookupResponse_ThreatInfo_VerdictType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MIN = RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX = RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS;
constexpr int RTLookupResponse_ThreatInfo_VerdictType_VerdictType_ARRAYSIZE = RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(RTLookupResponse_ThreatInfo_VerdictType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_VerdictType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_VerdictType_Name.");
  return RTLookupResponse_ThreatInfo_VerdictType_Name(static_cast<RTLookupResponse_ThreatInfo_VerdictType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_VerdictType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_VerdictType* value);
enum RTLookupResponse_ThreatInfo_CacheExpressionMatchType : int {
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_COVERING_MATCH = 1,
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH = 2
};
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MIN = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH;
constexpr int RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_ARRAYSIZE = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(RTLookupResponse_ThreatInfo_CacheExpressionMatchType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_CacheExpressionMatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name.");
  return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(static_cast<RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_CacheExpressionMatchType* value);
// ===================================================================

class RTLookupRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupRequest) */ {
 public:
  RTLookupRequest();
  virtual ~RTLookupRequest();

  RTLookupRequest(const RTLookupRequest& from);
  RTLookupRequest(RTLookupRequest&& from) noexcept
    : RTLookupRequest() {
    *this = ::std::move(from);
  }

  inline RTLookupRequest& operator=(const RTLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupRequest& operator=(RTLookupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RTLookupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTLookupRequest* internal_default_instance() {
    return reinterpret_cast<const RTLookupRequest*>(
               &_RTLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RTLookupRequest& a, RTLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RTLookupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTLookupRequest* New() const final {
    return CreateMaybeMessage<RTLookupRequest>(nullptr);
  }

  RTLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTLookupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RTLookupRequest& from);
  void MergeFrom(const RTLookupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupRequest_LookupType LookupType;
  static constexpr LookupType LOOKUP_TYPE_UNSPECIFIED =
    RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED;
  static constexpr LookupType NAVIGATION =
    RTLookupRequest_LookupType_NAVIGATION;
  static constexpr LookupType DOWNLOAD =
    RTLookupRequest_LookupType_DOWNLOAD;
  static inline bool LookupType_IsValid(int value) {
    return RTLookupRequest_LookupType_IsValid(value);
  }
  static constexpr LookupType LookupType_MIN =
    RTLookupRequest_LookupType_LookupType_MIN;
  static constexpr LookupType LookupType_MAX =
    RTLookupRequest_LookupType_LookupType_MAX;
  static constexpr int LookupType_ARRAYSIZE =
    RTLookupRequest_LookupType_LookupType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LookupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LookupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LookupType_Name.");
    return RTLookupRequest_LookupType_Name(enum_t_value);
  }
  static inline bool LookupType_Parse(const std::string& name,
      LookupType* value) {
    return RTLookupRequest_LookupType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kScopedOauthTokenFieldNumber = 4,
    kPopulationFieldNumber = 3,
    kLookupTypeFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string scoped_oauth_token = 4;
  bool has_scoped_oauth_token() const;
  void clear_scoped_oauth_token();
  const std::string& scoped_oauth_token() const;
  void set_scoped_oauth_token(const std::string& value);
  void set_scoped_oauth_token(std::string&& value);
  void set_scoped_oauth_token(const char* value);
  void set_scoped_oauth_token(const char* value, size_t size);
  std::string* mutable_scoped_oauth_token();
  std::string* release_scoped_oauth_token();
  void set_allocated_scoped_oauth_token(std::string* scoped_oauth_token);

  // optional .safe_browsing.ChromeUserPopulation population = 3;
  bool has_population() const;
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);

  // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
  bool has_lookup_type() const;
  void clear_lookup_type();
  ::safe_browsing::RTLookupRequest_LookupType lookup_type() const;
  void set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value);

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scoped_oauth_token_;
  ::safe_browsing::ChromeUserPopulation* population_;
  int lookup_type_;
  friend struct ::TableStruct_realtimeapi_2eproto;
};
// -------------------------------------------------------------------

class RTLookupResponse_ThreatInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupResponse.ThreatInfo) */ {
 public:
  RTLookupResponse_ThreatInfo();
  virtual ~RTLookupResponse_ThreatInfo();

  RTLookupResponse_ThreatInfo(const RTLookupResponse_ThreatInfo& from);
  RTLookupResponse_ThreatInfo(RTLookupResponse_ThreatInfo&& from) noexcept
    : RTLookupResponse_ThreatInfo() {
    *this = ::std::move(from);
  }

  inline RTLookupResponse_ThreatInfo& operator=(const RTLookupResponse_ThreatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupResponse_ThreatInfo& operator=(RTLookupResponse_ThreatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RTLookupResponse_ThreatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTLookupResponse_ThreatInfo* internal_default_instance() {
    return reinterpret_cast<const RTLookupResponse_ThreatInfo*>(
               &_RTLookupResponse_ThreatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RTLookupResponse_ThreatInfo& a, RTLookupResponse_ThreatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RTLookupResponse_ThreatInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTLookupResponse_ThreatInfo* New() const final {
    return CreateMaybeMessage<RTLookupResponse_ThreatInfo>(nullptr);
  }

  RTLookupResponse_ThreatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTLookupResponse_ThreatInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RTLookupResponse_ThreatInfo& from);
  void MergeFrom(const RTLookupResponse_ThreatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupResponse_ThreatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupResponse.ThreatInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupResponse_ThreatInfo_ThreatType ThreatType;
  static constexpr ThreatType THREAT_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED;
  static constexpr ThreatType WEB_MALWARE =
    RTLookupResponse_ThreatInfo_ThreatType_WEB_MALWARE;
  static constexpr ThreatType SOCIAL_ENGINEERING =
    RTLookupResponse_ThreatInfo_ThreatType_SOCIAL_ENGINEERING;
  static constexpr ThreatType UNWANTED_SOFTWARE =
    RTLookupResponse_ThreatInfo_ThreatType_UNWANTED_SOFTWARE;
  static constexpr ThreatType UNCLEAR_BILLING =
    RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING;
  static inline bool ThreatType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_ThreatType_IsValid(value);
  }
  static constexpr ThreatType ThreatType_MIN =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MIN;
  static constexpr ThreatType ThreatType_MAX =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX;
  static constexpr int ThreatType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ThreatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThreatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThreatType_Name.");
    return RTLookupResponse_ThreatInfo_ThreatType_Name(enum_t_value);
  }
  static inline bool ThreatType_Parse(const std::string& name,
      ThreatType* value) {
    return RTLookupResponse_ThreatInfo_ThreatType_Parse(name, value);
  }

  typedef RTLookupResponse_ThreatInfo_VerdictType VerdictType;
  static constexpr VerdictType VERDICT_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED;
  static constexpr VerdictType SAFE =
    RTLookupResponse_ThreatInfo_VerdictType_SAFE;
  static constexpr VerdictType DANGEROUS =
    RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS;
  static inline bool VerdictType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_VerdictType_IsValid(value);
  }
  static constexpr VerdictType VerdictType_MIN =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MIN;
  static constexpr VerdictType VerdictType_MAX =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX;
  static constexpr int VerdictType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerdictType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerdictType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerdictType_Name.");
    return RTLookupResponse_ThreatInfo_VerdictType_Name(enum_t_value);
  }
  static inline bool VerdictType_Parse(const std::string& name,
      VerdictType* value) {
    return RTLookupResponse_ThreatInfo_VerdictType_Parse(name, value);
  }

  typedef RTLookupResponse_ThreatInfo_CacheExpressionMatchType CacheExpressionMatchType;
  static constexpr CacheExpressionMatchType MATCH_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED;
  static constexpr CacheExpressionMatchType COVERING_MATCH =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_COVERING_MATCH;
  static constexpr CacheExpressionMatchType EXACT_MATCH =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH;
  static inline bool CacheExpressionMatchType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(value);
  }
  static constexpr CacheExpressionMatchType CacheExpressionMatchType_MIN =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MIN;
  static constexpr CacheExpressionMatchType CacheExpressionMatchType_MAX =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX;
  static constexpr int CacheExpressionMatchType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CacheExpressionMatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CacheExpressionMatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CacheExpressionMatchType_Name.");
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(enum_t_value);
  }
  static inline bool CacheExpressionMatchType_Parse(const std::string& name,
      CacheExpressionMatchType* value) {
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCacheExpressionFieldNumber = 3,
    kCacheExpressionUsingMatchTypeFieldNumber = 6,
    kCacheDurationSecFieldNumber = 2,
    kThreatTypeFieldNumber = 1,
    kVerdictTypeFieldNumber = 4,
    kCacheExpressionMatchTypeFieldNumber = 5,
  };
  // optional string cache_expression = 3;
  bool has_cache_expression() const;
  void clear_cache_expression();
  const std::string& cache_expression() const;
  void set_cache_expression(const std::string& value);
  void set_cache_expression(std::string&& value);
  void set_cache_expression(const char* value);
  void set_cache_expression(const char* value, size_t size);
  std::string* mutable_cache_expression();
  std::string* release_cache_expression();
  void set_allocated_cache_expression(std::string* cache_expression);

  // optional string cache_expression_using_match_type = 6;
  bool has_cache_expression_using_match_type() const;
  void clear_cache_expression_using_match_type();
  const std::string& cache_expression_using_match_type() const;
  void set_cache_expression_using_match_type(const std::string& value);
  void set_cache_expression_using_match_type(std::string&& value);
  void set_cache_expression_using_match_type(const char* value);
  void set_cache_expression_using_match_type(const char* value, size_t size);
  std::string* mutable_cache_expression_using_match_type();
  std::string* release_cache_expression_using_match_type();
  void set_allocated_cache_expression_using_match_type(std::string* cache_expression_using_match_type);

  // optional int64 cache_duration_sec = 2;
  bool has_cache_duration_sec() const;
  void clear_cache_duration_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 cache_duration_sec() const;
  void set_cache_duration_sec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
  bool has_threat_type() const;
  void clear_threat_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType threat_type() const;
  void set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value);

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
  bool has_verdict_type() const;
  void clear_verdict_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType verdict_type() const;
  void set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value);

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
  bool has_cache_expression_match_type() const;
  void clear_cache_expression_match_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType cache_expression_match_type() const;
  void set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value);

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupResponse.ThreatInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_expression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_expression_using_match_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 cache_duration_sec_;
  int threat_type_;
  int verdict_type_;
  int cache_expression_match_type_;
  friend struct ::TableStruct_realtimeapi_2eproto;
};
// -------------------------------------------------------------------

class RTLookupResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupResponse) */ {
 public:
  RTLookupResponse();
  virtual ~RTLookupResponse();

  RTLookupResponse(const RTLookupResponse& from);
  RTLookupResponse(RTLookupResponse&& from) noexcept
    : RTLookupResponse() {
    *this = ::std::move(from);
  }

  inline RTLookupResponse& operator=(const RTLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupResponse& operator=(RTLookupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RTLookupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTLookupResponse* internal_default_instance() {
    return reinterpret_cast<const RTLookupResponse*>(
               &_RTLookupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RTLookupResponse& a, RTLookupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RTLookupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTLookupResponse* New() const final {
    return CreateMaybeMessage<RTLookupResponse>(nullptr);
  }

  RTLookupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTLookupResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RTLookupResponse& from);
  void MergeFrom(const RTLookupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupResponse_ThreatInfo ThreatInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kThreatInfoFieldNumber = 1,
  };
  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  int threat_info_size() const;
  void clear_threat_info();
  ::safe_browsing::RTLookupResponse_ThreatInfo* mutable_threat_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >*
      mutable_threat_info();
  const ::safe_browsing::RTLookupResponse_ThreatInfo& threat_info(int index) const;
  ::safe_browsing::RTLookupResponse_ThreatInfo* add_threat_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >&
      threat_info() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo > threat_info_;
  friend struct ::TableStruct_realtimeapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RTLookupRequest

// optional string url = 1;
inline bool RTLookupRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RTLookupRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RTLookupRequest::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.url)
  return url_.GetNoArena();
}
inline void RTLookupRequest::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.url)
}
inline void RTLookupRequest::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.RTLookupRequest.url)
}
inline void RTLookupRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.RTLookupRequest.url)
}
inline void RTLookupRequest::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.RTLookupRequest.url)
}
inline std::string* RTLookupRequest::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RTLookupRequest::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RTLookupRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.url)
}

// optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
inline bool RTLookupRequest::has_lookup_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RTLookupRequest::clear_lookup_type() {
  lookup_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::RTLookupRequest_LookupType RTLookupRequest::lookup_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.lookup_type)
  return static_cast< ::safe_browsing::RTLookupRequest_LookupType >(lookup_type_);
}
inline void RTLookupRequest::set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value) {
  assert(::safe_browsing::RTLookupRequest_LookupType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  lookup_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.lookup_type)
}

// optional .safe_browsing.ChromeUserPopulation population = 3;
inline bool RTLookupRequest::has_population() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::safe_browsing::ChromeUserPopulation& RTLookupRequest::population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.population)
  return p != nullptr ? *p : *reinterpret_cast<const ::safe_browsing::ChromeUserPopulation*>(
      &::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.population)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::mutable_population() {
  _has_bits_[0] |= 0x00000004u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaNoVirtual());
    population_ = p;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.population)
  return population_;
}
inline void RTLookupRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.population)
}

// optional string scoped_oauth_token = 4;
inline bool RTLookupRequest::has_scoped_oauth_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RTLookupRequest::clear_scoped_oauth_token() {
  scoped_oauth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RTLookupRequest::scoped_oauth_token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.scoped_oauth_token)
  return scoped_oauth_token_.GetNoArena();
}
inline void RTLookupRequest::set_scoped_oauth_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scoped_oauth_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.scoped_oauth_token)
}
inline void RTLookupRequest::set_scoped_oauth_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scoped_oauth_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.RTLookupRequest.scoped_oauth_token)
}
inline void RTLookupRequest::set_scoped_oauth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scoped_oauth_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.RTLookupRequest.scoped_oauth_token)
}
inline void RTLookupRequest::set_scoped_oauth_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scoped_oauth_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.RTLookupRequest.scoped_oauth_token)
}
inline std::string* RTLookupRequest::mutable_scoped_oauth_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.scoped_oauth_token)
  return scoped_oauth_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RTLookupRequest::release_scoped_oauth_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.scoped_oauth_token)
  if (!has_scoped_oauth_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scoped_oauth_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RTLookupRequest::set_allocated_scoped_oauth_token(std::string* scoped_oauth_token) {
  if (scoped_oauth_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scoped_oauth_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scoped_oauth_token);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.scoped_oauth_token)
}

// -------------------------------------------------------------------

// RTLookupResponse_ThreatInfo

// optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
inline bool RTLookupResponse_ThreatInfo::has_threat_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_threat_type() {
  threat_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::threat_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.threat_type)
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType >(threat_type_);
}
inline void RTLookupResponse_ThreatInfo::set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  threat_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.threat_type)
}

// optional int64 cache_duration_sec = 2;
inline bool RTLookupResponse_ThreatInfo::has_cache_duration_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_cache_duration_sec() {
  cache_duration_sec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RTLookupResponse_ThreatInfo::cache_duration_sec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_duration_sec)
  return cache_duration_sec_;
}
inline void RTLookupResponse_ThreatInfo::set_cache_duration_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  cache_duration_sec_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_duration_sec)
}

// optional string cache_expression = 3;
inline bool RTLookupResponse_ThreatInfo::has_cache_expression() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression() {
  cache_expression_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RTLookupResponse_ThreatInfo::cache_expression() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  return cache_expression_.GetNoArena();
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}
inline std::string* RTLookupResponse_ThreatInfo::mutable_cache_expression() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  return cache_expression_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RTLookupResponse_ThreatInfo::release_cache_expression() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  if (!has_cache_expression()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cache_expression_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RTLookupResponse_ThreatInfo::set_allocated_cache_expression(std::string* cache_expression) {
  if (cache_expression != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_expression_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_expression);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}

// optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
inline bool RTLookupResponse_ThreatInfo::has_verdict_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_verdict_type() {
  verdict_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::verdict_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.verdict_type)
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType >(verdict_type_);
}
inline void RTLookupResponse_ThreatInfo::set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  verdict_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.verdict_type)
}

// optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
inline bool RTLookupResponse_ThreatInfo::has_cache_expression_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression_match_type() {
  cache_expression_match_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::cache_expression_match_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_match_type)
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType >(cache_expression_match_type_);
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cache_expression_match_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_match_type)
}

// optional string cache_expression_using_match_type = 6;
inline bool RTLookupResponse_ThreatInfo::has_cache_expression_using_match_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression_using_match_type() {
  cache_expression_using_match_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RTLookupResponse_ThreatInfo::cache_expression_using_match_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  return cache_expression_using_match_type_.GetNoArena();
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_using_match_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_expression_using_match_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_using_match_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_expression_using_match_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_using_match_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cache_expression_using_match_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_using_match_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cache_expression_using_match_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}
inline std::string* RTLookupResponse_ThreatInfo::mutable_cache_expression_using_match_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  return cache_expression_using_match_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RTLookupResponse_ThreatInfo::release_cache_expression_using_match_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  if (!has_cache_expression_using_match_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cache_expression_using_match_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RTLookupResponse_ThreatInfo::set_allocated_cache_expression_using_match_type(std::string* cache_expression_using_match_type) {
  if (cache_expression_using_match_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_expression_using_match_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_expression_using_match_type);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}

// -------------------------------------------------------------------

// RTLookupResponse

// repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
inline int RTLookupResponse::threat_info_size() const {
  return threat_info_.size();
}
inline void RTLookupResponse::clear_threat_info() {
  threat_info_.Clear();
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo* RTLookupResponse::mutable_threat_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >*
RTLookupResponse::mutable_threat_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.RTLookupResponse.threat_info)
  return &threat_info_;
}
inline const ::safe_browsing::RTLookupResponse_ThreatInfo& RTLookupResponse::threat_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_.Get(index);
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo* RTLookupResponse::add_threat_info() {
  // @@protoc_insertion_point(field_add:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >&
RTLookupResponse::threat_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::safe_browsing::RTLookupRequest_LookupType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_realtimeapi_2eproto
