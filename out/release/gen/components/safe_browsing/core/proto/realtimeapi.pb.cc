// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtimeapi.proto

#include "realtimeapi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_csd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeUserPopulation_csd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_realtimeapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto;
namespace safe_browsing {
class RTLookupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTLookupRequest> _instance;
} _RTLookupRequest_default_instance_;
class RTLookupResponse_ThreatInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTLookupResponse_ThreatInfo> _instance;
} _RTLookupResponse_ThreatInfo_default_instance_;
class RTLookupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTLookupResponse> _instance;
} _RTLookupResponse_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_RTLookupRequest_realtimeapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_RTLookupRequest_default_instance_;
    new (ptr) ::safe_browsing::RTLookupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::RTLookupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTLookupRequest_realtimeapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RTLookupRequest_realtimeapi_2eproto}, {
      &scc_info_ChromeUserPopulation_csd_2eproto.base,}};

static void InitDefaultsscc_info_RTLookupResponse_realtimeapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_RTLookupResponse_default_instance_;
    new (ptr) ::safe_browsing::RTLookupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::RTLookupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTLookupResponse_realtimeapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RTLookupResponse_realtimeapi_2eproto}, {
      &scc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto.base,}};

static void InitDefaultsscc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_RTLookupResponse_ThreatInfo_default_instance_;
    new (ptr) ::safe_browsing::RTLookupResponse_ThreatInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::RTLookupResponse_ThreatInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto}, {}};

namespace safe_browsing {
bool RTLookupRequest_LookupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupRequest_LookupType_strings[3] = {};

static const char RTLookupRequest_LookupType_names[] =
  "DOWNLOAD"
  "LOOKUP_TYPE_UNSPECIFIED"
  "NAVIGATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupRequest_LookupType_entries[] = {
  { {RTLookupRequest_LookupType_names + 0, 8}, 2 },
  { {RTLookupRequest_LookupType_names + 8, 23}, 0 },
  { {RTLookupRequest_LookupType_names + 31, 10}, 1 },
};

static const int RTLookupRequest_LookupType_entries_by_number[] = {
  1, // 0 -> LOOKUP_TYPE_UNSPECIFIED
  2, // 1 -> NAVIGATION
  0, // 2 -> DOWNLOAD
};

const std::string& RTLookupRequest_LookupType_Name(
    RTLookupRequest_LookupType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupRequest_LookupType_entries,
          RTLookupRequest_LookupType_entries_by_number,
          3, RTLookupRequest_LookupType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupRequest_LookupType_entries,
      RTLookupRequest_LookupType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupRequest_LookupType_strings[idx].get();
}
bool RTLookupRequest_LookupType_Parse(
    const std::string& name, RTLookupRequest_LookupType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupRequest_LookupType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupRequest_LookupType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RTLookupRequest_LookupType RTLookupRequest::LOOKUP_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_LookupType RTLookupRequest::NAVIGATION;
constexpr RTLookupRequest_LookupType RTLookupRequest::DOWNLOAD;
constexpr RTLookupRequest_LookupType RTLookupRequest::LookupType_MIN;
constexpr RTLookupRequest_LookupType RTLookupRequest::LookupType_MAX;
constexpr int RTLookupRequest::LookupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RTLookupResponse_ThreatInfo_ThreatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_ThreatType_strings[5] = {};

static const char RTLookupResponse_ThreatInfo_ThreatType_names[] =
  "SOCIAL_ENGINEERING"
  "THREAT_TYPE_UNSPECIFIED"
  "UNCLEAR_BILLING"
  "UNWANTED_SOFTWARE"
  "WEB_MALWARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_ThreatType_entries[] = {
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 0, 18}, 3 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 18, 23}, 0 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 41, 15}, 5 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 56, 17}, 4 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 73, 11}, 1 },
};

static const int RTLookupResponse_ThreatInfo_ThreatType_entries_by_number[] = {
  1, // 0 -> THREAT_TYPE_UNSPECIFIED
  4, // 1 -> WEB_MALWARE
  0, // 3 -> SOCIAL_ENGINEERING
  3, // 4 -> UNWANTED_SOFTWARE
  2, // 5 -> UNCLEAR_BILLING
};

const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(
    RTLookupResponse_ThreatInfo_ThreatType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_ThreatType_entries,
          RTLookupResponse_ThreatInfo_ThreatType_entries_by_number,
          5, RTLookupResponse_ThreatInfo_ThreatType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_ThreatType_entries,
      RTLookupResponse_ThreatInfo_ThreatType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_ThreatType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_ThreatType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_ThreatType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_ThreatType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_ThreatType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::THREAT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::WEB_MALWARE;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::SOCIAL_ENGINEERING;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::UNWANTED_SOFTWARE;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::UNCLEAR_BILLING;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::ThreatType_MIN;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::ThreatType_MAX;
constexpr int RTLookupResponse_ThreatInfo::ThreatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RTLookupResponse_ThreatInfo_VerdictType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_VerdictType_strings[3] = {};

static const char RTLookupResponse_ThreatInfo_VerdictType_names[] =
  "DANGEROUS"
  "SAFE"
  "VERDICT_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_VerdictType_entries[] = {
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 0, 9}, 100 },
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 9, 4}, 1 },
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 13, 24}, 0 },
};

static const int RTLookupResponse_ThreatInfo_VerdictType_entries_by_number[] = {
  2, // 0 -> VERDICT_TYPE_UNSPECIFIED
  1, // 1 -> SAFE
  0, // 100 -> DANGEROUS
};

const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(
    RTLookupResponse_ThreatInfo_VerdictType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_VerdictType_entries,
          RTLookupResponse_ThreatInfo_VerdictType_entries_by_number,
          3, RTLookupResponse_ThreatInfo_VerdictType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_VerdictType_entries,
      RTLookupResponse_ThreatInfo_VerdictType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_VerdictType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_VerdictType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_VerdictType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_VerdictType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_VerdictType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VERDICT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::SAFE;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::DANGEROUS;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VerdictType_MIN;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VerdictType_MAX;
constexpr int RTLookupResponse_ThreatInfo::VerdictType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings[3] = {};

static const char RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names[] =
  "COVERING_MATCH"
  "EXACT_MATCH"
  "MATCH_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries[] = {
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 0, 14}, 1 },
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 14, 11}, 2 },
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 25, 22}, 0 },
};

static const int RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number[] = {
  2, // 0 -> MATCH_TYPE_UNSPECIFIED
  0, // 1 -> COVERING_MATCH
  1, // 2 -> EXACT_MATCH
};

const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries,
          RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number,
          3, RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries,
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(
    const std::string& name, RTLookupResponse_ThreatInfo_CacheExpressionMatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::MATCH_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::COVERING_MATCH;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::EXACT_MATCH;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::CacheExpressionMatchType_MIN;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::CacheExpressionMatchType_MAX;
constexpr int RTLookupResponse_ThreatInfo::CacheExpressionMatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RTLookupRequest::InitAsDefaultInstance() {
  ::safe_browsing::_RTLookupRequest_default_instance_._instance.get_mutable()->population_ = const_cast< ::safe_browsing::ChromeUserPopulation*>(
      ::safe_browsing::ChromeUserPopulation::internal_default_instance());
}
class RTLookupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RTLookupRequest>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lookup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const RTLookupRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scoped_oauth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ChromeUserPopulation&
RTLookupRequest::_Internal::population(const RTLookupRequest* msg) {
  return *msg->population_;
}
void RTLookupRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RTLookupRequest::RTLookupRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.RTLookupRequest)
}
RTLookupRequest::RTLookupRequest(const RTLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  scoped_oauth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scoped_oauth_token()) {
    scoped_oauth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scoped_oauth_token_);
  }
  if (from.has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  lookup_type_ = from.lookup_type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupRequest)
}

void RTLookupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTLookupRequest_realtimeapi_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scoped_oauth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&population_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lookup_type_) -
      reinterpret_cast<char*>(&population_)) + sizeof(lookup_type_));
}

RTLookupRequest::~RTLookupRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupRequest)
  SharedDtor();
}

void RTLookupRequest::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scoped_oauth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete population_;
}

void RTLookupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTLookupRequest& RTLookupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTLookupRequest_realtimeapi_2eproto.base);
  return *internal_default_instance();
}


void RTLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      scoped_oauth_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
  }
  lookup_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RTLookupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupRequest_LookupType_IsValid(val))) {
            set_lookup_type(static_cast<::safe_browsing::RTLookupRequest_LookupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_population(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scoped_oauth_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_scoped_oauth_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RTLookupRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.RTLookupRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::RTLookupRequest_LookupType_IsValid(value)) {
            set_lookup_type(static_cast< ::safe_browsing::RTLookupRequest_LookupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.ChromeUserPopulation population = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_population()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scoped_oauth_token = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scoped_oauth_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.RTLookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.RTLookupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RTLookupRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.RTLookupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->lookup_type(), output);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::population(this), output);
  }

  // optional string scoped_oauth_token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scoped_oauth_token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.RTLookupRequest)
}

size_t RTLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string scoped_oauth_token = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->scoped_oauth_token());
    }

    // optional .safe_browsing.ChromeUserPopulation population = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lookup_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RTLookupRequest*>(
      &from));
}

void RTLookupRequest::MergeFrom(const RTLookupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      scoped_oauth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scoped_oauth_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from.population());
    }
    if (cached_has_bits & 0x00000008u) {
      lookup_type_ = from.lookup_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTLookupRequest::CopyFrom(const RTLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupRequest::IsInitialized() const {
  return true;
}

void RTLookupRequest::InternalSwap(RTLookupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scoped_oauth_token_.Swap(&other->scoped_oauth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(population_, other->population_);
  swap(lookup_type_, other->lookup_type_);
}

std::string RTLookupRequest::GetTypeName() const {
  return "safe_browsing.RTLookupRequest";
}


// ===================================================================

void RTLookupResponse_ThreatInfo::InitAsDefaultInstance() {
}
class RTLookupResponse_ThreatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RTLookupResponse_ThreatInfo>()._has_bits_);
  static void set_has_threat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verdict_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache_expression_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cache_expression_using_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RTLookupResponse_ThreatInfo::RTLookupResponse_ThreatInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.RTLookupResponse.ThreatInfo)
}
RTLookupResponse_ThreatInfo::RTLookupResponse_ThreatInfo(const RTLookupResponse_ThreatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_expression()) {
    cache_expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_expression_);
  }
  cache_expression_using_match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_expression_using_match_type()) {
    cache_expression_using_match_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_expression_using_match_type_);
  }
  ::memcpy(&cache_duration_sec_, &from.cache_duration_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_expression_match_type_) -
    reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupResponse.ThreatInfo)
}

void RTLookupResponse_ThreatInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto.base);
  cache_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_expression_using_match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cache_duration_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_expression_match_type_) -
      reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
}

RTLookupResponse_ThreatInfo::~RTLookupResponse_ThreatInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupResponse.ThreatInfo)
  SharedDtor();
}

void RTLookupResponse_ThreatInfo::SharedDtor() {
  cache_expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_expression_using_match_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RTLookupResponse_ThreatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTLookupResponse_ThreatInfo& RTLookupResponse_ThreatInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTLookupResponse_ThreatInfo_realtimeapi_2eproto.base);
  return *internal_default_instance();
}


void RTLookupResponse_ThreatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupResponse.ThreatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_expression_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_expression_using_match_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&cache_duration_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_expression_match_type_) -
        reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RTLookupResponse_ThreatInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType_IsValid(val))) {
            set_threat_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 cache_duration_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cache_duration_sec(&has_bits);
          cache_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache_expression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cache_expression(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType_IsValid(val))) {
            set_verdict_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(val))) {
            set_cache_expression_match_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string cache_expression_using_match_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cache_expression_using_match_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RTLookupResponse_ThreatInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.RTLookupResponse.ThreatInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType_IsValid(value)) {
            set_threat_type(static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cache_duration_sec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cache_duration_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_duration_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_expression = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType_IsValid(value)) {
            set_verdict_type(static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(value)) {
            set_cache_expression_match_type(static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_expression_using_match_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_expression_using_match_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.RTLookupResponse.ThreatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.RTLookupResponse.ThreatInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RTLookupResponse_ThreatInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.RTLookupResponse.ThreatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->threat_type(), output);
  }

  // optional int64 cache_duration_sec = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->cache_duration_sec(), output);
  }

  // optional string cache_expression = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cache_expression(), output);
  }

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->verdict_type(), output);
  }

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->cache_expression_match_type(), output);
  }

  // optional string cache_expression_using_match_type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cache_expression_using_match_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.RTLookupResponse.ThreatInfo)
}

size_t RTLookupResponse_ThreatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupResponse.ThreatInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cache_expression = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache_expression());
    }

    // optional string cache_expression_using_match_type = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache_expression_using_match_type());
    }

    // optional int64 cache_duration_sec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cache_duration_sec());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->threat_type());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->verdict_type());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cache_expression_match_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupResponse_ThreatInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RTLookupResponse_ThreatInfo*>(
      &from));
}

void RTLookupResponse_ThreatInfo::MergeFrom(const RTLookupResponse_ThreatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupResponse.ThreatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cache_expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_expression_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cache_expression_using_match_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_expression_using_match_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      cache_duration_sec_ = from.cache_duration_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      threat_type_ = from.threat_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      verdict_type_ = from.verdict_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      cache_expression_match_type_ = from.cache_expression_match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTLookupResponse_ThreatInfo::CopyFrom(const RTLookupResponse_ThreatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupResponse.ThreatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupResponse_ThreatInfo::IsInitialized() const {
  return true;
}

void RTLookupResponse_ThreatInfo::InternalSwap(RTLookupResponse_ThreatInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_expression_.Swap(&other->cache_expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cache_expression_using_match_type_.Swap(&other->cache_expression_using_match_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cache_duration_sec_, other->cache_duration_sec_);
  swap(threat_type_, other->threat_type_);
  swap(verdict_type_, other->verdict_type_);
  swap(cache_expression_match_type_, other->cache_expression_match_type_);
}

std::string RTLookupResponse_ThreatInfo::GetTypeName() const {
  return "safe_browsing.RTLookupResponse.ThreatInfo";
}


// ===================================================================

void RTLookupResponse::InitAsDefaultInstance() {
}
class RTLookupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RTLookupResponse>()._has_bits_);
};

RTLookupResponse::RTLookupResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.RTLookupResponse)
}
RTLookupResponse::RTLookupResponse(const RTLookupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      threat_info_(from.threat_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupResponse)
}

void RTLookupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTLookupResponse_realtimeapi_2eproto.base);
}

RTLookupResponse::~RTLookupResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupResponse)
  SharedDtor();
}

void RTLookupResponse::SharedDtor() {
}

void RTLookupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTLookupResponse& RTLookupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTLookupResponse_realtimeapi_2eproto.base);
  return *internal_default_instance();
}


void RTLookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threat_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RTLookupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_threat_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RTLookupResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.RTLookupResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_threat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.RTLookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.RTLookupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RTLookupResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.RTLookupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->threat_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->threat_info(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.RTLookupResponse)
}

size_t RTLookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->threat_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->threat_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RTLookupResponse*>(
      &from));
}

void RTLookupResponse::MergeFrom(const RTLookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threat_info_.MergeFrom(from.threat_info_);
}

void RTLookupResponse::CopyFrom(const RTLookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupResponse::IsInitialized() const {
  return true;
}

void RTLookupResponse::InternalSwap(RTLookupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&threat_info_)->InternalSwap(CastToBase(&other->threat_info_));
}

std::string RTLookupResponse::GetTypeName() const {
  return "safe_browsing.RTLookupResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupRequest* Arena::CreateMaybeMessage< ::safe_browsing::RTLookupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::RTLookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupResponse_ThreatInfo* Arena::CreateMaybeMessage< ::safe_browsing::RTLookupResponse_ThreatInfo >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::RTLookupResponse_ThreatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupResponse* Arena::CreateMaybeMessage< ::safe_browsing::RTLookupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::RTLookupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
