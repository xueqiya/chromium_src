// components/safe_browsing/content/common/safe_browsing.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SAFE_BROWSING_CONTENT_COMMON_SAFE_BROWSING_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SAFE_BROWSING_CONTENT_COMMON_SAFE_BROWSING_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace safe_browsing {
namespace mojom {
namespace internal {
class  SafeBrowsing_CreateCheckerAndCheck_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeBrowsing_CreateCheckerAndCheck_Params_Data));
      new (data()) SafeBrowsing_CreateCheckerAndCheck_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeBrowsing_CreateCheckerAndCheck_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeBrowsing_CreateCheckerAndCheck_Params_Data>(index_);
    }
    SafeBrowsing_CreateCheckerAndCheck_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t render_frame_id;
  mojo::internal::Handle_Data receiver;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> method;
  mojo::internal::Pointer<::network::mojom::internal::HttpRequestHeaders_Data> headers;
  int32_t load_flags;
  int32_t resource_type;
  uint8_t has_user_gesture : 1;
  uint8_t originated_from_service_worker : 1;
  uint8_t padfinal_[7];

 private:
  SafeBrowsing_CreateCheckerAndCheck_Params_Data();
  ~SafeBrowsing_CreateCheckerAndCheck_Params_Data() = delete;
};
static_assert(sizeof(SafeBrowsing_CreateCheckerAndCheck_Params_Data) == 56,
              "Bad sizeof(SafeBrowsing_CreateCheckerAndCheck_Params_Data)");
class  SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data));
      new (data()) SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data>(index_);
    }
    SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data slow_check_notifier;
  uint8_t proceed : 1;
  uint8_t showed_interstitial : 1;
  uint8_t padfinal_[3];

 private:
  SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data();
  ~SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data() = delete;
};
static_assert(sizeof(SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data) == 16,
              "Bad sizeof(SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data)");
class  SafeBrowsing_Clone_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeBrowsing_Clone_Params_Data));
      new (data()) SafeBrowsing_Clone_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeBrowsing_Clone_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeBrowsing_Clone_Params_Data>(index_);
    }
    SafeBrowsing_Clone_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  SafeBrowsing_Clone_Params_Data();
  ~SafeBrowsing_Clone_Params_Data() = delete;
};
static_assert(sizeof(SafeBrowsing_Clone_Params_Data) == 16,
              "Bad sizeof(SafeBrowsing_Clone_Params_Data)");
class  ThreatReporter_GetThreatDOMDetails_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThreatReporter_GetThreatDOMDetails_Params_Data));
      new (data()) ThreatReporter_GetThreatDOMDetails_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThreatReporter_GetThreatDOMDetails_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThreatReporter_GetThreatDOMDetails_Params_Data>(index_);
    }
    ThreatReporter_GetThreatDOMDetails_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ThreatReporter_GetThreatDOMDetails_Params_Data();
  ~ThreatReporter_GetThreatDOMDetails_Params_Data() = delete;
};
static_assert(sizeof(ThreatReporter_GetThreatDOMDetails_Params_Data) == 8,
              "Bad sizeof(ThreatReporter_GetThreatDOMDetails_Params_Data)");
class  ThreatReporter_GetThreatDOMDetails_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThreatReporter_GetThreatDOMDetails_ResponseParams_Data));
      new (data()) ThreatReporter_GetThreatDOMDetails_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThreatReporter_GetThreatDOMDetails_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThreatReporter_GetThreatDOMDetails_ResponseParams_Data>(index_);
    }
    ThreatReporter_GetThreatDOMDetails_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ThreatDOMDetailsNode_Data>>> nodes;

 private:
  ThreatReporter_GetThreatDOMDetails_ResponseParams_Data();
  ~ThreatReporter_GetThreatDOMDetails_ResponseParams_Data() = delete;
};
static_assert(sizeof(ThreatReporter_GetThreatDOMDetails_ResponseParams_Data) == 16,
              "Bad sizeof(ThreatReporter_GetThreatDOMDetails_ResponseParams_Data)");
class  PhishingModelSetter_SetPhishingModel_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PhishingModelSetter_SetPhishingModel_Params_Data));
      new (data()) PhishingModelSetter_SetPhishingModel_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PhishingModelSetter_SetPhishingModel_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PhishingModelSetter_SetPhishingModel_Params_Data>(index_);
    }
    PhishingModelSetter_SetPhishingModel_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> model;

 private:
  PhishingModelSetter_SetPhishingModel_Params_Data();
  ~PhishingModelSetter_SetPhishingModel_Params_Data() = delete;
};
static_assert(sizeof(PhishingModelSetter_SetPhishingModel_Params_Data) == 16,
              "Bad sizeof(PhishingModelSetter_SetPhishingModel_Params_Data)");

}  // namespace internal
class SafeBrowsing_CreateCheckerAndCheck_ParamsDataView {
 public:
  SafeBrowsing_CreateCheckerAndCheck_ParamsDataView() {}

  SafeBrowsing_CreateCheckerAndCheck_ParamsDataView(
      internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t render_frame_id() const {
    return data_->render_frame_id;
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::SafeBrowsingUrlCheckerInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMethod(UserType* output) {
    auto* pointer = data_->method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetHeadersDataView(
      ::network::mojom::HttpRequestHeadersDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeaders(UserType* output) {
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpRequestHeadersDataView>(
        pointer, output, context_);
  }
  int32_t load_flags() const {
    return data_->load_flags;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResourceType(UserType* output) const {
    auto data_value = data_->resource_type;
    return mojo::internal::Deserialize<::content::mojom::ResourceType>(
        data_value, output);
  }

  ::content::mojom::ResourceType resource_type() const {
    return static_cast<::content::mojom::ResourceType>(data_->resource_type);
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
  bool originated_from_service_worker() const {
    return data_->originated_from_service_worker;
  }
 private:
  internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeBrowsing_CreateCheckerAndCheck_ResponseParamsDataView {
 public:
  SafeBrowsing_CreateCheckerAndCheck_ResponseParamsDataView() {}

  SafeBrowsing_CreateCheckerAndCheck_ResponseParamsDataView(
      internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSlowCheckNotifier() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::UrlCheckNotifierInterfaceBase>>(
            &data_->slow_check_notifier, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool proceed() const {
    return data_->proceed;
  }
  bool showed_interstitial() const {
    return data_->showed_interstitial;
  }
 private:
  internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeBrowsing_Clone_ParamsDataView {
 public:
  SafeBrowsing_Clone_ParamsDataView() {}

  SafeBrowsing_Clone_ParamsDataView(
      internal::SafeBrowsing_Clone_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::SafeBrowsingInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SafeBrowsing_Clone_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ThreatReporter_GetThreatDOMDetails_ParamsDataView {
 public:
  ThreatReporter_GetThreatDOMDetails_ParamsDataView() {}

  ThreatReporter_GetThreatDOMDetails_ParamsDataView(
      internal::ThreatReporter_GetThreatDOMDetails_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ThreatReporter_GetThreatDOMDetails_Params_Data* data_ = nullptr;
};

class ThreatReporter_GetThreatDOMDetails_ResponseParamsDataView {
 public:
  ThreatReporter_GetThreatDOMDetails_ResponseParamsDataView() {}

  ThreatReporter_GetThreatDOMDetails_ResponseParamsDataView(
      internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNodesDataView(
      mojo::ArrayDataView<ThreatDOMDetailsNodeDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNodes(UserType* output) {
    auto* pointer = data_->nodes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::safe_browsing::mojom::ThreatDOMDetailsNodeDataView>>(
        pointer, output, context_);
  }
 private:
  internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PhishingModelSetter_SetPhishingModel_ParamsDataView {
 public:
  PhishingModelSetter_SetPhishingModel_ParamsDataView() {}

  PhishingModelSetter_SetPhishingModel_ParamsDataView(
      internal::PhishingModelSetter_SetPhishingModel_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetModelDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadModel(UserType* output) {
    auto* pointer = data_->model.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PhishingModelSetter_SetPhishingModel_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void SafeBrowsing_CreateCheckerAndCheck_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void SafeBrowsing_CreateCheckerAndCheck_ParamsDataView::GetMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->method.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SafeBrowsing_CreateCheckerAndCheck_ParamsDataView::GetHeadersDataView(
    ::network::mojom::HttpRequestHeadersDataView* output) {
  auto pointer = data_->headers.Get();
  *output = ::network::mojom::HttpRequestHeadersDataView(pointer, context_);
}








inline void ThreatReporter_GetThreatDOMDetails_ResponseParamsDataView::GetNodesDataView(
    mojo::ArrayDataView<ThreatDOMDetailsNodeDataView>* output) {
  auto pointer = data_->nodes.Get();
  *output = mojo::ArrayDataView<ThreatDOMDetailsNodeDataView>(pointer, context_);
}


inline void PhishingModelSetter_SetPhishingModel_ParamsDataView::GetModelDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace safe_browsing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_SAFE_BROWSING_CONTENT_COMMON_SAFE_BROWSING_MOJOM_PARAMS_DATA_H_