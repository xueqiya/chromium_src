// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variations_seed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_variations_5fseed_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_variations_5fseed_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "study.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_variations_5fseed_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_variations_5fseed_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace variations {
class VariationsSeed;
class VariationsSeedDefaultTypeInternal;
extern VariationsSeedDefaultTypeInternal _VariationsSeed_default_instance_;
}  // namespace variations
PROTOBUF_NAMESPACE_OPEN
template<> ::variations::VariationsSeed* Arena::CreateMaybeMessage<::variations::VariationsSeed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace variations {

// ===================================================================

class VariationsSeed :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:variations.VariationsSeed) */ {
 public:
  VariationsSeed();
  virtual ~VariationsSeed();

  VariationsSeed(const VariationsSeed& from);
  VariationsSeed(VariationsSeed&& from) noexcept
    : VariationsSeed() {
    *this = ::std::move(from);
  }

  inline VariationsSeed& operator=(const VariationsSeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariationsSeed& operator=(VariationsSeed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VariationsSeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariationsSeed* internal_default_instance() {
    return reinterpret_cast<const VariationsSeed*>(
               &_VariationsSeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VariationsSeed& a, VariationsSeed& b) {
    a.Swap(&b);
  }
  inline void Swap(VariationsSeed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariationsSeed* New() const final {
    return CreateMaybeMessage<VariationsSeed>(nullptr);
  }

  VariationsSeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariationsSeed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VariationsSeed& from);
  void MergeFrom(const VariationsSeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VariationsSeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variations.VariationsSeed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudyFieldNumber = 2,
    kSerialNumberFieldNumber = 1,
    kCountryCodeFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // repeated .variations.Study study = 2;
  int study_size() const;
  void clear_study();
  ::variations::Study* mutable_study(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Study >*
      mutable_study();
  const ::variations::Study& study(int index) const;
  ::variations::Study* add_study();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Study >&
      study() const;

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);

  // optional string country_code = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_country_code() const;
  PROTOBUF_DEPRECATED void clear_country_code();
  PROTOBUF_DEPRECATED const std::string& country_code() const;
  PROTOBUF_DEPRECATED void set_country_code(const std::string& value);
  PROTOBUF_DEPRECATED void set_country_code(std::string&& value);
  PROTOBUF_DEPRECATED void set_country_code(const char* value);
  PROTOBUF_DEPRECATED void set_country_code(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_country_code();
  PROTOBUF_DEPRECATED std::string* release_country_code();
  PROTOBUF_DEPRECATED void set_allocated_country_code(std::string* country_code);

  // optional string version = 4;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:variations.VariationsSeed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Study > study_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_variations_5fseed_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VariationsSeed

// optional string serial_number = 1;
inline bool VariationsSeed::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VariationsSeed::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariationsSeed::serial_number() const {
  // @@protoc_insertion_point(field_get:variations.VariationsSeed.serial_number)
  return serial_number_.GetNoArena();
}
inline void VariationsSeed::set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:variations.VariationsSeed.serial_number)
}
inline void VariationsSeed::set_serial_number(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:variations.VariationsSeed.serial_number)
}
inline void VariationsSeed::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serial_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:variations.VariationsSeed.serial_number)
}
inline void VariationsSeed::set_serial_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:variations.VariationsSeed.serial_number)
}
inline std::string* VariationsSeed::mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:variations.VariationsSeed.serial_number)
  return serial_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariationsSeed::release_serial_number() {
  // @@protoc_insertion_point(field_release:variations.VariationsSeed.serial_number)
  if (!has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serial_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariationsSeed::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:variations.VariationsSeed.serial_number)
}

// repeated .variations.Study study = 2;
inline int VariationsSeed::study_size() const {
  return study_.size();
}
inline ::variations::Study* VariationsSeed::mutable_study(int index) {
  // @@protoc_insertion_point(field_mutable:variations.VariationsSeed.study)
  return study_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Study >*
VariationsSeed::mutable_study() {
  // @@protoc_insertion_point(field_mutable_list:variations.VariationsSeed.study)
  return &study_;
}
inline const ::variations::Study& VariationsSeed::study(int index) const {
  // @@protoc_insertion_point(field_get:variations.VariationsSeed.study)
  return study_.Get(index);
}
inline ::variations::Study* VariationsSeed::add_study() {
  // @@protoc_insertion_point(field_add:variations.VariationsSeed.study)
  return study_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Study >&
VariationsSeed::study() const {
  // @@protoc_insertion_point(field_list:variations.VariationsSeed.study)
  return study_;
}

// optional string country_code = 3 [deprecated = true];
inline bool VariationsSeed::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VariationsSeed::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VariationsSeed::country_code() const {
  // @@protoc_insertion_point(field_get:variations.VariationsSeed.country_code)
  return country_code_.GetNoArena();
}
inline void VariationsSeed::set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:variations.VariationsSeed.country_code)
}
inline void VariationsSeed::set_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:variations.VariationsSeed.country_code)
}
inline void VariationsSeed::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:variations.VariationsSeed.country_code)
}
inline void VariationsSeed::set_country_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:variations.VariationsSeed.country_code)
}
inline std::string* VariationsSeed::mutable_country_code() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:variations.VariationsSeed.country_code)
  return country_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariationsSeed::release_country_code() {
  // @@protoc_insertion_point(field_release:variations.VariationsSeed.country_code)
  if (!has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return country_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariationsSeed::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  country_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:variations.VariationsSeed.country_code)
}

// optional string version = 4;
inline bool VariationsSeed::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VariationsSeed::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VariationsSeed::version() const {
  // @@protoc_insertion_point(field_get:variations.VariationsSeed.version)
  return version_.GetNoArena();
}
inline void VariationsSeed::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:variations.VariationsSeed.version)
}
inline void VariationsSeed::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:variations.VariationsSeed.version)
}
inline void VariationsSeed::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:variations.VariationsSeed.version)
}
inline void VariationsSeed::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:variations.VariationsSeed.version)
}
inline std::string* VariationsSeed::mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:variations.VariationsSeed.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariationsSeed::release_version() {
  // @@protoc_insertion_point(field_release:variations.VariationsSeed.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariationsSeed::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:variations.VariationsSeed.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_variations_5fseed_2eproto
