// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/viz/service/frame_sinks/ExternalBeginFrameSourceAndroid

#ifndef org_chromium_components_viz_service_frame_sinks_ExternalBeginFrameSourceAndroid_JNI
#define org_chromium_components_viz_service_frame_sinks_ExternalBeginFrameSourceAndroid_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid[];
const char
    kClassPath_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid[] =
    "org/chromium/components/viz/service/frame_sinks/ExternalBeginFrameSourceAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(nullptr);
#ifndef org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz_defined
#define org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz_defined
inline jclass
    org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid,
      &g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace viz {

JNI_GENERATOR_EXPORT void Java_J_N_Mhc_1M_1H_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeExternalBeginFrameSourceAndroid,
    jobject caller,
    jlong vsyncTimeMicros,
    jlong vsyncPeriodMicros) {
  ExternalBeginFrameSourceAndroid* native =
      reinterpret_cast<ExternalBeginFrameSourceAndroid*>(nativeExternalBeginFrameSourceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVSync");
  return native->OnVSync(env, base::android::JavaParamRef<jobject>(env, caller), vsyncTimeMicros,
      vsyncPeriodMicros);
}


static std::atomic<jmethodID>
    g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ExternalBeginFrameSourceAndroid_Constructor(JNIEnv* env, jlong
    nativeExternalBeginFrameSourceAndroid,
    jfloat refreshRate) {
  jclass clazz =
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(JF)V",
&g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeExternalBeginFrameSourceAndroid, refreshRate);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_setEnabled(nullptr);
static void Java_ExternalBeginFrameSourceAndroid_setEnabled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean enabled) {
  jclass clazz =
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setEnabled",
          "(Z)V",
&g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_setEnabled);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, enabled);
}

static std::atomic<jmethodID>
    g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_updateRefreshRate(nullptr);
static void Java_ExternalBeginFrameSourceAndroid_updateRefreshRate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat refreshRate) {
  jclass clazz =
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateRefreshRate",
          "(F)V",
&g_org_chromium_components_viz_service_frame_1sinks_ExternalBeginFrameSourceAndroid_updateRefreshRate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, refreshRate);
}

}  // namespace viz

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_viz_service_frame_sinks_ExternalBeginFrameSourceAndroid_JNI
