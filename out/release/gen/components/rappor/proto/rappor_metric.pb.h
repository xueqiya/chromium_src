// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rappor_metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rappor_5fmetric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rappor_5fmetric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rappor_5fmetric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rappor_5fmetric_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace rappor {
class RapporReports;
class RapporReportsDefaultTypeInternal;
extern RapporReportsDefaultTypeInternal _RapporReports_default_instance_;
class RapporReports_Report;
class RapporReports_ReportDefaultTypeInternal;
extern RapporReports_ReportDefaultTypeInternal _RapporReports_Report_default_instance_;
}  // namespace rappor
PROTOBUF_NAMESPACE_OPEN
template<> ::rappor::RapporReports* Arena::CreateMaybeMessage<::rappor::RapporReports>(Arena*);
template<> ::rappor::RapporReports_Report* Arena::CreateMaybeMessage<::rappor::RapporReports_Report>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rappor {

// ===================================================================

class RapporReports_Report :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rappor.RapporReports.Report) */ {
 public:
  RapporReports_Report();
  virtual ~RapporReports_Report();

  RapporReports_Report(const RapporReports_Report& from);
  RapporReports_Report(RapporReports_Report&& from) noexcept
    : RapporReports_Report() {
    *this = ::std::move(from);
  }

  inline RapporReports_Report& operator=(const RapporReports_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline RapporReports_Report& operator=(RapporReports_Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RapporReports_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RapporReports_Report* internal_default_instance() {
    return reinterpret_cast<const RapporReports_Report*>(
               &_RapporReports_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RapporReports_Report& a, RapporReports_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(RapporReports_Report* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RapporReports_Report* New() const final {
    return CreateMaybeMessage<RapporReports_Report>(nullptr);
  }

  RapporReports_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RapporReports_Report>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RapporReports_Report& from);
  void MergeFrom(const RapporReports_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RapporReports_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rappor.RapporReports.Report";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsFieldNumber = 2,
    kNameHashFieldNumber = 1,
  };
  // optional bytes bits = 2;
  bool has_bits() const;
  void clear_bits();
  const std::string& bits() const;
  void set_bits(const std::string& value);
  void set_bits(std::string&& value);
  void set_bits(const char* value);
  void set_bits(const void* value, size_t size);
  std::string* mutable_bits();
  std::string* release_bits();
  void set_allocated_bits(std::string* bits);

  // optional fixed64 name_hash = 1;
  bool has_name_hash() const;
  void clear_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash() const;
  void set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:rappor.RapporReports.Report)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bits_;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash_;
  friend struct ::TableStruct_rappor_5fmetric_2eproto;
};
// -------------------------------------------------------------------

class RapporReports :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rappor.RapporReports) */ {
 public:
  RapporReports();
  virtual ~RapporReports();

  RapporReports(const RapporReports& from);
  RapporReports(RapporReports&& from) noexcept
    : RapporReports() {
    *this = ::std::move(from);
  }

  inline RapporReports& operator=(const RapporReports& from) {
    CopyFrom(from);
    return *this;
  }
  inline RapporReports& operator=(RapporReports&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RapporReports& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RapporReports* internal_default_instance() {
    return reinterpret_cast<const RapporReports*>(
               &_RapporReports_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RapporReports& a, RapporReports& b) {
    a.Swap(&b);
  }
  inline void Swap(RapporReports* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RapporReports* New() const final {
    return CreateMaybeMessage<RapporReports>(nullptr);
  }

  RapporReports* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RapporReports>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RapporReports& from);
  void MergeFrom(const RapporReports& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RapporReports* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rappor.RapporReports";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RapporReports_Report Report;

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 2,
    kCohortFieldNumber = 1,
  };
  // repeated .rappor.RapporReports.Report report = 2;
  int report_size() const;
  void clear_report();
  ::rappor::RapporReports_Report* mutable_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rappor::RapporReports_Report >*
      mutable_report();
  const ::rappor::RapporReports_Report& report(int index) const;
  ::rappor::RapporReports_Report* add_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rappor::RapporReports_Report >&
      report() const;

  // optional int32 cohort = 1;
  bool has_cohort() const;
  void clear_cohort();
  ::PROTOBUF_NAMESPACE_ID::int32 cohort() const;
  void set_cohort(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:rappor.RapporReports)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rappor::RapporReports_Report > report_;
  ::PROTOBUF_NAMESPACE_ID::int32 cohort_;
  friend struct ::TableStruct_rappor_5fmetric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RapporReports_Report

// optional fixed64 name_hash = 1;
inline bool RapporReports_Report::has_name_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RapporReports_Report::clear_name_hash() {
  name_hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RapporReports_Report::name_hash() const {
  // @@protoc_insertion_point(field_get:rappor.RapporReports.Report.name_hash)
  return name_hash_;
}
inline void RapporReports_Report::set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:rappor.RapporReports.Report.name_hash)
}

// optional bytes bits = 2;
inline bool RapporReports_Report::has_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RapporReports_Report::clear_bits() {
  bits_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RapporReports_Report::bits() const {
  // @@protoc_insertion_point(field_get:rappor.RapporReports.Report.bits)
  return bits_.GetNoArena();
}
inline void RapporReports_Report::set_bits(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bits_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rappor.RapporReports.Report.bits)
}
inline void RapporReports_Report::set_bits(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bits_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rappor.RapporReports.Report.bits)
}
inline void RapporReports_Report::set_bits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bits_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rappor.RapporReports.Report.bits)
}
inline void RapporReports_Report::set_bits(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bits_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rappor.RapporReports.Report.bits)
}
inline std::string* RapporReports_Report::mutable_bits() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:rappor.RapporReports.Report.bits)
  return bits_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RapporReports_Report::release_bits() {
  // @@protoc_insertion_point(field_release:rappor.RapporReports.Report.bits)
  if (!has_bits()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bits_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RapporReports_Report::set_allocated_bits(std::string* bits) {
  if (bits != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bits_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bits);
  // @@protoc_insertion_point(field_set_allocated:rappor.RapporReports.Report.bits)
}

// -------------------------------------------------------------------

// RapporReports

// optional int32 cohort = 1;
inline bool RapporReports::has_cohort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RapporReports::clear_cohort() {
  cohort_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RapporReports::cohort() const {
  // @@protoc_insertion_point(field_get:rappor.RapporReports.cohort)
  return cohort_;
}
inline void RapporReports::set_cohort(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cohort_ = value;
  // @@protoc_insertion_point(field_set:rappor.RapporReports.cohort)
}

// repeated .rappor.RapporReports.Report report = 2;
inline int RapporReports::report_size() const {
  return report_.size();
}
inline void RapporReports::clear_report() {
  report_.Clear();
}
inline ::rappor::RapporReports_Report* RapporReports::mutable_report(int index) {
  // @@protoc_insertion_point(field_mutable:rappor.RapporReports.report)
  return report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rappor::RapporReports_Report >*
RapporReports::mutable_report() {
  // @@protoc_insertion_point(field_mutable_list:rappor.RapporReports.report)
  return &report_;
}
inline const ::rappor::RapporReports_Report& RapporReports::report(int index) const {
  // @@protoc_insertion_point(field_get:rappor.RapporReports.report)
  return report_.Get(index);
}
inline ::rappor::RapporReports_Report* RapporReports::add_report() {
  // @@protoc_insertion_point(field_add:rappor.RapporReports.report)
  return report_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rappor::RapporReports_Report >&
RapporReports::report() const {
  // @@protoc_insertion_point(field_list:rappor.RapporReports.report)
  return report_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rappor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rappor_5fmetric_2eproto
