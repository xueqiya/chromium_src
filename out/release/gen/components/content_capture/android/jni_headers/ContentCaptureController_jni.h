// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/content_capture/ContentCaptureController

#ifndef org_chromium_components_content_capture_ContentCaptureController_JNI
#define org_chromium_components_content_capture_ContentCaptureController_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_content_1capture_ContentCaptureController[];
const char kClassPath_org_chromium_components_content_1capture_ContentCaptureController[] =
    "org/chromium/components/content_capture/ContentCaptureController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_content_1capture_ContentCaptureController_clazz(nullptr);
#ifndef org_chromium_components_content_1capture_ContentCaptureController_clazz_defined
#define org_chromium_components_content_1capture_ContentCaptureController_clazz_defined
inline jclass org_chromium_components_content_1capture_ContentCaptureController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_content_1capture_ContentCaptureController,
      &g_org_chromium_components_content_1capture_ContentCaptureController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content_capture {

static jlong JNI_ContentCaptureController_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& contentCaptureController);

JNI_GENERATOR_EXPORT jlong Java_J_N_MM_0002406MFa(
    JNIEnv* env,
    jclass jcaller,
    jobject contentCaptureController) {
  return JNI_ContentCaptureController_Init(env, base::android::JavaParamRef<jobject>(env,
      contentCaptureController));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMJ_00024SEno(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentCaptureController,
    jobject caller,
    jobjectArray whitelist,
    jbooleanArray isRegex) {
  ContentCaptureController* native =
      reinterpret_cast<ContentCaptureController*>(nativeContentCaptureController);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWhitelist");
  return native->SetWhitelist(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobjectArray>(env, whitelist),
      base::android::JavaParamRef<jbooleanArray>(env, isRegex));
}


static std::atomic<jmethodID>
    g_org_chromium_components_content_1capture_ContentCaptureController_pullWhitelist(nullptr);
static void Java_ContentCaptureController_pullWhitelist(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_content_1capture_ContentCaptureController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_content_1capture_ContentCaptureController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "pullWhitelist",
          "()V",
          &g_org_chromium_components_content_1capture_ContentCaptureController_pullWhitelist);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content_capture

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_content_capture_ContentCaptureController_JNI
