// components/content_capture/common/content_capture.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/content_capture/common/content_capture.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/content_capture/common/content_capture.mojom-params-data.h"
#include "components/content_capture/common/content_capture.mojom-shared-message-ids.h"

#include "components/content_capture/common/content_capture.mojom-import-headers.h"


#ifndef COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_JUMBO_H_
#define COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_JUMBO_H_
#include "components/content_capture/common/content_capture_mojom_traits.h"
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif
namespace content_capture {
namespace mojom {
const char ContentCaptureReceiver::Name_[] = "content_capture.mojom.ContentCaptureReceiver";

ContentCaptureReceiverProxy::ContentCaptureReceiverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ContentCaptureReceiverProxy::DidCaptureContent(
    const ::content_capture::ContentCaptureData& in_data, bool in_first_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content_capture::mojom::ContentCaptureReceiver::DidCaptureContent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentCaptureReceiver_DidCaptureContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content_capture::mojom::internal::ContentCaptureReceiver_DidCaptureContent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->data)::BaseType::BufferWriter
      data_writer;
  mojo::internal::Serialize<::content_capture::mojom::ContentCaptureDataDataView>(
      in_data, buffer, &data_writer, &serialization_context);
  params->data.Set(
      data_writer.is_null() ? nullptr : data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in ContentCaptureReceiver.DidCaptureContent request");
  params->first_data = in_first_data;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentCaptureReceiver::Name_);
  message.set_method_name("DidCaptureContent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void ContentCaptureReceiverProxy::DidUpdateContent(
    const ::content_capture::ContentCaptureData& in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content_capture::mojom::ContentCaptureReceiver::DidUpdateContent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentCaptureReceiver_DidUpdateContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content_capture::mojom::internal::ContentCaptureReceiver_DidUpdateContent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->data)::BaseType::BufferWriter
      data_writer;
  mojo::internal::Serialize<::content_capture::mojom::ContentCaptureDataDataView>(
      in_data, buffer, &data_writer, &serialization_context);
  params->data.Set(
      data_writer.is_null() ? nullptr : data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in ContentCaptureReceiver.DidUpdateContent request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentCaptureReceiver::Name_);
  message.set_method_name("DidUpdateContent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void ContentCaptureReceiverProxy::DidRemoveContent(
    const std::vector<int64_t>& in_ids) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content_capture::mojom::ContentCaptureReceiver::DidRemoveContent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentCaptureReceiver_DidRemoveContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content_capture::mojom::internal::ContentCaptureReceiver_DidRemoveContent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->ids)::BaseType::BufferWriter
      ids_writer;
  const mojo::internal::ContainerValidateParams ids_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
      in_ids, buffer, &ids_writer, &ids_validate_params,
      &serialization_context);
  params->ids.Set(
      ids_writer.is_null() ? nullptr : ids_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->ids.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null ids in ContentCaptureReceiver.DidRemoveContent request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentCaptureReceiver::Name_);
  message.set_method_name("DidRemoveContent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool ContentCaptureReceiverStubDispatch::Accept(
    ContentCaptureReceiver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kContentCaptureReceiver_DidCaptureContent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content_capture::mojom::ContentCaptureReceiver::DidCaptureContent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content_capture::mojom::ContentCaptureReceiver::DidCaptureContent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::ContentCaptureReceiver_DidCaptureContent_Params_Data* params =
          reinterpret_cast<internal::ContentCaptureReceiver_DidCaptureContent_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::content_capture::ContentCaptureData p_data{};
      bool p_first_data{};
      ContentCaptureReceiver_DidCaptureContent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (success)
        p_first_data = input_data_view.first_data();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentCaptureReceiver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidCaptureContent(
std::move(p_data), 
std::move(p_first_data));
      return true;
    }
    case internal::kContentCaptureReceiver_DidUpdateContent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content_capture::mojom::ContentCaptureReceiver::DidUpdateContent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content_capture::mojom::ContentCaptureReceiver::DidUpdateContent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::ContentCaptureReceiver_DidUpdateContent_Params_Data* params =
          reinterpret_cast<internal::ContentCaptureReceiver_DidUpdateContent_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::content_capture::ContentCaptureData p_data{};
      ContentCaptureReceiver_DidUpdateContent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentCaptureReceiver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidUpdateContent(
std::move(p_data));
      return true;
    }
    case internal::kContentCaptureReceiver_DidRemoveContent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content_capture::mojom::ContentCaptureReceiver::DidRemoveContent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content_capture::mojom::ContentCaptureReceiver::DidRemoveContent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::ContentCaptureReceiver_DidRemoveContent_Params_Data* params =
          reinterpret_cast<internal::ContentCaptureReceiver_DidRemoveContent_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      std::vector<int64_t> p_ids{};
      ContentCaptureReceiver_DidRemoveContent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadIds(&p_ids))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentCaptureReceiver::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidRemoveContent(
std::move(p_ids));
      return true;
    }
  }
  return false;
}

// static
bool ContentCaptureReceiverStubDispatch::AcceptWithResponder(
    ContentCaptureReceiver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kContentCaptureReceiver_DidCaptureContent_Name: {
      break;
    }
    case internal::kContentCaptureReceiver_DidUpdateContent_Name: {
      break;
    }
    case internal::kContentCaptureReceiver_DidRemoveContent_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kContentCaptureReceiverValidationInfo[] = {
    {&internal::ContentCaptureReceiver_DidCaptureContent_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ContentCaptureReceiver_DidUpdateContent_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ContentCaptureReceiver_DidRemoveContent_Params_Data::Validate,
     nullptr /* no response */},
};

bool ContentCaptureReceiverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::content_capture::mojom::ContentCaptureReceiver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kContentCaptureReceiverValidationInfo);
}

const char ContentCaptureSender::Name_[] = "content_capture.mojom.ContentCaptureSender";

ContentCaptureSenderProxy::ContentCaptureSenderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ContentCaptureSenderProxy::StartCapture(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content_capture::mojom::ContentCaptureSender::StartCapture");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentCaptureSender_StartCapture_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content_capture::mojom::internal::ContentCaptureSender_StartCapture_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentCaptureSender::Name_);
  message.set_method_name("StartCapture");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void ContentCaptureSenderProxy::StopCapture(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content_capture::mojom::ContentCaptureSender::StopCapture");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentCaptureSender_StopCapture_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content_capture::mojom::internal::ContentCaptureSender_StopCapture_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentCaptureSender::Name_);
  message.set_method_name("StopCapture");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool ContentCaptureSenderStubDispatch::Accept(
    ContentCaptureSender* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kContentCaptureSender_StartCapture_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content_capture::mojom::ContentCaptureSender::StartCapture",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content_capture::mojom::ContentCaptureSender::StartCapture");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::ContentCaptureSender_StartCapture_Params_Data* params =
          reinterpret_cast<internal::ContentCaptureSender_StartCapture_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ContentCaptureSender_StartCapture_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentCaptureSender::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartCapture();
      return true;
    }
    case internal::kContentCaptureSender_StopCapture_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content_capture::mojom::ContentCaptureSender::StopCapture",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content_capture::mojom::ContentCaptureSender::StopCapture");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::ContentCaptureSender_StopCapture_Params_Data* params =
          reinterpret_cast<internal::ContentCaptureSender_StopCapture_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ContentCaptureSender_StopCapture_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentCaptureSender::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopCapture();
      return true;
    }
  }
  return false;
}

// static
bool ContentCaptureSenderStubDispatch::AcceptWithResponder(
    ContentCaptureSender* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kContentCaptureSender_StartCapture_Name: {
      break;
    }
    case internal::kContentCaptureSender_StopCapture_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kContentCaptureSenderValidationInfo[] = {
    {&internal::ContentCaptureSender_StartCapture_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ContentCaptureSender_StopCapture_Params_Data::Validate,
     nullptr /* no response */},
};

bool ContentCaptureSenderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::content_capture::mojom::ContentCaptureSender::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kContentCaptureSenderValidationInfo);
}

}  // namespace mojom
}  // namespace content_capture

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif