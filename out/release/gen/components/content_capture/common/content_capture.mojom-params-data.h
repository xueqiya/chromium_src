// components/content_capture/common/content_capture.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content_capture {
namespace mojom {
namespace internal {
class  ContentCaptureReceiver_DidCaptureContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentCaptureReceiver_DidCaptureContent_Params_Data));
      new (data()) ContentCaptureReceiver_DidCaptureContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentCaptureReceiver_DidCaptureContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentCaptureReceiver_DidCaptureContent_Params_Data>(index_);
    }
    ContentCaptureReceiver_DidCaptureContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content_capture::mojom::internal::ContentCaptureData_Data> data;
  uint8_t first_data : 1;
  uint8_t padfinal_[7];

 private:
  ContentCaptureReceiver_DidCaptureContent_Params_Data();
  ~ContentCaptureReceiver_DidCaptureContent_Params_Data() = delete;
};
static_assert(sizeof(ContentCaptureReceiver_DidCaptureContent_Params_Data) == 24,
              "Bad sizeof(ContentCaptureReceiver_DidCaptureContent_Params_Data)");
class  ContentCaptureReceiver_DidUpdateContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentCaptureReceiver_DidUpdateContent_Params_Data));
      new (data()) ContentCaptureReceiver_DidUpdateContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentCaptureReceiver_DidUpdateContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentCaptureReceiver_DidUpdateContent_Params_Data>(index_);
    }
    ContentCaptureReceiver_DidUpdateContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content_capture::mojom::internal::ContentCaptureData_Data> data;

 private:
  ContentCaptureReceiver_DidUpdateContent_Params_Data();
  ~ContentCaptureReceiver_DidUpdateContent_Params_Data() = delete;
};
static_assert(sizeof(ContentCaptureReceiver_DidUpdateContent_Params_Data) == 16,
              "Bad sizeof(ContentCaptureReceiver_DidUpdateContent_Params_Data)");
class  ContentCaptureReceiver_DidRemoveContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentCaptureReceiver_DidRemoveContent_Params_Data));
      new (data()) ContentCaptureReceiver_DidRemoveContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentCaptureReceiver_DidRemoveContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentCaptureReceiver_DidRemoveContent_Params_Data>(index_);
    }
    ContentCaptureReceiver_DidRemoveContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> ids;

 private:
  ContentCaptureReceiver_DidRemoveContent_Params_Data();
  ~ContentCaptureReceiver_DidRemoveContent_Params_Data() = delete;
};
static_assert(sizeof(ContentCaptureReceiver_DidRemoveContent_Params_Data) == 16,
              "Bad sizeof(ContentCaptureReceiver_DidRemoveContent_Params_Data)");
class  ContentCaptureSender_StartCapture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentCaptureSender_StartCapture_Params_Data));
      new (data()) ContentCaptureSender_StartCapture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentCaptureSender_StartCapture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentCaptureSender_StartCapture_Params_Data>(index_);
    }
    ContentCaptureSender_StartCapture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ContentCaptureSender_StartCapture_Params_Data();
  ~ContentCaptureSender_StartCapture_Params_Data() = delete;
};
static_assert(sizeof(ContentCaptureSender_StartCapture_Params_Data) == 8,
              "Bad sizeof(ContentCaptureSender_StartCapture_Params_Data)");
class  ContentCaptureSender_StopCapture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentCaptureSender_StopCapture_Params_Data));
      new (data()) ContentCaptureSender_StopCapture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentCaptureSender_StopCapture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentCaptureSender_StopCapture_Params_Data>(index_);
    }
    ContentCaptureSender_StopCapture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ContentCaptureSender_StopCapture_Params_Data();
  ~ContentCaptureSender_StopCapture_Params_Data() = delete;
};
static_assert(sizeof(ContentCaptureSender_StopCapture_Params_Data) == 8,
              "Bad sizeof(ContentCaptureSender_StopCapture_Params_Data)");

}  // namespace internal
class ContentCaptureReceiver_DidCaptureContent_ParamsDataView {
 public:
  ContentCaptureReceiver_DidCaptureContent_ParamsDataView() {}

  ContentCaptureReceiver_DidCaptureContent_ParamsDataView(
      internal::ContentCaptureReceiver_DidCaptureContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::content_capture::mojom::ContentCaptureDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::content_capture::mojom::ContentCaptureDataDataView>(
        pointer, output, context_);
  }
  bool first_data() const {
    return data_->first_data;
  }
 private:
  internal::ContentCaptureReceiver_DidCaptureContent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ContentCaptureReceiver_DidUpdateContent_ParamsDataView {
 public:
  ContentCaptureReceiver_DidUpdateContent_ParamsDataView() {}

  ContentCaptureReceiver_DidUpdateContent_ParamsDataView(
      internal::ContentCaptureReceiver_DidUpdateContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::content_capture::mojom::ContentCaptureDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::content_capture::mojom::ContentCaptureDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::ContentCaptureReceiver_DidUpdateContent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ContentCaptureReceiver_DidRemoveContent_ParamsDataView {
 public:
  ContentCaptureReceiver_DidRemoveContent_ParamsDataView() {}

  ContentCaptureReceiver_DidRemoveContent_ParamsDataView(
      internal::ContentCaptureReceiver_DidRemoveContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIds(UserType* output) {
    auto* pointer = data_->ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, context_);
  }
 private:
  internal::ContentCaptureReceiver_DidRemoveContent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ContentCaptureSender_StartCapture_ParamsDataView {
 public:
  ContentCaptureSender_StartCapture_ParamsDataView() {}

  ContentCaptureSender_StartCapture_ParamsDataView(
      internal::ContentCaptureSender_StartCapture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ContentCaptureSender_StartCapture_Params_Data* data_ = nullptr;
};

class ContentCaptureSender_StopCapture_ParamsDataView {
 public:
  ContentCaptureSender_StopCapture_ParamsDataView() {}

  ContentCaptureSender_StopCapture_ParamsDataView(
      internal::ContentCaptureSender_StopCapture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ContentCaptureSender_StopCapture_Params_Data* data_ = nullptr;
};


inline void ContentCaptureReceiver_DidCaptureContent_ParamsDataView::GetDataDataView(
    ::content_capture::mojom::ContentCaptureDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::content_capture::mojom::ContentCaptureDataDataView(pointer, context_);
}


inline void ContentCaptureReceiver_DidUpdateContent_ParamsDataView::GetDataDataView(
    ::content_capture::mojom::ContentCaptureDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::content_capture::mojom::ContentCaptureDataDataView(pointer, context_);
}


inline void ContentCaptureReceiver_DidRemoveContent_ParamsDataView::GetIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, context_);
}





}  // namespace mojom
}  // namespace content_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_PARAMS_DATA_H_