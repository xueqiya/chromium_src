// components/content_capture/common/content_capture.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/content_capture/common/content_capture.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "components/content_capture/common/content_capture_data.mojom.h"


#ifndef COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_JUMBO_H_
#define COMPONENTS_CONTENT_CAPTURE_COMMON_CONTENT_CAPTURE_MOJOM_JUMBO_H_
#include "components/content_capture/common/content_capture_mojom_traits.h"
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif


namespace content_capture {
namespace mojom {


void ContentCaptureReceiverInterceptorForTesting::DidCaptureContent(const ::content_capture::ContentCaptureData& data, bool first_data) {
  GetForwardingInterface()->DidCaptureContent(std::move(data), std::move(first_data));
}
void ContentCaptureReceiverInterceptorForTesting::DidUpdateContent(const ::content_capture::ContentCaptureData& data) {
  GetForwardingInterface()->DidUpdateContent(std::move(data));
}
void ContentCaptureReceiverInterceptorForTesting::DidRemoveContent(const std::vector<int64_t>& ids) {
  GetForwardingInterface()->DidRemoveContent(std::move(ids));
}
ContentCaptureReceiverAsyncWaiter::ContentCaptureReceiverAsyncWaiter(
    ContentCaptureReceiver* proxy) : proxy_(proxy) {}

ContentCaptureReceiverAsyncWaiter::~ContentCaptureReceiverAsyncWaiter() = default;




void ContentCaptureSenderInterceptorForTesting::StartCapture() {
  GetForwardingInterface()->StartCapture();
}
void ContentCaptureSenderInterceptorForTesting::StopCapture() {
  GetForwardingInterface()->StopCapture();
}
ContentCaptureSenderAsyncWaiter::ContentCaptureSenderAsyncWaiter(
    ContentCaptureSender* proxy) : proxy_(proxy) {}

ContentCaptureSenderAsyncWaiter::~ContentCaptureSenderAsyncWaiter() = default;






}  // namespace mojom
}  // namespace content_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif