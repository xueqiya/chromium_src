// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/ui_devtools/Tracing.h"

#include "components/ui_devtools/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"

namespace ui_devtools {
namespace protocol {
namespace Tracing {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Tracing";
const char Metainfo::commandPrefix[] = "Tracing.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<DataCollectedNotification> result(new DataCollectedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* valueValue = object->get("value");
    errors->setName("value");
    result->m_value = ValueConversions<protocol::Array<protocol::DictionaryValue>>::fromValue(valueValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DataCollectedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("value", ValueConversions<protocol::Array<protocol::DictionaryValue>>::toValue(m_value.get()));
    return result;
}

void DataCollectedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<TracingCompleteNotification> result(new TracingCompleteNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* dataLossOccurredValue = object->get("dataLossOccurred");
    if (dataLossOccurredValue) {
        errors->setName("dataLossOccurred");
        result->m_dataLossOccurred = ValueConversions<bool>::fromValue(dataLossOccurredValue, errors);
    }
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TracingCompleteNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_dataLossOccurred.isJust())
        result->setValue("dataLossOccurred", ValueConversions<bool>::toValue(m_dataLossOccurred.fromJust()));
    return result;
}

void TracingCompleteNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("dataLossOccurred"), m_dataLossOccurred, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<BufferUsageNotification> result(new BufferUsageNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* percentFullValue = object->get("percentFull");
    if (percentFullValue) {
        errors->setName("percentFull");
        result->m_percentFull = ValueConversions<double>::fromValue(percentFullValue, errors);
    }
    protocol::Value* eventCountValue = object->get("eventCount");
    if (eventCountValue) {
        errors->setName("eventCount");
        result->m_eventCount = ValueConversions<double>::fromValue(eventCountValue, errors);
    }
    protocol::Value* valueValue = object->get("value");
    if (valueValue) {
        errors->setName("value");
        result->m_value = ValueConversions<double>::fromValue(valueValue, errors);
    }
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BufferUsageNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_percentFull.isJust())
        result->setValue("percentFull", ValueConversions<double>::toValue(m_percentFull.fromJust()));
    if (m_eventCount.isJust())
        result->setValue("eventCount", ValueConversions<double>::toValue(m_eventCount.fromJust()));
    if (m_value.isJust())
        result->setValue("value", ValueConversions<double>::toValue(m_value.fromJust()));
    return result;
}

void BufferUsageNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("percentFull"), m_percentFull, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventCount"), m_eventCount, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::dataCollected(std::unique_ptr<protocol::Array<protocol::DictionaryValue>> value)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<DataCollectedNotification> messageData = DataCollectedNotification::create()
        .setValue(std::move(value))
        .build();
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.dataCollected", std::move(messageData)));
}

void Frontend::tracingComplete(Maybe<bool> dataLossOccurred)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<TracingCompleteNotification> messageData = TracingCompleteNotification::create()
        .build();
    if (dataLossOccurred.isJust())
        messageData->setDataLossOccurred(std::move(dataLossOccurred).takeJust());
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.tracingComplete", std::move(messageData)));
}

void Frontend::bufferUsage(Maybe<double> percentFull, Maybe<double> eventCount, Maybe<double> value)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<BufferUsageNotification> messageData = BufferUsageNotification::create()
        .build();
    if (percentFull.isJust())
        messageData->setPercentFull(std::move(percentFull).takeJust());
    if (eventCount.isJust())
        messageData->setEventCount(std::move(eventCount).takeJust());
    if (value.isJust())
        messageData->setValue(std::move(value).takeJust());
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.bufferUsage", std::move(messageData)));
}

void Frontend::flush()
{
    m_frontendChannel->flushProtocolNotifications();
}

void Frontend::sendRawCBORNotification(std::vector<uint8_t> notification)
{
    m_frontendChannel->sendProtocolNotification(InternalRawNotification::fromBinary(std::move(notification)));
}

// --------------------- Dispatcher.

class DispatcherImpl : public protocol::DispatcherBase {
public:
    DispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DispatcherBase(frontendChannel)
        , m_backend(backend) {
        m_dispatchMap["Tracing.start"] = &DispatcherImpl::start;
        m_dispatchMap["Tracing.end"] = &DispatcherImpl::end;
        m_dispatchMap["Tracing.disable"] = &DispatcherImpl::disable;
        m_dispatchMap["Tracing.enable"] = &DispatcherImpl::enable;
    }
    ~DispatcherImpl() override { }
    bool canDispatch(const String& method) override;
    void dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject) override;
    std::unordered_map<String, String>& redirects() { return m_redirects; }

protected:
    using CallHandler = void (DispatcherImpl::*)(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> messageObject, ErrorSupport* errors);
    using DispatchMap = std::unordered_map<String, CallHandler>;
    DispatchMap m_dispatchMap;
    std::unordered_map<String, String> m_redirects;

    void start(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void end(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void disable(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void enable(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);

    Backend* m_backend;
};

bool DispatcherImpl::canDispatch(const String& method) {
    return m_dispatchMap.find(method) != m_dispatchMap.end();
}

void DispatcherImpl::dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject)
{
    std::unordered_map<String, CallHandler>::iterator it = m_dispatchMap.find(method);
    DCHECK(it != m_dispatchMap.end());
    protocol::ErrorSupport errors;
    (this->*(it->second))(callId, method, message, std::move(messageObject), &errors);
}


class StartCallbackImpl : public Backend::StartCallback, public DispatcherBase::Callback {
public:
    StartCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess() override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::start(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* categoriesValue = object ? object->get("categories") : nullptr;
    Maybe<String> in_categories;
    if (categoriesValue) {
        errors->setName("categories");
        in_categories = ValueConversions<String>::fromValue(categoriesValue, errors);
    }
    protocol::Value* optionsValue = object ? object->get("options") : nullptr;
    Maybe<String> in_options;
    if (optionsValue) {
        errors->setName("options");
        in_options = ValueConversions<String>::fromValue(optionsValue, errors);
    }
    protocol::Value* bufferUsageReportingIntervalValue = object ? object->get("bufferUsageReportingInterval") : nullptr;
    Maybe<double> in_bufferUsageReportingInterval;
    if (bufferUsageReportingIntervalValue) {
        errors->setName("bufferUsageReportingInterval");
        in_bufferUsageReportingInterval = ValueConversions<double>::fromValue(bufferUsageReportingIntervalValue, errors);
    }
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<StartCallbackImpl> callback(new StartCallbackImpl(weakPtr(), callId, method, message));
    m_backend->start(std::move(in_categories), std::move(in_options), std::move(in_bufferUsageReportingInterval), std::move(callback));
    return;
}

void DispatcherImpl::end(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->end();
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

void DispatcherImpl::disable(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

void DispatcherImpl::enable(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    std::unique_ptr<DispatcherImpl> dispatcher(new DispatcherImpl(uber->channel(), backend));
    uber->setupRedirects(dispatcher->redirects());
    uber->registerBackend("Tracing", std::move(dispatcher));
}

} // Tracing
} // namespace ui_devtools
} // namespace protocol
