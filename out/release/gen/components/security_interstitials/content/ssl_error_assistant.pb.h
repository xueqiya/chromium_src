// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_error_assistant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5ferror_5fassistant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5ferror_5fassistant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5ferror_5fassistant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5ferror_5fassistant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_ssl {
class CaptivePortalCert;
class CaptivePortalCertDefaultTypeInternal;
extern CaptivePortalCertDefaultTypeInternal _CaptivePortalCert_default_instance_;
class DynamicInterstitial;
class DynamicInterstitialDefaultTypeInternal;
extern DynamicInterstitialDefaultTypeInternal _DynamicInterstitial_default_instance_;
class MITMSoftware;
class MITMSoftwareDefaultTypeInternal;
extern MITMSoftwareDefaultTypeInternal _MITMSoftware_default_instance_;
class SSLErrorAssistantConfig;
class SSLErrorAssistantConfigDefaultTypeInternal;
extern SSLErrorAssistantConfigDefaultTypeInternal _SSLErrorAssistantConfig_default_instance_;
}  // namespace chrome_browser_ssl
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_ssl::CaptivePortalCert* Arena::CreateMaybeMessage<::chrome_browser_ssl::CaptivePortalCert>(Arena*);
template<> ::chrome_browser_ssl::DynamicInterstitial* Arena::CreateMaybeMessage<::chrome_browser_ssl::DynamicInterstitial>(Arena*);
template<> ::chrome_browser_ssl::MITMSoftware* Arena::CreateMaybeMessage<::chrome_browser_ssl::MITMSoftware>(Arena*);
template<> ::chrome_browser_ssl::SSLErrorAssistantConfig* Arena::CreateMaybeMessage<::chrome_browser_ssl::SSLErrorAssistantConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_ssl {

enum DynamicInterstitial_InterstitialPageType : int {
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE = 0,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_SSL = 1,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_CAPTIVE_PORTAL = 2,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE = 3
};
bool DynamicInterstitial_InterstitialPageType_IsValid(int value);
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial_InterstitialPageType_InterstitialPageType_MIN = DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX = DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE;
constexpr int DynamicInterstitial_InterstitialPageType_InterstitialPageType_ARRAYSIZE = DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX + 1;

const std::string& DynamicInterstitial_InterstitialPageType_Name(DynamicInterstitial_InterstitialPageType value);
template<typename T>
inline const std::string& DynamicInterstitial_InterstitialPageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DynamicInterstitial_InterstitialPageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DynamicInterstitial_InterstitialPageType_Name.");
  return DynamicInterstitial_InterstitialPageType_Name(static_cast<DynamicInterstitial_InterstitialPageType>(enum_t_value));
}
bool DynamicInterstitial_InterstitialPageType_Parse(
    const std::string& name, DynamicInterstitial_InterstitialPageType* value);
enum DynamicInterstitial_CertError : int {
  DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR = 0,
  DynamicInterstitial_CertError_ERR_CERT_REVOKED = 1,
  DynamicInterstitial_CertError_ERR_CERT_INVALID = 2,
  DynamicInterstitial_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = 3,
  DynamicInterstitial_CertError_ERR_CERT_AUTHORITY_INVALID = 4,
  DynamicInterstitial_CertError_ERR_CERT_COMMON_NAME_INVALID = 5,
  DynamicInterstitial_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION = 6,
  DynamicInterstitial_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM = 7,
  DynamicInterstitial_CertError_ERR_CERT_WEAK_KEY = 8,
  DynamicInterstitial_CertError_ERR_CERT_DATE_INVALID = 9,
  DynamicInterstitial_CertError_ERR_CERT_VALIDITY_TOO_LONG = 10,
  DynamicInterstitial_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION = 11,
  DynamicInterstitial_CertError_ERR_CERT_NO_REVOCATION_MECHANISM = 12,
  DynamicInterstitial_CertError_ERR_CERT_NON_UNIQUE_NAME = 13,
  DynamicInterstitial_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = 14,
  DynamicInterstitial_CertError_ERR_CERT_SYMANTEC_LEGACY = 15,
  DynamicInterstitial_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED = 16
};
bool DynamicInterstitial_CertError_IsValid(int value);
constexpr DynamicInterstitial_CertError DynamicInterstitial_CertError_CertError_MIN = DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR;
constexpr DynamicInterstitial_CertError DynamicInterstitial_CertError_CertError_MAX = DynamicInterstitial_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
constexpr int DynamicInterstitial_CertError_CertError_ARRAYSIZE = DynamicInterstitial_CertError_CertError_MAX + 1;

const std::string& DynamicInterstitial_CertError_Name(DynamicInterstitial_CertError value);
template<typename T>
inline const std::string& DynamicInterstitial_CertError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DynamicInterstitial_CertError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DynamicInterstitial_CertError_Name.");
  return DynamicInterstitial_CertError_Name(static_cast<DynamicInterstitial_CertError>(enum_t_value));
}
bool DynamicInterstitial_CertError_Parse(
    const std::string& name, DynamicInterstitial_CertError* value);
// ===================================================================

class CaptivePortalCert :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CaptivePortalCert) */ {
 public:
  CaptivePortalCert();
  virtual ~CaptivePortalCert();

  CaptivePortalCert(const CaptivePortalCert& from);
  CaptivePortalCert(CaptivePortalCert&& from) noexcept
    : CaptivePortalCert() {
    *this = ::std::move(from);
  }

  inline CaptivePortalCert& operator=(const CaptivePortalCert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptivePortalCert& operator=(CaptivePortalCert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CaptivePortalCert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptivePortalCert* internal_default_instance() {
    return reinterpret_cast<const CaptivePortalCert*>(
               &_CaptivePortalCert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CaptivePortalCert& a, CaptivePortalCert& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptivePortalCert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptivePortalCert* New() const final {
    return CreateMaybeMessage<CaptivePortalCert>(nullptr);
  }

  CaptivePortalCert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptivePortalCert>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CaptivePortalCert& from);
  void MergeFrom(const CaptivePortalCert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptivePortalCert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.CaptivePortalCert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSha256HashFieldNumber = 1,
  };
  // optional string sha256_hash = 1;
  bool has_sha256_hash() const;
  void clear_sha256_hash();
  const std::string& sha256_hash() const;
  void set_sha256_hash(const std::string& value);
  void set_sha256_hash(std::string&& value);
  void set_sha256_hash(const char* value);
  void set_sha256_hash(const char* value, size_t size);
  std::string* mutable_sha256_hash();
  std::string* release_sha256_hash();
  void set_allocated_sha256_hash(std::string* sha256_hash);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CaptivePortalCert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_hash_;
  friend struct ::TableStruct_ssl_5ferror_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class MITMSoftware :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.MITMSoftware) */ {
 public:
  MITMSoftware();
  virtual ~MITMSoftware();

  MITMSoftware(const MITMSoftware& from);
  MITMSoftware(MITMSoftware&& from) noexcept
    : MITMSoftware() {
    *this = ::std::move(from);
  }

  inline MITMSoftware& operator=(const MITMSoftware& from) {
    CopyFrom(from);
    return *this;
  }
  inline MITMSoftware& operator=(MITMSoftware&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MITMSoftware& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MITMSoftware* internal_default_instance() {
    return reinterpret_cast<const MITMSoftware*>(
               &_MITMSoftware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MITMSoftware& a, MITMSoftware& b) {
    a.Swap(&b);
  }
  inline void Swap(MITMSoftware* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MITMSoftware* New() const final {
    return CreateMaybeMessage<MITMSoftware>(nullptr);
  }

  MITMSoftware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MITMSoftware>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MITMSoftware& from);
  void MergeFrom(const MITMSoftware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MITMSoftware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.MITMSoftware";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIssuerCommonNameRegexFieldNumber = 2,
    kIssuerOrganizationRegexFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string issuer_common_name_regex = 2;
  bool has_issuer_common_name_regex() const;
  void clear_issuer_common_name_regex();
  const std::string& issuer_common_name_regex() const;
  void set_issuer_common_name_regex(const std::string& value);
  void set_issuer_common_name_regex(std::string&& value);
  void set_issuer_common_name_regex(const char* value);
  void set_issuer_common_name_regex(const char* value, size_t size);
  std::string* mutable_issuer_common_name_regex();
  std::string* release_issuer_common_name_regex();
  void set_allocated_issuer_common_name_regex(std::string* issuer_common_name_regex);

  // optional string issuer_organization_regex = 3;
  bool has_issuer_organization_regex() const;
  void clear_issuer_organization_regex();
  const std::string& issuer_organization_regex() const;
  void set_issuer_organization_regex(const std::string& value);
  void set_issuer_organization_regex(std::string&& value);
  void set_issuer_organization_regex(const char* value);
  void set_issuer_organization_regex(const char* value, size_t size);
  std::string* mutable_issuer_organization_regex();
  std::string* release_issuer_organization_regex();
  void set_allocated_issuer_organization_regex(std::string* issuer_organization_regex);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.MITMSoftware)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_common_name_regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_organization_regex_;
  friend struct ::TableStruct_ssl_5ferror_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DynamicInterstitial :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.DynamicInterstitial) */ {
 public:
  DynamicInterstitial();
  virtual ~DynamicInterstitial();

  DynamicInterstitial(const DynamicInterstitial& from);
  DynamicInterstitial(DynamicInterstitial&& from) noexcept
    : DynamicInterstitial() {
    *this = ::std::move(from);
  }

  inline DynamicInterstitial& operator=(const DynamicInterstitial& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicInterstitial& operator=(DynamicInterstitial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DynamicInterstitial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicInterstitial* internal_default_instance() {
    return reinterpret_cast<const DynamicInterstitial*>(
               &_DynamicInterstitial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DynamicInterstitial& a, DynamicInterstitial& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicInterstitial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicInterstitial* New() const final {
    return CreateMaybeMessage<DynamicInterstitial>(nullptr);
  }

  DynamicInterstitial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicInterstitial>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DynamicInterstitial& from);
  void MergeFrom(const DynamicInterstitial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DynamicInterstitial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.DynamicInterstitial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DynamicInterstitial_InterstitialPageType InterstitialPageType;
  static constexpr InterstitialPageType INTERSTITIAL_PAGE_NONE =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE;
  static constexpr InterstitialPageType INTERSTITIAL_PAGE_SSL =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_SSL;
  static constexpr InterstitialPageType INTERSTITIAL_PAGE_CAPTIVE_PORTAL =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_CAPTIVE_PORTAL;
  static constexpr InterstitialPageType INTERSTITIAL_PAGE_MITM_SOFTWARE =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE;
  static inline bool InterstitialPageType_IsValid(int value) {
    return DynamicInterstitial_InterstitialPageType_IsValid(value);
  }
  static constexpr InterstitialPageType InterstitialPageType_MIN =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_MIN;
  static constexpr InterstitialPageType InterstitialPageType_MAX =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX;
  static constexpr int InterstitialPageType_ARRAYSIZE =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InterstitialPageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InterstitialPageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InterstitialPageType_Name.");
    return DynamicInterstitial_InterstitialPageType_Name(enum_t_value);
  }
  static inline bool InterstitialPageType_Parse(const std::string& name,
      InterstitialPageType* value) {
    return DynamicInterstitial_InterstitialPageType_Parse(name, value);
  }

  typedef DynamicInterstitial_CertError CertError;
  static constexpr CertError UNKNOWN_CERT_ERROR =
    DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR;
  static constexpr CertError ERR_CERT_REVOKED =
    DynamicInterstitial_CertError_ERR_CERT_REVOKED;
  static constexpr CertError ERR_CERT_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_INVALID;
  static constexpr CertError ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN =
    DynamicInterstitial_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
  static constexpr CertError ERR_CERT_AUTHORITY_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_AUTHORITY_INVALID;
  static constexpr CertError ERR_CERT_COMMON_NAME_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_COMMON_NAME_INVALID;
  static constexpr CertError ERR_CERT_NAME_CONSTRAINT_VIOLATION =
    DynamicInterstitial_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION;
  static constexpr CertError ERR_CERT_WEAK_SIGNATURE_ALGORITHM =
    DynamicInterstitial_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
  static constexpr CertError ERR_CERT_WEAK_KEY =
    DynamicInterstitial_CertError_ERR_CERT_WEAK_KEY;
  static constexpr CertError ERR_CERT_DATE_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_DATE_INVALID;
  static constexpr CertError ERR_CERT_VALIDITY_TOO_LONG =
    DynamicInterstitial_CertError_ERR_CERT_VALIDITY_TOO_LONG;
  static constexpr CertError ERR_CERT_UNABLE_TO_CHECK_REVOCATION =
    DynamicInterstitial_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
  static constexpr CertError ERR_CERT_NO_REVOCATION_MECHANISM =
    DynamicInterstitial_CertError_ERR_CERT_NO_REVOCATION_MECHANISM;
  static constexpr CertError ERR_CERT_NON_UNIQUE_NAME =
    DynamicInterstitial_CertError_ERR_CERT_NON_UNIQUE_NAME;
  static constexpr CertError ERR_CERTIFICATE_TRANSPARENCY_REQUIRED =
    DynamicInterstitial_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
  static constexpr CertError ERR_CERT_SYMANTEC_LEGACY =
    DynamicInterstitial_CertError_ERR_CERT_SYMANTEC_LEGACY;
  static constexpr CertError ERR_CERT_KNOWN_INTERCEPTION_BLOCKED =
    DynamicInterstitial_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
  static inline bool CertError_IsValid(int value) {
    return DynamicInterstitial_CertError_IsValid(value);
  }
  static constexpr CertError CertError_MIN =
    DynamicInterstitial_CertError_CertError_MIN;
  static constexpr CertError CertError_MAX =
    DynamicInterstitial_CertError_CertError_MAX;
  static constexpr int CertError_ARRAYSIZE =
    DynamicInterstitial_CertError_CertError_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CertError_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CertError>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CertError_Name.");
    return DynamicInterstitial_CertError_Name(enum_t_value);
  }
  static inline bool CertError_Parse(const std::string& name,
      CertError* value) {
    return DynamicInterstitial_CertError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSha256HashFieldNumber = 1,
    kIssuerCommonNameRegexFieldNumber = 2,
    kIssuerOrganizationRegexFieldNumber = 3,
    kMitmSoftwareNameFieldNumber = 4,
    kSupportUrlFieldNumber = 7,
    kCertErrorFieldNumber = 5,
    kInterstitialTypeFieldNumber = 6,
    kShowOnlyForNonoverridableErrorsFieldNumber = 8,
  };
  // repeated string sha256_hash = 1;
  int sha256_hash_size() const;
  void clear_sha256_hash();
  const std::string& sha256_hash(int index) const;
  std::string* mutable_sha256_hash(int index);
  void set_sha256_hash(int index, const std::string& value);
  void set_sha256_hash(int index, std::string&& value);
  void set_sha256_hash(int index, const char* value);
  void set_sha256_hash(int index, const char* value, size_t size);
  std::string* add_sha256_hash();
  void add_sha256_hash(const std::string& value);
  void add_sha256_hash(std::string&& value);
  void add_sha256_hash(const char* value);
  void add_sha256_hash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sha256_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sha256_hash();

  // optional string issuer_common_name_regex = 2;
  bool has_issuer_common_name_regex() const;
  void clear_issuer_common_name_regex();
  const std::string& issuer_common_name_regex() const;
  void set_issuer_common_name_regex(const std::string& value);
  void set_issuer_common_name_regex(std::string&& value);
  void set_issuer_common_name_regex(const char* value);
  void set_issuer_common_name_regex(const char* value, size_t size);
  std::string* mutable_issuer_common_name_regex();
  std::string* release_issuer_common_name_regex();
  void set_allocated_issuer_common_name_regex(std::string* issuer_common_name_regex);

  // optional string issuer_organization_regex = 3;
  bool has_issuer_organization_regex() const;
  void clear_issuer_organization_regex();
  const std::string& issuer_organization_regex() const;
  void set_issuer_organization_regex(const std::string& value);
  void set_issuer_organization_regex(std::string&& value);
  void set_issuer_organization_regex(const char* value);
  void set_issuer_organization_regex(const char* value, size_t size);
  std::string* mutable_issuer_organization_regex();
  std::string* release_issuer_organization_regex();
  void set_allocated_issuer_organization_regex(std::string* issuer_organization_regex);

  // optional string mitm_software_name = 4;
  bool has_mitm_software_name() const;
  void clear_mitm_software_name();
  const std::string& mitm_software_name() const;
  void set_mitm_software_name(const std::string& value);
  void set_mitm_software_name(std::string&& value);
  void set_mitm_software_name(const char* value);
  void set_mitm_software_name(const char* value, size_t size);
  std::string* mutable_mitm_software_name();
  std::string* release_mitm_software_name();
  void set_allocated_mitm_software_name(std::string* mitm_software_name);

  // optional string support_url = 7;
  bool has_support_url() const;
  void clear_support_url();
  const std::string& support_url() const;
  void set_support_url(const std::string& value);
  void set_support_url(std::string&& value);
  void set_support_url(const char* value);
  void set_support_url(const char* value, size_t size);
  std::string* mutable_support_url();
  std::string* release_support_url();
  void set_allocated_support_url(std::string* support_url);

  // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
  bool has_cert_error() const;
  void clear_cert_error();
  ::chrome_browser_ssl::DynamicInterstitial_CertError cert_error() const;
  void set_cert_error(::chrome_browser_ssl::DynamicInterstitial_CertError value);

  // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
  bool has_interstitial_type() const;
  void clear_interstitial_type();
  ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType interstitial_type() const;
  void set_interstitial_type(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType value);

  // optional bool show_only_for_nonoverridable_errors = 8;
  bool has_show_only_for_nonoverridable_errors() const;
  void clear_show_only_for_nonoverridable_errors();
  bool show_only_for_nonoverridable_errors() const;
  void set_show_only_for_nonoverridable_errors(bool value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.DynamicInterstitial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sha256_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_common_name_regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_organization_regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mitm_software_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr support_url_;
  int cert_error_;
  int interstitial_type_;
  bool show_only_for_nonoverridable_errors_;
  friend struct ::TableStruct_ssl_5ferror_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class SSLErrorAssistantConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.SSLErrorAssistantConfig) */ {
 public:
  SSLErrorAssistantConfig();
  virtual ~SSLErrorAssistantConfig();

  SSLErrorAssistantConfig(const SSLErrorAssistantConfig& from);
  SSLErrorAssistantConfig(SSLErrorAssistantConfig&& from) noexcept
    : SSLErrorAssistantConfig() {
    *this = ::std::move(from);
  }

  inline SSLErrorAssistantConfig& operator=(const SSLErrorAssistantConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLErrorAssistantConfig& operator=(SSLErrorAssistantConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SSLErrorAssistantConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSLErrorAssistantConfig* internal_default_instance() {
    return reinterpret_cast<const SSLErrorAssistantConfig*>(
               &_SSLErrorAssistantConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSLErrorAssistantConfig& a, SSLErrorAssistantConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLErrorAssistantConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSLErrorAssistantConfig* New() const final {
    return CreateMaybeMessage<SSLErrorAssistantConfig>(nullptr);
  }

  SSLErrorAssistantConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSLErrorAssistantConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SSLErrorAssistantConfig& from);
  void MergeFrom(const SSLErrorAssistantConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSLErrorAssistantConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.SSLErrorAssistantConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptivePortalCertFieldNumber = 2,
    kMitmSoftwareFieldNumber = 3,
    kDynamicInterstitialFieldNumber = 4,
    kVersionIdFieldNumber = 1,
  };
  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  int captive_portal_cert_size() const;
  void clear_captive_portal_cert();
  ::chrome_browser_ssl::CaptivePortalCert* mutable_captive_portal_cert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >*
      mutable_captive_portal_cert();
  const ::chrome_browser_ssl::CaptivePortalCert& captive_portal_cert(int index) const;
  ::chrome_browser_ssl::CaptivePortalCert* add_captive_portal_cert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >&
      captive_portal_cert() const;

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  int mitm_software_size() const;
  void clear_mitm_software();
  ::chrome_browser_ssl::MITMSoftware* mutable_mitm_software(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >*
      mutable_mitm_software();
  const ::chrome_browser_ssl::MITMSoftware& mitm_software(int index) const;
  ::chrome_browser_ssl::MITMSoftware* add_mitm_software();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >&
      mitm_software() const;

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  int dynamic_interstitial_size() const;
  void clear_dynamic_interstitial();
  ::chrome_browser_ssl::DynamicInterstitial* mutable_dynamic_interstitial(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >*
      mutable_dynamic_interstitial();
  const ::chrome_browser_ssl::DynamicInterstitial& dynamic_interstitial(int index) const;
  ::chrome_browser_ssl::DynamicInterstitial* add_dynamic_interstitial();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >&
      dynamic_interstitial() const;

  // optional uint32 version_id = 1;
  bool has_version_id() const;
  void clear_version_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id() const;
  void set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.SSLErrorAssistantConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert > captive_portal_cert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware > mitm_software_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial > dynamic_interstitial_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id_;
  friend struct ::TableStruct_ssl_5ferror_5fassistant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CaptivePortalCert

// optional string sha256_hash = 1;
inline bool CaptivePortalCert::has_sha256_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptivePortalCert::clear_sha256_hash() {
  sha256_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CaptivePortalCert::sha256_hash() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.GetNoArena();
}
inline void CaptivePortalCert::set_sha256_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha256_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline void CaptivePortalCert::set_sha256_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha256_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline void CaptivePortalCert::set_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha256_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline void CaptivePortalCert::set_sha256_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha256_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline std::string* CaptivePortalCert::mutable_sha256_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CaptivePortalCert::release_sha256_hash() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  if (!has_sha256_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha256_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CaptivePortalCert::set_allocated_sha256_hash(std::string* sha256_hash) {
  if (sha256_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha256_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}

// -------------------------------------------------------------------

// MITMSoftware

// optional string name = 1;
inline bool MITMSoftware::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MITMSoftware::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MITMSoftware::name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.name)
  return name_.GetNoArena();
}
inline void MITMSoftware::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.name)
}
inline void MITMSoftware::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.name)
}
inline void MITMSoftware::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.name)
}
inline void MITMSoftware::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.name)
}
inline std::string* MITMSoftware::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MITMSoftware::release_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.name)
}

// optional string issuer_common_name_regex = 2;
inline bool MITMSoftware::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MITMSoftware::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MITMSoftware::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
inline void MITMSoftware::set_issuer_common_name_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline void MITMSoftware::set_issuer_common_name_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  issuer_common_name_regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline void MITMSoftware::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline void MITMSoftware::set_issuer_common_name_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline std::string* MITMSoftware::mutable_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MITMSoftware::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  if (!has_issuer_common_name_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return issuer_common_name_regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_issuer_common_name_regex(std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
inline bool MITMSoftware::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MITMSoftware::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MITMSoftware::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
inline void MITMSoftware::set_issuer_organization_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline void MITMSoftware::set_issuer_organization_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  issuer_organization_regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline void MITMSoftware::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline void MITMSoftware::set_issuer_organization_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline std::string* MITMSoftware::mutable_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MITMSoftware::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  if (!has_issuer_organization_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return issuer_organization_regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_issuer_organization_regex(std::string* issuer_organization_regex) {
  if (issuer_organization_regex != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}

// -------------------------------------------------------------------

// DynamicInterstitial

// repeated string sha256_hash = 1;
inline int DynamicInterstitial::sha256_hash_size() const {
  return sha256_hash_.size();
}
inline void DynamicInterstitial::clear_sha256_hash() {
  sha256_hash_.Clear();
}
inline const std::string& DynamicInterstitial::sha256_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Get(index);
}
inline std::string* DynamicInterstitial::mutable_sha256_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Mutable(index);
}
inline void DynamicInterstitial::set_sha256_hash(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(value);
}
inline void DynamicInterstitial::set_sha256_hash(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(std::move(value));
}
inline void DynamicInterstitial::set_sha256_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sha256_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::set_sha256_hash(int index, const char* value, size_t size) {
  sha256_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline std::string* DynamicInterstitial::add_sha256_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Add();
}
inline void DynamicInterstitial::add_sha256_hash(const std::string& value) {
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::add_sha256_hash(std::string&& value) {
  sha256_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::add_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::add_sha256_hash(const char* value, size_t size) {
  sha256_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DynamicInterstitial::sha256_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DynamicInterstitial::mutable_sha256_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return &sha256_hash_;
}

// optional string issuer_common_name_regex = 2;
inline bool DynamicInterstitial::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DynamicInterstitial::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DynamicInterstitial::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
inline void DynamicInterstitial::set_issuer_common_name_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline void DynamicInterstitial::set_issuer_common_name_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  issuer_common_name_regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline void DynamicInterstitial::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline void DynamicInterstitial::set_issuer_common_name_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  issuer_common_name_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline std::string* DynamicInterstitial::mutable_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicInterstitial::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  if (!has_issuer_common_name_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return issuer_common_name_regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_issuer_common_name_regex(std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
inline bool DynamicInterstitial::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DynamicInterstitial::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DynamicInterstitial::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
inline void DynamicInterstitial::set_issuer_organization_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline void DynamicInterstitial::set_issuer_organization_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  issuer_organization_regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline void DynamicInterstitial::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline void DynamicInterstitial::set_issuer_organization_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  issuer_organization_regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline std::string* DynamicInterstitial::mutable_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicInterstitial::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  if (!has_issuer_organization_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return issuer_organization_regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_issuer_organization_regex(std::string* issuer_organization_regex) {
  if (issuer_organization_regex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}

// optional string mitm_software_name = 4;
inline bool DynamicInterstitial::has_mitm_software_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DynamicInterstitial::clear_mitm_software_name() {
  mitm_software_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DynamicInterstitial::mitm_software_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.GetNoArena();
}
inline void DynamicInterstitial::set_mitm_software_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mitm_software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline void DynamicInterstitial::set_mitm_software_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mitm_software_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline void DynamicInterstitial::set_mitm_software_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mitm_software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline void DynamicInterstitial::set_mitm_software_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mitm_software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline std::string* DynamicInterstitial::mutable_mitm_software_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicInterstitial::release_mitm_software_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  if (!has_mitm_software_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mitm_software_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_mitm_software_name(std::string* mitm_software_name) {
  if (mitm_software_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mitm_software_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mitm_software_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}

// optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
inline bool DynamicInterstitial::has_cert_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DynamicInterstitial::clear_cert_error() {
  cert_error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::chrome_browser_ssl::DynamicInterstitial_CertError DynamicInterstitial::cert_error() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.cert_error)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_CertError >(cert_error_);
}
inline void DynamicInterstitial::set_cert_error(::chrome_browser_ssl::DynamicInterstitial_CertError value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  cert_error_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.cert_error)
}

// optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
inline bool DynamicInterstitial::has_interstitial_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DynamicInterstitial::clear_interstitial_type() {
  interstitial_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType DynamicInterstitial::interstitial_type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType >(interstitial_type_);
}
inline void DynamicInterstitial::set_interstitial_type(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  interstitial_type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
}

// optional string support_url = 7;
inline bool DynamicInterstitial::has_support_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DynamicInterstitial::clear_support_url() {
  support_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DynamicInterstitial::support_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.GetNoArena();
}
inline void DynamicInterstitial::set_support_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  support_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline void DynamicInterstitial::set_support_url(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  support_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline void DynamicInterstitial::set_support_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  support_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline void DynamicInterstitial::set_support_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  support_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline std::string* DynamicInterstitial::mutable_support_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicInterstitial::release_support_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.support_url)
  if (!has_support_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return support_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_support_url(std::string* support_url) {
  if (support_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  support_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), support_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.support_url)
}

// optional bool show_only_for_nonoverridable_errors = 8;
inline bool DynamicInterstitial::has_show_only_for_nonoverridable_errors() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DynamicInterstitial::clear_show_only_for_nonoverridable_errors() {
  show_only_for_nonoverridable_errors_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DynamicInterstitial::show_only_for_nonoverridable_errors() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.show_only_for_nonoverridable_errors)
  return show_only_for_nonoverridable_errors_;
}
inline void DynamicInterstitial::set_show_only_for_nonoverridable_errors(bool value) {
  _has_bits_[0] |= 0x00000040u;
  show_only_for_nonoverridable_errors_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.show_only_for_nonoverridable_errors)
}

// -------------------------------------------------------------------

// SSLErrorAssistantConfig

// optional uint32 version_id = 1;
inline bool SSLErrorAssistantConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSLErrorAssistantConfig::clear_version_id() {
  version_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSLErrorAssistantConfig::version_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
  return version_id_;
}
inline void SSLErrorAssistantConfig::set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
}

// repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
inline int SSLErrorAssistantConfig::captive_portal_cert_size() const {
  return captive_portal_cert_.size();
}
inline void SSLErrorAssistantConfig::clear_captive_portal_cert() {
  captive_portal_cert_.Clear();
}
inline ::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::mutable_captive_portal_cert(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >*
SSLErrorAssistantConfig::mutable_captive_portal_cert() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return &captive_portal_cert_;
}
inline const ::chrome_browser_ssl::CaptivePortalCert& SSLErrorAssistantConfig::captive_portal_cert(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Get(index);
}
inline ::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::add_captive_portal_cert() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >&
SSLErrorAssistantConfig::captive_portal_cert() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_;
}

// repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
inline int SSLErrorAssistantConfig::mitm_software_size() const {
  return mitm_software_.size();
}
inline void SSLErrorAssistantConfig::clear_mitm_software() {
  mitm_software_.Clear();
}
inline ::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::mutable_mitm_software(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >*
SSLErrorAssistantConfig::mutable_mitm_software() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return &mitm_software_;
}
inline const ::chrome_browser_ssl::MITMSoftware& SSLErrorAssistantConfig::mitm_software(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Get(index);
}
inline ::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::add_mitm_software() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >&
SSLErrorAssistantConfig::mitm_software() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_;
}

// repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
inline int SSLErrorAssistantConfig::dynamic_interstitial_size() const {
  return dynamic_interstitial_.size();
}
inline void SSLErrorAssistantConfig::clear_dynamic_interstitial() {
  dynamic_interstitial_.Clear();
}
inline ::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::mutable_dynamic_interstitial(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >*
SSLErrorAssistantConfig::mutable_dynamic_interstitial() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return &dynamic_interstitial_;
}
inline const ::chrome_browser_ssl::DynamicInterstitial& SSLErrorAssistantConfig::dynamic_interstitial(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Get(index);
}
inline ::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::add_dynamic_interstitial() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >&
SSLErrorAssistantConfig::dynamic_interstitial() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_ssl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::DynamicInterstitial_CertError> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5ferror_5fassistant_2eproto
