// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cert_logger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cert_5flogger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cert_5flogger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cert_5flogger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cert_5flogger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_ssl {
class CertLoggerFeaturesInfo;
class CertLoggerFeaturesInfoDefaultTypeInternal;
extern CertLoggerFeaturesInfoDefaultTypeInternal _CertLoggerFeaturesInfo_default_instance_;
class CertLoggerFeaturesInfo_NetworkTimeQueryingInfo;
class CertLoggerFeaturesInfo_NetworkTimeQueryingInfoDefaultTypeInternal;
extern CertLoggerFeaturesInfo_NetworkTimeQueryingInfoDefaultTypeInternal _CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_;
class CertLoggerInterstitialInfo;
class CertLoggerInterstitialInfoDefaultTypeInternal;
extern CertLoggerInterstitialInfoDefaultTypeInternal _CertLoggerInterstitialInfo_default_instance_;
class CertLoggerRequest;
class CertLoggerRequestDefaultTypeInternal;
extern CertLoggerRequestDefaultTypeInternal _CertLoggerRequest_default_instance_;
class MacCertEvidenceInfo;
class MacCertEvidenceInfoDefaultTypeInternal;
extern MacCertEvidenceInfoDefaultTypeInternal _MacCertEvidenceInfo_default_instance_;
class MacPlatformDebugInfo;
class MacPlatformDebugInfoDefaultTypeInternal;
extern MacPlatformDebugInfoDefaultTypeInternal _MacPlatformDebugInfo_default_instance_;
class TrialVerificationInfo;
class TrialVerificationInfoDefaultTypeInternal;
extern TrialVerificationInfoDefaultTypeInternal _TrialVerificationInfo_default_instance_;
}  // namespace chrome_browser_ssl
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_ssl::CertLoggerFeaturesInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::CertLoggerFeaturesInfo>(Arena*);
template<> ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo>(Arena*);
template<> ::chrome_browser_ssl::CertLoggerInterstitialInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::CertLoggerInterstitialInfo>(Arena*);
template<> ::chrome_browser_ssl::CertLoggerRequest* Arena::CreateMaybeMessage<::chrome_browser_ssl::CertLoggerRequest>(Arena*);
template<> ::chrome_browser_ssl::MacCertEvidenceInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::MacCertEvidenceInfo>(Arena*);
template<> ::chrome_browser_ssl::MacPlatformDebugInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::MacPlatformDebugInfo>(Arena*);
template<> ::chrome_browser_ssl::TrialVerificationInfo* Arena::CreateMaybeMessage<::chrome_browser_ssl::TrialVerificationInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_ssl {

enum CertLoggerInterstitialInfo_InterstitialReason : int {
  CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON = 0,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL = 1,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL = 2,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK = 3,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SUPERFISH PROTOBUF_DEPRECATED = 4,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_MITM_SOFTWARE = 5,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_BLOCKED_INTERCEPTION = 6,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_LEGACY_TLS = 7
};
bool CertLoggerInterstitialInfo_InterstitialReason_IsValid(int value);
constexpr CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN = CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
constexpr CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX = CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_LEGACY_TLS;
constexpr int CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE = CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX + 1;

const std::string& CertLoggerInterstitialInfo_InterstitialReason_Name(CertLoggerInterstitialInfo_InterstitialReason value);
template<typename T>
inline const std::string& CertLoggerInterstitialInfo_InterstitialReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerInterstitialInfo_InterstitialReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerInterstitialInfo_InterstitialReason_Name.");
  return CertLoggerInterstitialInfo_InterstitialReason_Name(static_cast<CertLoggerInterstitialInfo_InterstitialReason>(enum_t_value));
}
bool CertLoggerInterstitialInfo_InterstitialReason_Parse(
    const std::string& name, CertLoggerInterstitialInfo_InterstitialReason* value);
enum CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior : int {
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN = 0,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_BACKGROUND_ONLY = 1,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_ON_DEMAND_ONLY = 2,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND = 3
};
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(int value);
constexpr CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MIN = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN;
constexpr CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND;
constexpr int CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_ARRAYSIZE = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX + 1;

const std::string& CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Name(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value);
template<typename T>
inline const std::string& CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Name.");
  return CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Name(static_cast<CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior>(enum_t_value));
}
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Parse(
    const std::string& name, CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior* value);
enum CertLoggerFeaturesInfo_AndroidAIAFetchingStatus : int {
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN = 0,
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_ENABLED = 1,
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED = 2
};
bool CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(int value);
constexpr CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MIN = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN;
constexpr CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED;
constexpr int CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_ARRAYSIZE = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX + 1;

const std::string& CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Name(CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value);
template<typename T>
inline const std::string& CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerFeaturesInfo_AndroidAIAFetchingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Name.");
  return CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Name(static_cast<CertLoggerFeaturesInfo_AndroidAIAFetchingStatus>(enum_t_value));
}
bool CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Parse(
    const std::string& name, CertLoggerFeaturesInfo_AndroidAIAFetchingStatus* value);
enum CertLoggerRequest_CertError : int {
  CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR = 0,
  CertLoggerRequest_CertError_ERR_CERT_REVOKED = 1,
  CertLoggerRequest_CertError_ERR_CERT_INVALID = 2,
  CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = 3,
  CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID = 4,
  CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID = 5,
  CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION = 6,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM = 7,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY = 8,
  CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID = 9,
  CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG = 10,
  CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION = 11,
  CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM = 12,
  CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME = 13,
  CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = 14,
  CertLoggerRequest_CertError_ERR_CERT_SYMANTEC_LEGACY = 15,
  CertLoggerRequest_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED = 16
};
bool CertLoggerRequest_CertError_IsValid(int value);
constexpr CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MIN = CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
constexpr CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MAX = CertLoggerRequest_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
constexpr int CertLoggerRequest_CertError_CertError_ARRAYSIZE = CertLoggerRequest_CertError_CertError_MAX + 1;

const std::string& CertLoggerRequest_CertError_Name(CertLoggerRequest_CertError value);
template<typename T>
inline const std::string& CertLoggerRequest_CertError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerRequest_CertError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerRequest_CertError_Name.");
  return CertLoggerRequest_CertError_Name(static_cast<CertLoggerRequest_CertError>(enum_t_value));
}
bool CertLoggerRequest_CertError_Parse(
    const std::string& name, CertLoggerRequest_CertError* value);
enum CertLoggerRequest_ChromeChannel : int {
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE = 0,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_UNKNOWN = 1,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_DEV = 2,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_CANARY = 3,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_BETA = 4,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE = 5
};
bool CertLoggerRequest_ChromeChannel_IsValid(int value);
constexpr CertLoggerRequest_ChromeChannel CertLoggerRequest_ChromeChannel_ChromeChannel_MIN = CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE;
constexpr CertLoggerRequest_ChromeChannel CertLoggerRequest_ChromeChannel_ChromeChannel_MAX = CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE;
constexpr int CertLoggerRequest_ChromeChannel_ChromeChannel_ARRAYSIZE = CertLoggerRequest_ChromeChannel_ChromeChannel_MAX + 1;

const std::string& CertLoggerRequest_ChromeChannel_Name(CertLoggerRequest_ChromeChannel value);
template<typename T>
inline const std::string& CertLoggerRequest_ChromeChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerRequest_ChromeChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerRequest_ChromeChannel_Name.");
  return CertLoggerRequest_ChromeChannel_Name(static_cast<CertLoggerRequest_ChromeChannel>(enum_t_value));
}
bool CertLoggerRequest_ChromeChannel_Parse(
    const std::string& name, CertLoggerRequest_ChromeChannel* value);
enum CertLoggerRequest_CertStatus : int {
  CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS = 0,
  CertLoggerRequest_CertStatus_STATUS_IS_EV = 1,
  CertLoggerRequest_CertStatus_STATUS_REV_CHECKING_ENABLED = 2,
  CertLoggerRequest_CertStatus_STATUS_SHA1_SIGNATURE_PRESENT = 3,
  CertLoggerRequest_CertStatus_STATUS_CT_COMPLIANCE_FAILED = 4,
  CertLoggerRequest_CertStatus_STATUS_KNOWN_INTERCEPTION_DETECTED = 5
};
bool CertLoggerRequest_CertStatus_IsValid(int value);
constexpr CertLoggerRequest_CertStatus CertLoggerRequest_CertStatus_CertStatus_MIN = CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS;
constexpr CertLoggerRequest_CertStatus CertLoggerRequest_CertStatus_CertStatus_MAX = CertLoggerRequest_CertStatus_STATUS_KNOWN_INTERCEPTION_DETECTED;
constexpr int CertLoggerRequest_CertStatus_CertStatus_ARRAYSIZE = CertLoggerRequest_CertStatus_CertStatus_MAX + 1;

const std::string& CertLoggerRequest_CertStatus_Name(CertLoggerRequest_CertStatus value);
template<typename T>
inline const std::string& CertLoggerRequest_CertStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertLoggerRequest_CertStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertLoggerRequest_CertStatus_Name.");
  return CertLoggerRequest_CertStatus_Name(static_cast<CertLoggerRequest_CertStatus>(enum_t_value));
}
bool CertLoggerRequest_CertStatus_Parse(
    const std::string& name, CertLoggerRequest_CertStatus* value);
enum TrialVerificationInfo_VerifyFlags : int {
  TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG = 0,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED = 1,
  TrialVerificationInfo_VerifyFlags_VERIFY_EV_CERT PROTOBUF_DEPRECATED = 2,
  TrialVerificationInfo_VerifyFlags_VERIFY_CERT_IO_ENABLED PROTOBUF_DEPRECATED = 3,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED_EV_ONLY PROTOBUF_DEPRECATED = 4,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS = 5,
  TrialVerificationInfo_VerifyFlags_VERIFY_ENABLE_SHA1_LOCAL_ANCHORS = 6,
  TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT = 7
};
bool TrialVerificationInfo_VerifyFlags_IsValid(int value);
constexpr TrialVerificationInfo_VerifyFlags TrialVerificationInfo_VerifyFlags_VerifyFlags_MIN = TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG;
constexpr TrialVerificationInfo_VerifyFlags TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX = TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT;
constexpr int TrialVerificationInfo_VerifyFlags_VerifyFlags_ARRAYSIZE = TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX + 1;

const std::string& TrialVerificationInfo_VerifyFlags_Name(TrialVerificationInfo_VerifyFlags value);
template<typename T>
inline const std::string& TrialVerificationInfo_VerifyFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrialVerificationInfo_VerifyFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrialVerificationInfo_VerifyFlags_Name.");
  return TrialVerificationInfo_VerifyFlags_Name(static_cast<TrialVerificationInfo_VerifyFlags>(enum_t_value));
}
bool TrialVerificationInfo_VerifyFlags_Parse(
    const std::string& name, TrialVerificationInfo_VerifyFlags* value);
enum TrialVerificationInfo_MacTrustFlags : int {
  TrialVerificationInfo_MacTrustFlags_UNKNOWN_MAC_TRUST_FLAG = 0,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_ARRAY_EMPTY = 1,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_EMPTY = 2,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_UNKNOWN_KEY = 3,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY = 4,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_INVALID_POLICY_TYPE = 5,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_APPLICATION = 6,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY_STRING = 7,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_KEY_USAGE = 8,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_RESULT = 9,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_INVALID_RESULT_TYPE = 10,
  TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_ALLOWED_ERROR = 11
};
bool TrialVerificationInfo_MacTrustFlags_IsValid(int value);
constexpr TrialVerificationInfo_MacTrustFlags TrialVerificationInfo_MacTrustFlags_MacTrustFlags_MIN = TrialVerificationInfo_MacTrustFlags_UNKNOWN_MAC_TRUST_FLAG;
constexpr TrialVerificationInfo_MacTrustFlags TrialVerificationInfo_MacTrustFlags_MacTrustFlags_MAX = TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_ALLOWED_ERROR;
constexpr int TrialVerificationInfo_MacTrustFlags_MacTrustFlags_ARRAYSIZE = TrialVerificationInfo_MacTrustFlags_MacTrustFlags_MAX + 1;

const std::string& TrialVerificationInfo_MacTrustFlags_Name(TrialVerificationInfo_MacTrustFlags value);
template<typename T>
inline const std::string& TrialVerificationInfo_MacTrustFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrialVerificationInfo_MacTrustFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrialVerificationInfo_MacTrustFlags_Name.");
  return TrialVerificationInfo_MacTrustFlags_Name(static_cast<TrialVerificationInfo_MacTrustFlags>(enum_t_value));
}
bool TrialVerificationInfo_MacTrustFlags_Parse(
    const std::string& name, TrialVerificationInfo_MacTrustFlags* value);
// ===================================================================

class CertLoggerInterstitialInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerInterstitialInfo) */ {
 public:
  CertLoggerInterstitialInfo();
  virtual ~CertLoggerInterstitialInfo();

  CertLoggerInterstitialInfo(const CertLoggerInterstitialInfo& from);
  CertLoggerInterstitialInfo(CertLoggerInterstitialInfo&& from) noexcept
    : CertLoggerInterstitialInfo() {
    *this = ::std::move(from);
  }

  inline CertLoggerInterstitialInfo& operator=(const CertLoggerInterstitialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertLoggerInterstitialInfo& operator=(CertLoggerInterstitialInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerInterstitialInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertLoggerInterstitialInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerInterstitialInfo*>(
               &_CertLoggerInterstitialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CertLoggerInterstitialInfo& a, CertLoggerInterstitialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CertLoggerInterstitialInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertLoggerInterstitialInfo* New() const final {
    return CreateMaybeMessage<CertLoggerInterstitialInfo>(nullptr);
  }

  CertLoggerInterstitialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertLoggerInterstitialInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CertLoggerInterstitialInfo& from);
  void MergeFrom(const CertLoggerInterstitialInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerInterstitialInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.CertLoggerInterstitialInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CertLoggerInterstitialInfo_InterstitialReason InterstitialReason;
  static constexpr InterstitialReason UNKNOWN_INTERSTITIAL_REASON =
    CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
  static constexpr InterstitialReason INTERSTITIAL_SSL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL;
  static constexpr InterstitialReason INTERSTITIAL_CAPTIVE_PORTAL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL;
  static constexpr InterstitialReason INTERSTITIAL_CLOCK =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK;
  PROTOBUF_DEPRECATED static constexpr InterstitialReason INTERSTITIAL_SUPERFISH =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SUPERFISH;
  static constexpr InterstitialReason INTERSTITIAL_MITM_SOFTWARE =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_MITM_SOFTWARE;
  static constexpr InterstitialReason INTERSTITIAL_BLOCKED_INTERCEPTION =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_BLOCKED_INTERCEPTION;
  static constexpr InterstitialReason INTERSTITIAL_LEGACY_TLS =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_LEGACY_TLS;
  static inline bool InterstitialReason_IsValid(int value) {
    return CertLoggerInterstitialInfo_InterstitialReason_IsValid(value);
  }
  static constexpr InterstitialReason InterstitialReason_MIN =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN;
  static constexpr InterstitialReason InterstitialReason_MAX =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX;
  static constexpr int InterstitialReason_ARRAYSIZE =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InterstitialReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InterstitialReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InterstitialReason_Name.");
    return CertLoggerInterstitialInfo_InterstitialReason_Name(enum_t_value);
  }
  static inline bool InterstitialReason_Parse(const std::string& name,
      InterstitialReason* value) {
    return CertLoggerInterstitialInfo_InterstitialReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInterstitialReasonFieldNumber = 1,
    kUserProceededFieldNumber = 2,
    kOverridableFieldNumber = 3,
    kInterstitialCreatedTimeUsecFieldNumber = 4,
  };
  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
  bool has_interstitial_reason() const;
  void clear_interstitial_reason();
  ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason interstitial_reason() const;
  void set_interstitial_reason(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason value);

  // optional bool user_proceeded = 2;
  bool has_user_proceeded() const;
  void clear_user_proceeded();
  bool user_proceeded() const;
  void set_user_proceeded(bool value);

  // optional bool overridable = 3;
  bool has_overridable() const;
  void clear_overridable();
  bool overridable() const;
  void set_overridable(bool value);

  // optional int64 interstitial_created_time_usec = 4;
  bool has_interstitial_created_time_usec() const;
  void clear_interstitial_created_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 interstitial_created_time_usec() const;
  void set_interstitial_created_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerInterstitialInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int interstitial_reason_;
  bool user_proceeded_;
  bool overridable_;
  ::PROTOBUF_NAMESPACE_ID::int64 interstitial_created_time_usec_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class CertLoggerFeaturesInfo_NetworkTimeQueryingInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo) */ {
 public:
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo();
  virtual ~CertLoggerFeaturesInfo_NetworkTimeQueryingInfo();

  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo&& from) noexcept
    : CertLoggerFeaturesInfo_NetworkTimeQueryingInfo() {
    *this = ::std::move(from);
  }

  inline CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& operator=(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& operator=(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo*>(
               &_CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& a, CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* New() const final {
    return CreateMaybeMessage<CertLoggerFeaturesInfo_NetworkTimeQueryingInfo>(nullptr);
  }

  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertLoggerFeaturesInfo_NetworkTimeQueryingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);
  void MergeFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior NetworkTimeFetchBehavior;
  static constexpr NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_UNKNOWN =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN;
  static constexpr NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_BACKGROUND_ONLY =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_BACKGROUND_ONLY;
  static constexpr NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_ON_DEMAND_ONLY =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_ON_DEMAND_ONLY;
  static constexpr NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND;
  static inline bool NetworkTimeFetchBehavior_IsValid(int value) {
    return CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value);
  }
  static constexpr NetworkTimeFetchBehavior NetworkTimeFetchBehavior_MIN =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MIN;
  static constexpr NetworkTimeFetchBehavior NetworkTimeFetchBehavior_MAX =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX;
  static constexpr int NetworkTimeFetchBehavior_ARRAYSIZE =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NetworkTimeFetchBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkTimeFetchBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkTimeFetchBehavior_Name.");
    return CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Name(enum_t_value);
  }
  static inline bool NetworkTimeFetchBehavior_Parse(const std::string& name,
      NetworkTimeFetchBehavior* value) {
    return CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTimeQueriesEnabledFieldNumber = 1,
    kNetworkTimeQueryBehaviorFieldNumber = 2,
  };
  // optional bool network_time_queries_enabled = 1;
  bool has_network_time_queries_enabled() const;
  void clear_network_time_queries_enabled();
  bool network_time_queries_enabled() const;
  void set_network_time_queries_enabled(bool value);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
  bool has_network_time_query_behavior() const;
  void clear_network_time_query_behavior();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior network_time_query_behavior() const;
  void set_network_time_query_behavior(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool network_time_queries_enabled_;
  int network_time_query_behavior_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class CertLoggerFeaturesInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerFeaturesInfo) */ {
 public:
  CertLoggerFeaturesInfo();
  virtual ~CertLoggerFeaturesInfo();

  CertLoggerFeaturesInfo(const CertLoggerFeaturesInfo& from);
  CertLoggerFeaturesInfo(CertLoggerFeaturesInfo&& from) noexcept
    : CertLoggerFeaturesInfo() {
    *this = ::std::move(from);
  }

  inline CertLoggerFeaturesInfo& operator=(const CertLoggerFeaturesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertLoggerFeaturesInfo& operator=(CertLoggerFeaturesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerFeaturesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertLoggerFeaturesInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerFeaturesInfo*>(
               &_CertLoggerFeaturesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CertLoggerFeaturesInfo& a, CertLoggerFeaturesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CertLoggerFeaturesInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertLoggerFeaturesInfo* New() const final {
    return CreateMaybeMessage<CertLoggerFeaturesInfo>(nullptr);
  }

  CertLoggerFeaturesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertLoggerFeaturesInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CertLoggerFeaturesInfo& from);
  void MergeFrom(const CertLoggerFeaturesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerFeaturesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.CertLoggerFeaturesInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CertLoggerFeaturesInfo_NetworkTimeQueryingInfo NetworkTimeQueryingInfo;

  typedef CertLoggerFeaturesInfo_AndroidAIAFetchingStatus AndroidAIAFetchingStatus;
  static constexpr AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_UNKNOWN =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN;
  static constexpr AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_ENABLED =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_ENABLED;
  static constexpr AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_DISABLED =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED;
  static inline bool AndroidAIAFetchingStatus_IsValid(int value) {
    return CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value);
  }
  static constexpr AndroidAIAFetchingStatus AndroidAIAFetchingStatus_MIN =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MIN;
  static constexpr AndroidAIAFetchingStatus AndroidAIAFetchingStatus_MAX =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX;
  static constexpr int AndroidAIAFetchingStatus_ARRAYSIZE =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AndroidAIAFetchingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AndroidAIAFetchingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AndroidAIAFetchingStatus_Name.");
    return CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Name(enum_t_value);
  }
  static inline bool AndroidAIAFetchingStatus_Parse(const std::string& name,
      AndroidAIAFetchingStatus* value) {
    return CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTimeQueryingInfoFieldNumber = 1,
    kTrialVerificationInfoFieldNumber = 3,
    kAndroidAiaFetchingStatusFieldNumber = 2,
  };
  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
  bool has_network_time_querying_info() const;
  void clear_network_time_querying_info();
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& network_time_querying_info() const;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* release_network_time_querying_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* mutable_network_time_querying_info();
  void set_allocated_network_time_querying_info(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info);

  // optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
  bool has_trial_verification_info() const;
  void clear_trial_verification_info();
  const ::chrome_browser_ssl::TrialVerificationInfo& trial_verification_info() const;
  ::chrome_browser_ssl::TrialVerificationInfo* release_trial_verification_info();
  ::chrome_browser_ssl::TrialVerificationInfo* mutable_trial_verification_info();
  void set_allocated_trial_verification_info(::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
  bool has_android_aia_fetching_status() const;
  void clear_android_aia_fetching_status();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus android_aia_fetching_status() const;
  void set_android_aia_fetching_status(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerFeaturesInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info_;
  ::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info_;
  int android_aia_fetching_status_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class CertLoggerRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerRequest) */ {
 public:
  CertLoggerRequest();
  virtual ~CertLoggerRequest();

  CertLoggerRequest(const CertLoggerRequest& from);
  CertLoggerRequest(CertLoggerRequest&& from) noexcept
    : CertLoggerRequest() {
    *this = ::std::move(from);
  }

  inline CertLoggerRequest& operator=(const CertLoggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertLoggerRequest& operator=(CertLoggerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertLoggerRequest* internal_default_instance() {
    return reinterpret_cast<const CertLoggerRequest*>(
               &_CertLoggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CertLoggerRequest& a, CertLoggerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CertLoggerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertLoggerRequest* New() const final {
    return CreateMaybeMessage<CertLoggerRequest>(nullptr);
  }

  CertLoggerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertLoggerRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CertLoggerRequest& from);
  void MergeFrom(const CertLoggerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.CertLoggerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CertLoggerRequest_CertError CertError;
  static constexpr CertError UNKNOWN_CERT_ERROR =
    CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
  static constexpr CertError ERR_CERT_REVOKED =
    CertLoggerRequest_CertError_ERR_CERT_REVOKED;
  static constexpr CertError ERR_CERT_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_INVALID;
  static constexpr CertError ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN =
    CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
  static constexpr CertError ERR_CERT_AUTHORITY_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID;
  static constexpr CertError ERR_CERT_COMMON_NAME_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID;
  static constexpr CertError ERR_CERT_NAME_CONSTRAINT_VIOLATION =
    CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION;
  static constexpr CertError ERR_CERT_WEAK_SIGNATURE_ALGORITHM =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
  static constexpr CertError ERR_CERT_WEAK_KEY =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY;
  static constexpr CertError ERR_CERT_DATE_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID;
  static constexpr CertError ERR_CERT_VALIDITY_TOO_LONG =
    CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG;
  static constexpr CertError ERR_CERT_UNABLE_TO_CHECK_REVOCATION =
    CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
  static constexpr CertError ERR_CERT_NO_REVOCATION_MECHANISM =
    CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM;
  static constexpr CertError ERR_CERT_NON_UNIQUE_NAME =
    CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME;
  static constexpr CertError ERR_CERTIFICATE_TRANSPARENCY_REQUIRED =
    CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
  static constexpr CertError ERR_CERT_SYMANTEC_LEGACY =
    CertLoggerRequest_CertError_ERR_CERT_SYMANTEC_LEGACY;
  static constexpr CertError ERR_CERT_KNOWN_INTERCEPTION_BLOCKED =
    CertLoggerRequest_CertError_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
  static inline bool CertError_IsValid(int value) {
    return CertLoggerRequest_CertError_IsValid(value);
  }
  static constexpr CertError CertError_MIN =
    CertLoggerRequest_CertError_CertError_MIN;
  static constexpr CertError CertError_MAX =
    CertLoggerRequest_CertError_CertError_MAX;
  static constexpr int CertError_ARRAYSIZE =
    CertLoggerRequest_CertError_CertError_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CertError_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CertError>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CertError_Name.");
    return CertLoggerRequest_CertError_Name(enum_t_value);
  }
  static inline bool CertError_Parse(const std::string& name,
      CertError* value) {
    return CertLoggerRequest_CertError_Parse(name, value);
  }

  typedef CertLoggerRequest_ChromeChannel ChromeChannel;
  static constexpr ChromeChannel CHROME_CHANNEL_NONE =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE;
  static constexpr ChromeChannel CHROME_CHANNEL_UNKNOWN =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_UNKNOWN;
  static constexpr ChromeChannel CHROME_CHANNEL_DEV =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_DEV;
  static constexpr ChromeChannel CHROME_CHANNEL_CANARY =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_CANARY;
  static constexpr ChromeChannel CHROME_CHANNEL_BETA =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_BETA;
  static constexpr ChromeChannel CHROME_CHANNEL_STABLE =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE;
  static inline bool ChromeChannel_IsValid(int value) {
    return CertLoggerRequest_ChromeChannel_IsValid(value);
  }
  static constexpr ChromeChannel ChromeChannel_MIN =
    CertLoggerRequest_ChromeChannel_ChromeChannel_MIN;
  static constexpr ChromeChannel ChromeChannel_MAX =
    CertLoggerRequest_ChromeChannel_ChromeChannel_MAX;
  static constexpr int ChromeChannel_ARRAYSIZE =
    CertLoggerRequest_ChromeChannel_ChromeChannel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChromeChannel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChromeChannel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChromeChannel_Name.");
    return CertLoggerRequest_ChromeChannel_Name(enum_t_value);
  }
  static inline bool ChromeChannel_Parse(const std::string& name,
      ChromeChannel* value) {
    return CertLoggerRequest_ChromeChannel_Parse(name, value);
  }

  typedef CertLoggerRequest_CertStatus CertStatus;
  static constexpr CertStatus UNKNOWN_CERT_STATUS =
    CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS;
  static constexpr CertStatus STATUS_IS_EV =
    CertLoggerRequest_CertStatus_STATUS_IS_EV;
  static constexpr CertStatus STATUS_REV_CHECKING_ENABLED =
    CertLoggerRequest_CertStatus_STATUS_REV_CHECKING_ENABLED;
  static constexpr CertStatus STATUS_SHA1_SIGNATURE_PRESENT =
    CertLoggerRequest_CertStatus_STATUS_SHA1_SIGNATURE_PRESENT;
  static constexpr CertStatus STATUS_CT_COMPLIANCE_FAILED =
    CertLoggerRequest_CertStatus_STATUS_CT_COMPLIANCE_FAILED;
  static constexpr CertStatus STATUS_KNOWN_INTERCEPTION_DETECTED =
    CertLoggerRequest_CertStatus_STATUS_KNOWN_INTERCEPTION_DETECTED;
  static inline bool CertStatus_IsValid(int value) {
    return CertLoggerRequest_CertStatus_IsValid(value);
  }
  static constexpr CertStatus CertStatus_MIN =
    CertLoggerRequest_CertStatus_CertStatus_MIN;
  static constexpr CertStatus CertStatus_MAX =
    CertLoggerRequest_CertStatus_CertStatus_MAX;
  static constexpr int CertStatus_ARRAYSIZE =
    CertLoggerRequest_CertStatus_CertStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CertStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CertStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CertStatus_Name.");
    return CertLoggerRequest_CertStatus_Name(enum_t_value);
  }
  static inline bool CertStatus_Parse(const std::string& name,
      CertStatus* value) {
    return CertLoggerRequest_CertStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashFieldNumber = 4,
    kPinFieldNumber = 5,
    kCertErrorFieldNumber = 6,
    kCertStatusFieldNumber = 14,
    kHostnameFieldNumber = 1,
    kCertChainFieldNumber = 2,
    kUnverifiedCertChainFieldNumber = 8,
    kInterstitialInfoFieldNumber = 7,
    kFeaturesInfoFieldNumber = 10,
    kTimeUsecFieldNumber = 3,
    kIsIssuedByKnownRootFieldNumber = 9,
    kIsRetryUploadFieldNumber = 11,
    kIsEnterpriseManagedFieldNumber = 13,
    kChromeChannelFieldNumber = 12,
  };
  // repeated string public_key_hash = 4;
  int public_key_hash_size() const;
  void clear_public_key_hash();
  const std::string& public_key_hash(int index) const;
  std::string* mutable_public_key_hash(int index);
  void set_public_key_hash(int index, const std::string& value);
  void set_public_key_hash(int index, std::string&& value);
  void set_public_key_hash(int index, const char* value);
  void set_public_key_hash(int index, const char* value, size_t size);
  std::string* add_public_key_hash();
  void add_public_key_hash(const std::string& value);
  void add_public_key_hash(std::string&& value);
  void add_public_key_hash(const char* value);
  void add_public_key_hash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_key_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_key_hash();

  // repeated string pin = 5;
  int pin_size() const;
  void clear_pin();
  const std::string& pin(int index) const;
  std::string* mutable_pin(int index);
  void set_pin(int index, const std::string& value);
  void set_pin(int index, std::string&& value);
  void set_pin(int index, const char* value);
  void set_pin(int index, const char* value, size_t size);
  std::string* add_pin();
  void add_pin(const std::string& value);
  void add_pin(std::string&& value);
  void add_pin(const char* value);
  void add_pin(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pin();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
  int cert_error_size() const;
  void clear_cert_error();
  ::chrome_browser_ssl::CertLoggerRequest_CertError cert_error(int index) const;
  void set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value);
  void add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cert_error() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cert_error();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
  int cert_status_size() const;
  void clear_cert_status();
  ::chrome_browser_ssl::CertLoggerRequest_CertStatus cert_status(int index) const;
  void set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  void add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cert_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cert_status();

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);

  // required string cert_chain = 2;
  bool has_cert_chain() const;
  void clear_cert_chain();
  const std::string& cert_chain() const;
  void set_cert_chain(const std::string& value);
  void set_cert_chain(std::string&& value);
  void set_cert_chain(const char* value);
  void set_cert_chain(const char* value, size_t size);
  std::string* mutable_cert_chain();
  std::string* release_cert_chain();
  void set_allocated_cert_chain(std::string* cert_chain);

  // optional string unverified_cert_chain = 8;
  bool has_unverified_cert_chain() const;
  void clear_unverified_cert_chain();
  const std::string& unverified_cert_chain() const;
  void set_unverified_cert_chain(const std::string& value);
  void set_unverified_cert_chain(std::string&& value);
  void set_unverified_cert_chain(const char* value);
  void set_unverified_cert_chain(const char* value, size_t size);
  std::string* mutable_unverified_cert_chain();
  std::string* release_unverified_cert_chain();
  void set_allocated_unverified_cert_chain(std::string* unverified_cert_chain);

  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
  bool has_interstitial_info() const;
  void clear_interstitial_info();
  const ::chrome_browser_ssl::CertLoggerInterstitialInfo& interstitial_info() const;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* release_interstitial_info();
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* mutable_interstitial_info();
  void set_allocated_interstitial_info(::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
  bool has_features_info() const;
  void clear_features_info();
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo& features_info() const;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* release_features_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* mutable_features_info();
  void set_allocated_features_info(::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info);

  // required int64 time_usec = 3;
  bool has_time_usec() const;
  void clear_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec() const;
  void set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_issued_by_known_root = 9;
  bool has_is_issued_by_known_root() const;
  void clear_is_issued_by_known_root();
  bool is_issued_by_known_root() const;
  void set_is_issued_by_known_root(bool value);

  // optional bool is_retry_upload = 11;
  bool has_is_retry_upload() const;
  void clear_is_retry_upload();
  bool is_retry_upload() const;
  void set_is_retry_upload(bool value);

  // optional bool is_enterprise_managed = 13;
  bool has_is_enterprise_managed() const;
  void clear_is_enterprise_managed();
  bool is_enterprise_managed() const;
  void set_is_enterprise_managed(bool value);

  // optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
  bool has_chrome_channel() const;
  void clear_chrome_channel();
  ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel chrome_channel() const;
  void set_chrome_channel(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_key_hash_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cert_error_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cert_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unverified_cert_chain_;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info_;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_usec_;
  bool is_issued_by_known_root_;
  bool is_retry_upload_;
  bool is_enterprise_managed_;
  int chrome_channel_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class MacCertEvidenceInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.MacCertEvidenceInfo) */ {
 public:
  MacCertEvidenceInfo();
  virtual ~MacCertEvidenceInfo();

  MacCertEvidenceInfo(const MacCertEvidenceInfo& from);
  MacCertEvidenceInfo(MacCertEvidenceInfo&& from) noexcept
    : MacCertEvidenceInfo() {
    *this = ::std::move(from);
  }

  inline MacCertEvidenceInfo& operator=(const MacCertEvidenceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacCertEvidenceInfo& operator=(MacCertEvidenceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MacCertEvidenceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacCertEvidenceInfo* internal_default_instance() {
    return reinterpret_cast<const MacCertEvidenceInfo*>(
               &_MacCertEvidenceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MacCertEvidenceInfo& a, MacCertEvidenceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MacCertEvidenceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacCertEvidenceInfo* New() const final {
    return CreateMaybeMessage<MacCertEvidenceInfo>(nullptr);
  }

  MacCertEvidenceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacCertEvidenceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MacCertEvidenceInfo& from);
  void MergeFrom(const MacCertEvidenceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MacCertEvidenceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.MacCertEvidenceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodesFieldNumber = 2,
    kStatusBitsFieldNumber = 1,
  };
  // repeated int32 status_codes = 2;
  int status_codes_size() const;
  void clear_status_codes();
  ::PROTOBUF_NAMESPACE_ID::int32 status_codes(int index) const;
  void set_status_codes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_status_codes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      status_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_status_codes();

  // optional uint32 status_bits = 1;
  bool has_status_bits() const;
  void clear_status_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 status_bits() const;
  void set_status_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.MacCertEvidenceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > status_codes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_bits_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class MacPlatformDebugInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.MacPlatformDebugInfo) */ {
 public:
  MacPlatformDebugInfo();
  virtual ~MacPlatformDebugInfo();

  MacPlatformDebugInfo(const MacPlatformDebugInfo& from);
  MacPlatformDebugInfo(MacPlatformDebugInfo&& from) noexcept
    : MacPlatformDebugInfo() {
    *this = ::std::move(from);
  }

  inline MacPlatformDebugInfo& operator=(const MacPlatformDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacPlatformDebugInfo& operator=(MacPlatformDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MacPlatformDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacPlatformDebugInfo* internal_default_instance() {
    return reinterpret_cast<const MacPlatformDebugInfo*>(
               &_MacPlatformDebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MacPlatformDebugInfo& a, MacPlatformDebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MacPlatformDebugInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacPlatformDebugInfo* New() const final {
    return CreateMaybeMessage<MacPlatformDebugInfo>(nullptr);
  }

  MacPlatformDebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacPlatformDebugInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MacPlatformDebugInfo& from);
  void MergeFrom(const MacPlatformDebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MacPlatformDebugInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.MacPlatformDebugInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusChainFieldNumber = 3,
    kTrustResultFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // repeated .chrome_browser_ssl.MacCertEvidenceInfo status_chain = 3;
  int status_chain_size() const;
  void clear_status_chain();
  ::chrome_browser_ssl::MacCertEvidenceInfo* mutable_status_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MacCertEvidenceInfo >*
      mutable_status_chain();
  const ::chrome_browser_ssl::MacCertEvidenceInfo& status_chain(int index) const;
  ::chrome_browser_ssl::MacCertEvidenceInfo* add_status_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MacCertEvidenceInfo >&
      status_chain() const;

  // optional uint32 trust_result = 1;
  bool has_trust_result() const;
  void clear_trust_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 trust_result() const;
  void set_trust_result(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.MacPlatformDebugInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MacCertEvidenceInfo > status_chain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trust_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// -------------------------------------------------------------------

class TrialVerificationInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.TrialVerificationInfo) */ {
 public:
  TrialVerificationInfo();
  virtual ~TrialVerificationInfo();

  TrialVerificationInfo(const TrialVerificationInfo& from);
  TrialVerificationInfo(TrialVerificationInfo&& from) noexcept
    : TrialVerificationInfo() {
    *this = ::std::move(from);
  }

  inline TrialVerificationInfo& operator=(const TrialVerificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrialVerificationInfo& operator=(TrialVerificationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrialVerificationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrialVerificationInfo* internal_default_instance() {
    return reinterpret_cast<const TrialVerificationInfo*>(
               &_TrialVerificationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrialVerificationInfo& a, TrialVerificationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrialVerificationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrialVerificationInfo* New() const final {
    return CreateMaybeMessage<TrialVerificationInfo>(nullptr);
  }

  TrialVerificationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrialVerificationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrialVerificationInfo& from);
  void MergeFrom(const TrialVerificationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrialVerificationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.TrialVerificationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrialVerificationInfo_VerifyFlags VerifyFlags;
  static constexpr VerifyFlags UNKNOWN_VERIFY_FLAG =
    TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG;
  static constexpr VerifyFlags VERIFY_REV_CHECKING_ENABLED =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED;
  PROTOBUF_DEPRECATED static constexpr VerifyFlags VERIFY_EV_CERT =
    TrialVerificationInfo_VerifyFlags_VERIFY_EV_CERT;
  PROTOBUF_DEPRECATED static constexpr VerifyFlags VERIFY_CERT_IO_ENABLED =
    TrialVerificationInfo_VerifyFlags_VERIFY_CERT_IO_ENABLED;
  PROTOBUF_DEPRECATED static constexpr VerifyFlags VERIFY_REV_CHECKING_ENABLED_EV_ONLY =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED_EV_ONLY;
  static constexpr VerifyFlags VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS;
  static constexpr VerifyFlags VERIFY_ENABLE_SHA1_LOCAL_ANCHORS =
    TrialVerificationInfo_VerifyFlags_VERIFY_ENABLE_SHA1_LOCAL_ANCHORS;
  static constexpr VerifyFlags VERIFY_DISABLE_SYMANTEC_ENFORCEMENT =
    TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT;
  static inline bool VerifyFlags_IsValid(int value) {
    return TrialVerificationInfo_VerifyFlags_IsValid(value);
  }
  static constexpr VerifyFlags VerifyFlags_MIN =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_MIN;
  static constexpr VerifyFlags VerifyFlags_MAX =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX;
  static constexpr int VerifyFlags_ARRAYSIZE =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerifyFlags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerifyFlags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerifyFlags_Name.");
    return TrialVerificationInfo_VerifyFlags_Name(enum_t_value);
  }
  static inline bool VerifyFlags_Parse(const std::string& name,
      VerifyFlags* value) {
    return TrialVerificationInfo_VerifyFlags_Parse(name, value);
  }

  typedef TrialVerificationInfo_MacTrustFlags MacTrustFlags;
  static constexpr MacTrustFlags UNKNOWN_MAC_TRUST_FLAG =
    TrialVerificationInfo_MacTrustFlags_UNKNOWN_MAC_TRUST_FLAG;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_ARRAY_EMPTY =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_ARRAY_EMPTY;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_EMPTY =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_EMPTY;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_UNKNOWN_KEY =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_UNKNOWN_KEY;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_INVALID_POLICY_TYPE =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_INVALID_POLICY_TYPE;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_APPLICATION =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_APPLICATION;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY_STRING =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_POLICY_STRING;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_KEY_USAGE =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_KEY_USAGE;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_RESULT =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_RESULT;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_INVALID_RESULT_TYPE =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_INVALID_RESULT_TYPE;
  static constexpr MacTrustFlags MAC_TRUST_SETTINGS_DICT_CONTAINS_ALLOWED_ERROR =
    TrialVerificationInfo_MacTrustFlags_MAC_TRUST_SETTINGS_DICT_CONTAINS_ALLOWED_ERROR;
  static inline bool MacTrustFlags_IsValid(int value) {
    return TrialVerificationInfo_MacTrustFlags_IsValid(value);
  }
  static constexpr MacTrustFlags MacTrustFlags_MIN =
    TrialVerificationInfo_MacTrustFlags_MacTrustFlags_MIN;
  static constexpr MacTrustFlags MacTrustFlags_MAX =
    TrialVerificationInfo_MacTrustFlags_MacTrustFlags_MAX;
  static constexpr int MacTrustFlags_ARRAYSIZE =
    TrialVerificationInfo_MacTrustFlags_MacTrustFlags_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MacTrustFlags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MacTrustFlags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MacTrustFlags_Name.");
    return TrialVerificationInfo_MacTrustFlags_Name(enum_t_value);
  }
  static inline bool MacTrustFlags_Parse(const std::string& name,
      MacTrustFlags* value) {
    return TrialVerificationInfo_MacTrustFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashFieldNumber = 2,
    kCertErrorFieldNumber = 3,
    kCertStatusFieldNumber = 5,
    kVerifyFlagsFieldNumber = 6,
    kMacCombinedTrustDebugInfoFieldNumber = 7,
    kCertChainFieldNumber = 1,
    kTrialDerVerificationTimeFieldNumber = 9,
    kMacPlatformDebugInfoFieldNumber = 10,
    kTrialVerificationTimeUsecFieldNumber = 8,
    kIsIssuedByKnownRootFieldNumber = 4,
  };
  // repeated string public_key_hash = 2;
  int public_key_hash_size() const;
  void clear_public_key_hash();
  const std::string& public_key_hash(int index) const;
  std::string* mutable_public_key_hash(int index);
  void set_public_key_hash(int index, const std::string& value);
  void set_public_key_hash(int index, std::string&& value);
  void set_public_key_hash(int index, const char* value);
  void set_public_key_hash(int index, const char* value, size_t size);
  std::string* add_public_key_hash();
  void add_public_key_hash(const std::string& value);
  void add_public_key_hash(std::string&& value);
  void add_public_key_hash(const char* value);
  void add_public_key_hash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_key_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_key_hash();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
  int cert_error_size() const;
  void clear_cert_error();
  ::chrome_browser_ssl::CertLoggerRequest_CertError cert_error(int index) const;
  void set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value);
  void add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cert_error() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cert_error();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
  int cert_status_size() const;
  void clear_cert_status();
  ::chrome_browser_ssl::CertLoggerRequest_CertStatus cert_status(int index) const;
  void set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  void add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cert_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cert_status();

  // repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
  int verify_flags_size() const;
  void clear_verify_flags();
  ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags verify_flags(int index) const;
  void set_verify_flags(int index, ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value);
  void add_verify_flags(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& verify_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_verify_flags();

  // repeated .chrome_browser_ssl.TrialVerificationInfo.MacTrustFlags mac_combined_trust_debug_info = 7;
  int mac_combined_trust_debug_info_size() const;
  void clear_mac_combined_trust_debug_info();
  ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags mac_combined_trust_debug_info(int index) const;
  void set_mac_combined_trust_debug_info(int index, ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags value);
  void add_mac_combined_trust_debug_info(::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& mac_combined_trust_debug_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_mac_combined_trust_debug_info();

  // optional string cert_chain = 1;
  bool has_cert_chain() const;
  void clear_cert_chain();
  const std::string& cert_chain() const;
  void set_cert_chain(const std::string& value);
  void set_cert_chain(std::string&& value);
  void set_cert_chain(const char* value);
  void set_cert_chain(const char* value, size_t size);
  std::string* mutable_cert_chain();
  std::string* release_cert_chain();
  void set_allocated_cert_chain(std::string* cert_chain);

  // optional string trial_der_verification_time = 9;
  bool has_trial_der_verification_time() const;
  void clear_trial_der_verification_time();
  const std::string& trial_der_verification_time() const;
  void set_trial_der_verification_time(const std::string& value);
  void set_trial_der_verification_time(std::string&& value);
  void set_trial_der_verification_time(const char* value);
  void set_trial_der_verification_time(const char* value, size_t size);
  std::string* mutable_trial_der_verification_time();
  std::string* release_trial_der_verification_time();
  void set_allocated_trial_der_verification_time(std::string* trial_der_verification_time);

  // optional .chrome_browser_ssl.MacPlatformDebugInfo mac_platform_debug_info = 10;
  bool has_mac_platform_debug_info() const;
  void clear_mac_platform_debug_info();
  const ::chrome_browser_ssl::MacPlatformDebugInfo& mac_platform_debug_info() const;
  ::chrome_browser_ssl::MacPlatformDebugInfo* release_mac_platform_debug_info();
  ::chrome_browser_ssl::MacPlatformDebugInfo* mutable_mac_platform_debug_info();
  void set_allocated_mac_platform_debug_info(::chrome_browser_ssl::MacPlatformDebugInfo* mac_platform_debug_info);

  // optional int64 trial_verification_time_usec = 8;
  bool has_trial_verification_time_usec() const;
  void clear_trial_verification_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 trial_verification_time_usec() const;
  void set_trial_verification_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_issued_by_known_root = 4;
  bool has_is_issued_by_known_root() const;
  void clear_is_issued_by_known_root();
  bool is_issued_by_known_root() const;
  void set_is_issued_by_known_root(bool value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.TrialVerificationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_key_hash_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cert_error_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cert_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> verify_flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> mac_combined_trust_debug_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trial_der_verification_time_;
  ::chrome_browser_ssl::MacPlatformDebugInfo* mac_platform_debug_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 trial_verification_time_usec_;
  bool is_issued_by_known_root_;
  friend struct ::TableStruct_cert_5flogger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CertLoggerInterstitialInfo

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
inline bool CertLoggerInterstitialInfo::has_interstitial_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerInterstitialInfo::clear_interstitial_reason() {
  interstitial_reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::interstitial_reason() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
  return static_cast< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason >(interstitial_reason_);
}
inline void CertLoggerInterstitialInfo::set_interstitial_reason(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason value) {
  assert(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  interstitial_reason_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
}

// optional bool user_proceeded = 2;
inline bool CertLoggerInterstitialInfo::has_user_proceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerInterstitialInfo::clear_user_proceeded() {
  user_proceeded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CertLoggerInterstitialInfo::user_proceeded() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
  return user_proceeded_;
}
inline void CertLoggerInterstitialInfo::set_user_proceeded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  user_proceeded_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
}

// optional bool overridable = 3;
inline bool CertLoggerInterstitialInfo::has_overridable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerInterstitialInfo::clear_overridable() {
  overridable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CertLoggerInterstitialInfo::overridable() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
  return overridable_;
}
inline void CertLoggerInterstitialInfo::set_overridable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  overridable_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
}

// optional int64 interstitial_created_time_usec = 4;
inline bool CertLoggerInterstitialInfo::has_interstitial_created_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertLoggerInterstitialInfo::clear_interstitial_created_time_usec() {
  interstitial_created_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CertLoggerInterstitialInfo::interstitial_created_time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
  return interstitial_created_time_usec_;
}
inline void CertLoggerInterstitialInfo::set_interstitial_created_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  interstitial_created_time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
}

// -------------------------------------------------------------------

// CertLoggerFeaturesInfo_NetworkTimeQueryingInfo

// optional bool network_time_queries_enabled = 1;
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_queries_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_queries_enabled() {
  network_time_queries_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_queries_enabled() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
  return network_time_queries_enabled_;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_queries_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  network_time_queries_enabled_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_query_behavior() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_query_behavior() {
  network_time_query_behavior_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_query_behavior() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior >(network_time_query_behavior_);
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_query_behavior(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  network_time_query_behavior_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
}

// -------------------------------------------------------------------

// CertLoggerFeaturesInfo

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
inline bool CertLoggerFeaturesInfo::has_network_time_querying_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerFeaturesInfo::clear_network_time_querying_info() {
  if (network_time_querying_info_ != nullptr) network_time_querying_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& CertLoggerFeaturesInfo::network_time_querying_info() const {
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* p = network_time_querying_info_;
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo*>(
      &::chrome_browser_ssl::_CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_);
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::release_network_time_querying_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  _has_bits_[0] &= ~0x00000001u;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* temp = network_time_querying_info_;
  network_time_querying_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::mutable_network_time_querying_info() {
  _has_bits_[0] |= 0x00000001u;
  if (network_time_querying_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo>(GetArenaNoVirtual());
    network_time_querying_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return network_time_querying_info_;
}
inline void CertLoggerFeaturesInfo::set_allocated_network_time_querying_info(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_time_querying_info_;
  }
  if (network_time_querying_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_time_querying_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_time_querying_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_time_querying_info_ = network_time_querying_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
inline bool CertLoggerFeaturesInfo::has_android_aia_fetching_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerFeaturesInfo::clear_android_aia_fetching_status() {
  android_aia_fetching_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::android_aia_fetching_status() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus >(android_aia_fetching_status_);
}
inline void CertLoggerFeaturesInfo::set_android_aia_fetching_status(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  android_aia_fetching_status_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
}

// optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
inline bool CertLoggerFeaturesInfo::has_trial_verification_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerFeaturesInfo::clear_trial_verification_info() {
  if (trial_verification_info_ != nullptr) trial_verification_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chrome_browser_ssl::TrialVerificationInfo& CertLoggerFeaturesInfo::trial_verification_info() const {
  const ::chrome_browser_ssl::TrialVerificationInfo* p = trial_verification_info_;
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_ssl::TrialVerificationInfo*>(
      &::chrome_browser_ssl::_TrialVerificationInfo_default_instance_);
}
inline ::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::release_trial_verification_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  _has_bits_[0] &= ~0x00000002u;
  ::chrome_browser_ssl::TrialVerificationInfo* temp = trial_verification_info_;
  trial_verification_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::mutable_trial_verification_info() {
  _has_bits_[0] |= 0x00000002u;
  if (trial_verification_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_ssl::TrialVerificationInfo>(GetArenaNoVirtual());
    trial_verification_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return trial_verification_info_;
}
inline void CertLoggerFeaturesInfo::set_allocated_trial_verification_info(::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trial_verification_info_;
  }
  if (trial_verification_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trial_verification_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trial_verification_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trial_verification_info_ = trial_verification_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
}

// -------------------------------------------------------------------

// CertLoggerRequest

// required string hostname = 1;
inline bool CertLoggerRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CertLoggerRequest::hostname() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.GetNoArena();
}
inline void CertLoggerRequest::set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline std::string* CertLoggerRequest::mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CertLoggerRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.hostname)
  if (!has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.hostname)
}

// required string cert_chain = 2;
inline bool CertLoggerRequest::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerRequest::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CertLoggerRequest::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.GetNoArena();
}
inline void CertLoggerRequest::set_cert_chain(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_chain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline std::string* CertLoggerRequest::mutable_cert_chain() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CertLoggerRequest::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  if (!has_cert_chain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cert_chain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_cert_chain(std::string* cert_chain) {
  if (cert_chain != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cert_chain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}

// required int64 time_usec = 3;
inline bool CertLoggerRequest::has_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CertLoggerRequest::clear_time_usec() {
  time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CertLoggerRequest::time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.time_usec)
  return time_usec_;
}
inline void CertLoggerRequest::set_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.time_usec)
}

// repeated string public_key_hash = 4;
inline int CertLoggerRequest::public_key_hash_size() const {
  return public_key_hash_.size();
}
inline void CertLoggerRequest::clear_public_key_hash() {
  public_key_hash_.Clear();
}
inline const std::string& CertLoggerRequest::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Get(index);
}
inline std::string* CertLoggerRequest::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Mutable(index);
}
inline void CertLoggerRequest::set_public_key_hash(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
inline void CertLoggerRequest::set_public_key_hash(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline std::string* CertLoggerRequest::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Add();
}
inline void CertLoggerRequest::add_public_key_hash(const std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CertLoggerRequest::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CertLoggerRequest::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return &public_key_hash_;
}

// repeated string pin = 5;
inline int CertLoggerRequest::pin_size() const {
  return pin_.size();
}
inline void CertLoggerRequest::clear_pin() {
  pin_.Clear();
}
inline const std::string& CertLoggerRequest::pin(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Get(index);
}
inline std::string* CertLoggerRequest::mutable_pin(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Mutable(index);
}
inline void CertLoggerRequest::set_pin(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(value);
}
inline void CertLoggerRequest::set_pin(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(std::move(value));
}
inline void CertLoggerRequest::set_pin(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::set_pin(int index, const char* value, size_t size) {
  pin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline std::string* CertLoggerRequest::add_pin() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Add();
}
inline void CertLoggerRequest::add_pin(const std::string& value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(std::string&& value) {
  pin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(const char* value, size_t size) {
  pin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CertLoggerRequest::pin() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CertLoggerRequest::mutable_pin() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return &pin_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
inline int CertLoggerRequest::cert_error_size() const {
  return cert_error_.size();
}
inline void CertLoggerRequest::clear_cert_error() {
  cert_error_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertError CertLoggerRequest::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
inline void CertLoggerRequest::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
inline void CertLoggerRequest::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CertLoggerRequest::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return cert_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CertLoggerRequest::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return &cert_error_;
}

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
inline bool CertLoggerRequest::has_interstitial_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertLoggerRequest::clear_interstitial_info() {
  if (interstitial_info_ != nullptr) interstitial_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chrome_browser_ssl::CertLoggerInterstitialInfo& CertLoggerRequest::interstitial_info() const {
  const ::chrome_browser_ssl::CertLoggerInterstitialInfo* p = interstitial_info_;
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_ssl::CertLoggerInterstitialInfo*>(
      &::chrome_browser_ssl::_CertLoggerInterstitialInfo_default_instance_);
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::release_interstitial_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  _has_bits_[0] &= ~0x00000008u;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* temp = interstitial_info_;
  interstitial_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::mutable_interstitial_info() {
  _has_bits_[0] |= 0x00000008u;
  if (interstitial_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_ssl::CertLoggerInterstitialInfo>(GetArenaNoVirtual());
    interstitial_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return interstitial_info_;
}
inline void CertLoggerRequest::set_allocated_interstitial_info(::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interstitial_info_;
  }
  if (interstitial_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interstitial_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interstitial_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  interstitial_info_ = interstitial_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
}

// optional string unverified_cert_chain = 8;
inline bool CertLoggerRequest::has_unverified_cert_chain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerRequest::clear_unverified_cert_chain() {
  unverified_cert_chain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CertLoggerRequest::unverified_cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.GetNoArena();
}
inline void CertLoggerRequest::set_unverified_cert_chain(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unverified_cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  unverified_cert_chain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  unverified_cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  unverified_cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline std::string* CertLoggerRequest::mutable_unverified_cert_chain() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CertLoggerRequest::release_unverified_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  if (!has_unverified_cert_chain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return unverified_cert_chain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_unverified_cert_chain(std::string* unverified_cert_chain) {
  if (unverified_cert_chain != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unverified_cert_chain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unverified_cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}

// optional bool is_issued_by_known_root = 9;
inline bool CertLoggerRequest::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CertLoggerRequest::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CertLoggerRequest::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
inline void CertLoggerRequest::set_is_issued_by_known_root(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
inline bool CertLoggerRequest::has_features_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CertLoggerRequest::clear_features_info() {
  if (features_info_ != nullptr) features_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::chrome_browser_ssl::CertLoggerFeaturesInfo& CertLoggerRequest::features_info() const {
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo* p = features_info_;
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.features_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_ssl::CertLoggerFeaturesInfo*>(
      &::chrome_browser_ssl::_CertLoggerFeaturesInfo_default_instance_);
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::release_features_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.features_info)
  _has_bits_[0] &= ~0x00000010u;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* temp = features_info_;
  features_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::mutable_features_info() {
  _has_bits_[0] |= 0x00000010u;
  if (features_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_ssl::CertLoggerFeaturesInfo>(GetArenaNoVirtual());
    features_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.features_info)
  return features_info_;
}
inline void CertLoggerRequest::set_allocated_features_info(::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete features_info_;
  }
  if (features_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      features_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  features_info_ = features_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.features_info)
}

// optional bool is_retry_upload = 11;
inline bool CertLoggerRequest::has_is_retry_upload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CertLoggerRequest::clear_is_retry_upload() {
  is_retry_upload_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CertLoggerRequest::is_retry_upload() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
  return is_retry_upload_;
}
inline void CertLoggerRequest::set_is_retry_upload(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_retry_upload_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
}

// optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
inline bool CertLoggerRequest::has_chrome_channel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CertLoggerRequest::clear_chrome_channel() {
  chrome_channel_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel CertLoggerRequest::chrome_channel() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel >(chrome_channel_);
}
inline void CertLoggerRequest::set_chrome_channel(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  chrome_channel_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
}

// optional bool is_enterprise_managed = 13;
inline bool CertLoggerRequest::has_is_enterprise_managed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CertLoggerRequest::clear_is_enterprise_managed() {
  is_enterprise_managed_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CertLoggerRequest::is_enterprise_managed() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
  return is_enterprise_managed_;
}
inline void CertLoggerRequest::set_is_enterprise_managed(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_enterprise_managed_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
inline int CertLoggerRequest::cert_status_size() const {
  return cert_status_.size();
}
inline void CertLoggerRequest::clear_cert_status() {
  cert_status_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertStatus CertLoggerRequest::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
inline void CertLoggerRequest::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
inline void CertLoggerRequest::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CertLoggerRequest::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return cert_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CertLoggerRequest::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return &cert_status_;
}

// -------------------------------------------------------------------

// MacCertEvidenceInfo

// optional uint32 status_bits = 1;
inline bool MacCertEvidenceInfo::has_status_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MacCertEvidenceInfo::clear_status_bits() {
  status_bits_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacCertEvidenceInfo::status_bits() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MacCertEvidenceInfo.status_bits)
  return status_bits_;
}
inline void MacCertEvidenceInfo::set_status_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  status_bits_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MacCertEvidenceInfo.status_bits)
}

// repeated int32 status_codes = 2;
inline int MacCertEvidenceInfo::status_codes_size() const {
  return status_codes_.size();
}
inline void MacCertEvidenceInfo::clear_status_codes() {
  status_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MacCertEvidenceInfo::status_codes(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MacCertEvidenceInfo.status_codes)
  return status_codes_.Get(index);
}
inline void MacCertEvidenceInfo::set_status_codes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  status_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MacCertEvidenceInfo.status_codes)
}
inline void MacCertEvidenceInfo::add_status_codes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  status_codes_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.MacCertEvidenceInfo.status_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MacCertEvidenceInfo::status_codes() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.MacCertEvidenceInfo.status_codes)
  return status_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MacCertEvidenceInfo::mutable_status_codes() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.MacCertEvidenceInfo.status_codes)
  return &status_codes_;
}

// -------------------------------------------------------------------

// MacPlatformDebugInfo

// optional uint32 trust_result = 1;
inline bool MacPlatformDebugInfo::has_trust_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MacPlatformDebugInfo::clear_trust_result() {
  trust_result_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacPlatformDebugInfo::trust_result() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MacPlatformDebugInfo.trust_result)
  return trust_result_;
}
inline void MacPlatformDebugInfo::set_trust_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  trust_result_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MacPlatformDebugInfo.trust_result)
}

// optional int32 result_code = 2;
inline bool MacPlatformDebugInfo::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MacPlatformDebugInfo::clear_result_code() {
  result_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MacPlatformDebugInfo::result_code() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MacPlatformDebugInfo.result_code)
  return result_code_;
}
inline void MacPlatformDebugInfo::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_code_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MacPlatformDebugInfo.result_code)
}

// repeated .chrome_browser_ssl.MacCertEvidenceInfo status_chain = 3;
inline int MacPlatformDebugInfo::status_chain_size() const {
  return status_chain_.size();
}
inline void MacPlatformDebugInfo::clear_status_chain() {
  status_chain_.Clear();
}
inline ::chrome_browser_ssl::MacCertEvidenceInfo* MacPlatformDebugInfo::mutable_status_chain(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MacPlatformDebugInfo.status_chain)
  return status_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MacCertEvidenceInfo >*
MacPlatformDebugInfo::mutable_status_chain() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.MacPlatformDebugInfo.status_chain)
  return &status_chain_;
}
inline const ::chrome_browser_ssl::MacCertEvidenceInfo& MacPlatformDebugInfo::status_chain(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MacPlatformDebugInfo.status_chain)
  return status_chain_.Get(index);
}
inline ::chrome_browser_ssl::MacCertEvidenceInfo* MacPlatformDebugInfo::add_status_chain() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.MacPlatformDebugInfo.status_chain)
  return status_chain_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_ssl::MacCertEvidenceInfo >&
MacPlatformDebugInfo::status_chain() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.MacPlatformDebugInfo.status_chain)
  return status_chain_;
}

// -------------------------------------------------------------------

// TrialVerificationInfo

// optional string cert_chain = 1;
inline bool TrialVerificationInfo::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialVerificationInfo::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrialVerificationInfo::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.GetNoArena();
}
inline void TrialVerificationInfo::set_cert_chain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline void TrialVerificationInfo::set_cert_chain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cert_chain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline void TrialVerificationInfo::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline void TrialVerificationInfo::set_cert_chain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cert_chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline std::string* TrialVerificationInfo::mutable_cert_chain() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrialVerificationInfo::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  if (!has_cert_chain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cert_chain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrialVerificationInfo::set_allocated_cert_chain(std::string* cert_chain) {
  if (cert_chain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cert_chain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}

// repeated string public_key_hash = 2;
inline int TrialVerificationInfo::public_key_hash_size() const {
  return public_key_hash_.size();
}
inline void TrialVerificationInfo::clear_public_key_hash() {
  public_key_hash_.Clear();
}
inline const std::string& TrialVerificationInfo::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Get(index);
}
inline std::string* TrialVerificationInfo::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Mutable(index);
}
inline void TrialVerificationInfo::set_public_key_hash(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
inline void TrialVerificationInfo::set_public_key_hash(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
inline void TrialVerificationInfo::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline std::string* TrialVerificationInfo::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Add();
}
inline void TrialVerificationInfo::add_public_key_hash(const std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::add_public_key_hash(std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrialVerificationInfo::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrialVerificationInfo::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return &public_key_hash_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
inline int TrialVerificationInfo::cert_error_size() const {
  return cert_error_.size();
}
inline void TrialVerificationInfo::clear_cert_error() {
  cert_error_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertError TrialVerificationInfo::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
inline void TrialVerificationInfo::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
inline void TrialVerificationInfo::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrialVerificationInfo::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return cert_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return &cert_error_;
}

// optional bool is_issued_by_known_root = 4;
inline bool TrialVerificationInfo::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrialVerificationInfo::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrialVerificationInfo::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
inline void TrialVerificationInfo::set_is_issued_by_known_root(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
inline int TrialVerificationInfo::cert_status_size() const {
  return cert_status_.size();
}
inline void TrialVerificationInfo::clear_cert_status() {
  cert_status_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertStatus TrialVerificationInfo::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
inline void TrialVerificationInfo::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
inline void TrialVerificationInfo::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrialVerificationInfo::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return cert_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return &cert_status_;
}

// repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
inline int TrialVerificationInfo::verify_flags_size() const {
  return verify_flags_.size();
}
inline void TrialVerificationInfo::clear_verify_flags() {
  verify_flags_.Clear();
}
inline ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags TrialVerificationInfo::verify_flags(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return static_cast< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags >(verify_flags_.Get(index));
}
inline void TrialVerificationInfo::set_verify_flags(int index, ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
inline void TrialVerificationInfo::add_verify_flags(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrialVerificationInfo::verify_flags() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return verify_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrialVerificationInfo::mutable_verify_flags() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return &verify_flags_;
}

// repeated .chrome_browser_ssl.TrialVerificationInfo.MacTrustFlags mac_combined_trust_debug_info = 7;
inline int TrialVerificationInfo::mac_combined_trust_debug_info_size() const {
  return mac_combined_trust_debug_info_.size();
}
inline void TrialVerificationInfo::clear_mac_combined_trust_debug_info() {
  mac_combined_trust_debug_info_.Clear();
}
inline ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags TrialVerificationInfo::mac_combined_trust_debug_info(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.mac_combined_trust_debug_info)
  return static_cast< ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags >(mac_combined_trust_debug_info_.Get(index));
}
inline void TrialVerificationInfo::set_mac_combined_trust_debug_info(int index, ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags_IsValid(value));
  mac_combined_trust_debug_info_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.mac_combined_trust_debug_info)
}
inline void TrialVerificationInfo::add_mac_combined_trust_debug_info(::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags_IsValid(value));
  mac_combined_trust_debug_info_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.mac_combined_trust_debug_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrialVerificationInfo::mac_combined_trust_debug_info() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.mac_combined_trust_debug_info)
  return mac_combined_trust_debug_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrialVerificationInfo::mutable_mac_combined_trust_debug_info() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.mac_combined_trust_debug_info)
  return &mac_combined_trust_debug_info_;
}

// optional int64 trial_verification_time_usec = 8;
inline bool TrialVerificationInfo::has_trial_verification_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrialVerificationInfo::clear_trial_verification_time_usec() {
  trial_verification_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrialVerificationInfo::trial_verification_time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.trial_verification_time_usec)
  return trial_verification_time_usec_;
}
inline void TrialVerificationInfo::set_trial_verification_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  trial_verification_time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.trial_verification_time_usec)
}

// optional string trial_der_verification_time = 9;
inline bool TrialVerificationInfo::has_trial_der_verification_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialVerificationInfo::clear_trial_der_verification_time() {
  trial_der_verification_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrialVerificationInfo::trial_der_verification_time() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
  return trial_der_verification_time_.GetNoArena();
}
inline void TrialVerificationInfo::set_trial_der_verification_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  trial_der_verification_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
}
inline void TrialVerificationInfo::set_trial_der_verification_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  trial_der_verification_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
}
inline void TrialVerificationInfo::set_trial_der_verification_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  trial_der_verification_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
}
inline void TrialVerificationInfo::set_trial_der_verification_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  trial_der_verification_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
}
inline std::string* TrialVerificationInfo::mutable_trial_der_verification_time() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
  return trial_der_verification_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrialVerificationInfo::release_trial_der_verification_time() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
  if (!has_trial_der_verification_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return trial_der_verification_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrialVerificationInfo::set_allocated_trial_der_verification_time(std::string* trial_der_verification_time) {
  if (trial_der_verification_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trial_der_verification_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trial_der_verification_time);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.TrialVerificationInfo.trial_der_verification_time)
}

// optional .chrome_browser_ssl.MacPlatformDebugInfo mac_platform_debug_info = 10;
inline bool TrialVerificationInfo::has_mac_platform_debug_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialVerificationInfo::clear_mac_platform_debug_info() {
  if (mac_platform_debug_info_ != nullptr) mac_platform_debug_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chrome_browser_ssl::MacPlatformDebugInfo& TrialVerificationInfo::mac_platform_debug_info() const {
  const ::chrome_browser_ssl::MacPlatformDebugInfo* p = mac_platform_debug_info_;
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.mac_platform_debug_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_ssl::MacPlatformDebugInfo*>(
      &::chrome_browser_ssl::_MacPlatformDebugInfo_default_instance_);
}
inline ::chrome_browser_ssl::MacPlatformDebugInfo* TrialVerificationInfo::release_mac_platform_debug_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.TrialVerificationInfo.mac_platform_debug_info)
  _has_bits_[0] &= ~0x00000004u;
  ::chrome_browser_ssl::MacPlatformDebugInfo* temp = mac_platform_debug_info_;
  mac_platform_debug_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_ssl::MacPlatformDebugInfo* TrialVerificationInfo::mutable_mac_platform_debug_info() {
  _has_bits_[0] |= 0x00000004u;
  if (mac_platform_debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_ssl::MacPlatformDebugInfo>(GetArenaNoVirtual());
    mac_platform_debug_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.mac_platform_debug_info)
  return mac_platform_debug_info_;
}
inline void TrialVerificationInfo::set_allocated_mac_platform_debug_info(::chrome_browser_ssl::MacPlatformDebugInfo* mac_platform_debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mac_platform_debug_info_;
  }
  if (mac_platform_debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mac_platform_debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mac_platform_debug_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mac_platform_debug_info_ = mac_platform_debug_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.TrialVerificationInfo.mac_platform_debug_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_ssl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_CertError> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_CertStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags> : ::std::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::TrialVerificationInfo_MacTrustFlags> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cert_5flogger_2eproto
