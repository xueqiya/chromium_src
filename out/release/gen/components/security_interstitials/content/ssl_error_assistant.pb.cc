// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_error_assistant.proto

#include "ssl_error_assistant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5ferror_5fassistant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5ferror_5fassistant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5ferror_5fassistant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto;
namespace chrome_browser_ssl {
class CaptivePortalCertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CaptivePortalCert> _instance;
} _CaptivePortalCert_default_instance_;
class MITMSoftwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MITMSoftware> _instance;
} _MITMSoftware_default_instance_;
class DynamicInterstitialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicInterstitial> _instance;
} _DynamicInterstitial_default_instance_;
class SSLErrorAssistantConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSLErrorAssistantConfig> _instance;
} _SSLErrorAssistantConfig_default_instance_;
}  // namespace chrome_browser_ssl
static void InitDefaultsscc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_ssl::_CaptivePortalCert_default_instance_;
    new (ptr) ::chrome_browser_ssl::CaptivePortalCert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_ssl::CaptivePortalCert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto}, {}};

static void InitDefaultsscc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_ssl::_DynamicInterstitial_default_instance_;
    new (ptr) ::chrome_browser_ssl::DynamicInterstitial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_ssl::DynamicInterstitial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto}, {}};

static void InitDefaultsscc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_ssl::_MITMSoftware_default_instance_;
    new (ptr) ::chrome_browser_ssl::MITMSoftware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_ssl::MITMSoftware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto}, {}};

static void InitDefaultsscc_info_SSLErrorAssistantConfig_ssl_5ferror_5fassistant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_ssl::_SSLErrorAssistantConfig_default_instance_;
    new (ptr) ::chrome_browser_ssl::SSLErrorAssistantConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_ssl::SSLErrorAssistantConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SSLErrorAssistantConfig_ssl_5ferror_5fassistant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SSLErrorAssistantConfig_ssl_5ferror_5fassistant_2eproto}, {
      &scc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto.base,
      &scc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto.base,
      &scc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto.base,}};

namespace chrome_browser_ssl {
bool DynamicInterstitial_InterstitialPageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DynamicInterstitial_InterstitialPageType_strings[4] = {};

static const char DynamicInterstitial_InterstitialPageType_names[] =
  "INTERSTITIAL_PAGE_CAPTIVE_PORTAL"
  "INTERSTITIAL_PAGE_MITM_SOFTWARE"
  "INTERSTITIAL_PAGE_NONE"
  "INTERSTITIAL_PAGE_SSL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DynamicInterstitial_InterstitialPageType_entries[] = {
  { {DynamicInterstitial_InterstitialPageType_names + 0, 32}, 2 },
  { {DynamicInterstitial_InterstitialPageType_names + 32, 31}, 3 },
  { {DynamicInterstitial_InterstitialPageType_names + 63, 22}, 0 },
  { {DynamicInterstitial_InterstitialPageType_names + 85, 21}, 1 },
};

static const int DynamicInterstitial_InterstitialPageType_entries_by_number[] = {
  2, // 0 -> INTERSTITIAL_PAGE_NONE
  3, // 1 -> INTERSTITIAL_PAGE_SSL
  0, // 2 -> INTERSTITIAL_PAGE_CAPTIVE_PORTAL
  1, // 3 -> INTERSTITIAL_PAGE_MITM_SOFTWARE
};

const std::string& DynamicInterstitial_InterstitialPageType_Name(
    DynamicInterstitial_InterstitialPageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DynamicInterstitial_InterstitialPageType_entries,
          DynamicInterstitial_InterstitialPageType_entries_by_number,
          4, DynamicInterstitial_InterstitialPageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DynamicInterstitial_InterstitialPageType_entries,
      DynamicInterstitial_InterstitialPageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DynamicInterstitial_InterstitialPageType_strings[idx].get();
}
bool DynamicInterstitial_InterstitialPageType_Parse(
    const std::string& name, DynamicInterstitial_InterstitialPageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DynamicInterstitial_InterstitialPageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DynamicInterstitial_InterstitialPageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_NONE;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_SSL;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_CAPTIVE_PORTAL;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_MITM_SOFTWARE;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MIN;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MAX;
constexpr int DynamicInterstitial::InterstitialPageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DynamicInterstitial_CertError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DynamicInterstitial_CertError_strings[17] = {};

static const char DynamicInterstitial_CertError_names[] =
  "ERR_CERTIFICATE_TRANSPARENCY_REQUIRED"
  "ERR_CERT_AUTHORITY_INVALID"
  "ERR_CERT_COMMON_NAME_INVALID"
  "ERR_CERT_DATE_INVALID"
  "ERR_CERT_INVALID"
  "ERR_CERT_KNOWN_INTERCEPTION_BLOCKED"
  "ERR_CERT_NAME_CONSTRAINT_VIOLATION"
  "ERR_CERT_NON_UNIQUE_NAME"
  "ERR_CERT_NO_REVOCATION_MECHANISM"
  "ERR_CERT_REVOKED"
  "ERR_CERT_SYMANTEC_LEGACY"
  "ERR_CERT_UNABLE_TO_CHECK_REVOCATION"
  "ERR_CERT_VALIDITY_TOO_LONG"
  "ERR_CERT_WEAK_KEY"
  "ERR_CERT_WEAK_SIGNATURE_ALGORITHM"
  "ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN"
  "UNKNOWN_CERT_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DynamicInterstitial_CertError_entries[] = {
  { {DynamicInterstitial_CertError_names + 0, 37}, 14 },
  { {DynamicInterstitial_CertError_names + 37, 26}, 4 },
  { {DynamicInterstitial_CertError_names + 63, 28}, 5 },
  { {DynamicInterstitial_CertError_names + 91, 21}, 9 },
  { {DynamicInterstitial_CertError_names + 112, 16}, 2 },
  { {DynamicInterstitial_CertError_names + 128, 35}, 16 },
  { {DynamicInterstitial_CertError_names + 163, 34}, 6 },
  { {DynamicInterstitial_CertError_names + 197, 24}, 13 },
  { {DynamicInterstitial_CertError_names + 221, 32}, 12 },
  { {DynamicInterstitial_CertError_names + 253, 16}, 1 },
  { {DynamicInterstitial_CertError_names + 269, 24}, 15 },
  { {DynamicInterstitial_CertError_names + 293, 35}, 11 },
  { {DynamicInterstitial_CertError_names + 328, 26}, 10 },
  { {DynamicInterstitial_CertError_names + 354, 17}, 8 },
  { {DynamicInterstitial_CertError_names + 371, 33}, 7 },
  { {DynamicInterstitial_CertError_names + 404, 36}, 3 },
  { {DynamicInterstitial_CertError_names + 440, 18}, 0 },
};

static const int DynamicInterstitial_CertError_entries_by_number[] = {
  16, // 0 -> UNKNOWN_CERT_ERROR
  9, // 1 -> ERR_CERT_REVOKED
  4, // 2 -> ERR_CERT_INVALID
  15, // 3 -> ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN
  1, // 4 -> ERR_CERT_AUTHORITY_INVALID
  2, // 5 -> ERR_CERT_COMMON_NAME_INVALID
  6, // 6 -> ERR_CERT_NAME_CONSTRAINT_VIOLATION
  14, // 7 -> ERR_CERT_WEAK_SIGNATURE_ALGORITHM
  13, // 8 -> ERR_CERT_WEAK_KEY
  3, // 9 -> ERR_CERT_DATE_INVALID
  12, // 10 -> ERR_CERT_VALIDITY_TOO_LONG
  11, // 11 -> ERR_CERT_UNABLE_TO_CHECK_REVOCATION
  8, // 12 -> ERR_CERT_NO_REVOCATION_MECHANISM
  7, // 13 -> ERR_CERT_NON_UNIQUE_NAME
  0, // 14 -> ERR_CERTIFICATE_TRANSPARENCY_REQUIRED
  10, // 15 -> ERR_CERT_SYMANTEC_LEGACY
  5, // 16 -> ERR_CERT_KNOWN_INTERCEPTION_BLOCKED
};

const std::string& DynamicInterstitial_CertError_Name(
    DynamicInterstitial_CertError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DynamicInterstitial_CertError_entries,
          DynamicInterstitial_CertError_entries_by_number,
          17, DynamicInterstitial_CertError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DynamicInterstitial_CertError_entries,
      DynamicInterstitial_CertError_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DynamicInterstitial_CertError_strings[idx].get();
}
bool DynamicInterstitial_CertError_Parse(
    const std::string& name, DynamicInterstitial_CertError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DynamicInterstitial_CertError_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<DynamicInterstitial_CertError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DynamicInterstitial_CertError DynamicInterstitial::UNKNOWN_CERT_ERROR;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_REVOKED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_AUTHORITY_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_COMMON_NAME_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_KEY;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_DATE_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_VALIDITY_TOO_LONG;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NO_REVOCATION_MECHANISM;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NON_UNIQUE_NAME;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_SYMANTEC_LEGACY;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::CertError_MIN;
constexpr DynamicInterstitial_CertError DynamicInterstitial::CertError_MAX;
constexpr int DynamicInterstitial::CertError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CaptivePortalCert::InitAsDefaultInstance() {
}
class CaptivePortalCert::_Internal {
 public:
  using HasBits = decltype(std::declval<CaptivePortalCert>()._has_bits_);
  static void set_has_sha256_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CaptivePortalCert::CaptivePortalCert()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CaptivePortalCert)
}
CaptivePortalCert::CaptivePortalCert(const CaptivePortalCert& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha256_hash()) {
    sha256_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CaptivePortalCert)
}

void CaptivePortalCert::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto.base);
  sha256_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CaptivePortalCert::~CaptivePortalCert() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CaptivePortalCert)
  SharedDtor();
}

void CaptivePortalCert::SharedDtor() {
  sha256_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CaptivePortalCert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptivePortalCert& CaptivePortalCert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CaptivePortalCert_ssl_5ferror_5fassistant_2eproto.base);
  return *internal_default_instance();
}


void CaptivePortalCert::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CaptivePortalCert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha256_hash_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CaptivePortalCert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sha256_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sha256_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CaptivePortalCert::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CaptivePortalCert)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha256_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CaptivePortalCert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CaptivePortalCert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CaptivePortalCert::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CaptivePortalCert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sha256_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha256_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CaptivePortalCert)
}

size_t CaptivePortalCert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CaptivePortalCert)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sha256_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sha256_hash());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptivePortalCert::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CaptivePortalCert*>(
      &from));
}

void CaptivePortalCert::MergeFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CaptivePortalCert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sha256_hash()) {
    _has_bits_[0] |= 0x00000001u;
    sha256_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256_hash_);
  }
}

void CaptivePortalCert::CopyFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CaptivePortalCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptivePortalCert::IsInitialized() const {
  return true;
}

void CaptivePortalCert::InternalSwap(CaptivePortalCert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha256_hash_.Swap(&other->sha256_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CaptivePortalCert::GetTypeName() const {
  return "chrome_browser_ssl.CaptivePortalCert";
}


// ===================================================================

void MITMSoftware::InitAsDefaultInstance() {
}
class MITMSoftware::_Internal {
 public:
  using HasBits = decltype(std::declval<MITMSoftware>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issuer_common_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issuer_organization_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MITMSoftware::MITMSoftware()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.MITMSoftware)
}
MITMSoftware::MITMSoftware(const MITMSoftware& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  issuer_common_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_common_name_regex()) {
    issuer_common_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
  }
  issuer_organization_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_organization_regex()) {
    issuer_organization_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.MITMSoftware)
}

void MITMSoftware::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_common_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MITMSoftware::~MITMSoftware() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.MITMSoftware)
  SharedDtor();
}

void MITMSoftware::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_common_name_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MITMSoftware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MITMSoftware& MITMSoftware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MITMSoftware_ssl_5ferror_5fassistant_2eproto.base);
  return *internal_default_instance();
}


void MITMSoftware::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.MITMSoftware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      issuer_common_name_regex_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      issuer_organization_regex_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MITMSoftware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string issuer_common_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_issuer_common_name_regex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string issuer_organization_regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_issuer_organization_regex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MITMSoftware::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.MITMSoftware)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_common_name_regex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_common_name_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_organization_regex = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_organization_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.MITMSoftware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.MITMSoftware)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MITMSoftware::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.MITMSoftware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer_common_name_regex(), output);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuer_organization_regex(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.MITMSoftware)
}

size_t MITMSoftware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.MITMSoftware)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string issuer_common_name_regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->issuer_organization_regex());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MITMSoftware::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MITMSoftware*>(
      &from));
}

void MITMSoftware::MergeFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.MITMSoftware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      issuer_common_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      issuer_organization_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
    }
  }
}

void MITMSoftware::CopyFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.MITMSoftware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MITMSoftware::IsInitialized() const {
  return true;
}

void MITMSoftware::InternalSwap(MITMSoftware* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issuer_common_name_regex_.Swap(&other->issuer_common_name_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issuer_organization_regex_.Swap(&other->issuer_organization_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string MITMSoftware::GetTypeName() const {
  return "chrome_browser_ssl.MITMSoftware";
}


// ===================================================================

void DynamicInterstitial::InitAsDefaultInstance() {
}
class DynamicInterstitial::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicInterstitial>()._has_bits_);
  static void set_has_issuer_common_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issuer_organization_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mitm_software_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cert_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_interstitial_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_support_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_show_only_for_nonoverridable_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DynamicInterstitial::DynamicInterstitial()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.DynamicInterstitial)
}
DynamicInterstitial::DynamicInterstitial(const DynamicInterstitial& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sha256_hash_(from.sha256_hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_common_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_common_name_regex()) {
    issuer_common_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
  }
  issuer_organization_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_organization_regex()) {
    issuer_organization_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
  }
  mitm_software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mitm_software_name()) {
    mitm_software_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mitm_software_name_);
  }
  support_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_support_url()) {
    support_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_url_);
  }
  ::memcpy(&cert_error_, &from.cert_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
    reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.DynamicInterstitial)
}

void DynamicInterstitial::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto.base);
  issuer_common_name_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitm_software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cert_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
      reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
}

DynamicInterstitial::~DynamicInterstitial() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.DynamicInterstitial)
  SharedDtor();
}

void DynamicInterstitial::SharedDtor() {
  issuer_common_name_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitm_software_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DynamicInterstitial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicInterstitial& DynamicInterstitial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicInterstitial_ssl_5ferror_5fassistant_2eproto.base);
  return *internal_default_instance();
}


void DynamicInterstitial::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.DynamicInterstitial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sha256_hash_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      issuer_common_name_regex_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      issuer_organization_regex_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      mitm_software_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      support_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&cert_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
        reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicInterstitial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string sha256_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_sha256_hash(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string issuer_common_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_issuer_common_name_regex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string issuer_organization_regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_issuer_organization_regex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mitm_software_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mitm_software_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(val))) {
            set_cert_error(static_cast<::chrome_browser_ssl::DynamicInterstitial_CertError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(val))) {
            set_interstitial_type(static_cast<::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string support_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_support_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_only_for_nonoverridable_errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_show_only_for_nonoverridable_errors(&has_bits);
          show_only_for_nonoverridable_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicInterstitial::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.DynamicInterstitial)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string sha256_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_common_name_regex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_common_name_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_organization_regex = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_organization_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mitm_software_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mitm_software_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(value)) {
            set_cert_error(static_cast< ::chrome_browser_ssl::DynamicInterstitial_CertError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(value)) {
            set_interstitial_type(static_cast< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string support_url = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_support_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_only_for_nonoverridable_errors = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_show_only_for_nonoverridable_errors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_only_for_nonoverridable_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.DynamicInterstitial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.DynamicInterstitial)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicInterstitial::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.DynamicInterstitial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sha256_hash = 1;
  for (int i = 0, n = this->sha256_hash_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->sha256_hash(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer_common_name_regex(), output);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuer_organization_regex(), output);
  }

  // optional string mitm_software_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mitm_software_name(), output);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->cert_error(), output);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->interstitial_type(), output);
  }

  // optional string support_url = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->support_url(), output);
  }

  // optional bool show_only_for_nonoverridable_errors = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->show_only_for_nonoverridable_errors(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.DynamicInterstitial)
}

size_t DynamicInterstitial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.DynamicInterstitial)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sha256_hash = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sha256_hash_size());
  for (int i = 0, n = this->sha256_hash_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->sha256_hash(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string issuer_common_name_regex = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->issuer_organization_regex());
    }

    // optional string mitm_software_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mitm_software_name());
    }

    // optional string support_url = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->support_url());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cert_error());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->interstitial_type());
    }

    // optional bool show_only_for_nonoverridable_errors = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicInterstitial::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DynamicInterstitial*>(
      &from));
}

void DynamicInterstitial::MergeFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.DynamicInterstitial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sha256_hash_.MergeFrom(from.sha256_hash_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      issuer_common_name_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      issuer_organization_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      mitm_software_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mitm_software_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      support_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      cert_error_ = from.cert_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      interstitial_type_ = from.interstitial_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      show_only_for_nonoverridable_errors_ = from.show_only_for_nonoverridable_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicInterstitial::CopyFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.DynamicInterstitial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicInterstitial::IsInitialized() const {
  return true;
}

void DynamicInterstitial::InternalSwap(DynamicInterstitial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha256_hash_.InternalSwap(CastToBase(&other->sha256_hash_));
  issuer_common_name_regex_.Swap(&other->issuer_common_name_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issuer_organization_regex_.Swap(&other->issuer_organization_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mitm_software_name_.Swap(&other->mitm_software_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  support_url_.Swap(&other->support_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cert_error_, other->cert_error_);
  swap(interstitial_type_, other->interstitial_type_);
  swap(show_only_for_nonoverridable_errors_, other->show_only_for_nonoverridable_errors_);
}

std::string DynamicInterstitial::GetTypeName() const {
  return "chrome_browser_ssl.DynamicInterstitial";
}


// ===================================================================

void SSLErrorAssistantConfig::InitAsDefaultInstance() {
}
class SSLErrorAssistantConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SSLErrorAssistantConfig>()._has_bits_);
  static void set_has_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSLErrorAssistantConfig::SSLErrorAssistantConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}
SSLErrorAssistantConfig::SSLErrorAssistantConfig(const SSLErrorAssistantConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      captive_portal_cert_(from.captive_portal_cert_),
      mitm_software_(from.mitm_software_),
      dynamic_interstitial_(from.dynamic_interstitial_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_id_ = from.version_id_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}

void SSLErrorAssistantConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSLErrorAssistantConfig_ssl_5ferror_5fassistant_2eproto.base);
  version_id_ = 0u;
}

SSLErrorAssistantConfig::~SSLErrorAssistantConfig() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.SSLErrorAssistantConfig)
  SharedDtor();
}

void SSLErrorAssistantConfig::SharedDtor() {
}

void SSLErrorAssistantConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSLErrorAssistantConfig& SSLErrorAssistantConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSLErrorAssistantConfig_ssl_5ferror_5fassistant_2eproto.base);
  return *internal_default_instance();
}


void SSLErrorAssistantConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  captive_portal_cert_.Clear();
  mitm_software_.Clear();
  dynamic_interstitial_.Clear();
  version_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSLErrorAssistantConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version_id(&has_bits);
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_captive_portal_cert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mitm_software(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dynamic_interstitial(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSLErrorAssistantConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_captive_portal_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mitm_software()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dynamic_interstitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.SSLErrorAssistantConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.SSLErrorAssistantConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSLErrorAssistantConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->version_id(), output);
  }

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->captive_portal_cert_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->captive_portal_cert(static_cast<int>(i)),
      output);
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mitm_software_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->mitm_software(static_cast<int>(i)),
      output);
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_interstitial_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->dynamic_interstitial(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.SSLErrorAssistantConfig)
}

size_t SSLErrorAssistantConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->captive_portal_cert_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->captive_portal_cert(static_cast<int>(i)));
    }
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mitm_software_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mitm_software(static_cast<int>(i)));
    }
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_interstitial_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dynamic_interstitial(static_cast<int>(i)));
    }
  }

  // optional uint32 version_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->version_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSLErrorAssistantConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SSLErrorAssistantConfig*>(
      &from));
}

void SSLErrorAssistantConfig::MergeFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  captive_portal_cert_.MergeFrom(from.captive_portal_cert_);
  mitm_software_.MergeFrom(from.mitm_software_);
  dynamic_interstitial_.MergeFrom(from.dynamic_interstitial_);
  if (from.has_version_id()) {
    set_version_id(from.version_id());
  }
}

void SSLErrorAssistantConfig::CopyFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLErrorAssistantConfig::IsInitialized() const {
  return true;
}

void SSLErrorAssistantConfig::InternalSwap(SSLErrorAssistantConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&captive_portal_cert_)->InternalSwap(CastToBase(&other->captive_portal_cert_));
  CastToBase(&mitm_software_)->InternalSwap(CastToBase(&other->mitm_software_));
  CastToBase(&dynamic_interstitial_)->InternalSwap(CastToBase(&other->dynamic_interstitial_));
  swap(version_id_, other->version_id_);
}

std::string SSLErrorAssistantConfig::GetTypeName() const {
  return "chrome_browser_ssl.SSLErrorAssistantConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_ssl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::CaptivePortalCert* Arena::CreateMaybeMessage< ::chrome_browser_ssl::CaptivePortalCert >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_ssl::CaptivePortalCert >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::MITMSoftware* Arena::CreateMaybeMessage< ::chrome_browser_ssl::MITMSoftware >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_ssl::MITMSoftware >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::DynamicInterstitial* Arena::CreateMaybeMessage< ::chrome_browser_ssl::DynamicInterstitial >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_ssl::DynamicInterstitial >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::SSLErrorAssistantConfig* Arena::CreateMaybeMessage< ::chrome_browser_ssl::SSLErrorAssistantConfig >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_ssl::SSLErrorAssistantConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
