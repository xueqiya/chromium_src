// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/security_interstitials/CaptivePortalHelper

#ifndef org_chromium_components_security_interstitials_CaptivePortalHelper_JNI
#define org_chromium_components_security_interstitials_CaptivePortalHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_security_1interstitials_CaptivePortalHelper[];
const char kClassPath_org_chromium_components_security_1interstitials_CaptivePortalHelper[] =
    "org/chromium/components/security_interstitials/CaptivePortalHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(nullptr);
#ifndef org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz_defined
#define org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz_defined
inline jclass org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_security_1interstitials_CaptivePortalHelper,
      &g_org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace security_interstitials {

static void JNI_CaptivePortalHelper_SetCaptivePortalCertificateForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& spkiHash);

JNI_GENERATOR_EXPORT void Java_J_N_MZW64TXU(
    JNIEnv* env,
    jclass jcaller,
    jstring spkiHash) {
  return JNI_CaptivePortalHelper_SetCaptivePortalCertificateForTesting(env,
      base::android::JavaParamRef<jstring>(env, spkiHash));
}

static void JNI_CaptivePortalHelper_SetOSReportsCaptivePortalForTesting(JNIEnv* env, jboolean
    osReportsCaptivePortal);

JNI_GENERATOR_EXPORT void Java_J_N_MVYBH9Mh(
    JNIEnv* env,
    jclass jcaller,
    jboolean osReportsCaptivePortal) {
  return JNI_CaptivePortalHelper_SetOSReportsCaptivePortalForTesting(env, osReportsCaptivePortal);
}


static std::atomic<jmethodID>
    g_org_chromium_components_security_1interstitials_CaptivePortalHelper_getCaptivePortalServerUrl(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_CaptivePortalHelper_getCaptivePortalServerUrl(JNIEnv* env) {
  jclass clazz = org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCaptivePortalServerUrl",
          "()Ljava/lang/String;",
&g_org_chromium_components_security_1interstitials_CaptivePortalHelper_getCaptivePortalServerUrl);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_security_1interstitials_CaptivePortalHelper_reportNetworkConnectivity(nullptr);
static void Java_CaptivePortalHelper_reportNetworkConnectivity(JNIEnv* env) {
  jclass clazz = org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_security_1interstitials_CaptivePortalHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "reportNetworkConnectivity",
          "()V",
&g_org_chromium_components_security_1interstitials_CaptivePortalHelper_reportNetworkConnectivity);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace security_interstitials

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_security_interstitials_CaptivePortalHelper_JNI
