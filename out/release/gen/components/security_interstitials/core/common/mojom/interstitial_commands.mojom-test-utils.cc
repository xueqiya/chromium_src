// components/security_interstitials/core/common/mojom/interstitial_commands.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef COMPONENTS_SECURITY_INTERSTITIALS_CORE_COMMON_MOJOM_INTERSTITIAL_COMMANDS_MOJOM_JUMBO_H_
#define COMPONENTS_SECURITY_INTERSTITIALS_CORE_COMMON_MOJOM_INTERSTITIAL_COMMANDS_MOJOM_JUMBO_H_
#endif


namespace security_interstitials {
namespace mojom {


void InterstitialCommandsInterceptorForTesting::DontProceed() {
  GetForwardingInterface()->DontProceed();
}
void InterstitialCommandsInterceptorForTesting::Proceed() {
  GetForwardingInterface()->Proceed();
}
void InterstitialCommandsInterceptorForTesting::ShowMoreSection() {
  GetForwardingInterface()->ShowMoreSection();
}
void InterstitialCommandsInterceptorForTesting::OpenHelpCenter() {
  GetForwardingInterface()->OpenHelpCenter();
}
void InterstitialCommandsInterceptorForTesting::OpenDiagnostic() {
  GetForwardingInterface()->OpenDiagnostic();
}
void InterstitialCommandsInterceptorForTesting::Reload() {
  GetForwardingInterface()->Reload();
}
void InterstitialCommandsInterceptorForTesting::OpenDateSettings() {
  GetForwardingInterface()->OpenDateSettings();
}
void InterstitialCommandsInterceptorForTesting::OpenLogin() {
  GetForwardingInterface()->OpenLogin();
}
void InterstitialCommandsInterceptorForTesting::DoReport() {
  GetForwardingInterface()->DoReport();
}
void InterstitialCommandsInterceptorForTesting::DontReport() {
  GetForwardingInterface()->DontReport();
}
void InterstitialCommandsInterceptorForTesting::OpenReportingPrivacy() {
  GetForwardingInterface()->OpenReportingPrivacy();
}
void InterstitialCommandsInterceptorForTesting::OpenWhitepaper() {
  GetForwardingInterface()->OpenWhitepaper();
}
void InterstitialCommandsInterceptorForTesting::ReportPhishingError() {
  GetForwardingInterface()->ReportPhishingError();
}
InterstitialCommandsAsyncWaiter::InterstitialCommandsAsyncWaiter(
    InterstitialCommands* proxy) : proxy_(proxy) {}

InterstitialCommandsAsyncWaiter::~InterstitialCommandsAsyncWaiter() = default;






}  // namespace mojom
}  // namespace security_interstitials

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif