// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/signin/identitymanager/IdentityMutator

#ifndef org_chromium_components_signin_identitymanager_IdentityMutator_JNI
#define org_chromium_components_signin_identitymanager_IdentityMutator_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_signin_identitymanager_IdentityMutator[];
const char kClassPath_org_chromium_components_signin_identitymanager_IdentityMutator[] =
    "org/chromium/components/signin/identitymanager/IdentityMutator";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_signin_identitymanager_IdentityMutator_clazz(nullptr);
#ifndef org_chromium_components_signin_identitymanager_IdentityMutator_clazz_defined
#define org_chromium_components_signin_identitymanager_IdentityMutator_clazz_defined
inline jclass org_chromium_components_signin_identitymanager_IdentityMutator_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_signin_identitymanager_IdentityMutator,
      &g_org_chromium_components_signin_identitymanager_IdentityMutator_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  signin {

JNI_GENERATOR_EXPORT jboolean Java_J_N_MASdubqY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJniIdentityMutator,
    jobject accountId) {
  JniIdentityMutator* native = reinterpret_cast<JniIdentityMutator*>(nativeJniIdentityMutator);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPrimaryAccount", false);
  return native->SetPrimaryAccount(env, base::android::JavaParamRef<jobject>(env, accountId));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mw3X2cb0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJniIdentityMutator,
    jint action,
    jint sourceMetric,
    jint deleteMetric) {
  JniIdentityMutator* native = reinterpret_cast<JniIdentityMutator*>(nativeJniIdentityMutator);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearPrimaryAccount", false);
  return native->ClearPrimaryAccount(env, action, sourceMetric, deleteMetric);
}

JNI_GENERATOR_EXPORT void Java_J_N_McMy7mwQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJniIdentityMutator,
    jobject accountId) {
  JniIdentityMutator* native = reinterpret_cast<JniIdentityMutator*>(nativeJniIdentityMutator);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReloadAllAccountsFromSystemWithPrimaryAccount");
  return native->ReloadAllAccountsFromSystemWithPrimaryAccount(env,
      base::android::JavaParamRef<jobject>(env, accountId));
}


static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_IdentityMutator_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_IdentityMutator_Constructor(JNIEnv* env,
    jlong nativeIdentityMutator) {
  jclass clazz = org_chromium_components_signin_identitymanager_IdentityMutator_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_signin_identitymanager_IdentityMutator_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_chromium_components_signin_identitymanager_IdentityMutator_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeIdentityMutator);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_IdentityMutator_destroy(nullptr);
static void Java_IdentityMutator_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_signin_identitymanager_IdentityMutator_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_IdentityMutator_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_components_signin_identitymanager_IdentityMutator_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace  signin

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_signin_identitymanager_IdentityMutator_JNI
