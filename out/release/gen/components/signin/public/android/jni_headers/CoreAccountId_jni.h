// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/signin/base/CoreAccountId

#ifndef org_chromium_components_signin_base_CoreAccountId_JNI
#define org_chromium_components_signin_base_CoreAccountId_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_signin_base_CoreAccountId[];
const char kClassPath_org_chromium_components_signin_base_CoreAccountId[] =
    "org/chromium/components/signin/base/CoreAccountId";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_signin_base_CoreAccountId_clazz(nullptr);
#ifndef org_chromium_components_signin_base_CoreAccountId_clazz_defined
#define org_chromium_components_signin_base_CoreAccountId_clazz_defined
inline jclass org_chromium_components_signin_base_CoreAccountId_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_signin_base_CoreAccountId,
      &g_org_chromium_components_signin_base_CoreAccountId_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  signin {


static std::atomic<jmethodID>
    g_org_chromium_components_signin_base_CoreAccountId_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CoreAccountId_Constructor(JNIEnv* env, const
    base::android::JavaRef<jstring>& id) {
  jclass clazz = org_chromium_components_signin_base_CoreAccountId_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_signin_base_CoreAccountId_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(Ljava/lang/String;)V",
          &g_org_chromium_components_signin_base_CoreAccountId_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, id.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_components_signin_base_CoreAccountId_getId(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_CoreAccountId_getId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_signin_base_CoreAccountId_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_base_CoreAccountId_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getId",
          "()Ljava/lang/String;",
          &g_org_chromium_components_signin_base_CoreAccountId_getId);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace  signin

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_signin_base_CoreAccountId_JNI
