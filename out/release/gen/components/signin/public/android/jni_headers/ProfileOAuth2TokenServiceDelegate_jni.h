// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate

#ifndef org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_JNI
#define org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate[];
const char
    kClassPath_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate[] =
    "org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(nullptr);
#ifndef org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz_defined
#define org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz_defined
inline jclass
    org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate,
      &g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  signin {

static void JNI_ProfileOAuth2TokenServiceDelegate_OnOAuth2TokenFetched(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& authToken,
    jboolean isTransientError,
    jlong nativeCallback);

JNI_GENERATOR_EXPORT void Java_J_N_MTN9MD0o(
    JNIEnv* env,
    jclass jcaller,
    jstring authToken,
    jboolean isTransientError,
    jlong nativeCallback) {
  return JNI_ProfileOAuth2TokenServiceDelegate_OnOAuth2TokenFetched(env,
      base::android::JavaParamRef<jstring>(env, authToken), isTransientError, nativeCallback);
}

JNI_GENERATOR_EXPORT void Java_J_N_M0SOBbHG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileOAuth2TokenServiceDelegateAndroid,
    jstring accountId) {
  ProfileOAuth2TokenServiceDelegateAndroid* native =
      reinterpret_cast<ProfileOAuth2TokenServiceDelegateAndroid*>(nativeProfileOAuth2TokenServiceDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReloadAllAccountsWithPrimaryAccountAfterSeeding");
  return native->ReloadAllAccountsWithPrimaryAccountAfterSeeding(env,
      base::android::JavaParamRef<jstring>(env, accountId));
}


static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ProfileOAuth2TokenServiceDelegate_create(JNIEnv* env, jlong
    nativeProfileOAuth2TokenServiceDelegateDelegate,
    const base::android::JavaRef<jobject>& accountTrackerService,
    const base::android::JavaRef<jobject>& accountManagerFacade) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/components/signin/AccountTrackerService;Lorg/chromium/components/signin/AccountManagerFacade;)Lorg/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate;",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeProfileOAuth2TokenServiceDelegateDelegate,
              accountTrackerService.obj(), accountManagerFacade.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_getSystemAccountNames(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_ProfileOAuth2TokenServiceDelegate_getSystemAccountNames(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSystemAccountNames",
          "()[Ljava/lang/String;",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_getSystemAccountNames);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_getAccessTokenFromNative(nullptr);
static void Java_ProfileOAuth2TokenServiceDelegate_getAccessTokenFromNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& username,
    const base::android::JavaRef<jstring>& scope,
    jlong nativeCallback) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAccessTokenFromNative",
          "(Ljava/lang/String;Ljava/lang/String;J)V",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_getAccessTokenFromNative);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, username.obj(), scope.obj(), nativeCallback);
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_invalidateAccessToken(nullptr);
static void Java_ProfileOAuth2TokenServiceDelegate_invalidateAccessToken(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& accessToken) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "invalidateAccessToken",
          "(Ljava/lang/String;)V",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_invalidateAccessToken);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, accessToken.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_hasOAuth2RefreshToken(nullptr);
static jboolean Java_ProfileOAuth2TokenServiceDelegate_hasOAuth2RefreshToken(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& accountName) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env),
          false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasOAuth2RefreshToken",
          "(Ljava/lang/String;)Z",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_hasOAuth2RefreshToken);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, accountName.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_seedAndReloadAccountsWithPrimaryAccount(nullptr);
static void Java_ProfileOAuth2TokenServiceDelegate_seedAndReloadAccountsWithPrimaryAccount(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>&
    accountId) {
  jclass clazz =
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "seedAndReloadAccountsWithPrimaryAccount",
          "(Ljava/lang/String;)V",
&g_org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_seedAndReloadAccountsWithPrimaryAccount);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, accountId.obj());
}

}  // namespace  signin

// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_signin_identitymanager_ProfileOAuth2TokenServiceDelegate_JNI
