// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "services/network/public/mojom/proxy_config.mojom.h"
#include "services/proxy_resolver/public/mojom/proxy_resolver.mojom.h"


#ifndef COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_JUMBO_H_
#define COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "services/network/public/cpp/proxy_config_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#endif


namespace data_reduction_proxy {
namespace mojom {


void DataReductionProxyThrottleConfigObserverInterceptorForTesting::OnThrottleConfigChanged(DataReductionProxyThrottleConfigPtr config) {
  GetForwardingInterface()->OnThrottleConfigChanged(std::move(config));
}
DataReductionProxyThrottleConfigObserverAsyncWaiter::DataReductionProxyThrottleConfigObserverAsyncWaiter(
    DataReductionProxyThrottleConfigObserver* proxy) : proxy_(proxy) {}

DataReductionProxyThrottleConfigObserverAsyncWaiter::~DataReductionProxyThrottleConfigObserverAsyncWaiter() = default;




void DataReductionProxyInterceptorForTesting::MarkProxiesAsBad(::base::TimeDelta bypass_duration, const ::net::ProxyList& bad_proxies, MarkProxiesAsBadCallback callback) {
  GetForwardingInterface()->MarkProxiesAsBad(std::move(bypass_duration), std::move(bad_proxies), std::move(callback));
}
void DataReductionProxyInterceptorForTesting::AddThrottleConfigObserver(mojo::PendingRemote<DataReductionProxyThrottleConfigObserver> observer) {
  GetForwardingInterface()->AddThrottleConfigObserver(std::move(observer));
}
void DataReductionProxyInterceptorForTesting::Clone(mojo::PendingReceiver<DataReductionProxy> receiver) {
  GetForwardingInterface()->Clone(std::move(receiver));
}
DataReductionProxyAsyncWaiter::DataReductionProxyAsyncWaiter(
    DataReductionProxy* proxy) : proxy_(proxy) {}

DataReductionProxyAsyncWaiter::~DataReductionProxyAsyncWaiter() = default;

void DataReductionProxyAsyncWaiter::MarkProxiesAsBad(
    ::base::TimeDelta bypass_duration, const ::net::ProxyList& bad_proxies) {
  base::RunLoop loop;
  proxy_->MarkProxiesAsBad(std::move(bypass_duration),std::move(bad_proxies),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace data_reduction_proxy

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif