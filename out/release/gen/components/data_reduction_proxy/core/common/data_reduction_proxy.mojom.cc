// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-params-data.h"
#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-shared-message-ids.h"

#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-import-headers.h"


#ifndef COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_JUMBO_H_
#define COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "services/network/public/cpp/proxy_config_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#endif
namespace data_reduction_proxy {
namespace mojom {
DataReductionProxyServer::DataReductionProxyServer()
    : proxy_server(),
      is_core() {}

DataReductionProxyServer::DataReductionProxyServer(
    const ::net::ProxyServer& proxy_server_in,
    bool is_core_in)
    : proxy_server(std::move(proxy_server_in)),
      is_core(std::move(is_core_in)) {}

DataReductionProxyServer::~DataReductionProxyServer() = default;

bool DataReductionProxyServer::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataReductionProxyThrottleConfig::DataReductionProxyThrottleConfig()
    : proxies_for_http() {}

DataReductionProxyThrottleConfig::DataReductionProxyThrottleConfig(
    std::vector<DataReductionProxyServerPtr> proxies_for_http_in)
    : proxies_for_http(std::move(proxies_for_http_in)) {}

DataReductionProxyThrottleConfig::~DataReductionProxyThrottleConfig() = default;

bool DataReductionProxyThrottleConfig::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char DataReductionProxyThrottleConfigObserver::Name_[] = "data_reduction_proxy.mojom.DataReductionProxyThrottleConfigObserver";

DataReductionProxyThrottleConfigObserverProxy::DataReductionProxyThrottleConfigObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DataReductionProxyThrottleConfigObserverProxy::OnThrottleConfigChanged(
    DataReductionProxyThrottleConfigPtr in_config) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserver::OnThrottleConfigChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_reduction_proxy::mojom::internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->config)::BaseType::BufferWriter
      config_writer;
  mojo::internal::Serialize<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView>(
      in_config, buffer, &config_writer, &serialization_context);
  params->config.Set(
      config_writer.is_null() ? nullptr : config_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null config in DataReductionProxyThrottleConfigObserver.OnThrottleConfigChanged request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DataReductionProxyThrottleConfigObserver::Name_);
  message.set_method_name("OnThrottleConfigChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool DataReductionProxyThrottleConfigObserverStubDispatch::Accept(
    DataReductionProxyThrottleConfigObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserver::OnThrottleConfigChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserver::OnThrottleConfigChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data* params =
          reinterpret_cast<internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      DataReductionProxyThrottleConfigPtr p_config{};
      DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadConfig(&p_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DataReductionProxyThrottleConfigObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnThrottleConfigChanged(
std::move(p_config));
      return true;
    }
  }
  return false;
}

// static
bool DataReductionProxyThrottleConfigObserverStubDispatch::AcceptWithResponder(
    DataReductionProxyThrottleConfigObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDataReductionProxyThrottleConfigObserverValidationInfo[] = {
    {&internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool DataReductionProxyThrottleConfigObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDataReductionProxyThrottleConfigObserverValidationInfo);
}

const char DataReductionProxy::Name_[] = "data_reduction_proxy.mojom.DataReductionProxy";

class DataReductionProxy_MarkProxiesAsBad_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DataReductionProxy_MarkProxiesAsBad_ForwardToCallback(
      DataReductionProxy::MarkProxiesAsBadCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DataReductionProxy::MarkProxiesAsBadCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DataReductionProxy_MarkProxiesAsBad_ForwardToCallback);
};

DataReductionProxyProxy::DataReductionProxyProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DataReductionProxyProxy::MarkProxiesAsBad(
    ::base::TimeDelta in_bypass_duration, const ::net::ProxyList& in_bad_proxies, MarkProxiesAsBadCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_reduction_proxy::mojom::DataReductionProxy::MarkProxiesAsBad");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDataReductionProxy_MarkProxiesAsBad_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_reduction_proxy::mojom::internal::DataReductionProxy_MarkProxiesAsBad_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->bypass_duration)::BaseType::BufferWriter
      bypass_duration_writer;
  mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
      in_bypass_duration, buffer, &bypass_duration_writer, &serialization_context);
  params->bypass_duration.Set(
      bypass_duration_writer.is_null() ? nullptr : bypass_duration_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bypass_duration.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bypass_duration in DataReductionProxy.MarkProxiesAsBad request");
  typename decltype(params->bad_proxies)::BaseType::BufferWriter
      bad_proxies_writer;
  mojo::internal::Serialize<::network::mojom::ProxyListDataView>(
      in_bad_proxies, buffer, &bad_proxies_writer, &serialization_context);
  params->bad_proxies.Set(
      bad_proxies_writer.is_null() ? nullptr : bad_proxies_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bad_proxies.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bad_proxies in DataReductionProxy.MarkProxiesAsBad request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DataReductionProxy::Name_);
  message.set_method_name("MarkProxiesAsBad");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DataReductionProxy_MarkProxiesAsBad_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DataReductionProxyProxy::AddThrottleConfigObserver(
    mojo::PendingRemote<DataReductionProxyThrottleConfigObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_reduction_proxy::mojom::DataReductionProxy::AddThrottleConfigObserver");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDataReductionProxy_AddThrottleConfigObserver_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_reduction_proxy::mojom::internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserverInterfaceBase>>(
      in_observer, &params->observer, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in DataReductionProxy.AddThrottleConfigObserver request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DataReductionProxy::Name_);
  message.set_method_name("AddThrottleConfigObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DataReductionProxyProxy::Clone(
    mojo::PendingReceiver<DataReductionProxy> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_reduction_proxy::mojom::DataReductionProxy::Clone");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDataReductionProxy_Clone_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_reduction_proxy::mojom::internal::DataReductionProxy_Clone_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::data_reduction_proxy::mojom::DataReductionProxyInterfaceBase>>(
      in_receiver, &params->receiver, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in DataReductionProxy.Clone request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DataReductionProxy::Name_);
  message.set_method_name("Clone");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class DataReductionProxy_MarkProxiesAsBad_ProxyToResponder {
 public:
  static DataReductionProxy::MarkProxiesAsBadCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DataReductionProxy_MarkProxiesAsBad_ProxyToResponder> proxy(
        new DataReductionProxy_MarkProxiesAsBad_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&DataReductionProxy_MarkProxiesAsBad_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DataReductionProxy_MarkProxiesAsBad_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DataReductionProxy_MarkProxiesAsBad_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DataReductionProxy::MarkProxiesAsBadCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DataReductionProxy_MarkProxiesAsBad_ProxyToResponder);
};

bool DataReductionProxy_MarkProxiesAsBad_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "data_reduction_proxy::mojom::DataReductionProxy::MarkProxiesAsBadCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  DataReductionProxy_MarkProxiesAsBad_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DataReductionProxy::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DataReductionProxy_MarkProxiesAsBad_ProxyToResponder::Run(
    ) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDataReductionProxy_MarkProxiesAsBad_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_reduction_proxy::mojom::internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)data_reduction_proxy::mojom::DataReductionProxy::MarkProxiesAsBadCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DataReductionProxy::Name_);
  message.set_method_name("MarkProxiesAsBad");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DataReductionProxyStubDispatch::Accept(
    DataReductionProxy* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDataReductionProxy_MarkProxiesAsBad_Name: {
      break;
    }
    case internal::kDataReductionProxy_AddThrottleConfigObserver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_reduction_proxy::mojom::DataReductionProxy::AddThrottleConfigObserver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_reduction_proxy::mojom::DataReductionProxy::AddThrottleConfigObserver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data* params =
          reinterpret_cast<internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingRemote<DataReductionProxyThrottleConfigObserver> p_observer{};
      DataReductionProxy_AddThrottleConfigObserver_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DataReductionProxy::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddThrottleConfigObserver(
std::move(p_observer));
      return true;
    }
    case internal::kDataReductionProxy_Clone_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_reduction_proxy::mojom::DataReductionProxy::Clone",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_reduction_proxy::mojom::DataReductionProxy::Clone");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DataReductionProxy_Clone_Params_Data* params =
          reinterpret_cast<internal::DataReductionProxy_Clone_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingReceiver<DataReductionProxy> p_receiver{};
      DataReductionProxy_Clone_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DataReductionProxy::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Clone(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool DataReductionProxyStubDispatch::AcceptWithResponder(
    DataReductionProxy* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kDataReductionProxy_MarkProxiesAsBad_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_reduction_proxy::mojom::DataReductionProxy::MarkProxiesAsBad",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_reduction_proxy::mojom::DataReductionProxy::MarkProxiesAsBad");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::DataReductionProxy_MarkProxiesAsBad_Params_Data* params =
          reinterpret_cast<
              internal::DataReductionProxy_MarkProxiesAsBad_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::TimeDelta p_bypass_duration{};
      ::net::ProxyList p_bad_proxies{};
      DataReductionProxy_MarkProxiesAsBad_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadBypassDuration(&p_bypass_duration))
        success = false;
      if (success && !input_data_view.ReadBadProxies(&p_bad_proxies))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DataReductionProxy::Name_, 0, false);
        return false;
      }
      DataReductionProxy::MarkProxiesAsBadCallback callback =
          DataReductionProxy_MarkProxiesAsBad_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->MarkProxiesAsBad(
std::move(p_bypass_duration), 
std::move(p_bad_proxies), std::move(callback));
      return true;
    }
    case internal::kDataReductionProxy_AddThrottleConfigObserver_Name: {
      break;
    }
    case internal::kDataReductionProxy_Clone_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDataReductionProxyValidationInfo[] = {
    {&internal::DataReductionProxy_MarkProxiesAsBad_Params_Data::Validate,
     &internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data::Validate},
    {&internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DataReductionProxy_Clone_Params_Data::Validate,
     nullptr /* no response */},
};

bool DataReductionProxyRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::data_reduction_proxy::mojom::DataReductionProxy::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDataReductionProxyValidationInfo);
}

bool DataReductionProxyResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::data_reduction_proxy::mojom::DataReductionProxy::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kDataReductionProxyValidationInfo);
}
}  // namespace mojom
}  // namespace data_reduction_proxy

namespace mojo {


// static
bool StructTraits<::data_reduction_proxy::mojom::DataReductionProxyServer::DataView, ::data_reduction_proxy::mojom::DataReductionProxyServerPtr>::Read(
    ::data_reduction_proxy::mojom::DataReductionProxyServer::DataView input,
    ::data_reduction_proxy::mojom::DataReductionProxyServerPtr* output) {
  bool success = true;
  ::data_reduction_proxy::mojom::DataReductionProxyServerPtr result(::data_reduction_proxy::mojom::DataReductionProxyServer::New());
  
      if (success && !input.ReadProxyServer(&result->proxy_server))
        success = false;
      if (success)
        result->is_core = input.is_core();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::DataView, ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr>::Read(
    ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::DataView input,
    ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr* output) {
  bool success = true;
  ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr result(::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::New());
  
      if (success && !input.ReadProxiesForHttp(&result->proxies_for_http))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif