// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace data_reduction_proxy {
namespace mojom {
namespace internal {
class  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data));
      new (data()) DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data>(index_);
    }
    DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DataReductionProxyThrottleConfig_Data> config;

 private:
  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data();
  ~DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data() = delete;
};
static_assert(sizeof(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data) == 16,
              "Bad sizeof(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data)");
class  DataReductionProxy_MarkProxiesAsBad_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DataReductionProxy_MarkProxiesAsBad_Params_Data));
      new (data()) DataReductionProxy_MarkProxiesAsBad_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DataReductionProxy_MarkProxiesAsBad_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DataReductionProxy_MarkProxiesAsBad_Params_Data>(index_);
    }
    DataReductionProxy_MarkProxiesAsBad_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> bypass_duration;
  mojo::internal::Pointer<::network::mojom::internal::ProxyList_Data> bad_proxies;

 private:
  DataReductionProxy_MarkProxiesAsBad_Params_Data();
  ~DataReductionProxy_MarkProxiesAsBad_Params_Data() = delete;
};
static_assert(sizeof(DataReductionProxy_MarkProxiesAsBad_Params_Data) == 24,
              "Bad sizeof(DataReductionProxy_MarkProxiesAsBad_Params_Data)");
class  DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data));
      new (data()) DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data>(index_);
    }
    DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data();
  ~DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data() = delete;
};
static_assert(sizeof(DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data) == 8,
              "Bad sizeof(DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data)");
class  DataReductionProxy_AddThrottleConfigObserver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DataReductionProxy_AddThrottleConfigObserver_Params_Data));
      new (data()) DataReductionProxy_AddThrottleConfigObserver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DataReductionProxy_AddThrottleConfigObserver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DataReductionProxy_AddThrottleConfigObserver_Params_Data>(index_);
    }
    DataReductionProxy_AddThrottleConfigObserver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  DataReductionProxy_AddThrottleConfigObserver_Params_Data();
  ~DataReductionProxy_AddThrottleConfigObserver_Params_Data() = delete;
};
static_assert(sizeof(DataReductionProxy_AddThrottleConfigObserver_Params_Data) == 16,
              "Bad sizeof(DataReductionProxy_AddThrottleConfigObserver_Params_Data)");
class  DataReductionProxy_Clone_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DataReductionProxy_Clone_Params_Data));
      new (data()) DataReductionProxy_Clone_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DataReductionProxy_Clone_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DataReductionProxy_Clone_Params_Data>(index_);
    }
    DataReductionProxy_Clone_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  DataReductionProxy_Clone_Params_Data();
  ~DataReductionProxy_Clone_Params_Data() = delete;
};
static_assert(sizeof(DataReductionProxy_Clone_Params_Data) == 16,
              "Bad sizeof(DataReductionProxy_Clone_Params_Data)");

}  // namespace internal
class DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_ParamsDataView {
 public:
  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_ParamsDataView() {}

  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_ParamsDataView(
      internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      DataReductionProxyThrottleConfigDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConfig(UserType* output) {
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView>(
        pointer, output, context_);
  }
 private:
  internal::DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DataReductionProxy_MarkProxiesAsBad_ParamsDataView {
 public:
  DataReductionProxy_MarkProxiesAsBad_ParamsDataView() {}

  DataReductionProxy_MarkProxiesAsBad_ParamsDataView(
      internal::DataReductionProxy_MarkProxiesAsBad_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBypassDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBypassDuration(UserType* output) {
    auto* pointer = data_->bypass_duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetBadProxiesDataView(
      ::network::mojom::ProxyListDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBadProxies(UserType* output) {
    auto* pointer = data_->bad_proxies.Get();
    return mojo::internal::Deserialize<::network::mojom::ProxyListDataView>(
        pointer, output, context_);
  }
 private:
  internal::DataReductionProxy_MarkProxiesAsBad_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DataReductionProxy_MarkProxiesAsBad_ResponseParamsDataView {
 public:
  DataReductionProxy_MarkProxiesAsBad_ResponseParamsDataView() {}

  DataReductionProxy_MarkProxiesAsBad_ResponseParamsDataView(
      internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DataReductionProxy_MarkProxiesAsBad_ResponseParams_Data* data_ = nullptr;
};

class DataReductionProxy_AddThrottleConfigObserver_ParamsDataView {
 public:
  DataReductionProxy_AddThrottleConfigObserver_ParamsDataView() {}

  DataReductionProxy_AddThrottleConfigObserver_ParamsDataView(
      internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigObserverInterfaceBase>>(
            &data_->observer, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataReductionProxy_AddThrottleConfigObserver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DataReductionProxy_Clone_ParamsDataView {
 public:
  DataReductionProxy_Clone_ParamsDataView() {}

  DataReductionProxy_Clone_ParamsDataView(
      internal::DataReductionProxy_Clone_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_reduction_proxy::mojom::DataReductionProxyInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataReductionProxy_Clone_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_ParamsDataView::GetConfigDataView(
    DataReductionProxyThrottleConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = DataReductionProxyThrottleConfigDataView(pointer, context_);
}


inline void DataReductionProxy_MarkProxiesAsBad_ParamsDataView::GetBypassDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->bypass_duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void DataReductionProxy_MarkProxiesAsBad_ParamsDataView::GetBadProxiesDataView(
    ::network::mojom::ProxyListDataView* output) {
  auto pointer = data_->bad_proxies.Get();
  *output = ::network::mojom::ProxyListDataView(pointer, context_);
}







}  // namespace mojom
}  // namespace data_reduction_proxy

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_PARAMS_DATA_H_