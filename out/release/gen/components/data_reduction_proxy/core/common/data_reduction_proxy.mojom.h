// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_H_
#define COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-shared.h"
#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "services/network/public/mojom/proxy_config.mojom.h"
#include "services/proxy_resolver/public/mojom/proxy_resolver.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace data_reduction_proxy {
namespace mojom {

class DataReductionProxyThrottleConfigObserverProxy;

template <typename ImplRefTraits>
class DataReductionProxyThrottleConfigObserverStub;

class DataReductionProxyThrottleConfigObserverRequestValidator;


class  DataReductionProxyThrottleConfigObserver
    : public DataReductionProxyThrottleConfigObserverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = DataReductionProxyThrottleConfigObserverInterfaceBase;
  using Proxy_ = DataReductionProxyThrottleConfigObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = DataReductionProxyThrottleConfigObserverStub<ImplRefTraits>;

  using RequestValidator_ = DataReductionProxyThrottleConfigObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnThrottleConfigChangedMinVersion = 0,
  };
  virtual ~DataReductionProxyThrottleConfigObserver() {}

  
  virtual void OnThrottleConfigChanged(DataReductionProxyThrottleConfigPtr config) = 0;
};

class DataReductionProxyProxy;

template <typename ImplRefTraits>
class DataReductionProxyStub;

class DataReductionProxyRequestValidator;
class DataReductionProxyResponseValidator;


class  DataReductionProxy
    : public DataReductionProxyInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = DataReductionProxyInterfaceBase;
  using Proxy_ = DataReductionProxyProxy;

  template <typename ImplRefTraits>
  using Stub_ = DataReductionProxyStub<ImplRefTraits>;

  using RequestValidator_ = DataReductionProxyRequestValidator;
  using ResponseValidator_ = DataReductionProxyResponseValidator;
  enum MethodMinVersions : uint32_t {
    kMarkProxiesAsBadMinVersion = 0,
    kAddThrottleConfigObserverMinVersion = 0,
    kCloneMinVersion = 0,
  };
  virtual ~DataReductionProxy() {}


  using MarkProxiesAsBadCallback = base::OnceCallback<void()>;
  
  virtual void MarkProxiesAsBad(::base::TimeDelta bypass_duration, const ::net::ProxyList& bad_proxies, MarkProxiesAsBadCallback callback) = 0;

  
  virtual void AddThrottleConfigObserver(mojo::PendingRemote<DataReductionProxyThrottleConfigObserver> observer) = 0;

  
  virtual void Clone(mojo::PendingReceiver<DataReductionProxy> receiver) = 0;
};



class  DataReductionProxyThrottleConfigObserverProxy
    : public DataReductionProxyThrottleConfigObserver {
 public:
  using InterfaceType = DataReductionProxyThrottleConfigObserver;

  explicit DataReductionProxyThrottleConfigObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnThrottleConfigChanged(DataReductionProxyThrottleConfigPtr config) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  DataReductionProxyProxy
    : public DataReductionProxy {
 public:
  using InterfaceType = DataReductionProxy;

  explicit DataReductionProxyProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void MarkProxiesAsBad(::base::TimeDelta bypass_duration, const ::net::ProxyList& bad_proxies, MarkProxiesAsBadCallback callback) final;
  
  void AddThrottleConfigObserver(mojo::PendingRemote<DataReductionProxyThrottleConfigObserver> observer) final;
  
  void Clone(mojo::PendingReceiver<DataReductionProxy> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  DataReductionProxyThrottleConfigObserverStubDispatch {
 public:
  static bool Accept(DataReductionProxyThrottleConfigObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DataReductionProxyThrottleConfigObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DataReductionProxyThrottleConfigObserver>>
class DataReductionProxyThrottleConfigObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DataReductionProxyThrottleConfigObserverStub() {}
  ~DataReductionProxyThrottleConfigObserverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DataReductionProxyThrottleConfigObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DataReductionProxyThrottleConfigObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  DataReductionProxyStubDispatch {
 public:
  static bool Accept(DataReductionProxy* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DataReductionProxy* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DataReductionProxy>>
class DataReductionProxyStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DataReductionProxyStub() {}
  ~DataReductionProxyStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DataReductionProxyStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DataReductionProxyStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  DataReductionProxyThrottleConfigObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  DataReductionProxyRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  DataReductionProxyResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class  DataReductionProxyServer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DataReductionProxyServer, T>::value>;
  using DataView = DataReductionProxyServerDataView;
  using Data_ = internal::DataReductionProxyServer_Data;

  template <typename... Args>
  static DataReductionProxyServerPtr New(Args&&... args) {
    return DataReductionProxyServerPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DataReductionProxyServerPtr From(const U& u) {
    return mojo::TypeConverter<DataReductionProxyServerPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DataReductionProxyServer>::Convert(*this);
  }


  DataReductionProxyServer();

  DataReductionProxyServer(
      const ::net::ProxyServer& proxy_server,
      bool is_core);

  ~DataReductionProxyServer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DataReductionProxyServerPtr>
  DataReductionProxyServerPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DataReductionProxyServer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DataReductionProxyServer::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DataReductionProxyServer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DataReductionProxyServer_UnserializedMessageContext<
            UserType, DataReductionProxyServer::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<DataReductionProxyServer::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return DataReductionProxyServer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DataReductionProxyServer_UnserializedMessageContext<
            UserType, DataReductionProxyServer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DataReductionProxyServer::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::net::ProxyServer proxy_server;
  
  bool is_core;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DataReductionProxyServer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DataReductionProxyServer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DataReductionProxyServer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DataReductionProxyServer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  DataReductionProxyThrottleConfig {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DataReductionProxyThrottleConfig, T>::value>;
  using DataView = DataReductionProxyThrottleConfigDataView;
  using Data_ = internal::DataReductionProxyThrottleConfig_Data;

  template <typename... Args>
  static DataReductionProxyThrottleConfigPtr New(Args&&... args) {
    return DataReductionProxyThrottleConfigPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DataReductionProxyThrottleConfigPtr From(const U& u) {
    return mojo::TypeConverter<DataReductionProxyThrottleConfigPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DataReductionProxyThrottleConfig>::Convert(*this);
  }


  DataReductionProxyThrottleConfig();

  explicit DataReductionProxyThrottleConfig(
      std::vector<DataReductionProxyServerPtr> proxies_for_http);

  ~DataReductionProxyThrottleConfig();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DataReductionProxyThrottleConfigPtr>
  DataReductionProxyThrottleConfigPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DataReductionProxyThrottleConfig::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DataReductionProxyThrottleConfig::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DataReductionProxyThrottleConfig_UnserializedMessageContext<
            UserType, DataReductionProxyThrottleConfig::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<DataReductionProxyThrottleConfig::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return DataReductionProxyThrottleConfig::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DataReductionProxyThrottleConfig_UnserializedMessageContext<
            UserType, DataReductionProxyThrottleConfig::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DataReductionProxyThrottleConfig::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<DataReductionProxyServerPtr> proxies_for_http;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(DataReductionProxyThrottleConfig);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
DataReductionProxyServerPtr DataReductionProxyServer::Clone() const {
  return New(
      mojo::Clone(proxy_server),
      mojo::Clone(is_core)
  );
}

template <typename T, DataReductionProxyServer::EnableIfSame<T>*>
bool DataReductionProxyServer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->proxy_server, other_struct.proxy_server))
    return false;
  if (!mojo::Equals(this->is_core, other_struct.is_core))
    return false;
  return true;
}

template <typename T, DataReductionProxyServer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.proxy_server < rhs.proxy_server)
    return true;
  if (rhs.proxy_server < lhs.proxy_server)
    return false;
  if (lhs.is_core < rhs.is_core)
    return true;
  if (rhs.is_core < lhs.is_core)
    return false;
  return false;
}
template <typename StructPtrType>
DataReductionProxyThrottleConfigPtr DataReductionProxyThrottleConfig::Clone() const {
  return New(
      mojo::Clone(proxies_for_http)
  );
}

template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>*>
bool DataReductionProxyThrottleConfig::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->proxies_for_http, other_struct.proxies_for_http))
    return false;
  return true;
}

template <typename T, DataReductionProxyThrottleConfig::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.proxies_for_http < rhs.proxies_for_http)
    return true;
  if (rhs.proxies_for_http < lhs.proxies_for_http)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace data_reduction_proxy

namespace mojo {


template <>
struct  StructTraits<::data_reduction_proxy::mojom::DataReductionProxyServer::DataView,
                                         ::data_reduction_proxy::mojom::DataReductionProxyServerPtr> {
  static bool IsNull(const ::data_reduction_proxy::mojom::DataReductionProxyServerPtr& input) { return !input; }
  static void SetToNull(::data_reduction_proxy::mojom::DataReductionProxyServerPtr* output) { output->reset(); }

  static const decltype(::data_reduction_proxy::mojom::DataReductionProxyServer::proxy_server)& proxy_server(
      const ::data_reduction_proxy::mojom::DataReductionProxyServerPtr& input) {
    return input->proxy_server;
  }

  static decltype(::data_reduction_proxy::mojom::DataReductionProxyServer::is_core) is_core(
      const ::data_reduction_proxy::mojom::DataReductionProxyServerPtr& input) {
    return input->is_core;
  }

  static bool Read(::data_reduction_proxy::mojom::DataReductionProxyServer::DataView input, ::data_reduction_proxy::mojom::DataReductionProxyServerPtr* output);
};


template <>
struct  StructTraits<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::DataView,
                                         ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr> {
  static bool IsNull(const ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr& input) { return !input; }
  static void SetToNull(::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr* output) { output->reset(); }

  static const decltype(::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::proxies_for_http)& proxies_for_http(
      const ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr& input) {
    return input->proxies_for_http;
  }

  static bool Read(::data_reduction_proxy::mojom::DataReductionProxyThrottleConfig::DataView input, ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigPtr* output);
};

}  // namespace mojo

#endif  // COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_H_