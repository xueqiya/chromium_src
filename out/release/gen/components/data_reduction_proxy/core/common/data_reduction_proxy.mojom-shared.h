// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_SHARED_H_
#define COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/proxy_config.mojom-shared.h"
#include "services/proxy_resolver/public/mojom/proxy_resolver.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace data_reduction_proxy {
namespace mojom {
class DataReductionProxyServerDataView;

class DataReductionProxyThrottleConfigDataView;



}  // namespace mojom
}  // namespace data_reduction_proxy

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::data_reduction_proxy::mojom::DataReductionProxyServerDataView> {
  using Data = ::data_reduction_proxy::mojom::internal::DataReductionProxyServer_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView> {
  using Data = ::data_reduction_proxy::mojom::internal::DataReductionProxyThrottleConfig_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace data_reduction_proxy {
namespace mojom {
// Interface base classes. They are used for type safety check.
class DataReductionProxyThrottleConfigObserverInterfaceBase {};

using DataReductionProxyThrottleConfigObserverPtrDataView =
    mojo::InterfacePtrDataView<DataReductionProxyThrottleConfigObserverInterfaceBase>;
using DataReductionProxyThrottleConfigObserverRequestDataView =
    mojo::InterfaceRequestDataView<DataReductionProxyThrottleConfigObserverInterfaceBase>;
using DataReductionProxyThrottleConfigObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DataReductionProxyThrottleConfigObserverInterfaceBase>;
using DataReductionProxyThrottleConfigObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DataReductionProxyThrottleConfigObserverInterfaceBase>;
class DataReductionProxyInterfaceBase {};

using DataReductionProxyPtrDataView =
    mojo::InterfacePtrDataView<DataReductionProxyInterfaceBase>;
using DataReductionProxyRequestDataView =
    mojo::InterfaceRequestDataView<DataReductionProxyInterfaceBase>;
using DataReductionProxyAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DataReductionProxyInterfaceBase>;
using DataReductionProxyAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DataReductionProxyInterfaceBase>;
class DataReductionProxyServerDataView {
 public:
  DataReductionProxyServerDataView() {}

  DataReductionProxyServerDataView(
      internal::DataReductionProxyServer_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetProxyServerDataView(
      ::proxy_resolver::mojom::ProxyServerDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProxyServer(UserType* output) {
    auto* pointer = data_->proxy_server.Get();
    return mojo::internal::Deserialize<::proxy_resolver::mojom::ProxyServerDataView>(
        pointer, output, context_);
  }
  bool is_core() const {
    return data_->is_core;
  }
 private:
  internal::DataReductionProxyServer_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DataReductionProxyThrottleConfigDataView {
 public:
  DataReductionProxyThrottleConfigDataView() {}

  DataReductionProxyThrottleConfigDataView(
      internal::DataReductionProxyThrottleConfig_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetProxiesForHttpDataView(
      mojo::ArrayDataView<DataReductionProxyServerDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProxiesForHttp(UserType* output) {
    auto* pointer = data_->proxies_for_http.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::data_reduction_proxy::mojom::DataReductionProxyServerDataView>>(
        pointer, output, context_);
  }
 private:
  internal::DataReductionProxyThrottleConfig_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace data_reduction_proxy

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::data_reduction_proxy::mojom::DataReductionProxyServerDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::data_reduction_proxy::mojom::DataReductionProxyServerDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::data_reduction_proxy::mojom::internal::DataReductionProxyServer_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::proxy_server(input)) in_proxy_server = Traits::proxy_server(input);
    typename decltype((*output)->proxy_server)::BaseType::BufferWriter
        proxy_server_writer;
    mojo::internal::Serialize<::proxy_resolver::mojom::ProxyServerDataView>(
        in_proxy_server, buffer, &proxy_server_writer, context);
    (*output)->proxy_server.Set(
        proxy_server_writer.is_null() ? nullptr : proxy_server_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->proxy_server.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null proxy_server in DataReductionProxyServer struct");
    (*output)->is_core = Traits::is_core(input);
  }

  static bool Deserialize(::data_reduction_proxy::mojom::internal::DataReductionProxyServer_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::data_reduction_proxy::mojom::DataReductionProxyServerDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::data_reduction_proxy::mojom::internal::DataReductionProxyThrottleConfig_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::proxies_for_http(input)) in_proxies_for_http = Traits::proxies_for_http(input);
    typename decltype((*output)->proxies_for_http)::BaseType::BufferWriter
        proxies_for_http_writer;
    const mojo::internal::ContainerValidateParams proxies_for_http_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::data_reduction_proxy::mojom::DataReductionProxyServerDataView>>(
        in_proxies_for_http, buffer, &proxies_for_http_writer, &proxies_for_http_validate_params,
        context);
    (*output)->proxies_for_http.Set(
        proxies_for_http_writer.is_null() ? nullptr : proxies_for_http_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->proxies_for_http.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null proxies_for_http in DataReductionProxyThrottleConfig struct");
  }

  static bool Deserialize(::data_reduction_proxy::mojom::internal::DataReductionProxyThrottleConfig_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::data_reduction_proxy::mojom::DataReductionProxyThrottleConfigDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace data_reduction_proxy {
namespace mojom {

inline void DataReductionProxyServerDataView::GetProxyServerDataView(
    ::proxy_resolver::mojom::ProxyServerDataView* output) {
  auto pointer = data_->proxy_server.Get();
  *output = ::proxy_resolver::mojom::ProxyServerDataView(pointer, context_);
}


inline void DataReductionProxyThrottleConfigDataView::GetProxiesForHttpDataView(
    mojo::ArrayDataView<DataReductionProxyServerDataView>* output) {
  auto pointer = data_->proxies_for_http.Get();
  *output = mojo::ArrayDataView<DataReductionProxyServerDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace data_reduction_proxy

#endif  // COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_MOJOM_SHARED_H_