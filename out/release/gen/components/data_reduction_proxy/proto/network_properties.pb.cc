// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_properties.proto

#include "network_properties.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_network_5fproperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProxyFlags_network_5fproperties_2eproto;
namespace data_reduction_proxy {
class ProxyFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProxyFlags> _instance;
} _ProxyFlags_default_instance_;
class NetworkPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkProperties> _instance;
} _NetworkProperties_default_instance_;
}  // namespace data_reduction_proxy
static void InitDefaultsscc_info_NetworkProperties_network_5fproperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_reduction_proxy::_NetworkProperties_default_instance_;
    new (ptr) ::data_reduction_proxy::NetworkProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_reduction_proxy::NetworkProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkProperties_network_5fproperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkProperties_network_5fproperties_2eproto}, {
      &scc_info_ProxyFlags_network_5fproperties_2eproto.base,}};

static void InitDefaultsscc_info_ProxyFlags_network_5fproperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_reduction_proxy::_ProxyFlags_default_instance_;
    new (ptr) ::data_reduction_proxy::ProxyFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_reduction_proxy::ProxyFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProxyFlags_network_5fproperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProxyFlags_network_5fproperties_2eproto}, {}};

namespace data_reduction_proxy {

// ===================================================================

void ProxyFlags::InitAsDefaultInstance() {
}
class ProxyFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<ProxyFlags>()._has_bits_);
  static void set_has_disallowed_due_to_warmup_probe_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProxyFlags::ProxyFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.ProxyFlags)
}
ProxyFlags::ProxyFlags(const ProxyFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disallowed_due_to_warmup_probe_failure_ = from.disallowed_due_to_warmup_probe_failure_;
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.ProxyFlags)
}

void ProxyFlags::SharedCtor() {
  disallowed_due_to_warmup_probe_failure_ = false;
}

ProxyFlags::~ProxyFlags() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.ProxyFlags)
  SharedDtor();
}

void ProxyFlags::SharedDtor() {
}

void ProxyFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProxyFlags& ProxyFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProxyFlags_network_5fproperties_2eproto.base);
  return *internal_default_instance();
}


void ProxyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.ProxyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disallowed_due_to_warmup_probe_failure_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProxyFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool disallowed_due_to_warmup_probe_failure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_disallowed_due_to_warmup_probe_failure(&has_bits);
          disallowed_due_to_warmup_probe_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProxyFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.ProxyFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disallowed_due_to_warmup_probe_failure = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_disallowed_due_to_warmup_probe_failure(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disallowed_due_to_warmup_probe_failure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.ProxyFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.ProxyFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProxyFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.ProxyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->disallowed_due_to_warmup_probe_failure(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.ProxyFlags)
}

size_t ProxyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.ProxyFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProxyFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProxyFlags*>(
      &from));
}

void ProxyFlags::MergeFrom(const ProxyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.ProxyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disallowed_due_to_warmup_probe_failure()) {
    set_disallowed_due_to_warmup_probe_failure(from.disallowed_due_to_warmup_probe_failure());
  }
}

void ProxyFlags::CopyFrom(const ProxyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.ProxyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyFlags::IsInitialized() const {
  return true;
}

void ProxyFlags::InternalSwap(ProxyFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disallowed_due_to_warmup_probe_failure_, other->disallowed_due_to_warmup_probe_failure_);
}

std::string ProxyFlags::GetTypeName() const {
  return "data_reduction_proxy.ProxyFlags";
}


// ===================================================================

void NetworkProperties::InitAsDefaultInstance() {
  ::data_reduction_proxy::_NetworkProperties_default_instance_._instance.get_mutable()->secure_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  ::data_reduction_proxy::_NetworkProperties_default_instance_._instance.get_mutable()->insecure_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  ::data_reduction_proxy::_NetworkProperties_default_instance_._instance.get_mutable()->secure_non_core_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  ::data_reduction_proxy::_NetworkProperties_default_instance_._instance.get_mutable()->insecure_non_core_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
}
class NetworkProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkProperties>()._has_bits_);
  static void set_has_secure_proxy_disallowed_by_carrier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_captive_portal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::data_reduction_proxy::ProxyFlags& secure_proxy_flags(const NetworkProperties* msg);
  static void set_has_secure_proxy_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::data_reduction_proxy::ProxyFlags& insecure_proxy_flags(const NetworkProperties* msg);
  static void set_has_insecure_proxy_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::data_reduction_proxy::ProxyFlags& secure_non_core_proxy_flags(const NetworkProperties* msg);
  static void set_has_secure_non_core_proxy_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::data_reduction_proxy::ProxyFlags& insecure_non_core_proxy_flags(const NetworkProperties* msg);
  static void set_has_insecure_non_core_proxy_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::data_reduction_proxy::ProxyFlags&
NetworkProperties::_Internal::secure_proxy_flags(const NetworkProperties* msg) {
  return *msg->secure_proxy_flags_;
}
const ::data_reduction_proxy::ProxyFlags&
NetworkProperties::_Internal::insecure_proxy_flags(const NetworkProperties* msg) {
  return *msg->insecure_proxy_flags_;
}
const ::data_reduction_proxy::ProxyFlags&
NetworkProperties::_Internal::secure_non_core_proxy_flags(const NetworkProperties* msg) {
  return *msg->secure_non_core_proxy_flags_;
}
const ::data_reduction_proxy::ProxyFlags&
NetworkProperties::_Internal::insecure_non_core_proxy_flags(const NetworkProperties* msg) {
  return *msg->insecure_non_core_proxy_flags_;
}
NetworkProperties::NetworkProperties()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.NetworkProperties)
}
NetworkProperties::NetworkProperties(const NetworkProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_secure_proxy_flags()) {
    secure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.secure_proxy_flags_);
  } else {
    secure_proxy_flags_ = nullptr;
  }
  if (from.has_insecure_proxy_flags()) {
    insecure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.insecure_proxy_flags_);
  } else {
    insecure_proxy_flags_ = nullptr;
  }
  if (from.has_secure_non_core_proxy_flags()) {
    secure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.secure_non_core_proxy_flags_);
  } else {
    secure_non_core_proxy_flags_ = nullptr;
  }
  if (from.has_insecure_non_core_proxy_flags()) {
    insecure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.insecure_non_core_proxy_flags_);
  } else {
    insecure_non_core_proxy_flags_ = nullptr;
  }
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_captive_portal_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(has_captive_portal_));
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.NetworkProperties)
}

void NetworkProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkProperties_network_5fproperties_2eproto.base);
  ::memset(&secure_proxy_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_captive_portal_) -
      reinterpret_cast<char*>(&secure_proxy_flags_)) + sizeof(has_captive_portal_));
}

NetworkProperties::~NetworkProperties() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.NetworkProperties)
  SharedDtor();
}

void NetworkProperties::SharedDtor() {
  if (this != internal_default_instance()) delete secure_proxy_flags_;
  if (this != internal_default_instance()) delete insecure_proxy_flags_;
  if (this != internal_default_instance()) delete secure_non_core_proxy_flags_;
  if (this != internal_default_instance()) delete insecure_non_core_proxy_flags_;
}

void NetworkProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkProperties& NetworkProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkProperties_network_5fproperties_2eproto.base);
  return *internal_default_instance();
}


void NetworkProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.NetworkProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(secure_proxy_flags_ != nullptr);
      secure_proxy_flags_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(insecure_proxy_flags_ != nullptr);
      insecure_proxy_flags_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(secure_non_core_proxy_flags_ != nullptr);
      secure_non_core_proxy_flags_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(insecure_non_core_proxy_flags_ != nullptr);
      insecure_non_core_proxy_flags_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&last_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_captive_portal_) -
        reinterpret_cast<char*>(&last_modified_)) + sizeof(has_captive_portal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool secure_proxy_disallowed_by_carrier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secure_proxy_disallowed_by_carrier(&has_bits);
          secure_proxy_disallowed_by_carrier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_captive_portal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_captive_portal(&has_bits);
          has_captive_portal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_secure_proxy_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_insecure_proxy_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_modified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_modified(&has_bits);
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_secure_non_core_proxy_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_insecure_non_core_proxy_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.NetworkProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool secure_proxy_disallowed_by_carrier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_secure_proxy_disallowed_by_carrier(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_proxy_disallowed_by_carrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_captive_portal = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_has_captive_portal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_captive_portal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_secure_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_insecure_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_modified = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_modified(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_secure_non_core_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_insecure_non_core_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.NetworkProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.NetworkProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.NetworkProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool secure_proxy_disallowed_by_carrier = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->secure_proxy_disallowed_by_carrier(), output);
  }

  // optional bool has_captive_portal = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->has_captive_portal(), output);
  }

  // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::secure_proxy_flags(this), output);
  }

  // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::insecure_proxy_flags(this), output);
  }

  // optional int64 last_modified = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_modified(), output);
  }

  // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::secure_non_core_proxy_flags(this), output);
  }

  // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::insecure_non_core_proxy_flags(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.NetworkProperties)
}

size_t NetworkProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.NetworkProperties)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *secure_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insecure_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *secure_non_core_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insecure_non_core_proxy_flags_);
    }

    // optional int64 last_modified = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_modified());
    }

    // optional bool secure_proxy_disallowed_by_carrier = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_captive_portal = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkProperties::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkProperties*>(
      &from));
}

void NetworkProperties::MergeFrom(const NetworkProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.NetworkProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_secure_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.secure_proxy_flags());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_insecure_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.insecure_proxy_flags());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_secure_non_core_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.secure_non_core_proxy_flags());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_insecure_non_core_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.insecure_non_core_proxy_flags());
    }
    if (cached_has_bits & 0x00000010u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000020u) {
      secure_proxy_disallowed_by_carrier_ = from.secure_proxy_disallowed_by_carrier_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_captive_portal_ = from.has_captive_portal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkProperties::CopyFrom(const NetworkProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.NetworkProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkProperties::IsInitialized() const {
  return true;
}

void NetworkProperties::InternalSwap(NetworkProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(secure_proxy_flags_, other->secure_proxy_flags_);
  swap(insecure_proxy_flags_, other->insecure_proxy_flags_);
  swap(secure_non_core_proxy_flags_, other->secure_non_core_proxy_flags_);
  swap(insecure_non_core_proxy_flags_, other->insecure_non_core_proxy_flags_);
  swap(last_modified_, other->last_modified_);
  swap(secure_proxy_disallowed_by_carrier_, other->secure_proxy_disallowed_by_carrier_);
  swap(has_captive_portal_, other->has_captive_portal_);
}

std::string NetworkProperties::GetTypeName() const {
  return "data_reduction_proxy.NetworkProperties";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data_reduction_proxy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data_reduction_proxy::ProxyFlags* Arena::CreateMaybeMessage< ::data_reduction_proxy::ProxyFlags >(Arena* arena) {
  return Arena::CreateInternal< ::data_reduction_proxy::ProxyFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::data_reduction_proxy::NetworkProperties* Arena::CreateMaybeMessage< ::data_reduction_proxy::NetworkProperties >(Arena* arena) {
  return Arena::CreateInternal< ::data_reduction_proxy::NetworkProperties >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
