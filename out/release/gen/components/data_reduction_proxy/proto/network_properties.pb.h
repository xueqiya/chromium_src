// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_properties.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5fproperties_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5fproperties_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5fproperties_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fproperties_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace data_reduction_proxy {
class NetworkProperties;
class NetworkPropertiesDefaultTypeInternal;
extern NetworkPropertiesDefaultTypeInternal _NetworkProperties_default_instance_;
class ProxyFlags;
class ProxyFlagsDefaultTypeInternal;
extern ProxyFlagsDefaultTypeInternal _ProxyFlags_default_instance_;
}  // namespace data_reduction_proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::data_reduction_proxy::NetworkProperties* Arena::CreateMaybeMessage<::data_reduction_proxy::NetworkProperties>(Arena*);
template<> ::data_reduction_proxy::ProxyFlags* Arena::CreateMaybeMessage<::data_reduction_proxy::ProxyFlags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_reduction_proxy {

// ===================================================================

class ProxyFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.ProxyFlags) */ {
 public:
  ProxyFlags();
  virtual ~ProxyFlags();

  ProxyFlags(const ProxyFlags& from);
  ProxyFlags(ProxyFlags&& from) noexcept
    : ProxyFlags() {
    *this = ::std::move(from);
  }

  inline ProxyFlags& operator=(const ProxyFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyFlags& operator=(ProxyFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProxyFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyFlags* internal_default_instance() {
    return reinterpret_cast<const ProxyFlags*>(
               &_ProxyFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProxyFlags& a, ProxyFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyFlags* New() const final {
    return CreateMaybeMessage<ProxyFlags>(nullptr);
  }

  ProxyFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProxyFlags& from);
  void MergeFrom(const ProxyFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProxyFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.ProxyFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisallowedDueToWarmupProbeFailureFieldNumber = 1,
  };
  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  bool has_disallowed_due_to_warmup_probe_failure() const;
  void clear_disallowed_due_to_warmup_probe_failure();
  bool disallowed_due_to_warmup_probe_failure() const;
  void set_disallowed_due_to_warmup_probe_failure(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.ProxyFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool disallowed_due_to_warmup_probe_failure_;
  friend struct ::TableStruct_network_5fproperties_2eproto;
};
// -------------------------------------------------------------------

class NetworkProperties :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.NetworkProperties) */ {
 public:
  NetworkProperties();
  virtual ~NetworkProperties();

  NetworkProperties(const NetworkProperties& from);
  NetworkProperties(NetworkProperties&& from) noexcept
    : NetworkProperties() {
    *this = ::std::move(from);
  }

  inline NetworkProperties& operator=(const NetworkProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkProperties& operator=(NetworkProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetworkProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkProperties* internal_default_instance() {
    return reinterpret_cast<const NetworkProperties*>(
               &_NetworkProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkProperties& a, NetworkProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkProperties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkProperties* New() const final {
    return CreateMaybeMessage<NetworkProperties>(nullptr);
  }

  NetworkProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkProperties>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetworkProperties& from);
  void MergeFrom(const NetworkProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.NetworkProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecureProxyFlagsFieldNumber = 3,
    kInsecureProxyFlagsFieldNumber = 4,
    kSecureNonCoreProxyFlagsFieldNumber = 6,
    kInsecureNonCoreProxyFlagsFieldNumber = 7,
    kLastModifiedFieldNumber = 5,
    kSecureProxyDisallowedByCarrierFieldNumber = 1,
    kHasCaptivePortalFieldNumber = 2,
  };
  // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
  bool has_secure_proxy_flags() const;
  void clear_secure_proxy_flags();
  const ::data_reduction_proxy::ProxyFlags& secure_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* release_secure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* mutable_secure_proxy_flags();
  void set_allocated_secure_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
  bool has_insecure_proxy_flags() const;
  void clear_insecure_proxy_flags();
  const ::data_reduction_proxy::ProxyFlags& insecure_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* release_insecure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* mutable_insecure_proxy_flags();
  void set_allocated_insecure_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
  bool has_secure_non_core_proxy_flags() const;
  void clear_secure_non_core_proxy_flags();
  const ::data_reduction_proxy::ProxyFlags& secure_non_core_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* release_secure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* mutable_secure_non_core_proxy_flags();
  void set_allocated_secure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
  bool has_insecure_non_core_proxy_flags() const;
  void clear_insecure_non_core_proxy_flags();
  const ::data_reduction_proxy::ProxyFlags& insecure_non_core_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* release_insecure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* mutable_insecure_non_core_proxy_flags();
  void set_allocated_insecure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags);

  // optional int64 last_modified = 5;
  bool has_last_modified() const;
  void clear_last_modified();
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified() const;
  void set_last_modified(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool secure_proxy_disallowed_by_carrier = 1;
  bool has_secure_proxy_disallowed_by_carrier() const;
  void clear_secure_proxy_disallowed_by_carrier();
  bool secure_proxy_disallowed_by_carrier() const;
  void set_secure_proxy_disallowed_by_carrier(bool value);

  // optional bool has_captive_portal = 2;
  bool has_has_captive_portal() const;
  void clear_has_captive_portal();
  bool has_captive_portal() const;
  void set_has_captive_portal(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.NetworkProperties)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::data_reduction_proxy::ProxyFlags* secure_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* insecure_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_;
  bool secure_proxy_disallowed_by_carrier_;
  bool has_captive_portal_;
  friend struct ::TableStruct_network_5fproperties_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProxyFlags

// optional bool disallowed_due_to_warmup_probe_failure = 1;
inline bool ProxyFlags::has_disallowed_due_to_warmup_probe_failure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProxyFlags::clear_disallowed_due_to_warmup_probe_failure() {
  disallowed_due_to_warmup_probe_failure_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ProxyFlags::disallowed_due_to_warmup_probe_failure() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
  return disallowed_due_to_warmup_probe_failure_;
}
inline void ProxyFlags::set_disallowed_due_to_warmup_probe_failure(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disallowed_due_to_warmup_probe_failure_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
}

// -------------------------------------------------------------------

// NetworkProperties

// optional bool secure_proxy_disallowed_by_carrier = 1;
inline bool NetworkProperties::has_secure_proxy_disallowed_by_carrier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkProperties::clear_secure_proxy_disallowed_by_carrier() {
  secure_proxy_disallowed_by_carrier_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool NetworkProperties::secure_proxy_disallowed_by_carrier() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
  return secure_proxy_disallowed_by_carrier_;
}
inline void NetworkProperties::set_secure_proxy_disallowed_by_carrier(bool value) {
  _has_bits_[0] |= 0x00000020u;
  secure_proxy_disallowed_by_carrier_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
}

// optional bool has_captive_portal = 2;
inline bool NetworkProperties::has_has_captive_portal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetworkProperties::clear_has_captive_portal() {
  has_captive_portal_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool NetworkProperties::has_captive_portal() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.has_captive_portal)
  return has_captive_portal_;
}
inline void NetworkProperties::set_has_captive_portal(bool value) {
  _has_bits_[0] |= 0x00000040u;
  has_captive_portal_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.has_captive_portal)
}

// optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
inline bool NetworkProperties::has_secure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkProperties::clear_secure_proxy_flags() {
  if (secure_proxy_flags_ != nullptr) secure_proxy_flags_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_proxy_flags() const {
  const ::data_reduction_proxy::ProxyFlags* p = secure_proxy_flags_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::ProxyFlags*>(
      &::data_reduction_proxy::_ProxyFlags_default_instance_);
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  _has_bits_[0] &= ~0x00000001u;
  ::data_reduction_proxy::ProxyFlags* temp = secure_proxy_flags_;
  secure_proxy_flags_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_proxy_flags() {
  _has_bits_[0] |= 0x00000001u;
  if (secure_proxy_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::ProxyFlags>(GetArenaNoVirtual());
    secure_proxy_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return secure_proxy_flags_;
}
inline void NetworkProperties::set_allocated_secure_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_proxy_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete secure_proxy_flags_;
  }
  if (secure_proxy_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      secure_proxy_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secure_proxy_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secure_proxy_flags_ = secure_proxy_flags;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
inline bool NetworkProperties::has_insecure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkProperties::clear_insecure_proxy_flags() {
  if (insecure_proxy_flags_ != nullptr) insecure_proxy_flags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_proxy_flags() const {
  const ::data_reduction_proxy::ProxyFlags* p = insecure_proxy_flags_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::ProxyFlags*>(
      &::data_reduction_proxy::_ProxyFlags_default_instance_);
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  _has_bits_[0] &= ~0x00000002u;
  ::data_reduction_proxy::ProxyFlags* temp = insecure_proxy_flags_;
  insecure_proxy_flags_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_proxy_flags() {
  _has_bits_[0] |= 0x00000002u;
  if (insecure_proxy_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::ProxyFlags>(GetArenaNoVirtual());
    insecure_proxy_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return insecure_proxy_flags_;
}
inline void NetworkProperties::set_allocated_insecure_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_proxy_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete insecure_proxy_flags_;
  }
  if (insecure_proxy_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insecure_proxy_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insecure_proxy_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  insecure_proxy_flags_ = insecure_proxy_flags;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
}

// optional int64 last_modified = 5;
inline bool NetworkProperties::has_last_modified() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkProperties::clear_last_modified() {
  last_modified_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkProperties::last_modified() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.last_modified)
  return last_modified_;
}
inline void NetworkProperties::set_last_modified(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.last_modified)
}

// optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
inline bool NetworkProperties::has_secure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkProperties::clear_secure_non_core_proxy_flags() {
  if (secure_non_core_proxy_flags_ != nullptr) secure_non_core_proxy_flags_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_non_core_proxy_flags() const {
  const ::data_reduction_proxy::ProxyFlags* p = secure_non_core_proxy_flags_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::ProxyFlags*>(
      &::data_reduction_proxy::_ProxyFlags_default_instance_);
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  _has_bits_[0] &= ~0x00000004u;
  ::data_reduction_proxy::ProxyFlags* temp = secure_non_core_proxy_flags_;
  secure_non_core_proxy_flags_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000004u;
  if (secure_non_core_proxy_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::ProxyFlags>(GetArenaNoVirtual());
    secure_non_core_proxy_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return secure_non_core_proxy_flags_;
}
inline void NetworkProperties::set_allocated_secure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete secure_non_core_proxy_flags_;
  }
  if (secure_non_core_proxy_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      secure_non_core_proxy_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secure_non_core_proxy_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  secure_non_core_proxy_flags_ = secure_non_core_proxy_flags;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
inline bool NetworkProperties::has_insecure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkProperties::clear_insecure_non_core_proxy_flags() {
  if (insecure_non_core_proxy_flags_ != nullptr) insecure_non_core_proxy_flags_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_non_core_proxy_flags() const {
  const ::data_reduction_proxy::ProxyFlags* p = insecure_non_core_proxy_flags_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::ProxyFlags*>(
      &::data_reduction_proxy::_ProxyFlags_default_instance_);
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  _has_bits_[0] &= ~0x00000008u;
  ::data_reduction_proxy::ProxyFlags* temp = insecure_non_core_proxy_flags_;
  insecure_non_core_proxy_flags_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000008u;
  if (insecure_non_core_proxy_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::ProxyFlags>(GetArenaNoVirtual());
    insecure_non_core_proxy_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return insecure_non_core_proxy_flags_;
}
inline void NetworkProperties::set_allocated_insecure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete insecure_non_core_proxy_flags_;
  }
  if (insecure_non_core_proxy_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insecure_non_core_proxy_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insecure_non_core_proxy_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  insecure_non_core_proxy_flags_ = insecure_non_core_proxy_flags;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5fproperties_2eproto
