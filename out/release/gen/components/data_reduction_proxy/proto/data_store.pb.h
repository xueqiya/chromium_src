// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fstore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace data_reduction_proxy {
class DataUsageBucket;
class DataUsageBucketDefaultTypeInternal;
extern DataUsageBucketDefaultTypeInternal _DataUsageBucket_default_instance_;
class PerConnectionDataUsage;
class PerConnectionDataUsageDefaultTypeInternal;
extern PerConnectionDataUsageDefaultTypeInternal _PerConnectionDataUsage_default_instance_;
class PerSiteDataUsage;
class PerSiteDataUsageDefaultTypeInternal;
extern PerSiteDataUsageDefaultTypeInternal _PerSiteDataUsage_default_instance_;
}  // namespace data_reduction_proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::data_reduction_proxy::DataUsageBucket* Arena::CreateMaybeMessage<::data_reduction_proxy::DataUsageBucket>(Arena*);
template<> ::data_reduction_proxy::PerConnectionDataUsage* Arena::CreateMaybeMessage<::data_reduction_proxy::PerConnectionDataUsage>(Arena*);
template<> ::data_reduction_proxy::PerSiteDataUsage* Arena::CreateMaybeMessage<::data_reduction_proxy::PerSiteDataUsage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_reduction_proxy {

// ===================================================================

class DataUsageBucket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.DataUsageBucket) */ {
 public:
  DataUsageBucket();
  virtual ~DataUsageBucket();

  DataUsageBucket(const DataUsageBucket& from);
  DataUsageBucket(DataUsageBucket&& from) noexcept
    : DataUsageBucket() {
    *this = ::std::move(from);
  }

  inline DataUsageBucket& operator=(const DataUsageBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataUsageBucket& operator=(DataUsageBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DataUsageBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataUsageBucket* internal_default_instance() {
    return reinterpret_cast<const DataUsageBucket*>(
               &_DataUsageBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataUsageBucket& a, DataUsageBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(DataUsageBucket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataUsageBucket* New() const final {
    return CreateMaybeMessage<DataUsageBucket>(nullptr);
  }

  DataUsageBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataUsageBucket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataUsageBucket& from);
  void MergeFrom(const DataUsageBucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataUsageBucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.DataUsageBucket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionUsageFieldNumber = 1,
    kLastUpdatedTimestampFieldNumber = 2,
    kHadReadErrorFieldNumber = 3,
  };
  // repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
  int connection_usage_size() const;
  void clear_connection_usage();
  ::data_reduction_proxy::PerConnectionDataUsage* mutable_connection_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerConnectionDataUsage >*
      mutable_connection_usage();
  const ::data_reduction_proxy::PerConnectionDataUsage& connection_usage(int index) const;
  ::data_reduction_proxy::PerConnectionDataUsage* add_connection_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerConnectionDataUsage >&
      connection_usage() const;

  // optional int64 last_updated_timestamp = 2;
  bool has_last_updated_timestamp() const;
  void clear_last_updated_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_timestamp() const;
  void set_last_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool had_read_error = 3;
  bool has_had_read_error() const;
  void clear_had_read_error();
  bool had_read_error() const;
  void set_had_read_error(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.DataUsageBucket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerConnectionDataUsage > connection_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_timestamp_;
  bool had_read_error_;
  friend struct ::TableStruct_data_5fstore_2eproto;
};
// -------------------------------------------------------------------

class PerConnectionDataUsage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PerConnectionDataUsage) */ {
 public:
  PerConnectionDataUsage();
  virtual ~PerConnectionDataUsage();

  PerConnectionDataUsage(const PerConnectionDataUsage& from);
  PerConnectionDataUsage(PerConnectionDataUsage&& from) noexcept
    : PerConnectionDataUsage() {
    *this = ::std::move(from);
  }

  inline PerConnectionDataUsage& operator=(const PerConnectionDataUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerConnectionDataUsage& operator=(PerConnectionDataUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerConnectionDataUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerConnectionDataUsage* internal_default_instance() {
    return reinterpret_cast<const PerConnectionDataUsage*>(
               &_PerConnectionDataUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerConnectionDataUsage& a, PerConnectionDataUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(PerConnectionDataUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerConnectionDataUsage* New() const final {
    return CreateMaybeMessage<PerConnectionDataUsage>(nullptr);
  }

  PerConnectionDataUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerConnectionDataUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerConnectionDataUsage& from);
  void MergeFrom(const PerConnectionDataUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerConnectionDataUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.PerConnectionDataUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteUsageFieldNumber = 1,
  };
  // repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
  int site_usage_size() const;
  void clear_site_usage();
  ::data_reduction_proxy::PerSiteDataUsage* mutable_site_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerSiteDataUsage >*
      mutable_site_usage();
  const ::data_reduction_proxy::PerSiteDataUsage& site_usage(int index) const;
  ::data_reduction_proxy::PerSiteDataUsage* add_site_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerSiteDataUsage >&
      site_usage() const;

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PerConnectionDataUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerSiteDataUsage > site_usage_;
  friend struct ::TableStruct_data_5fstore_2eproto;
};
// -------------------------------------------------------------------

class PerSiteDataUsage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PerSiteDataUsage) */ {
 public:
  PerSiteDataUsage();
  virtual ~PerSiteDataUsage();

  PerSiteDataUsage(const PerSiteDataUsage& from);
  PerSiteDataUsage(PerSiteDataUsage&& from) noexcept
    : PerSiteDataUsage() {
    *this = ::std::move(from);
  }

  inline PerSiteDataUsage& operator=(const PerSiteDataUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerSiteDataUsage& operator=(PerSiteDataUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerSiteDataUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerSiteDataUsage* internal_default_instance() {
    return reinterpret_cast<const PerSiteDataUsage*>(
               &_PerSiteDataUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerSiteDataUsage& a, PerSiteDataUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(PerSiteDataUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerSiteDataUsage* New() const final {
    return CreateMaybeMessage<PerSiteDataUsage>(nullptr);
  }

  PerSiteDataUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerSiteDataUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerSiteDataUsage& from);
  void MergeFrom(const PerSiteDataUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerSiteDataUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.PerSiteDataUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kDataUsedFieldNumber = 2,
    kOriginalSizeFieldNumber = 3,
  };
  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);

  // required int64 data_used = 2;
  bool has_data_used() const;
  void clear_data_used();
  ::PROTOBUF_NAMESPACE_ID::int64 data_used() const;
  void set_data_used(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 original_size = 3;
  bool has_original_size() const;
  void clear_original_size();
  ::PROTOBUF_NAMESPACE_ID::int64 original_size() const;
  void set_original_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PerSiteDataUsage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_used_;
  ::PROTOBUF_NAMESPACE_ID::int64 original_size_;
  friend struct ::TableStruct_data_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataUsageBucket

// repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
inline int DataUsageBucket::connection_usage_size() const {
  return connection_usage_.size();
}
inline void DataUsageBucket::clear_connection_usage() {
  connection_usage_.Clear();
}
inline ::data_reduction_proxy::PerConnectionDataUsage* DataUsageBucket::mutable_connection_usage(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.DataUsageBucket.connection_usage)
  return connection_usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerConnectionDataUsage >*
DataUsageBucket::mutable_connection_usage() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.DataUsageBucket.connection_usage)
  return &connection_usage_;
}
inline const ::data_reduction_proxy::PerConnectionDataUsage& DataUsageBucket::connection_usage(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DataUsageBucket.connection_usage)
  return connection_usage_.Get(index);
}
inline ::data_reduction_proxy::PerConnectionDataUsage* DataUsageBucket::add_connection_usage() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.DataUsageBucket.connection_usage)
  return connection_usage_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerConnectionDataUsage >&
DataUsageBucket::connection_usage() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.DataUsageBucket.connection_usage)
  return connection_usage_;
}

// optional int64 last_updated_timestamp = 2;
inline bool DataUsageBucket::has_last_updated_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataUsageBucket::clear_last_updated_timestamp() {
  last_updated_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataUsageBucket::last_updated_timestamp() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DataUsageBucket.last_updated_timestamp)
  return last_updated_timestamp_;
}
inline void DataUsageBucket::set_last_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_updated_timestamp_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DataUsageBucket.last_updated_timestamp)
}

// optional bool had_read_error = 3;
inline bool DataUsageBucket::has_had_read_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataUsageBucket::clear_had_read_error() {
  had_read_error_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DataUsageBucket::had_read_error() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DataUsageBucket.had_read_error)
  return had_read_error_;
}
inline void DataUsageBucket::set_had_read_error(bool value) {
  _has_bits_[0] |= 0x00000002u;
  had_read_error_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DataUsageBucket.had_read_error)
}

// -------------------------------------------------------------------

// PerConnectionDataUsage

// repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
inline int PerConnectionDataUsage::site_usage_size() const {
  return site_usage_.size();
}
inline void PerConnectionDataUsage::clear_site_usage() {
  site_usage_.Clear();
}
inline ::data_reduction_proxy::PerSiteDataUsage* PerConnectionDataUsage::mutable_site_usage(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PerConnectionDataUsage.site_usage)
  return site_usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerSiteDataUsage >*
PerConnectionDataUsage::mutable_site_usage() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.PerConnectionDataUsage.site_usage)
  return &site_usage_;
}
inline const ::data_reduction_proxy::PerSiteDataUsage& PerConnectionDataUsage::site_usage(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PerConnectionDataUsage.site_usage)
  return site_usage_.Get(index);
}
inline ::data_reduction_proxy::PerSiteDataUsage* PerConnectionDataUsage::add_site_usage() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.PerConnectionDataUsage.site_usage)
  return site_usage_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PerSiteDataUsage >&
PerConnectionDataUsage::site_usage() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.PerConnectionDataUsage.site_usage)
  return site_usage_;
}

// -------------------------------------------------------------------

// PerSiteDataUsage

// required string hostname = 1;
inline bool PerSiteDataUsage::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerSiteDataUsage::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerSiteDataUsage::hostname() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PerSiteDataUsage.hostname)
  return hostname_.GetNoArena();
}
inline void PerSiteDataUsage::set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PerSiteDataUsage.hostname)
}
inline void PerSiteDataUsage::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PerSiteDataUsage.hostname)
}
inline void PerSiteDataUsage::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PerSiteDataUsage.hostname)
}
inline void PerSiteDataUsage::set_hostname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PerSiteDataUsage.hostname)
}
inline std::string* PerSiteDataUsage::mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PerSiteDataUsage.hostname)
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerSiteDataUsage::release_hostname() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PerSiteDataUsage.hostname)
  if (!has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerSiteDataUsage::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PerSiteDataUsage.hostname)
}

// required int64 data_used = 2;
inline bool PerSiteDataUsage::has_data_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerSiteDataUsage::clear_data_used() {
  data_used_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PerSiteDataUsage::data_used() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PerSiteDataUsage.data_used)
  return data_used_;
}
inline void PerSiteDataUsage::set_data_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  data_used_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PerSiteDataUsage.data_used)
}

// required int64 original_size = 3;
inline bool PerSiteDataUsage::has_original_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerSiteDataUsage::clear_original_size() {
  original_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PerSiteDataUsage::original_size() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PerSiteDataUsage.original_size)
  return original_size_;
}
inline void PerSiteDataUsage::set_original_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  original_size_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PerSiteDataUsage.original_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fstore_2eproto
