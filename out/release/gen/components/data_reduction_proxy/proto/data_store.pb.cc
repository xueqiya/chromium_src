// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_store.proto

#include "data_store.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerConnectionDataUsage_data_5fstore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerSiteDataUsage_data_5fstore_2eproto;
namespace data_reduction_proxy {
class DataUsageBucketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataUsageBucket> _instance;
} _DataUsageBucket_default_instance_;
class PerConnectionDataUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerConnectionDataUsage> _instance;
} _PerConnectionDataUsage_default_instance_;
class PerSiteDataUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerSiteDataUsage> _instance;
} _PerSiteDataUsage_default_instance_;
}  // namespace data_reduction_proxy
static void InitDefaultsscc_info_DataUsageBucket_data_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_reduction_proxy::_DataUsageBucket_default_instance_;
    new (ptr) ::data_reduction_proxy::DataUsageBucket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_reduction_proxy::DataUsageBucket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataUsageBucket_data_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DataUsageBucket_data_5fstore_2eproto}, {
      &scc_info_PerConnectionDataUsage_data_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_PerConnectionDataUsage_data_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_reduction_proxy::_PerConnectionDataUsage_default_instance_;
    new (ptr) ::data_reduction_proxy::PerConnectionDataUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_reduction_proxy::PerConnectionDataUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerConnectionDataUsage_data_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerConnectionDataUsage_data_5fstore_2eproto}, {
      &scc_info_PerSiteDataUsage_data_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_PerSiteDataUsage_data_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_reduction_proxy::_PerSiteDataUsage_default_instance_;
    new (ptr) ::data_reduction_proxy::PerSiteDataUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_reduction_proxy::PerSiteDataUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerSiteDataUsage_data_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerSiteDataUsage_data_5fstore_2eproto}, {}};

namespace data_reduction_proxy {

// ===================================================================

void DataUsageBucket::InitAsDefaultInstance() {
}
class DataUsageBucket::_Internal {
 public:
  using HasBits = decltype(std::declval<DataUsageBucket>()._has_bits_);
  static void set_has_last_updated_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_had_read_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataUsageBucket::DataUsageBucket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.DataUsageBucket)
}
DataUsageBucket::DataUsageBucket(const DataUsageBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connection_usage_(from.connection_usage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_updated_timestamp_, &from.last_updated_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&had_read_error_) -
    reinterpret_cast<char*>(&last_updated_timestamp_)) + sizeof(had_read_error_));
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.DataUsageBucket)
}

void DataUsageBucket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataUsageBucket_data_5fstore_2eproto.base);
  ::memset(&last_updated_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&had_read_error_) -
      reinterpret_cast<char*>(&last_updated_timestamp_)) + sizeof(had_read_error_));
}

DataUsageBucket::~DataUsageBucket() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.DataUsageBucket)
  SharedDtor();
}

void DataUsageBucket::SharedDtor() {
}

void DataUsageBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataUsageBucket& DataUsageBucket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataUsageBucket_data_5fstore_2eproto.base);
  return *internal_default_instance();
}


void DataUsageBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.DataUsageBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_usage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_updated_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&had_read_error_) -
        reinterpret_cast<char*>(&last_updated_timestamp_)) + sizeof(had_read_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataUsageBucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_connection_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int64 last_updated_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_updated_timestamp(&has_bits);
          last_updated_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool had_read_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_had_read_error(&has_bits);
          had_read_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataUsageBucket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.DataUsageBucket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_connection_usage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_updated_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_updated_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_updated_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool had_read_error = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_had_read_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &had_read_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.DataUsageBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.DataUsageBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataUsageBucket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.DataUsageBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_usage_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->connection_usage(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 last_updated_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_updated_timestamp(), output);
  }

  // optional bool had_read_error = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->had_read_error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.DataUsageBucket)
}

size_t DataUsageBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.DataUsageBucket)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_reduction_proxy.PerConnectionDataUsage connection_usage = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->connection_usage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->connection_usage(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 last_updated_timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_updated_timestamp());
    }

    // optional bool had_read_error = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataUsageBucket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataUsageBucket*>(
      &from));
}

void DataUsageBucket::MergeFrom(const DataUsageBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.DataUsageBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connection_usage_.MergeFrom(from.connection_usage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_updated_timestamp_ = from.last_updated_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      had_read_error_ = from.had_read_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataUsageBucket::CopyFrom(const DataUsageBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.DataUsageBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataUsageBucket::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->connection_usage())) return false;
  return true;
}

void DataUsageBucket::InternalSwap(DataUsageBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&connection_usage_)->InternalSwap(CastToBase(&other->connection_usage_));
  swap(last_updated_timestamp_, other->last_updated_timestamp_);
  swap(had_read_error_, other->had_read_error_);
}

std::string DataUsageBucket::GetTypeName() const {
  return "data_reduction_proxy.DataUsageBucket";
}


// ===================================================================

void PerConnectionDataUsage::InitAsDefaultInstance() {
}
class PerConnectionDataUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<PerConnectionDataUsage>()._has_bits_);
};

PerConnectionDataUsage::PerConnectionDataUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.PerConnectionDataUsage)
}
PerConnectionDataUsage::PerConnectionDataUsage(const PerConnectionDataUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      site_usage_(from.site_usage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.PerConnectionDataUsage)
}

void PerConnectionDataUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerConnectionDataUsage_data_5fstore_2eproto.base);
}

PerConnectionDataUsage::~PerConnectionDataUsage() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.PerConnectionDataUsage)
  SharedDtor();
}

void PerConnectionDataUsage::SharedDtor() {
}

void PerConnectionDataUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerConnectionDataUsage& PerConnectionDataUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerConnectionDataUsage_data_5fstore_2eproto.base);
  return *internal_default_instance();
}


void PerConnectionDataUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.PerConnectionDataUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_usage_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerConnectionDataUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_site_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerConnectionDataUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.PerConnectionDataUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_site_usage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.PerConnectionDataUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.PerConnectionDataUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerConnectionDataUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.PerConnectionDataUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_usage_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->site_usage(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.PerConnectionDataUsage)
}

size_t PerConnectionDataUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.PerConnectionDataUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_reduction_proxy.PerSiteDataUsage site_usage = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->site_usage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->site_usage(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerConnectionDataUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerConnectionDataUsage*>(
      &from));
}

void PerConnectionDataUsage::MergeFrom(const PerConnectionDataUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.PerConnectionDataUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_usage_.MergeFrom(from.site_usage_);
}

void PerConnectionDataUsage::CopyFrom(const PerConnectionDataUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.PerConnectionDataUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerConnectionDataUsage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->site_usage())) return false;
  return true;
}

void PerConnectionDataUsage::InternalSwap(PerConnectionDataUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&site_usage_)->InternalSwap(CastToBase(&other->site_usage_));
}

std::string PerConnectionDataUsage::GetTypeName() const {
  return "data_reduction_proxy.PerConnectionDataUsage";
}


// ===================================================================

void PerSiteDataUsage::InitAsDefaultInstance() {
}
class PerSiteDataUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<PerSiteDataUsage>()._has_bits_);
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerSiteDataUsage::PerSiteDataUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.PerSiteDataUsage)
}
PerSiteDataUsage::PerSiteDataUsage(const PerSiteDataUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&data_used_, &from.data_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_size_) -
    reinterpret_cast<char*>(&data_used_)) + sizeof(original_size_));
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.PerSiteDataUsage)
}

void PerSiteDataUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerSiteDataUsage_data_5fstore_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_size_) -
      reinterpret_cast<char*>(&data_used_)) + sizeof(original_size_));
}

PerSiteDataUsage::~PerSiteDataUsage() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.PerSiteDataUsage)
  SharedDtor();
}

void PerSiteDataUsage::SharedDtor() {
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerSiteDataUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerSiteDataUsage& PerSiteDataUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerSiteDataUsage_data_5fstore_2eproto.base);
  return *internal_default_instance();
}


void PerSiteDataUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.PerSiteDataUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&data_used_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&original_size_) -
        reinterpret_cast<char*>(&data_used_)) + sizeof(original_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerSiteDataUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hostname(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 data_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_used(&has_bits);
          data_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 original_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_original_size(&has_bits);
          original_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerSiteDataUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.PerSiteDataUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 data_used = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_data_used(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 original_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_original_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.PerSiteDataUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.PerSiteDataUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerSiteDataUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.PerSiteDataUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // required int64 data_used = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->data_used(), output);
  }

  // required int64 original_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->original_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.PerSiteDataUsage)
}

size_t PerSiteDataUsage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:data_reduction_proxy.PerSiteDataUsage)
  size_t total_size = 0;

  if (has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_data_used()) {
    // required int64 data_used = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data_used());
  }

  if (has_original_size()) {
    // required int64 original_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->original_size());
  }

  return total_size;
}
size_t PerSiteDataUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.PerSiteDataUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hostname());

    // required int64 data_used = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->data_used());

    // required int64 original_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->original_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerSiteDataUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerSiteDataUsage*>(
      &from));
}

void PerSiteDataUsage::MergeFrom(const PerSiteDataUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.PerSiteDataUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      data_used_ = from.data_used_;
    }
    if (cached_has_bits & 0x00000004u) {
      original_size_ = from.original_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerSiteDataUsage::CopyFrom(const PerSiteDataUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.PerSiteDataUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerSiteDataUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PerSiteDataUsage::InternalSwap(PerSiteDataUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_used_, other->data_used_);
  swap(original_size_, other->original_size_);
}

std::string PerSiteDataUsage::GetTypeName() const {
  return "data_reduction_proxy.PerSiteDataUsage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data_reduction_proxy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data_reduction_proxy::DataUsageBucket* Arena::CreateMaybeMessage< ::data_reduction_proxy::DataUsageBucket >(Arena* arena) {
  return Arena::CreateInternal< ::data_reduction_proxy::DataUsageBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::data_reduction_proxy::PerConnectionDataUsage* Arena::CreateMaybeMessage< ::data_reduction_proxy::PerConnectionDataUsage >(Arena* arena) {
  return Arena::CreateInternal< ::data_reduction_proxy::PerConnectionDataUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::data_reduction_proxy::PerSiteDataUsage* Arena::CreateMaybeMessage< ::data_reduction_proxy::PerSiteDataUsage >(Arena* arena) {
  return Arena::CreateInternal< ::data_reduction_proxy::PerSiteDataUsage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
