// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_message.proto

#include "encrypted_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace encrypted_messages {
class EncryptedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptedMessage> _instance;
} _EncryptedMessage_default_instance_;
}  // namespace encrypted_messages
static void InitDefaultsscc_info_EncryptedMessage_encrypted_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::encrypted_messages::_EncryptedMessage_default_instance_;
    new (ptr) ::encrypted_messages::EncryptedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::encrypted_messages::EncryptedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptedMessage_encrypted_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EncryptedMessage_encrypted_5fmessage_2eproto}, {}};

namespace encrypted_messages {
bool EncryptedMessage_Algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptedMessage_Algorithm_strings[2] = {};

static const char EncryptedMessage_Algorithm_names[] =
  "AEAD_ECDH_AES_128_CTR_HMAC_SHA256"
  "UNKNOWN_ALGORITHM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptedMessage_Algorithm_entries[] = {
  { {EncryptedMessage_Algorithm_names + 0, 33}, 1 },
  { {EncryptedMessage_Algorithm_names + 33, 17}, 0 },
};

static const int EncryptedMessage_Algorithm_entries_by_number[] = {
  1, // 0 -> UNKNOWN_ALGORITHM
  0, // 1 -> AEAD_ECDH_AES_128_CTR_HMAC_SHA256
};

const std::string& EncryptedMessage_Algorithm_Name(
    EncryptedMessage_Algorithm value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptedMessage_Algorithm_entries,
          EncryptedMessage_Algorithm_entries_by_number,
          2, EncryptedMessage_Algorithm_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptedMessage_Algorithm_entries,
      EncryptedMessage_Algorithm_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptedMessage_Algorithm_strings[idx].get();
}
bool EncryptedMessage_Algorithm_Parse(
    const std::string& name, EncryptedMessage_Algorithm* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptedMessage_Algorithm_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EncryptedMessage_Algorithm>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EncryptedMessage_Algorithm EncryptedMessage::UNKNOWN_ALGORITHM;
constexpr EncryptedMessage_Algorithm EncryptedMessage::AEAD_ECDH_AES_128_CTR_HMAC_SHA256;
constexpr EncryptedMessage_Algorithm EncryptedMessage::Algorithm_MIN;
constexpr EncryptedMessage_Algorithm EncryptedMessage::Algorithm_MAX;
constexpr int EncryptedMessage::Algorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EncryptedMessage::InitAsDefaultInstance() {
}
class EncryptedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptedMessage>()._has_bits_);
  static void set_has_encrypted_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_public_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

EncryptedMessage::EncryptedMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:encrypted_messages.EncryptedMessage)
}
EncryptedMessage::EncryptedMessage(const EncryptedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_message()) {
    encrypted_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_message_);
  }
  client_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_public_key()) {
    client_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_public_key_);
  }
  ::memcpy(&server_public_key_version_, &from.server_public_key_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&server_public_key_version_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:encrypted_messages.EncryptedMessage)
}

void EncryptedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncryptedMessage_encrypted_5fmessage_2eproto.base);
  encrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_public_key_version_ = 0u;
  algorithm_ = 1;
}

EncryptedMessage::~EncryptedMessage() {
  // @@protoc_insertion_point(destructor:encrypted_messages.EncryptedMessage)
  SharedDtor();
}

void EncryptedMessage::SharedDtor() {
  encrypted_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncryptedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptedMessage& EncryptedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptedMessage_encrypted_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void EncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:encrypted_messages.EncryptedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encrypted_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    server_public_key_version_ = 0u;
    algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EncryptedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes encrypted_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encrypted_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 server_public_key_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_public_key_version(&has_bits);
          server_public_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes client_public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_public_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::encrypted_messages::EncryptedMessage_Algorithm_IsValid(val))) {
            set_algorithm(static_cast<::encrypted_messages::EncryptedMessage_Algorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EncryptedMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:encrypted_messages.EncryptedMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrypted_message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 server_public_key_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_server_public_key_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes client_public_key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::encrypted_messages::EncryptedMessage_Algorithm_IsValid(value)) {
            set_algorithm(static_cast< ::encrypted_messages::EncryptedMessage_Algorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:encrypted_messages.EncryptedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:encrypted_messages.EncryptedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EncryptedMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:encrypted_messages.EncryptedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes encrypted_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encrypted_message(), output);
  }

  // required uint32 server_public_key_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->server_public_key_version(), output);
  }

  // required bytes client_public_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->client_public_key(), output);
  }

  // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->algorithm(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:encrypted_messages.EncryptedMessage)
}

size_t EncryptedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:encrypted_messages.EncryptedMessage)
  size_t total_size = 0;

  if (has_encrypted_message()) {
    // required bytes encrypted_message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encrypted_message());
  }

  if (has_client_public_key()) {
    // required bytes client_public_key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->client_public_key());
  }

  if (has_server_public_key_version()) {
    // required uint32 server_public_key_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->server_public_key_version());
  }

  return total_size;
}
size_t EncryptedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:encrypted_messages.EncryptedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes encrypted_message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encrypted_message());

    // required bytes client_public_key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->client_public_key());

    // required uint32 server_public_key_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->server_public_key_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EncryptedMessage*>(
      &from));
}

void EncryptedMessage::MergeFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:encrypted_messages.EncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encrypted_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      client_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      server_public_key_version_ = from.server_public_key_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncryptedMessage::CopyFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encrypted_messages.EncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EncryptedMessage::InternalSwap(EncryptedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_message_.Swap(&other->encrypted_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_public_key_.Swap(&other->client_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_public_key_version_, other->server_public_key_version_);
  swap(algorithm_, other->algorithm_);
}

std::string EncryptedMessage::GetTypeName() const {
  return "encrypted_messages.EncryptedMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace encrypted_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::encrypted_messages::EncryptedMessage* Arena::CreateMaybeMessage< ::encrypted_messages::EncryptedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::encrypted_messages::EncryptedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
