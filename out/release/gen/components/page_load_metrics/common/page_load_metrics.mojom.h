// components/page_load_metrics/common/page_load_metrics.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_H_
#define COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/page_load_metrics/common/page_load_metrics.mojom-shared.h"
#include "components/page_load_metrics/common/page_load_metrics.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "third_party/blink/public/mojom/web_feature/web_feature.mojom.h"
#include "third_party/blink/public/mojom/use_counter/css_property_id.mojom.h"
#include "url/mojom/origin.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace page_load_metrics {
namespace mojom {

class PageLoadMetricsProxy;

template <typename ImplRefTraits>
class PageLoadMetricsStub;

class PageLoadMetricsRequestValidator;


class  PageLoadMetrics
    : public PageLoadMetricsInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PageLoadMetricsInterfaceBase;
  using Proxy_ = PageLoadMetricsProxy;

  template <typename ImplRefTraits>
  using Stub_ = PageLoadMetricsStub<ImplRefTraits>;

  using RequestValidator_ = PageLoadMetricsRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kUpdateTimingMinVersion = 0,
  };
  virtual ~PageLoadMetrics() {}

  
  virtual void UpdateTiming(PageLoadTimingPtr page_load_timing, PageLoadMetadataPtr page_load_metadata, PageLoadFeaturesPtr new_features, std::vector<ResourceDataUpdatePtr> resources, FrameRenderDataUpdatePtr render_data, CpuTimingPtr cpu_load_timing, DeferredResourceCountsPtr new_deferred_resource_data) = 0;
};



class  PageLoadMetricsProxy
    : public PageLoadMetrics {
 public:
  using InterfaceType = PageLoadMetrics;

  explicit PageLoadMetricsProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void UpdateTiming(PageLoadTimingPtr page_load_timing, PageLoadMetadataPtr page_load_metadata, PageLoadFeaturesPtr new_features, std::vector<ResourceDataUpdatePtr> resources, FrameRenderDataUpdatePtr render_data, CpuTimingPtr cpu_load_timing, DeferredResourceCountsPtr new_deferred_resource_data) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PageLoadMetricsStubDispatch {
 public:
  static bool Accept(PageLoadMetrics* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PageLoadMetrics* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PageLoadMetrics>>
class PageLoadMetricsStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PageLoadMetricsStub() {}
  ~PageLoadMetricsStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PageLoadMetricsStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PageLoadMetricsStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PageLoadMetricsRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class  PageLoadMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PageLoadMetadata, T>::value>;
  using DataView = PageLoadMetadataDataView;
  using Data_ = internal::PageLoadMetadata_Data;

  template <typename... Args>
  static PageLoadMetadataPtr New(Args&&... args) {
    return PageLoadMetadataPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PageLoadMetadataPtr From(const U& u) {
    return mojo::TypeConverter<PageLoadMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PageLoadMetadata>::Convert(*this);
  }


  PageLoadMetadata();

  explicit PageLoadMetadata(
      int32_t behavior_flags);

  ~PageLoadMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PageLoadMetadataPtr>
  PageLoadMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PageLoadMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PageLoadMetadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PageLoadMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PageLoadMetadata_UnserializedMessageContext<
            UserType, PageLoadMetadata::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<PageLoadMetadata::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PageLoadMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PageLoadMetadata_UnserializedMessageContext<
            UserType, PageLoadMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PageLoadMetadata::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int32_t behavior_flags;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PageLoadMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PageLoadMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PageLoadMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PageLoadMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  FrameRenderDataUpdate {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FrameRenderDataUpdate, T>::value>;
  using DataView = FrameRenderDataUpdateDataView;
  using Data_ = internal::FrameRenderDataUpdate_Data;

  template <typename... Args>
  static FrameRenderDataUpdatePtr New(Args&&... args) {
    return FrameRenderDataUpdatePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FrameRenderDataUpdatePtr From(const U& u) {
    return mojo::TypeConverter<FrameRenderDataUpdatePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FrameRenderDataUpdate>::Convert(*this);
  }


  FrameRenderDataUpdate();

  FrameRenderDataUpdate(
      float layout_shift_delta,
      float layout_shift_delta_before_input_or_scroll);

  ~FrameRenderDataUpdate();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FrameRenderDataUpdatePtr>
  FrameRenderDataUpdatePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FrameRenderDataUpdate::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        FrameRenderDataUpdate::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FrameRenderDataUpdate::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FrameRenderDataUpdate_UnserializedMessageContext<
            UserType, FrameRenderDataUpdate::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<FrameRenderDataUpdate::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return FrameRenderDataUpdate::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FrameRenderDataUpdate_UnserializedMessageContext<
            UserType, FrameRenderDataUpdate::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FrameRenderDataUpdate::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  float layout_shift_delta;
  
  float layout_shift_delta_before_input_or_scroll;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FrameRenderDataUpdate::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FrameRenderDataUpdate::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FrameRenderDataUpdate::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FrameRenderDataUpdate::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  DeferredResourceCounts {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DeferredResourceCounts, T>::value>;
  using DataView = DeferredResourceCountsDataView;
  using Data_ = internal::DeferredResourceCounts_Data;

  template <typename... Args>
  static DeferredResourceCountsPtr New(Args&&... args) {
    return DeferredResourceCountsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DeferredResourceCountsPtr From(const U& u) {
    return mojo::TypeConverter<DeferredResourceCountsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DeferredResourceCounts>::Convert(*this);
  }


  DeferredResourceCounts();

  DeferredResourceCounts(
      uint64_t deferred_frames,
      uint64_t frames_loaded_after_deferral,
      uint64_t deferred_images,
      uint64_t images_loaded_after_deferral);

  ~DeferredResourceCounts();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DeferredResourceCountsPtr>
  DeferredResourceCountsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DeferredResourceCounts::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DeferredResourceCounts::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DeferredResourceCounts::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DeferredResourceCounts_UnserializedMessageContext<
            UserType, DeferredResourceCounts::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<DeferredResourceCounts::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return DeferredResourceCounts::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DeferredResourceCounts_UnserializedMessageContext<
            UserType, DeferredResourceCounts::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DeferredResourceCounts::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  uint64_t deferred_frames;
  
  uint64_t frames_loaded_after_deferral;
  
  uint64_t deferred_images;
  
  uint64_t images_loaded_after_deferral;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DeferredResourceCounts::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DeferredResourceCounts::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DeferredResourceCounts::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DeferredResourceCounts::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  DocumentTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<DocumentTiming, T>::value>;
  using DataView = DocumentTimingDataView;
  using Data_ = internal::DocumentTiming_Data;

  template <typename... Args>
  static DocumentTimingPtr New(Args&&... args) {
    return DocumentTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static DocumentTimingPtr From(const U& u) {
    return mojo::TypeConverter<DocumentTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DocumentTiming>::Convert(*this);
  }


  DocumentTiming();

  DocumentTiming(
      base::Optional<::base::TimeDelta> dom_content_loaded_event_start,
      base::Optional<::base::TimeDelta> load_event_start);

  ~DocumentTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = DocumentTimingPtr>
  DocumentTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, DocumentTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        DocumentTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        DocumentTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::DocumentTiming_UnserializedMessageContext<
            UserType, DocumentTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<DocumentTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return DocumentTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::DocumentTiming_UnserializedMessageContext<
            UserType, DocumentTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<DocumentTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  base::Optional<::base::TimeDelta> dom_content_loaded_event_start;
  
  base::Optional<::base::TimeDelta> load_event_start;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, DocumentTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, DocumentTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, DocumentTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, DocumentTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  PaintTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PaintTiming, T>::value>;
  using DataView = PaintTimingDataView;
  using Data_ = internal::PaintTiming_Data;

  template <typename... Args>
  static PaintTimingPtr New(Args&&... args) {
    return PaintTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PaintTimingPtr From(const U& u) {
    return mojo::TypeConverter<PaintTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PaintTiming>::Convert(*this);
  }


  PaintTiming();

  PaintTiming(
      base::Optional<::base::TimeDelta> first_paint,
      base::Optional<::base::TimeDelta> first_image_paint,
      base::Optional<::base::TimeDelta> first_contentful_paint,
      base::Optional<::base::TimeDelta> first_meaningful_paint,
      base::Optional<::base::TimeDelta> largest_image_paint,
      uint64_t largest_image_paint_size,
      base::Optional<::base::TimeDelta> largest_text_paint,
      uint64_t largest_text_paint_size);

  ~PaintTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PaintTimingPtr>
  PaintTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PaintTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PaintTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PaintTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PaintTiming_UnserializedMessageContext<
            UserType, PaintTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<PaintTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PaintTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PaintTiming_UnserializedMessageContext<
            UserType, PaintTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PaintTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  base::Optional<::base::TimeDelta> first_paint;
  
  base::Optional<::base::TimeDelta> first_image_paint;
  
  base::Optional<::base::TimeDelta> first_contentful_paint;
  
  base::Optional<::base::TimeDelta> first_meaningful_paint;
  
  base::Optional<::base::TimeDelta> largest_image_paint;
  
  uint64_t largest_image_paint_size;
  
  base::Optional<::base::TimeDelta> largest_text_paint;
  
  uint64_t largest_text_paint_size;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PaintTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PaintTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PaintTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PaintTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  ParseTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ParseTiming, T>::value>;
  using DataView = ParseTimingDataView;
  using Data_ = internal::ParseTiming_Data;

  template <typename... Args>
  static ParseTimingPtr New(Args&&... args) {
    return ParseTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ParseTimingPtr From(const U& u) {
    return mojo::TypeConverter<ParseTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ParseTiming>::Convert(*this);
  }


  ParseTiming();

  ParseTiming(
      base::Optional<::base::TimeDelta> parse_start,
      base::Optional<::base::TimeDelta> parse_stop,
      base::Optional<::base::TimeDelta> parse_blocked_on_script_load_duration,
      base::Optional<::base::TimeDelta> parse_blocked_on_script_load_from_document_write_duration,
      base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_duration,
      base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_from_document_write_duration);

  ~ParseTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ParseTimingPtr>
  ParseTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ParseTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ParseTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ParseTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ParseTiming_UnserializedMessageContext<
            UserType, ParseTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<ParseTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ParseTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ParseTiming_UnserializedMessageContext<
            UserType, ParseTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ParseTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  base::Optional<::base::TimeDelta> parse_start;
  
  base::Optional<::base::TimeDelta> parse_stop;
  
  base::Optional<::base::TimeDelta> parse_blocked_on_script_load_duration;
  
  base::Optional<::base::TimeDelta> parse_blocked_on_script_load_from_document_write_duration;
  
  base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_duration;
  
  base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_from_document_write_duration;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ParseTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ParseTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ParseTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ParseTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  InteractiveTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<InteractiveTiming, T>::value>;
  using DataView = InteractiveTimingDataView;
  using Data_ = internal::InteractiveTiming_Data;

  template <typename... Args>
  static InteractiveTimingPtr New(Args&&... args) {
    return InteractiveTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static InteractiveTimingPtr From(const U& u) {
    return mojo::TypeConverter<InteractiveTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, InteractiveTiming>::Convert(*this);
  }


  InteractiveTiming();

  InteractiveTiming(
      base::Optional<::base::TimeDelta> interactive,
      base::Optional<::base::TimeDelta> interactive_detection,
      base::Optional<::base::TimeDelta> first_invalidating_input,
      base::Optional<::base::TimeDelta> first_input_delay,
      base::Optional<::base::TimeDelta> first_input_timestamp,
      base::Optional<::base::TimeDelta> longest_input_delay,
      base::Optional<::base::TimeDelta> longest_input_timestamp);

  ~InteractiveTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = InteractiveTimingPtr>
  InteractiveTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, InteractiveTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        InteractiveTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        InteractiveTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::InteractiveTiming_UnserializedMessageContext<
            UserType, InteractiveTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<InteractiveTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return InteractiveTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::InteractiveTiming_UnserializedMessageContext<
            UserType, InteractiveTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<InteractiveTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  base::Optional<::base::TimeDelta> interactive;
  
  base::Optional<::base::TimeDelta> interactive_detection;
  
  base::Optional<::base::TimeDelta> first_invalidating_input;
  
  base::Optional<::base::TimeDelta> first_input_delay;
  
  base::Optional<::base::TimeDelta> first_input_timestamp;
  
  base::Optional<::base::TimeDelta> longest_input_delay;
  
  base::Optional<::base::TimeDelta> longest_input_timestamp;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, InteractiveTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, InteractiveTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, InteractiveTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, InteractiveTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  PageLoadTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PageLoadTiming, T>::value>;
  using DataView = PageLoadTimingDataView;
  using Data_ = internal::PageLoadTiming_Data;

  template <typename... Args>
  static PageLoadTimingPtr New(Args&&... args) {
    return PageLoadTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PageLoadTimingPtr From(const U& u) {
    return mojo::TypeConverter<PageLoadTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PageLoadTiming>::Convert(*this);
  }


  PageLoadTiming();

  PageLoadTiming(
      ::base::Time navigation_start,
      base::Optional<::base::TimeDelta> response_start,
      DocumentTimingPtr document_timing,
      InteractiveTimingPtr interactive_timing,
      PaintTimingPtr paint_timing,
      ParseTimingPtr parse_timing,
      base::Optional<::base::TimeDelta> input_to_navigation_start);

  ~PageLoadTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PageLoadTimingPtr>
  PageLoadTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PageLoadTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PageLoadTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PageLoadTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PageLoadTiming_UnserializedMessageContext<
            UserType, PageLoadTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<PageLoadTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PageLoadTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PageLoadTiming_UnserializedMessageContext<
            UserType, PageLoadTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PageLoadTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::base::Time navigation_start;
  
  base::Optional<::base::TimeDelta> response_start;
  
  DocumentTimingPtr document_timing;
  
  InteractiveTimingPtr interactive_timing;
  
  PaintTimingPtr paint_timing;
  
  ParseTimingPtr parse_timing;
  
  base::Optional<::base::TimeDelta> input_to_navigation_start;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(PageLoadTiming);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PageLoadTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PageLoadTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PageLoadTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PageLoadTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  PageLoadFeatures {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PageLoadFeatures, T>::value>;
  using DataView = PageLoadFeaturesDataView;
  using Data_ = internal::PageLoadFeatures_Data;

  template <typename... Args>
  static PageLoadFeaturesPtr New(Args&&... args) {
    return PageLoadFeaturesPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PageLoadFeaturesPtr From(const U& u) {
    return mojo::TypeConverter<PageLoadFeaturesPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PageLoadFeatures>::Convert(*this);
  }


  PageLoadFeatures();

  PageLoadFeatures(
      std::vector<::blink::mojom::WebFeature> features,
      std::vector<::blink::mojom::CSSSampleId> css_properties,
      std::vector<::blink::mojom::CSSSampleId> animated_css_properties);

  ~PageLoadFeatures();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PageLoadFeaturesPtr>
  PageLoadFeaturesPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PageLoadFeatures::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PageLoadFeatures::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PageLoadFeatures::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PageLoadFeatures_UnserializedMessageContext<
            UserType, PageLoadFeatures::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<PageLoadFeatures::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return PageLoadFeatures::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PageLoadFeatures_UnserializedMessageContext<
            UserType, PageLoadFeatures::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PageLoadFeatures::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<::blink::mojom::WebFeature> features;
  
  std::vector<::blink::mojom::CSSSampleId> css_properties;
  
  std::vector<::blink::mojom::CSSSampleId> animated_css_properties;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PageLoadFeatures::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PageLoadFeatures::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PageLoadFeatures::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PageLoadFeatures::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  ResourceDataUpdate {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ResourceDataUpdate, T>::value>;
  using DataView = ResourceDataUpdateDataView;
  using Data_ = internal::ResourceDataUpdate_Data;

  template <typename... Args>
  static ResourceDataUpdatePtr New(Args&&... args) {
    return ResourceDataUpdatePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ResourceDataUpdatePtr From(const U& u) {
    return mojo::TypeConverter<ResourceDataUpdatePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResourceDataUpdate>::Convert(*this);
  }


  ResourceDataUpdate();

  ResourceDataUpdate(
      int32_t request_id,
      int64_t delta_bytes,
      int64_t received_data_length,
      int64_t encoded_body_length,
      int64_t decoded_body_length,
      bool is_complete,
      double data_reduction_proxy_compression_ratio_estimate,
      bool reported_as_ad_resource,
      bool is_main_frame_resource,
      CacheType cache_type,
      bool is_primary_frame_resource,
      const std::string& mime_type,
      bool is_secure_scheme,
      bool proxy_used,
      const ::url::Origin& origin,
      bool completed_before_fcp);

  ~ResourceDataUpdate();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ResourceDataUpdatePtr>
  ResourceDataUpdatePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ResourceDataUpdate::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ResourceDataUpdate::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ResourceDataUpdate::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ResourceDataUpdate_UnserializedMessageContext<
            UserType, ResourceDataUpdate::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<ResourceDataUpdate::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ResourceDataUpdate::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ResourceDataUpdate_UnserializedMessageContext<
            UserType, ResourceDataUpdate::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ResourceDataUpdate::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int32_t request_id;
  
  int64_t delta_bytes;
  
  int64_t received_data_length;
  
  int64_t encoded_body_length;
  
  int64_t decoded_body_length;
  
  bool is_complete;
  
  double data_reduction_proxy_compression_ratio_estimate;
  
  bool reported_as_ad_resource;
  
  bool is_main_frame_resource;
  
  CacheType cache_type;
  
  bool is_primary_frame_resource;
  
  std::string mime_type;
  
  bool is_secure_scheme;
  
  bool proxy_used;
  
  ::url::Origin origin;
  
  bool completed_before_fcp;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ResourceDataUpdate::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ResourceDataUpdate::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ResourceDataUpdate::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ResourceDataUpdate::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  CpuTiming {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CpuTiming, T>::value>;
  using DataView = CpuTimingDataView;
  using Data_ = internal::CpuTiming_Data;

  template <typename... Args>
  static CpuTimingPtr New(Args&&... args) {
    return CpuTimingPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CpuTimingPtr From(const U& u) {
    return mojo::TypeConverter<CpuTimingPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CpuTiming>::Convert(*this);
  }


  CpuTiming();

  explicit CpuTiming(
      ::base::TimeDelta task_time);

  ~CpuTiming();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CpuTimingPtr>
  CpuTimingPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CpuTiming::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CpuTiming::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CpuTiming::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CpuTiming_UnserializedMessageContext<
            UserType, CpuTiming::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<CpuTiming::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CpuTiming::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CpuTiming_UnserializedMessageContext<
            UserType, CpuTiming::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CpuTiming::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::base::TimeDelta task_time;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CpuTiming::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CpuTiming::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CpuTiming::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CpuTiming::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}


template <typename StructPtrType>
DocumentTimingPtr DocumentTiming::Clone() const {
  return New(
      mojo::Clone(dom_content_loaded_event_start),
      mojo::Clone(load_event_start)
  );
}

template <typename T, DocumentTiming::EnableIfSame<T>*>
bool DocumentTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->dom_content_loaded_event_start, other_struct.dom_content_loaded_event_start))
    return false;
  if (!mojo::Equals(this->load_event_start, other_struct.load_event_start))
    return false;
  return true;
}

template <typename T, DocumentTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.dom_content_loaded_event_start < rhs.dom_content_loaded_event_start)
    return true;
  if (rhs.dom_content_loaded_event_start < lhs.dom_content_loaded_event_start)
    return false;
  if (lhs.load_event_start < rhs.load_event_start)
    return true;
  if (rhs.load_event_start < lhs.load_event_start)
    return false;
  return false;
}
template <typename StructPtrType>
PaintTimingPtr PaintTiming::Clone() const {
  return New(
      mojo::Clone(first_paint),
      mojo::Clone(first_image_paint),
      mojo::Clone(first_contentful_paint),
      mojo::Clone(first_meaningful_paint),
      mojo::Clone(largest_image_paint),
      mojo::Clone(largest_image_paint_size),
      mojo::Clone(largest_text_paint),
      mojo::Clone(largest_text_paint_size)
  );
}

template <typename T, PaintTiming::EnableIfSame<T>*>
bool PaintTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->first_paint, other_struct.first_paint))
    return false;
  if (!mojo::Equals(this->first_image_paint, other_struct.first_image_paint))
    return false;
  if (!mojo::Equals(this->first_contentful_paint, other_struct.first_contentful_paint))
    return false;
  if (!mojo::Equals(this->first_meaningful_paint, other_struct.first_meaningful_paint))
    return false;
  if (!mojo::Equals(this->largest_image_paint, other_struct.largest_image_paint))
    return false;
  if (!mojo::Equals(this->largest_image_paint_size, other_struct.largest_image_paint_size))
    return false;
  if (!mojo::Equals(this->largest_text_paint, other_struct.largest_text_paint))
    return false;
  if (!mojo::Equals(this->largest_text_paint_size, other_struct.largest_text_paint_size))
    return false;
  return true;
}

template <typename T, PaintTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.first_paint < rhs.first_paint)
    return true;
  if (rhs.first_paint < lhs.first_paint)
    return false;
  if (lhs.first_image_paint < rhs.first_image_paint)
    return true;
  if (rhs.first_image_paint < lhs.first_image_paint)
    return false;
  if (lhs.first_contentful_paint < rhs.first_contentful_paint)
    return true;
  if (rhs.first_contentful_paint < lhs.first_contentful_paint)
    return false;
  if (lhs.first_meaningful_paint < rhs.first_meaningful_paint)
    return true;
  if (rhs.first_meaningful_paint < lhs.first_meaningful_paint)
    return false;
  if (lhs.largest_image_paint < rhs.largest_image_paint)
    return true;
  if (rhs.largest_image_paint < lhs.largest_image_paint)
    return false;
  if (lhs.largest_image_paint_size < rhs.largest_image_paint_size)
    return true;
  if (rhs.largest_image_paint_size < lhs.largest_image_paint_size)
    return false;
  if (lhs.largest_text_paint < rhs.largest_text_paint)
    return true;
  if (rhs.largest_text_paint < lhs.largest_text_paint)
    return false;
  if (lhs.largest_text_paint_size < rhs.largest_text_paint_size)
    return true;
  if (rhs.largest_text_paint_size < lhs.largest_text_paint_size)
    return false;
  return false;
}
template <typename StructPtrType>
ParseTimingPtr ParseTiming::Clone() const {
  return New(
      mojo::Clone(parse_start),
      mojo::Clone(parse_stop),
      mojo::Clone(parse_blocked_on_script_load_duration),
      mojo::Clone(parse_blocked_on_script_load_from_document_write_duration),
      mojo::Clone(parse_blocked_on_script_execution_duration),
      mojo::Clone(parse_blocked_on_script_execution_from_document_write_duration)
  );
}

template <typename T, ParseTiming::EnableIfSame<T>*>
bool ParseTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->parse_start, other_struct.parse_start))
    return false;
  if (!mojo::Equals(this->parse_stop, other_struct.parse_stop))
    return false;
  if (!mojo::Equals(this->parse_blocked_on_script_load_duration, other_struct.parse_blocked_on_script_load_duration))
    return false;
  if (!mojo::Equals(this->parse_blocked_on_script_load_from_document_write_duration, other_struct.parse_blocked_on_script_load_from_document_write_duration))
    return false;
  if (!mojo::Equals(this->parse_blocked_on_script_execution_duration, other_struct.parse_blocked_on_script_execution_duration))
    return false;
  if (!mojo::Equals(this->parse_blocked_on_script_execution_from_document_write_duration, other_struct.parse_blocked_on_script_execution_from_document_write_duration))
    return false;
  return true;
}

template <typename T, ParseTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.parse_start < rhs.parse_start)
    return true;
  if (rhs.parse_start < lhs.parse_start)
    return false;
  if (lhs.parse_stop < rhs.parse_stop)
    return true;
  if (rhs.parse_stop < lhs.parse_stop)
    return false;
  if (lhs.parse_blocked_on_script_load_duration < rhs.parse_blocked_on_script_load_duration)
    return true;
  if (rhs.parse_blocked_on_script_load_duration < lhs.parse_blocked_on_script_load_duration)
    return false;
  if (lhs.parse_blocked_on_script_load_from_document_write_duration < rhs.parse_blocked_on_script_load_from_document_write_duration)
    return true;
  if (rhs.parse_blocked_on_script_load_from_document_write_duration < lhs.parse_blocked_on_script_load_from_document_write_duration)
    return false;
  if (lhs.parse_blocked_on_script_execution_duration < rhs.parse_blocked_on_script_execution_duration)
    return true;
  if (rhs.parse_blocked_on_script_execution_duration < lhs.parse_blocked_on_script_execution_duration)
    return false;
  if (lhs.parse_blocked_on_script_execution_from_document_write_duration < rhs.parse_blocked_on_script_execution_from_document_write_duration)
    return true;
  if (rhs.parse_blocked_on_script_execution_from_document_write_duration < lhs.parse_blocked_on_script_execution_from_document_write_duration)
    return false;
  return false;
}
template <typename StructPtrType>
InteractiveTimingPtr InteractiveTiming::Clone() const {
  return New(
      mojo::Clone(interactive),
      mojo::Clone(interactive_detection),
      mojo::Clone(first_invalidating_input),
      mojo::Clone(first_input_delay),
      mojo::Clone(first_input_timestamp),
      mojo::Clone(longest_input_delay),
      mojo::Clone(longest_input_timestamp)
  );
}

template <typename T, InteractiveTiming::EnableIfSame<T>*>
bool InteractiveTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->interactive, other_struct.interactive))
    return false;
  if (!mojo::Equals(this->interactive_detection, other_struct.interactive_detection))
    return false;
  if (!mojo::Equals(this->first_invalidating_input, other_struct.first_invalidating_input))
    return false;
  if (!mojo::Equals(this->first_input_delay, other_struct.first_input_delay))
    return false;
  if (!mojo::Equals(this->first_input_timestamp, other_struct.first_input_timestamp))
    return false;
  if (!mojo::Equals(this->longest_input_delay, other_struct.longest_input_delay))
    return false;
  if (!mojo::Equals(this->longest_input_timestamp, other_struct.longest_input_timestamp))
    return false;
  return true;
}

template <typename T, InteractiveTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.interactive < rhs.interactive)
    return true;
  if (rhs.interactive < lhs.interactive)
    return false;
  if (lhs.interactive_detection < rhs.interactive_detection)
    return true;
  if (rhs.interactive_detection < lhs.interactive_detection)
    return false;
  if (lhs.first_invalidating_input < rhs.first_invalidating_input)
    return true;
  if (rhs.first_invalidating_input < lhs.first_invalidating_input)
    return false;
  if (lhs.first_input_delay < rhs.first_input_delay)
    return true;
  if (rhs.first_input_delay < lhs.first_input_delay)
    return false;
  if (lhs.first_input_timestamp < rhs.first_input_timestamp)
    return true;
  if (rhs.first_input_timestamp < lhs.first_input_timestamp)
    return false;
  if (lhs.longest_input_delay < rhs.longest_input_delay)
    return true;
  if (rhs.longest_input_delay < lhs.longest_input_delay)
    return false;
  if (lhs.longest_input_timestamp < rhs.longest_input_timestamp)
    return true;
  if (rhs.longest_input_timestamp < lhs.longest_input_timestamp)
    return false;
  return false;
}
template <typename StructPtrType>
PageLoadTimingPtr PageLoadTiming::Clone() const {
  return New(
      mojo::Clone(navigation_start),
      mojo::Clone(response_start),
      mojo::Clone(document_timing),
      mojo::Clone(interactive_timing),
      mojo::Clone(paint_timing),
      mojo::Clone(parse_timing),
      mojo::Clone(input_to_navigation_start)
  );
}

template <typename T, PageLoadTiming::EnableIfSame<T>*>
bool PageLoadTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->navigation_start, other_struct.navigation_start))
    return false;
  if (!mojo::Equals(this->response_start, other_struct.response_start))
    return false;
  if (!mojo::Equals(this->document_timing, other_struct.document_timing))
    return false;
  if (!mojo::Equals(this->interactive_timing, other_struct.interactive_timing))
    return false;
  if (!mojo::Equals(this->paint_timing, other_struct.paint_timing))
    return false;
  if (!mojo::Equals(this->parse_timing, other_struct.parse_timing))
    return false;
  if (!mojo::Equals(this->input_to_navigation_start, other_struct.input_to_navigation_start))
    return false;
  return true;
}

template <typename T, PageLoadTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.navigation_start < rhs.navigation_start)
    return true;
  if (rhs.navigation_start < lhs.navigation_start)
    return false;
  if (lhs.response_start < rhs.response_start)
    return true;
  if (rhs.response_start < lhs.response_start)
    return false;
  if (lhs.document_timing < rhs.document_timing)
    return true;
  if (rhs.document_timing < lhs.document_timing)
    return false;
  if (lhs.interactive_timing < rhs.interactive_timing)
    return true;
  if (rhs.interactive_timing < lhs.interactive_timing)
    return false;
  if (lhs.paint_timing < rhs.paint_timing)
    return true;
  if (rhs.paint_timing < lhs.paint_timing)
    return false;
  if (lhs.parse_timing < rhs.parse_timing)
    return true;
  if (rhs.parse_timing < lhs.parse_timing)
    return false;
  if (lhs.input_to_navigation_start < rhs.input_to_navigation_start)
    return true;
  if (rhs.input_to_navigation_start < lhs.input_to_navigation_start)
    return false;
  return false;
}
template <typename StructPtrType>
PageLoadMetadataPtr PageLoadMetadata::Clone() const {
  return New(
      mojo::Clone(behavior_flags)
  );
}

template <typename T, PageLoadMetadata::EnableIfSame<T>*>
bool PageLoadMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->behavior_flags, other_struct.behavior_flags))
    return false;
  return true;
}

template <typename T, PageLoadMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.behavior_flags < rhs.behavior_flags)
    return true;
  if (rhs.behavior_flags < lhs.behavior_flags)
    return false;
  return false;
}
template <typename StructPtrType>
PageLoadFeaturesPtr PageLoadFeatures::Clone() const {
  return New(
      mojo::Clone(features),
      mojo::Clone(css_properties),
      mojo::Clone(animated_css_properties)
  );
}

template <typename T, PageLoadFeatures::EnableIfSame<T>*>
bool PageLoadFeatures::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->features, other_struct.features))
    return false;
  if (!mojo::Equals(this->css_properties, other_struct.css_properties))
    return false;
  if (!mojo::Equals(this->animated_css_properties, other_struct.animated_css_properties))
    return false;
  return true;
}

template <typename T, PageLoadFeatures::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.features < rhs.features)
    return true;
  if (rhs.features < lhs.features)
    return false;
  if (lhs.css_properties < rhs.css_properties)
    return true;
  if (rhs.css_properties < lhs.css_properties)
    return false;
  if (lhs.animated_css_properties < rhs.animated_css_properties)
    return true;
  if (rhs.animated_css_properties < lhs.animated_css_properties)
    return false;
  return false;
}
template <typename StructPtrType>
ResourceDataUpdatePtr ResourceDataUpdate::Clone() const {
  return New(
      mojo::Clone(request_id),
      mojo::Clone(delta_bytes),
      mojo::Clone(received_data_length),
      mojo::Clone(encoded_body_length),
      mojo::Clone(decoded_body_length),
      mojo::Clone(is_complete),
      mojo::Clone(data_reduction_proxy_compression_ratio_estimate),
      mojo::Clone(reported_as_ad_resource),
      mojo::Clone(is_main_frame_resource),
      mojo::Clone(cache_type),
      mojo::Clone(is_primary_frame_resource),
      mojo::Clone(mime_type),
      mojo::Clone(is_secure_scheme),
      mojo::Clone(proxy_used),
      mojo::Clone(origin),
      mojo::Clone(completed_before_fcp)
  );
}

template <typename T, ResourceDataUpdate::EnableIfSame<T>*>
bool ResourceDataUpdate::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->request_id, other_struct.request_id))
    return false;
  if (!mojo::Equals(this->delta_bytes, other_struct.delta_bytes))
    return false;
  if (!mojo::Equals(this->received_data_length, other_struct.received_data_length))
    return false;
  if (!mojo::Equals(this->encoded_body_length, other_struct.encoded_body_length))
    return false;
  if (!mojo::Equals(this->decoded_body_length, other_struct.decoded_body_length))
    return false;
  if (!mojo::Equals(this->is_complete, other_struct.is_complete))
    return false;
  if (!mojo::Equals(this->data_reduction_proxy_compression_ratio_estimate, other_struct.data_reduction_proxy_compression_ratio_estimate))
    return false;
  if (!mojo::Equals(this->reported_as_ad_resource, other_struct.reported_as_ad_resource))
    return false;
  if (!mojo::Equals(this->is_main_frame_resource, other_struct.is_main_frame_resource))
    return false;
  if (!mojo::Equals(this->cache_type, other_struct.cache_type))
    return false;
  if (!mojo::Equals(this->is_primary_frame_resource, other_struct.is_primary_frame_resource))
    return false;
  if (!mojo::Equals(this->mime_type, other_struct.mime_type))
    return false;
  if (!mojo::Equals(this->is_secure_scheme, other_struct.is_secure_scheme))
    return false;
  if (!mojo::Equals(this->proxy_used, other_struct.proxy_used))
    return false;
  if (!mojo::Equals(this->origin, other_struct.origin))
    return false;
  if (!mojo::Equals(this->completed_before_fcp, other_struct.completed_before_fcp))
    return false;
  return true;
}

template <typename T, ResourceDataUpdate::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.request_id < rhs.request_id)
    return true;
  if (rhs.request_id < lhs.request_id)
    return false;
  if (lhs.delta_bytes < rhs.delta_bytes)
    return true;
  if (rhs.delta_bytes < lhs.delta_bytes)
    return false;
  if (lhs.received_data_length < rhs.received_data_length)
    return true;
  if (rhs.received_data_length < lhs.received_data_length)
    return false;
  if (lhs.encoded_body_length < rhs.encoded_body_length)
    return true;
  if (rhs.encoded_body_length < lhs.encoded_body_length)
    return false;
  if (lhs.decoded_body_length < rhs.decoded_body_length)
    return true;
  if (rhs.decoded_body_length < lhs.decoded_body_length)
    return false;
  if (lhs.is_complete < rhs.is_complete)
    return true;
  if (rhs.is_complete < lhs.is_complete)
    return false;
  if (lhs.data_reduction_proxy_compression_ratio_estimate < rhs.data_reduction_proxy_compression_ratio_estimate)
    return true;
  if (rhs.data_reduction_proxy_compression_ratio_estimate < lhs.data_reduction_proxy_compression_ratio_estimate)
    return false;
  if (lhs.reported_as_ad_resource < rhs.reported_as_ad_resource)
    return true;
  if (rhs.reported_as_ad_resource < lhs.reported_as_ad_resource)
    return false;
  if (lhs.is_main_frame_resource < rhs.is_main_frame_resource)
    return true;
  if (rhs.is_main_frame_resource < lhs.is_main_frame_resource)
    return false;
  if (lhs.cache_type < rhs.cache_type)
    return true;
  if (rhs.cache_type < lhs.cache_type)
    return false;
  if (lhs.is_primary_frame_resource < rhs.is_primary_frame_resource)
    return true;
  if (rhs.is_primary_frame_resource < lhs.is_primary_frame_resource)
    return false;
  if (lhs.mime_type < rhs.mime_type)
    return true;
  if (rhs.mime_type < lhs.mime_type)
    return false;
  if (lhs.is_secure_scheme < rhs.is_secure_scheme)
    return true;
  if (rhs.is_secure_scheme < lhs.is_secure_scheme)
    return false;
  if (lhs.proxy_used < rhs.proxy_used)
    return true;
  if (rhs.proxy_used < lhs.proxy_used)
    return false;
  if (lhs.origin < rhs.origin)
    return true;
  if (rhs.origin < lhs.origin)
    return false;
  if (lhs.completed_before_fcp < rhs.completed_before_fcp)
    return true;
  if (rhs.completed_before_fcp < lhs.completed_before_fcp)
    return false;
  return false;
}
template <typename StructPtrType>
FrameRenderDataUpdatePtr FrameRenderDataUpdate::Clone() const {
  return New(
      mojo::Clone(layout_shift_delta),
      mojo::Clone(layout_shift_delta_before_input_or_scroll)
  );
}

template <typename T, FrameRenderDataUpdate::EnableIfSame<T>*>
bool FrameRenderDataUpdate::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->layout_shift_delta, other_struct.layout_shift_delta))
    return false;
  if (!mojo::Equals(this->layout_shift_delta_before_input_or_scroll, other_struct.layout_shift_delta_before_input_or_scroll))
    return false;
  return true;
}

template <typename T, FrameRenderDataUpdate::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.layout_shift_delta < rhs.layout_shift_delta)
    return true;
  if (rhs.layout_shift_delta < lhs.layout_shift_delta)
    return false;
  if (lhs.layout_shift_delta_before_input_or_scroll < rhs.layout_shift_delta_before_input_or_scroll)
    return true;
  if (rhs.layout_shift_delta_before_input_or_scroll < lhs.layout_shift_delta_before_input_or_scroll)
    return false;
  return false;
}
template <typename StructPtrType>
CpuTimingPtr CpuTiming::Clone() const {
  return New(
      mojo::Clone(task_time)
  );
}

template <typename T, CpuTiming::EnableIfSame<T>*>
bool CpuTiming::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->task_time, other_struct.task_time))
    return false;
  return true;
}

template <typename T, CpuTiming::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.task_time < rhs.task_time)
    return true;
  if (rhs.task_time < lhs.task_time)
    return false;
  return false;
}
template <typename StructPtrType>
DeferredResourceCountsPtr DeferredResourceCounts::Clone() const {
  return New(
      mojo::Clone(deferred_frames),
      mojo::Clone(frames_loaded_after_deferral),
      mojo::Clone(deferred_images),
      mojo::Clone(images_loaded_after_deferral)
  );
}

template <typename T, DeferredResourceCounts::EnableIfSame<T>*>
bool DeferredResourceCounts::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->deferred_frames, other_struct.deferred_frames))
    return false;
  if (!mojo::Equals(this->frames_loaded_after_deferral, other_struct.frames_loaded_after_deferral))
    return false;
  if (!mojo::Equals(this->deferred_images, other_struct.deferred_images))
    return false;
  if (!mojo::Equals(this->images_loaded_after_deferral, other_struct.images_loaded_after_deferral))
    return false;
  return true;
}

template <typename T, DeferredResourceCounts::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.deferred_frames < rhs.deferred_frames)
    return true;
  if (rhs.deferred_frames < lhs.deferred_frames)
    return false;
  if (lhs.frames_loaded_after_deferral < rhs.frames_loaded_after_deferral)
    return true;
  if (rhs.frames_loaded_after_deferral < lhs.frames_loaded_after_deferral)
    return false;
  if (lhs.deferred_images < rhs.deferred_images)
    return true;
  if (rhs.deferred_images < lhs.deferred_images)
    return false;
  if (lhs.images_loaded_after_deferral < rhs.images_loaded_after_deferral)
    return true;
  if (rhs.images_loaded_after_deferral < lhs.images_loaded_after_deferral)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace page_load_metrics

namespace mojo {


template <>
struct  StructTraits<::page_load_metrics::mojom::DocumentTiming::DataView,
                                         ::page_load_metrics::mojom::DocumentTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::DocumentTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::DocumentTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::DocumentTiming::dom_content_loaded_event_start)& dom_content_loaded_event_start(
      const ::page_load_metrics::mojom::DocumentTimingPtr& input) {
    return input->dom_content_loaded_event_start;
  }

  static const decltype(::page_load_metrics::mojom::DocumentTiming::load_event_start)& load_event_start(
      const ::page_load_metrics::mojom::DocumentTimingPtr& input) {
    return input->load_event_start;
  }

  static bool Read(::page_load_metrics::mojom::DocumentTiming::DataView input, ::page_load_metrics::mojom::DocumentTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::PaintTiming::DataView,
                                         ::page_load_metrics::mojom::PaintTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::PaintTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::PaintTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::PaintTiming::first_paint)& first_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->first_paint;
  }

  static const decltype(::page_load_metrics::mojom::PaintTiming::first_image_paint)& first_image_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->first_image_paint;
  }

  static const decltype(::page_load_metrics::mojom::PaintTiming::first_contentful_paint)& first_contentful_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->first_contentful_paint;
  }

  static const decltype(::page_load_metrics::mojom::PaintTiming::first_meaningful_paint)& first_meaningful_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->first_meaningful_paint;
  }

  static const decltype(::page_load_metrics::mojom::PaintTiming::largest_image_paint)& largest_image_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->largest_image_paint;
  }

  static decltype(::page_load_metrics::mojom::PaintTiming::largest_image_paint_size) largest_image_paint_size(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->largest_image_paint_size;
  }

  static const decltype(::page_load_metrics::mojom::PaintTiming::largest_text_paint)& largest_text_paint(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->largest_text_paint;
  }

  static decltype(::page_load_metrics::mojom::PaintTiming::largest_text_paint_size) largest_text_paint_size(
      const ::page_load_metrics::mojom::PaintTimingPtr& input) {
    return input->largest_text_paint_size;
  }

  static bool Read(::page_load_metrics::mojom::PaintTiming::DataView input, ::page_load_metrics::mojom::PaintTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::ParseTiming::DataView,
                                         ::page_load_metrics::mojom::ParseTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::ParseTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::ParseTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_start)& parse_start(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_start;
  }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_stop)& parse_stop(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_stop;
  }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_blocked_on_script_load_duration)& parse_blocked_on_script_load_duration(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_blocked_on_script_load_duration;
  }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_blocked_on_script_load_from_document_write_duration)& parse_blocked_on_script_load_from_document_write_duration(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_blocked_on_script_load_from_document_write_duration;
  }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_blocked_on_script_execution_duration)& parse_blocked_on_script_execution_duration(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_blocked_on_script_execution_duration;
  }

  static const decltype(::page_load_metrics::mojom::ParseTiming::parse_blocked_on_script_execution_from_document_write_duration)& parse_blocked_on_script_execution_from_document_write_duration(
      const ::page_load_metrics::mojom::ParseTimingPtr& input) {
    return input->parse_blocked_on_script_execution_from_document_write_duration;
  }

  static bool Read(::page_load_metrics::mojom::ParseTiming::DataView input, ::page_load_metrics::mojom::ParseTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::InteractiveTiming::DataView,
                                         ::page_load_metrics::mojom::InteractiveTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::InteractiveTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::InteractiveTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::interactive)& interactive(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->interactive;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::interactive_detection)& interactive_detection(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->interactive_detection;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::first_invalidating_input)& first_invalidating_input(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->first_invalidating_input;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::first_input_delay)& first_input_delay(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->first_input_delay;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::first_input_timestamp)& first_input_timestamp(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->first_input_timestamp;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::longest_input_delay)& longest_input_delay(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->longest_input_delay;
  }

  static const decltype(::page_load_metrics::mojom::InteractiveTiming::longest_input_timestamp)& longest_input_timestamp(
      const ::page_load_metrics::mojom::InteractiveTimingPtr& input) {
    return input->longest_input_timestamp;
  }

  static bool Read(::page_load_metrics::mojom::InteractiveTiming::DataView input, ::page_load_metrics::mojom::InteractiveTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::PageLoadTiming::DataView,
                                         ::page_load_metrics::mojom::PageLoadTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::PageLoadTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::PageLoadTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::navigation_start)& navigation_start(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->navigation_start;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::response_start)& response_start(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->response_start;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::document_timing)& document_timing(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->document_timing;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::interactive_timing)& interactive_timing(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->interactive_timing;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::paint_timing)& paint_timing(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->paint_timing;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::parse_timing)& parse_timing(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->parse_timing;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadTiming::input_to_navigation_start)& input_to_navigation_start(
      const ::page_load_metrics::mojom::PageLoadTimingPtr& input) {
    return input->input_to_navigation_start;
  }

  static bool Read(::page_load_metrics::mojom::PageLoadTiming::DataView input, ::page_load_metrics::mojom::PageLoadTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::PageLoadMetadata::DataView,
                                         ::page_load_metrics::mojom::PageLoadMetadataPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::PageLoadMetadataPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::PageLoadMetadataPtr* output) { output->reset(); }

  static decltype(::page_load_metrics::mojom::PageLoadMetadata::behavior_flags) behavior_flags(
      const ::page_load_metrics::mojom::PageLoadMetadataPtr& input) {
    return input->behavior_flags;
  }

  static bool Read(::page_load_metrics::mojom::PageLoadMetadata::DataView input, ::page_load_metrics::mojom::PageLoadMetadataPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::PageLoadFeatures::DataView,
                                         ::page_load_metrics::mojom::PageLoadFeaturesPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::PageLoadFeaturesPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::PageLoadFeaturesPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::PageLoadFeatures::features)& features(
      const ::page_load_metrics::mojom::PageLoadFeaturesPtr& input) {
    return input->features;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadFeatures::css_properties)& css_properties(
      const ::page_load_metrics::mojom::PageLoadFeaturesPtr& input) {
    return input->css_properties;
  }

  static const decltype(::page_load_metrics::mojom::PageLoadFeatures::animated_css_properties)& animated_css_properties(
      const ::page_load_metrics::mojom::PageLoadFeaturesPtr& input) {
    return input->animated_css_properties;
  }

  static bool Read(::page_load_metrics::mojom::PageLoadFeatures::DataView input, ::page_load_metrics::mojom::PageLoadFeaturesPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::ResourceDataUpdate::DataView,
                                         ::page_load_metrics::mojom::ResourceDataUpdatePtr> {
  static bool IsNull(const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::ResourceDataUpdatePtr* output) { output->reset(); }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::request_id) request_id(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->request_id;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::delta_bytes) delta_bytes(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->delta_bytes;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::received_data_length) received_data_length(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->received_data_length;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::encoded_body_length) encoded_body_length(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->encoded_body_length;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::decoded_body_length) decoded_body_length(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->decoded_body_length;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::is_complete) is_complete(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->is_complete;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::data_reduction_proxy_compression_ratio_estimate) data_reduction_proxy_compression_ratio_estimate(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->data_reduction_proxy_compression_ratio_estimate;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::reported_as_ad_resource) reported_as_ad_resource(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->reported_as_ad_resource;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::is_main_frame_resource) is_main_frame_resource(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->is_main_frame_resource;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::cache_type) cache_type(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->cache_type;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::is_primary_frame_resource) is_primary_frame_resource(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->is_primary_frame_resource;
  }

  static const decltype(::page_load_metrics::mojom::ResourceDataUpdate::mime_type)& mime_type(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->mime_type;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::is_secure_scheme) is_secure_scheme(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->is_secure_scheme;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::proxy_used) proxy_used(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->proxy_used;
  }

  static const decltype(::page_load_metrics::mojom::ResourceDataUpdate::origin)& origin(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->origin;
  }

  static decltype(::page_load_metrics::mojom::ResourceDataUpdate::completed_before_fcp) completed_before_fcp(
      const ::page_load_metrics::mojom::ResourceDataUpdatePtr& input) {
    return input->completed_before_fcp;
  }

  static bool Read(::page_load_metrics::mojom::ResourceDataUpdate::DataView input, ::page_load_metrics::mojom::ResourceDataUpdatePtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::FrameRenderDataUpdate::DataView,
                                         ::page_load_metrics::mojom::FrameRenderDataUpdatePtr> {
  static bool IsNull(const ::page_load_metrics::mojom::FrameRenderDataUpdatePtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::FrameRenderDataUpdatePtr* output) { output->reset(); }

  static decltype(::page_load_metrics::mojom::FrameRenderDataUpdate::layout_shift_delta) layout_shift_delta(
      const ::page_load_metrics::mojom::FrameRenderDataUpdatePtr& input) {
    return input->layout_shift_delta;
  }

  static decltype(::page_load_metrics::mojom::FrameRenderDataUpdate::layout_shift_delta_before_input_or_scroll) layout_shift_delta_before_input_or_scroll(
      const ::page_load_metrics::mojom::FrameRenderDataUpdatePtr& input) {
    return input->layout_shift_delta_before_input_or_scroll;
  }

  static bool Read(::page_load_metrics::mojom::FrameRenderDataUpdate::DataView input, ::page_load_metrics::mojom::FrameRenderDataUpdatePtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::CpuTiming::DataView,
                                         ::page_load_metrics::mojom::CpuTimingPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::CpuTimingPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::CpuTimingPtr* output) { output->reset(); }

  static const decltype(::page_load_metrics::mojom::CpuTiming::task_time)& task_time(
      const ::page_load_metrics::mojom::CpuTimingPtr& input) {
    return input->task_time;
  }

  static bool Read(::page_load_metrics::mojom::CpuTiming::DataView input, ::page_load_metrics::mojom::CpuTimingPtr* output);
};


template <>
struct  StructTraits<::page_load_metrics::mojom::DeferredResourceCounts::DataView,
                                         ::page_load_metrics::mojom::DeferredResourceCountsPtr> {
  static bool IsNull(const ::page_load_metrics::mojom::DeferredResourceCountsPtr& input) { return !input; }
  static void SetToNull(::page_load_metrics::mojom::DeferredResourceCountsPtr* output) { output->reset(); }

  static decltype(::page_load_metrics::mojom::DeferredResourceCounts::deferred_frames) deferred_frames(
      const ::page_load_metrics::mojom::DeferredResourceCountsPtr& input) {
    return input->deferred_frames;
  }

  static decltype(::page_load_metrics::mojom::DeferredResourceCounts::frames_loaded_after_deferral) frames_loaded_after_deferral(
      const ::page_load_metrics::mojom::DeferredResourceCountsPtr& input) {
    return input->frames_loaded_after_deferral;
  }

  static decltype(::page_load_metrics::mojom::DeferredResourceCounts::deferred_images) deferred_images(
      const ::page_load_metrics::mojom::DeferredResourceCountsPtr& input) {
    return input->deferred_images;
  }

  static decltype(::page_load_metrics::mojom::DeferredResourceCounts::images_loaded_after_deferral) images_loaded_after_deferral(
      const ::page_load_metrics::mojom::DeferredResourceCountsPtr& input) {
    return input->images_loaded_after_deferral;
  }

  static bool Read(::page_load_metrics::mojom::DeferredResourceCounts::DataView input, ::page_load_metrics::mojom::DeferredResourceCountsPtr* output);
};

}  // namespace mojo

#endif  // COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_H_