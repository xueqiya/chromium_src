// components/page_load_metrics/common/page_load_metrics.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/page_load_metrics/common/page_load_metrics.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/page_load_metrics/common/page_load_metrics.mojom-params-data.h"
#include "components/page_load_metrics/common/page_load_metrics.mojom-shared-message-ids.h"

#include "components/page_load_metrics/common/page_load_metrics.mojom-import-headers.h"


#ifndef COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_JUMBO_H_
#define COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#endif
namespace page_load_metrics {
namespace mojom {
DocumentTiming::DocumentTiming()
    : dom_content_loaded_event_start(),
      load_event_start() {}

DocumentTiming::DocumentTiming(
    base::Optional<::base::TimeDelta> dom_content_loaded_event_start_in,
    base::Optional<::base::TimeDelta> load_event_start_in)
    : dom_content_loaded_event_start(std::move(dom_content_loaded_event_start_in)),
      load_event_start(std::move(load_event_start_in)) {}

DocumentTiming::~DocumentTiming() = default;

bool DocumentTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PaintTiming::PaintTiming()
    : first_paint(),
      first_image_paint(),
      first_contentful_paint(),
      first_meaningful_paint(),
      largest_image_paint(),
      largest_image_paint_size(),
      largest_text_paint(),
      largest_text_paint_size() {}

PaintTiming::PaintTiming(
    base::Optional<::base::TimeDelta> first_paint_in,
    base::Optional<::base::TimeDelta> first_image_paint_in,
    base::Optional<::base::TimeDelta> first_contentful_paint_in,
    base::Optional<::base::TimeDelta> first_meaningful_paint_in,
    base::Optional<::base::TimeDelta> largest_image_paint_in,
    uint64_t largest_image_paint_size_in,
    base::Optional<::base::TimeDelta> largest_text_paint_in,
    uint64_t largest_text_paint_size_in)
    : first_paint(std::move(first_paint_in)),
      first_image_paint(std::move(first_image_paint_in)),
      first_contentful_paint(std::move(first_contentful_paint_in)),
      first_meaningful_paint(std::move(first_meaningful_paint_in)),
      largest_image_paint(std::move(largest_image_paint_in)),
      largest_image_paint_size(std::move(largest_image_paint_size_in)),
      largest_text_paint(std::move(largest_text_paint_in)),
      largest_text_paint_size(std::move(largest_text_paint_size_in)) {}

PaintTiming::~PaintTiming() = default;

bool PaintTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ParseTiming::ParseTiming()
    : parse_start(),
      parse_stop(),
      parse_blocked_on_script_load_duration(),
      parse_blocked_on_script_load_from_document_write_duration(),
      parse_blocked_on_script_execution_duration(),
      parse_blocked_on_script_execution_from_document_write_duration() {}

ParseTiming::ParseTiming(
    base::Optional<::base::TimeDelta> parse_start_in,
    base::Optional<::base::TimeDelta> parse_stop_in,
    base::Optional<::base::TimeDelta> parse_blocked_on_script_load_duration_in,
    base::Optional<::base::TimeDelta> parse_blocked_on_script_load_from_document_write_duration_in,
    base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_duration_in,
    base::Optional<::base::TimeDelta> parse_blocked_on_script_execution_from_document_write_duration_in)
    : parse_start(std::move(parse_start_in)),
      parse_stop(std::move(parse_stop_in)),
      parse_blocked_on_script_load_duration(std::move(parse_blocked_on_script_load_duration_in)),
      parse_blocked_on_script_load_from_document_write_duration(std::move(parse_blocked_on_script_load_from_document_write_duration_in)),
      parse_blocked_on_script_execution_duration(std::move(parse_blocked_on_script_execution_duration_in)),
      parse_blocked_on_script_execution_from_document_write_duration(std::move(parse_blocked_on_script_execution_from_document_write_duration_in)) {}

ParseTiming::~ParseTiming() = default;

bool ParseTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
InteractiveTiming::InteractiveTiming()
    : interactive(),
      interactive_detection(),
      first_invalidating_input(),
      first_input_delay(),
      first_input_timestamp(),
      longest_input_delay(),
      longest_input_timestamp() {}

InteractiveTiming::InteractiveTiming(
    base::Optional<::base::TimeDelta> interactive_in,
    base::Optional<::base::TimeDelta> interactive_detection_in,
    base::Optional<::base::TimeDelta> first_invalidating_input_in,
    base::Optional<::base::TimeDelta> first_input_delay_in,
    base::Optional<::base::TimeDelta> first_input_timestamp_in,
    base::Optional<::base::TimeDelta> longest_input_delay_in,
    base::Optional<::base::TimeDelta> longest_input_timestamp_in)
    : interactive(std::move(interactive_in)),
      interactive_detection(std::move(interactive_detection_in)),
      first_invalidating_input(std::move(first_invalidating_input_in)),
      first_input_delay(std::move(first_input_delay_in)),
      first_input_timestamp(std::move(first_input_timestamp_in)),
      longest_input_delay(std::move(longest_input_delay_in)),
      longest_input_timestamp(std::move(longest_input_timestamp_in)) {}

InteractiveTiming::~InteractiveTiming() = default;

bool InteractiveTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PageLoadTiming::PageLoadTiming()
    : navigation_start(),
      response_start(),
      document_timing(),
      interactive_timing(),
      paint_timing(),
      parse_timing(),
      input_to_navigation_start() {}

PageLoadTiming::PageLoadTiming(
    ::base::Time navigation_start_in,
    base::Optional<::base::TimeDelta> response_start_in,
    DocumentTimingPtr document_timing_in,
    InteractiveTimingPtr interactive_timing_in,
    PaintTimingPtr paint_timing_in,
    ParseTimingPtr parse_timing_in,
    base::Optional<::base::TimeDelta> input_to_navigation_start_in)
    : navigation_start(std::move(navigation_start_in)),
      response_start(std::move(response_start_in)),
      document_timing(std::move(document_timing_in)),
      interactive_timing(std::move(interactive_timing_in)),
      paint_timing(std::move(paint_timing_in)),
      parse_timing(std::move(parse_timing_in)),
      input_to_navigation_start(std::move(input_to_navigation_start_in)) {}

PageLoadTiming::~PageLoadTiming() = default;

bool PageLoadTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PageLoadMetadata::PageLoadMetadata()
    : behavior_flags(0) {}

PageLoadMetadata::PageLoadMetadata(
    int32_t behavior_flags_in)
    : behavior_flags(std::move(behavior_flags_in)) {}

PageLoadMetadata::~PageLoadMetadata() = default;
size_t PageLoadMetadata::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->behavior_flags);
  return seed;
}

bool PageLoadMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PageLoadFeatures::PageLoadFeatures()
    : features(),
      css_properties(),
      animated_css_properties() {}

PageLoadFeatures::PageLoadFeatures(
    std::vector<::blink::mojom::WebFeature> features_in,
    std::vector<::blink::mojom::CSSSampleId> css_properties_in,
    std::vector<::blink::mojom::CSSSampleId> animated_css_properties_in)
    : features(std::move(features_in)),
      css_properties(std::move(css_properties_in)),
      animated_css_properties(std::move(animated_css_properties_in)) {}

PageLoadFeatures::~PageLoadFeatures() = default;

bool PageLoadFeatures::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ResourceDataUpdate::ResourceDataUpdate()
    : request_id(0),
      delta_bytes(0),
      received_data_length(0),
      encoded_body_length(0),
      decoded_body_length(0),
      is_complete(),
      data_reduction_proxy_compression_ratio_estimate(),
      reported_as_ad_resource(),
      is_main_frame_resource(),
      cache_type(),
      is_primary_frame_resource(),
      mime_type(),
      is_secure_scheme(),
      proxy_used(),
      origin(),
      completed_before_fcp() {}

ResourceDataUpdate::ResourceDataUpdate(
    int32_t request_id_in,
    int64_t delta_bytes_in,
    int64_t received_data_length_in,
    int64_t encoded_body_length_in,
    int64_t decoded_body_length_in,
    bool is_complete_in,
    double data_reduction_proxy_compression_ratio_estimate_in,
    bool reported_as_ad_resource_in,
    bool is_main_frame_resource_in,
    CacheType cache_type_in,
    bool is_primary_frame_resource_in,
    const std::string& mime_type_in,
    bool is_secure_scheme_in,
    bool proxy_used_in,
    const ::url::Origin& origin_in,
    bool completed_before_fcp_in)
    : request_id(std::move(request_id_in)),
      delta_bytes(std::move(delta_bytes_in)),
      received_data_length(std::move(received_data_length_in)),
      encoded_body_length(std::move(encoded_body_length_in)),
      decoded_body_length(std::move(decoded_body_length_in)),
      is_complete(std::move(is_complete_in)),
      data_reduction_proxy_compression_ratio_estimate(std::move(data_reduction_proxy_compression_ratio_estimate_in)),
      reported_as_ad_resource(std::move(reported_as_ad_resource_in)),
      is_main_frame_resource(std::move(is_main_frame_resource_in)),
      cache_type(std::move(cache_type_in)),
      is_primary_frame_resource(std::move(is_primary_frame_resource_in)),
      mime_type(std::move(mime_type_in)),
      is_secure_scheme(std::move(is_secure_scheme_in)),
      proxy_used(std::move(proxy_used_in)),
      origin(std::move(origin_in)),
      completed_before_fcp(std::move(completed_before_fcp_in)) {}

ResourceDataUpdate::~ResourceDataUpdate() = default;

bool ResourceDataUpdate::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FrameRenderDataUpdate::FrameRenderDataUpdate()
    : layout_shift_delta(),
      layout_shift_delta_before_input_or_scroll() {}

FrameRenderDataUpdate::FrameRenderDataUpdate(
    float layout_shift_delta_in,
    float layout_shift_delta_before_input_or_scroll_in)
    : layout_shift_delta(std::move(layout_shift_delta_in)),
      layout_shift_delta_before_input_or_scroll(std::move(layout_shift_delta_before_input_or_scroll_in)) {}

FrameRenderDataUpdate::~FrameRenderDataUpdate() = default;
size_t FrameRenderDataUpdate::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->layout_shift_delta);
  seed = mojo::internal::Hash(seed, this->layout_shift_delta_before_input_or_scroll);
  return seed;
}

bool FrameRenderDataUpdate::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CpuTiming::CpuTiming()
    : task_time() {}

CpuTiming::CpuTiming(
    ::base::TimeDelta task_time_in)
    : task_time(std::move(task_time_in)) {}

CpuTiming::~CpuTiming() = default;

bool CpuTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DeferredResourceCounts::DeferredResourceCounts()
    : deferred_frames(0ULL),
      frames_loaded_after_deferral(0ULL),
      deferred_images(0ULL),
      images_loaded_after_deferral(0ULL) {}

DeferredResourceCounts::DeferredResourceCounts(
    uint64_t deferred_frames_in,
    uint64_t frames_loaded_after_deferral_in,
    uint64_t deferred_images_in,
    uint64_t images_loaded_after_deferral_in)
    : deferred_frames(std::move(deferred_frames_in)),
      frames_loaded_after_deferral(std::move(frames_loaded_after_deferral_in)),
      deferred_images(std::move(deferred_images_in)),
      images_loaded_after_deferral(std::move(images_loaded_after_deferral_in)) {}

DeferredResourceCounts::~DeferredResourceCounts() = default;
size_t DeferredResourceCounts::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->deferred_frames);
  seed = mojo::internal::Hash(seed, this->frames_loaded_after_deferral);
  seed = mojo::internal::Hash(seed, this->deferred_images);
  seed = mojo::internal::Hash(seed, this->images_loaded_after_deferral);
  return seed;
}

bool DeferredResourceCounts::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char PageLoadMetrics::Name_[] = "page_load_metrics.mojom.PageLoadMetrics";

PageLoadMetricsProxy::PageLoadMetricsProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PageLoadMetricsProxy::UpdateTiming(
    PageLoadTimingPtr in_page_load_timing, PageLoadMetadataPtr in_page_load_metadata, PageLoadFeaturesPtr in_new_features, std::vector<ResourceDataUpdatePtr> in_resources, FrameRenderDataUpdatePtr in_render_data, CpuTimingPtr in_cpu_load_timing, DeferredResourceCountsPtr in_new_deferred_resource_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "page_load_metrics::mojom::PageLoadMetrics::UpdateTiming");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageLoadMetrics_UpdateTiming_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::page_load_metrics::mojom::internal::PageLoadMetrics_UpdateTiming_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->page_load_timing)::BaseType::BufferWriter
      page_load_timing_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::PageLoadTimingDataView>(
      in_page_load_timing, buffer, &page_load_timing_writer, &serialization_context);
  params->page_load_timing.Set(
      page_load_timing_writer.is_null() ? nullptr : page_load_timing_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->page_load_timing.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null page_load_timing in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->page_load_metadata)::BaseType::BufferWriter
      page_load_metadata_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::PageLoadMetadataDataView>(
      in_page_load_metadata, buffer, &page_load_metadata_writer, &serialization_context);
  params->page_load_metadata.Set(
      page_load_metadata_writer.is_null() ? nullptr : page_load_metadata_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->page_load_metadata.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null page_load_metadata in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->new_features)::BaseType::BufferWriter
      new_features_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::PageLoadFeaturesDataView>(
      in_new_features, buffer, &new_features_writer, &serialization_context);
  params->new_features.Set(
      new_features_writer.is_null() ? nullptr : new_features_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->new_features.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null new_features in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->resources)::BaseType::BufferWriter
      resources_writer;
  const mojo::internal::ContainerValidateParams resources_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::page_load_metrics::mojom::ResourceDataUpdateDataView>>(
      in_resources, buffer, &resources_writer, &resources_validate_params,
      &serialization_context);
  params->resources.Set(
      resources_writer.is_null() ? nullptr : resources_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->resources.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null resources in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->render_data)::BaseType::BufferWriter
      render_data_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::FrameRenderDataUpdateDataView>(
      in_render_data, buffer, &render_data_writer, &serialization_context);
  params->render_data.Set(
      render_data_writer.is_null() ? nullptr : render_data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->render_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null render_data in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->cpu_load_timing)::BaseType::BufferWriter
      cpu_load_timing_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::CpuTimingDataView>(
      in_cpu_load_timing, buffer, &cpu_load_timing_writer, &serialization_context);
  params->cpu_load_timing.Set(
      cpu_load_timing_writer.is_null() ? nullptr : cpu_load_timing_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cpu_load_timing.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cpu_load_timing in PageLoadMetrics.UpdateTiming request");
  typename decltype(params->new_deferred_resource_data)::BaseType::BufferWriter
      new_deferred_resource_data_writer;
  mojo::internal::Serialize<::page_load_metrics::mojom::DeferredResourceCountsDataView>(
      in_new_deferred_resource_data, buffer, &new_deferred_resource_data_writer, &serialization_context);
  params->new_deferred_resource_data.Set(
      new_deferred_resource_data_writer.is_null() ? nullptr : new_deferred_resource_data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->new_deferred_resource_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null new_deferred_resource_data in PageLoadMetrics.UpdateTiming request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageLoadMetrics::Name_);
  message.set_method_name("UpdateTiming");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool PageLoadMetricsStubDispatch::Accept(
    PageLoadMetrics* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPageLoadMetrics_UpdateTiming_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)page_load_metrics::mojom::PageLoadMetrics::UpdateTiming",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)page_load_metrics::mojom::PageLoadMetrics::UpdateTiming");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PageLoadMetrics_UpdateTiming_Params_Data* params =
          reinterpret_cast<internal::PageLoadMetrics_UpdateTiming_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      PageLoadTimingPtr p_page_load_timing{};
      PageLoadMetadataPtr p_page_load_metadata{};
      PageLoadFeaturesPtr p_new_features{};
      std::vector<ResourceDataUpdatePtr> p_resources{};
      FrameRenderDataUpdatePtr p_render_data{};
      CpuTimingPtr p_cpu_load_timing{};
      DeferredResourceCountsPtr p_new_deferred_resource_data{};
      PageLoadMetrics_UpdateTiming_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadPageLoadTiming(&p_page_load_timing))
        success = false;
      if (success && !input_data_view.ReadPageLoadMetadata(&p_page_load_metadata))
        success = false;
      if (success && !input_data_view.ReadNewFeatures(&p_new_features))
        success = false;
      if (success && !input_data_view.ReadResources(&p_resources))
        success = false;
      if (success && !input_data_view.ReadRenderData(&p_render_data))
        success = false;
      if (success && !input_data_view.ReadCpuLoadTiming(&p_cpu_load_timing))
        success = false;
      if (success && !input_data_view.ReadNewDeferredResourceData(&p_new_deferred_resource_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageLoadMetrics::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateTiming(
std::move(p_page_load_timing), 
std::move(p_page_load_metadata), 
std::move(p_new_features), 
std::move(p_resources), 
std::move(p_render_data), 
std::move(p_cpu_load_timing), 
std::move(p_new_deferred_resource_data));
      return true;
    }
  }
  return false;
}

// static
bool PageLoadMetricsStubDispatch::AcceptWithResponder(
    PageLoadMetrics* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kPageLoadMetrics_UpdateTiming_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPageLoadMetricsValidationInfo[] = {
    {&internal::PageLoadMetrics_UpdateTiming_Params_Data::Validate,
     nullptr /* no response */},
};

bool PageLoadMetricsRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::page_load_metrics::mojom::PageLoadMetrics::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPageLoadMetricsValidationInfo);
}

}  // namespace mojom
}  // namespace page_load_metrics

namespace mojo {


// static
bool StructTraits<::page_load_metrics::mojom::DocumentTiming::DataView, ::page_load_metrics::mojom::DocumentTimingPtr>::Read(
    ::page_load_metrics::mojom::DocumentTiming::DataView input,
    ::page_load_metrics::mojom::DocumentTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::DocumentTimingPtr result(::page_load_metrics::mojom::DocumentTiming::New());
  
      if (success && !input.ReadDomContentLoadedEventStart(&result->dom_content_loaded_event_start))
        success = false;
      if (success && !input.ReadLoadEventStart(&result->load_event_start))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::PaintTiming::DataView, ::page_load_metrics::mojom::PaintTimingPtr>::Read(
    ::page_load_metrics::mojom::PaintTiming::DataView input,
    ::page_load_metrics::mojom::PaintTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::PaintTimingPtr result(::page_load_metrics::mojom::PaintTiming::New());
  
      if (success && !input.ReadFirstPaint(&result->first_paint))
        success = false;
      if (success && !input.ReadFirstImagePaint(&result->first_image_paint))
        success = false;
      if (success && !input.ReadFirstContentfulPaint(&result->first_contentful_paint))
        success = false;
      if (success && !input.ReadFirstMeaningfulPaint(&result->first_meaningful_paint))
        success = false;
      if (success && !input.ReadLargestImagePaint(&result->largest_image_paint))
        success = false;
      if (success)
        result->largest_image_paint_size = input.largest_image_paint_size();
      if (success && !input.ReadLargestTextPaint(&result->largest_text_paint))
        success = false;
      if (success)
        result->largest_text_paint_size = input.largest_text_paint_size();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::ParseTiming::DataView, ::page_load_metrics::mojom::ParseTimingPtr>::Read(
    ::page_load_metrics::mojom::ParseTiming::DataView input,
    ::page_load_metrics::mojom::ParseTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::ParseTimingPtr result(::page_load_metrics::mojom::ParseTiming::New());
  
      if (success && !input.ReadParseStart(&result->parse_start))
        success = false;
      if (success && !input.ReadParseStop(&result->parse_stop))
        success = false;
      if (success && !input.ReadParseBlockedOnScriptLoadDuration(&result->parse_blocked_on_script_load_duration))
        success = false;
      if (success && !input.ReadParseBlockedOnScriptLoadFromDocumentWriteDuration(&result->parse_blocked_on_script_load_from_document_write_duration))
        success = false;
      if (success && !input.ReadParseBlockedOnScriptExecutionDuration(&result->parse_blocked_on_script_execution_duration))
        success = false;
      if (success && !input.ReadParseBlockedOnScriptExecutionFromDocumentWriteDuration(&result->parse_blocked_on_script_execution_from_document_write_duration))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::InteractiveTiming::DataView, ::page_load_metrics::mojom::InteractiveTimingPtr>::Read(
    ::page_load_metrics::mojom::InteractiveTiming::DataView input,
    ::page_load_metrics::mojom::InteractiveTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::InteractiveTimingPtr result(::page_load_metrics::mojom::InteractiveTiming::New());
  
      if (success && !input.ReadInteractive(&result->interactive))
        success = false;
      if (success && !input.ReadInteractiveDetection(&result->interactive_detection))
        success = false;
      if (success && !input.ReadFirstInvalidatingInput(&result->first_invalidating_input))
        success = false;
      if (success && !input.ReadFirstInputDelay(&result->first_input_delay))
        success = false;
      if (success && !input.ReadFirstInputTimestamp(&result->first_input_timestamp))
        success = false;
      if (success && !input.ReadLongestInputDelay(&result->longest_input_delay))
        success = false;
      if (success && !input.ReadLongestInputTimestamp(&result->longest_input_timestamp))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::PageLoadTiming::DataView, ::page_load_metrics::mojom::PageLoadTimingPtr>::Read(
    ::page_load_metrics::mojom::PageLoadTiming::DataView input,
    ::page_load_metrics::mojom::PageLoadTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::PageLoadTimingPtr result(::page_load_metrics::mojom::PageLoadTiming::New());
  
      if (success && !input.ReadNavigationStart(&result->navigation_start))
        success = false;
      if (success && !input.ReadResponseStart(&result->response_start))
        success = false;
      if (success && !input.ReadDocumentTiming(&result->document_timing))
        success = false;
      if (success && !input.ReadInteractiveTiming(&result->interactive_timing))
        success = false;
      if (success && !input.ReadPaintTiming(&result->paint_timing))
        success = false;
      if (success && !input.ReadParseTiming(&result->parse_timing))
        success = false;
      if (success && !input.ReadInputToNavigationStart(&result->input_to_navigation_start))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::PageLoadMetadata::DataView, ::page_load_metrics::mojom::PageLoadMetadataPtr>::Read(
    ::page_load_metrics::mojom::PageLoadMetadata::DataView input,
    ::page_load_metrics::mojom::PageLoadMetadataPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::PageLoadMetadataPtr result(::page_load_metrics::mojom::PageLoadMetadata::New());
  
      if (success)
        result->behavior_flags = input.behavior_flags();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::PageLoadFeatures::DataView, ::page_load_metrics::mojom::PageLoadFeaturesPtr>::Read(
    ::page_load_metrics::mojom::PageLoadFeatures::DataView input,
    ::page_load_metrics::mojom::PageLoadFeaturesPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::PageLoadFeaturesPtr result(::page_load_metrics::mojom::PageLoadFeatures::New());
  
      if (success && !input.ReadFeatures(&result->features))
        success = false;
      if (success && !input.ReadCssProperties(&result->css_properties))
        success = false;
      if (success && !input.ReadAnimatedCssProperties(&result->animated_css_properties))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::ResourceDataUpdate::DataView, ::page_load_metrics::mojom::ResourceDataUpdatePtr>::Read(
    ::page_load_metrics::mojom::ResourceDataUpdate::DataView input,
    ::page_load_metrics::mojom::ResourceDataUpdatePtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::ResourceDataUpdatePtr result(::page_load_metrics::mojom::ResourceDataUpdate::New());
  
      if (success)
        result->request_id = input.request_id();
      if (success)
        result->delta_bytes = input.delta_bytes();
      if (success)
        result->received_data_length = input.received_data_length();
      if (success)
        result->encoded_body_length = input.encoded_body_length();
      if (success)
        result->decoded_body_length = input.decoded_body_length();
      if (success)
        result->is_complete = input.is_complete();
      if (success)
        result->data_reduction_proxy_compression_ratio_estimate = input.data_reduction_proxy_compression_ratio_estimate();
      if (success)
        result->reported_as_ad_resource = input.reported_as_ad_resource();
      if (success)
        result->is_main_frame_resource = input.is_main_frame_resource();
      if (success && !input.ReadCacheType(&result->cache_type))
        success = false;
      if (success)
        result->is_primary_frame_resource = input.is_primary_frame_resource();
      if (success && !input.ReadMimeType(&result->mime_type))
        success = false;
      if (success)
        result->is_secure_scheme = input.is_secure_scheme();
      if (success)
        result->proxy_used = input.proxy_used();
      if (success && !input.ReadOrigin(&result->origin))
        success = false;
      if (success)
        result->completed_before_fcp = input.completed_before_fcp();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::FrameRenderDataUpdate::DataView, ::page_load_metrics::mojom::FrameRenderDataUpdatePtr>::Read(
    ::page_load_metrics::mojom::FrameRenderDataUpdate::DataView input,
    ::page_load_metrics::mojom::FrameRenderDataUpdatePtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::FrameRenderDataUpdatePtr result(::page_load_metrics::mojom::FrameRenderDataUpdate::New());
  
      if (success)
        result->layout_shift_delta = input.layout_shift_delta();
      if (success)
        result->layout_shift_delta_before_input_or_scroll = input.layout_shift_delta_before_input_or_scroll();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::CpuTiming::DataView, ::page_load_metrics::mojom::CpuTimingPtr>::Read(
    ::page_load_metrics::mojom::CpuTiming::DataView input,
    ::page_load_metrics::mojom::CpuTimingPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::CpuTimingPtr result(::page_load_metrics::mojom::CpuTiming::New());
  
      if (success && !input.ReadTaskTime(&result->task_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::page_load_metrics::mojom::DeferredResourceCounts::DataView, ::page_load_metrics::mojom::DeferredResourceCountsPtr>::Read(
    ::page_load_metrics::mojom::DeferredResourceCounts::DataView input,
    ::page_load_metrics::mojom::DeferredResourceCountsPtr* output) {
  bool success = true;
  ::page_load_metrics::mojom::DeferredResourceCountsPtr result(::page_load_metrics::mojom::DeferredResourceCounts::New());
  
      if (success)
        result->deferred_frames = input.deferred_frames();
      if (success)
        result->frames_loaded_after_deferral = input.frames_loaded_after_deferral();
      if (success)
        result->deferred_images = input.deferred_images();
      if (success)
        result->images_loaded_after_deferral = input.images_loaded_after_deferral();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif