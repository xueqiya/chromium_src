// components/page_load_metrics/common/page_load_metrics.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace page_load_metrics {
namespace mojom {
namespace internal {
class  PageLoadMetrics_UpdateTiming_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageLoadMetrics_UpdateTiming_Params_Data));
      new (data()) PageLoadMetrics_UpdateTiming_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageLoadMetrics_UpdateTiming_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageLoadMetrics_UpdateTiming_Params_Data>(index_);
    }
    PageLoadMetrics_UpdateTiming_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PageLoadTiming_Data> page_load_timing;
  mojo::internal::Pointer<internal::PageLoadMetadata_Data> page_load_metadata;
  mojo::internal::Pointer<internal::PageLoadFeatures_Data> new_features;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ResourceDataUpdate_Data>>> resources;
  mojo::internal::Pointer<internal::FrameRenderDataUpdate_Data> render_data;
  mojo::internal::Pointer<internal::CpuTiming_Data> cpu_load_timing;
  mojo::internal::Pointer<internal::DeferredResourceCounts_Data> new_deferred_resource_data;

 private:
  PageLoadMetrics_UpdateTiming_Params_Data();
  ~PageLoadMetrics_UpdateTiming_Params_Data() = delete;
};
static_assert(sizeof(PageLoadMetrics_UpdateTiming_Params_Data) == 64,
              "Bad sizeof(PageLoadMetrics_UpdateTiming_Params_Data)");

}  // namespace internal
class PageLoadMetrics_UpdateTiming_ParamsDataView {
 public:
  PageLoadMetrics_UpdateTiming_ParamsDataView() {}

  PageLoadMetrics_UpdateTiming_ParamsDataView(
      internal::PageLoadMetrics_UpdateTiming_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPageLoadTimingDataView(
      PageLoadTimingDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPageLoadTiming(UserType* output) {
    auto* pointer = data_->page_load_timing.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::PageLoadTimingDataView>(
        pointer, output, context_);
  }
  inline void GetPageLoadMetadataDataView(
      PageLoadMetadataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPageLoadMetadata(UserType* output) {
    auto* pointer = data_->page_load_metadata.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::PageLoadMetadataDataView>(
        pointer, output, context_);
  }
  inline void GetNewFeaturesDataView(
      PageLoadFeaturesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNewFeatures(UserType* output) {
    auto* pointer = data_->new_features.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::PageLoadFeaturesDataView>(
        pointer, output, context_);
  }
  inline void GetResourcesDataView(
      mojo::ArrayDataView<ResourceDataUpdateDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResources(UserType* output) {
    auto* pointer = data_->resources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::page_load_metrics::mojom::ResourceDataUpdateDataView>>(
        pointer, output, context_);
  }
  inline void GetRenderDataDataView(
      FrameRenderDataUpdateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRenderData(UserType* output) {
    auto* pointer = data_->render_data.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::FrameRenderDataUpdateDataView>(
        pointer, output, context_);
  }
  inline void GetCpuLoadTimingDataView(
      CpuTimingDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCpuLoadTiming(UserType* output) {
    auto* pointer = data_->cpu_load_timing.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::CpuTimingDataView>(
        pointer, output, context_);
  }
  inline void GetNewDeferredResourceDataDataView(
      DeferredResourceCountsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNewDeferredResourceData(UserType* output) {
    auto* pointer = data_->new_deferred_resource_data.Get();
    return mojo::internal::Deserialize<::page_load_metrics::mojom::DeferredResourceCountsDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageLoadMetrics_UpdateTiming_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetPageLoadTimingDataView(
    PageLoadTimingDataView* output) {
  auto pointer = data_->page_load_timing.Get();
  *output = PageLoadTimingDataView(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetPageLoadMetadataDataView(
    PageLoadMetadataDataView* output) {
  auto pointer = data_->page_load_metadata.Get();
  *output = PageLoadMetadataDataView(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetNewFeaturesDataView(
    PageLoadFeaturesDataView* output) {
  auto pointer = data_->new_features.Get();
  *output = PageLoadFeaturesDataView(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetResourcesDataView(
    mojo::ArrayDataView<ResourceDataUpdateDataView>* output) {
  auto pointer = data_->resources.Get();
  *output = mojo::ArrayDataView<ResourceDataUpdateDataView>(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetRenderDataDataView(
    FrameRenderDataUpdateDataView* output) {
  auto pointer = data_->render_data.Get();
  *output = FrameRenderDataUpdateDataView(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetCpuLoadTimingDataView(
    CpuTimingDataView* output) {
  auto pointer = data_->cpu_load_timing.Get();
  *output = CpuTimingDataView(pointer, context_);
}
inline void PageLoadMetrics_UpdateTiming_ParamsDataView::GetNewDeferredResourceDataDataView(
    DeferredResourceCountsDataView* output) {
  auto pointer = data_->new_deferred_resource_data.Get();
  *output = DeferredResourceCountsDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace page_load_metrics

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_PARAMS_DATA_H_