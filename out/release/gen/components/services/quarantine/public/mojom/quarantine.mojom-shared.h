// components/services/quarantine/public/mojom/quarantine.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_QUARANTINE_PUBLIC_MOJOM_QUARANTINE_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_QUARANTINE_PUBLIC_MOJOM_QUARANTINE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/services/quarantine/public/mojom/quarantine.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file_path.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace quarantine {
namespace mojom {


}  // namespace mojom
}  // namespace quarantine

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace quarantine {
namespace mojom {


enum class QuarantineFileResult : int32_t {
  
  OK,
  
  ACCESS_DENIED,
  
  BLOCKED_BY_POLICY,
  
  ANNOTATION_FAILED,
  
  FILE_MISSING,
  
  SECURITY_CHECK_FAILED,
  
  VIRUS_INFECTED,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, QuarantineFileResult value);
inline bool IsKnownEnumValue(QuarantineFileResult value) {
  return internal::QuarantineFileResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class QuarantineInterfaceBase {};

using QuarantinePtrDataView =
    mojo::InterfacePtrDataView<QuarantineInterfaceBase>;
using QuarantineRequestDataView =
    mojo::InterfaceRequestDataView<QuarantineInterfaceBase>;
using QuarantineAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<QuarantineInterfaceBase>;
using QuarantineAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<QuarantineInterfaceBase>;


}  // namespace mojom
}  // namespace quarantine

namespace std {

template <>
struct hash<::quarantine::mojom::QuarantineFileResult>
    : public mojo::internal::EnumHashImpl<::quarantine::mojom::QuarantineFileResult> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::quarantine::mojom::QuarantineFileResult, ::quarantine::mojom::QuarantineFileResult> {
  static ::quarantine::mojom::QuarantineFileResult ToMojom(::quarantine::mojom::QuarantineFileResult input) { return input; }
  static bool FromMojom(::quarantine::mojom::QuarantineFileResult input, ::quarantine::mojom::QuarantineFileResult* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::quarantine::mojom::QuarantineFileResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::quarantine::mojom::QuarantineFileResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::quarantine::mojom::QuarantineFileResult>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace quarantine {
namespace mojom {


}  // namespace mojom
}  // namespace quarantine

#endif  // COMPONENTS_SERVICES_QUARANTINE_PUBLIC_MOJOM_QUARANTINE_MOJOM_SHARED_H_