// components/services/print_compositor/public/mojom/print_compositor.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_H_
#define COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/services/print_compositor/public/mojom/print_compositor.mojom-shared.h"
#include "components/services/print_compositor/public/mojom/print_compositor.mojom-forward.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-forward.h"
#include "mojo/public/mojom/base/shared_memory.mojom-forward.h"
#include "url/mojom/url.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace printing {
namespace mojom {

class PrintCompositorProxy;

template <typename ImplRefTraits>
class PrintCompositorStub;

class PrintCompositorRequestValidator;
class PrintCompositorResponseValidator;


class  PrintCompositor
    : public PrintCompositorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PrintCompositorInterfaceBase;
  using Proxy_ = PrintCompositorProxy;

  template <typename ImplRefTraits>
  using Stub_ = PrintCompositorStub<ImplRefTraits>;

  using RequestValidator_ = PrintCompositorRequestValidator;
  using ResponseValidator_ = PrintCompositorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSetDiscardableSharedMemoryManagerMinVersion = 0,
    kNotifyUnavailableSubframeMinVersion = 0,
    kAddSubframeContentMinVersion = 0,
    kCompositePageToPdfMinVersion = 0,
    kCompositeDocumentToPdfMinVersion = 0,
    kPrepareForDocumentToPdfMinVersion = 0,
    kCompleteDocumentToPdfMinVersion = 0,
    kSetWebContentsURLMinVersion = 0,
    kSetUserAgentMinVersion = 0,
  };
  
  using Status = PrintCompositor_Status;
  virtual ~PrintCompositor() {}

  
  virtual void SetDiscardableSharedMemoryManager(mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> manager) = 0;

  
  virtual void NotifyUnavailableSubframe(uint64_t frame_guid) = 0;

  
  virtual void AddSubframeContent(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion serialized_content, const base::flat_map<uint32_t, uint64_t>& subframe_content_info) = 0;


  using CompositePageToPdfCallback = base::OnceCallback<void(PrintCompositor::Status, ::base::ReadOnlySharedMemoryRegion)>;
  
  virtual void CompositePageToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositePageToPdfCallback callback) = 0;


  using CompositeDocumentToPdfCallback = base::OnceCallback<void(PrintCompositor::Status, ::base::ReadOnlySharedMemoryRegion)>;
  
  virtual void CompositeDocumentToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositeDocumentToPdfCallback callback) = 0;


  using PrepareForDocumentToPdfCallback = base::OnceCallback<void(PrintCompositor::Status)>;
  
  virtual void PrepareForDocumentToPdf(PrepareForDocumentToPdfCallback callback) = 0;


  using CompleteDocumentToPdfCallback = base::OnceCallback<void(PrintCompositor::Status, ::base::ReadOnlySharedMemoryRegion)>;
  
  virtual void CompleteDocumentToPdf(uint32_t pages_count, CompleteDocumentToPdfCallback callback) = 0;

  
  virtual void SetWebContentsURL(const ::GURL& url) = 0;

  
  virtual void SetUserAgent(const std::string& user_agent) = 0;
};



class  PrintCompositorProxy
    : public PrintCompositor {
 public:
  using InterfaceType = PrintCompositor;

  explicit PrintCompositorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetDiscardableSharedMemoryManager(mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> manager) final;
  
  void NotifyUnavailableSubframe(uint64_t frame_guid) final;
  
  void AddSubframeContent(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion serialized_content, const base::flat_map<uint32_t, uint64_t>& subframe_content_info) final;
  
  void CompositePageToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositePageToPdfCallback callback) final;
  
  void CompositeDocumentToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositeDocumentToPdfCallback callback) final;
  
  void PrepareForDocumentToPdf(PrepareForDocumentToPdfCallback callback) final;
  
  void CompleteDocumentToPdf(uint32_t pages_count, CompleteDocumentToPdfCallback callback) final;
  
  void SetWebContentsURL(const ::GURL& url) final;
  
  void SetUserAgent(const std::string& user_agent) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  PrintCompositorStubDispatch {
 public:
  static bool Accept(PrintCompositor* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PrintCompositor* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PrintCompositor>>
class PrintCompositorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PrintCompositorStub() {}
  ~PrintCompositorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintCompositorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrintCompositorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PrintCompositorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PrintCompositorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace printing

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_H_