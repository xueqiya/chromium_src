// components/services/print_compositor/public/mojom/print_compositor.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_TEST_UTILS_H_

#include "components/services/print_compositor/public/mojom/print_compositor.mojom.h"


namespace printing {
namespace mojom {


class  PrintCompositorInterceptorForTesting : public PrintCompositor {
  virtual PrintCompositor* GetForwardingInterface() = 0;
  void SetDiscardableSharedMemoryManager(mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> manager) override;
  void NotifyUnavailableSubframe(uint64_t frame_guid) override;
  void AddSubframeContent(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion serialized_content, const base::flat_map<uint32_t, uint64_t>& subframe_content_info) override;
  void CompositePageToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositePageToPdfCallback callback) override;
  void CompositeDocumentToPdf(uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, CompositeDocumentToPdfCallback callback) override;
  void PrepareForDocumentToPdf(PrepareForDocumentToPdfCallback callback) override;
  void CompleteDocumentToPdf(uint32_t pages_count, CompleteDocumentToPdfCallback callback) override;
  void SetWebContentsURL(const ::GURL& url) override;
  void SetUserAgent(const std::string& user_agent) override;
};
class  PrintCompositorAsyncWaiter {
 public:
  explicit PrintCompositorAsyncWaiter(PrintCompositor* proxy);
  ~PrintCompositorAsyncWaiter();
  void CompositePageToPdf(
      uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, PrintCompositor::Status* out_status, ::base::ReadOnlySharedMemoryRegion* out_pdf_region);
  void CompositeDocumentToPdf(
      uint64_t frame_guid, ::base::ReadOnlySharedMemoryRegion sk_region, const base::flat_map<uint32_t, uint64_t>& subframe_content_info, PrintCompositor::Status* out_status, ::base::ReadOnlySharedMemoryRegion* out_pdf_region);
  void PrepareForDocumentToPdf(
      PrintCompositor::Status* out_status);
  void CompleteDocumentToPdf(
      uint32_t pages_count, PrintCompositor::Status* out_status, ::base::ReadOnlySharedMemoryRegion* out_pdf_region);

 private:
  PrintCompositor* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PrintCompositorAsyncWaiter);
};




}  // namespace mojom
}  // namespace printing

#endif  // COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_TEST_UTILS_H_