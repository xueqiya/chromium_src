// components/services/print_compositor/public/mojom/print_compositor.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace printing {
namespace mojom {
namespace internal {
class  PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data));
      new (data()) PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data>(index_);
    }
    PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data manager;

 private:
  PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data();
  ~PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data) == 16,
              "Bad sizeof(PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data)");
class  PrintCompositor_NotifyUnavailableSubframe_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_NotifyUnavailableSubframe_Params_Data));
      new (data()) PrintCompositor_NotifyUnavailableSubframe_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_NotifyUnavailableSubframe_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_NotifyUnavailableSubframe_Params_Data>(index_);
    }
    PrintCompositor_NotifyUnavailableSubframe_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t frame_guid;

 private:
  PrintCompositor_NotifyUnavailableSubframe_Params_Data();
  ~PrintCompositor_NotifyUnavailableSubframe_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_NotifyUnavailableSubframe_Params_Data) == 16,
              "Bad sizeof(PrintCompositor_NotifyUnavailableSubframe_Params_Data)");
class  PrintCompositor_AddSubframeContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_AddSubframeContent_Params_Data));
      new (data()) PrintCompositor_AddSubframeContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_AddSubframeContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_AddSubframeContent_Params_Data>(index_);
    }
    PrintCompositor_AddSubframeContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t frame_guid;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> serialized_content;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, uint64_t>> subframe_content_info;

 private:
  PrintCompositor_AddSubframeContent_Params_Data();
  ~PrintCompositor_AddSubframeContent_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_AddSubframeContent_Params_Data) == 32,
              "Bad sizeof(PrintCompositor_AddSubframeContent_Params_Data)");
class  PrintCompositor_CompositePageToPdf_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompositePageToPdf_Params_Data));
      new (data()) PrintCompositor_CompositePageToPdf_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompositePageToPdf_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompositePageToPdf_Params_Data>(index_);
    }
    PrintCompositor_CompositePageToPdf_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t frame_guid;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> sk_region;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, uint64_t>> subframe_content_info;

 private:
  PrintCompositor_CompositePageToPdf_Params_Data();
  ~PrintCompositor_CompositePageToPdf_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompositePageToPdf_Params_Data) == 32,
              "Bad sizeof(PrintCompositor_CompositePageToPdf_Params_Data)");
class  PrintCompositor_CompositePageToPdf_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompositePageToPdf_ResponseParams_Data));
      new (data()) PrintCompositor_CompositePageToPdf_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompositePageToPdf_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompositePageToPdf_ResponseParams_Data>(index_);
    }
    PrintCompositor_CompositePageToPdf_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> pdf_region;

 private:
  PrintCompositor_CompositePageToPdf_ResponseParams_Data();
  ~PrintCompositor_CompositePageToPdf_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompositePageToPdf_ResponseParams_Data) == 24,
              "Bad sizeof(PrintCompositor_CompositePageToPdf_ResponseParams_Data)");
class  PrintCompositor_CompositeDocumentToPdf_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompositeDocumentToPdf_Params_Data));
      new (data()) PrintCompositor_CompositeDocumentToPdf_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompositeDocumentToPdf_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompositeDocumentToPdf_Params_Data>(index_);
    }
    PrintCompositor_CompositeDocumentToPdf_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t frame_guid;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> sk_region;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, uint64_t>> subframe_content_info;

 private:
  PrintCompositor_CompositeDocumentToPdf_Params_Data();
  ~PrintCompositor_CompositeDocumentToPdf_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompositeDocumentToPdf_Params_Data) == 32,
              "Bad sizeof(PrintCompositor_CompositeDocumentToPdf_Params_Data)");
class  PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data));
      new (data()) PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data>(index_);
    }
    PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> pdf_region;

 private:
  PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data();
  ~PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data) == 24,
              "Bad sizeof(PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data)");
class  PrintCompositor_PrepareForDocumentToPdf_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_PrepareForDocumentToPdf_Params_Data));
      new (data()) PrintCompositor_PrepareForDocumentToPdf_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_PrepareForDocumentToPdf_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_PrepareForDocumentToPdf_Params_Data>(index_);
    }
    PrintCompositor_PrepareForDocumentToPdf_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PrintCompositor_PrepareForDocumentToPdf_Params_Data();
  ~PrintCompositor_PrepareForDocumentToPdf_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_PrepareForDocumentToPdf_Params_Data) == 8,
              "Bad sizeof(PrintCompositor_PrepareForDocumentToPdf_Params_Data)");
class  PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data));
      new (data()) PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data>(index_);
    }
    PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data();
  ~PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data) == 16,
              "Bad sizeof(PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data)");
class  PrintCompositor_CompleteDocumentToPdf_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompleteDocumentToPdf_Params_Data));
      new (data()) PrintCompositor_CompleteDocumentToPdf_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompleteDocumentToPdf_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompleteDocumentToPdf_Params_Data>(index_);
    }
    PrintCompositor_CompleteDocumentToPdf_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t pages_count;
  uint8_t padfinal_[4];

 private:
  PrintCompositor_CompleteDocumentToPdf_Params_Data();
  ~PrintCompositor_CompleteDocumentToPdf_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompleteDocumentToPdf_Params_Data) == 16,
              "Bad sizeof(PrintCompositor_CompleteDocumentToPdf_Params_Data)");
class  PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data));
      new (data()) PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data>(index_);
    }
    PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> pdf_region;

 private:
  PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data();
  ~PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data) == 24,
              "Bad sizeof(PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data)");
class  PrintCompositor_SetWebContentsURL_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_SetWebContentsURL_Params_Data));
      new (data()) PrintCompositor_SetWebContentsURL_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_SetWebContentsURL_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_SetWebContentsURL_Params_Data>(index_);
    }
    PrintCompositor_SetWebContentsURL_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  PrintCompositor_SetWebContentsURL_Params_Data();
  ~PrintCompositor_SetWebContentsURL_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_SetWebContentsURL_Params_Data) == 16,
              "Bad sizeof(PrintCompositor_SetWebContentsURL_Params_Data)");
class  PrintCompositor_SetUserAgent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintCompositor_SetUserAgent_Params_Data));
      new (data()) PrintCompositor_SetUserAgent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintCompositor_SetUserAgent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintCompositor_SetUserAgent_Params_Data>(index_);
    }
    PrintCompositor_SetUserAgent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> user_agent;

 private:
  PrintCompositor_SetUserAgent_Params_Data();
  ~PrintCompositor_SetUserAgent_Params_Data() = delete;
};
static_assert(sizeof(PrintCompositor_SetUserAgent_Params_Data) == 16,
              "Bad sizeof(PrintCompositor_SetUserAgent_Params_Data)");

}  // namespace internal
class PrintCompositor_SetDiscardableSharedMemoryManager_ParamsDataView {
 public:
  PrintCompositor_SetDiscardableSharedMemoryManager_ParamsDataView() {}

  PrintCompositor_SetDiscardableSharedMemoryManager_ParamsDataView(
      internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::discardable_memory::mojom::DiscardableSharedMemoryManagerInterfaceBase>>(
            &data_->manager, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_NotifyUnavailableSubframe_ParamsDataView {
 public:
  PrintCompositor_NotifyUnavailableSubframe_ParamsDataView() {}

  PrintCompositor_NotifyUnavailableSubframe_ParamsDataView(
      internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t frame_guid() const {
    return data_->frame_guid;
  }
 private:
  internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data* data_ = nullptr;
};

class PrintCompositor_AddSubframeContent_ParamsDataView {
 public:
  PrintCompositor_AddSubframeContent_ParamsDataView() {}

  PrintCompositor_AddSubframeContent_ParamsDataView(
      internal::PrintCompositor_AddSubframeContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint64_t frame_guid() const {
    return data_->frame_guid;
  }
  inline void GetSerializedContentDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSerializedContent(UserType* output) {
    auto* pointer = data_->serialized_content.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetSubframeContentInfoDataView(
      mojo::MapDataView<uint32_t, uint64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubframeContentInfo(UserType* output) {
    auto* pointer = data_->subframe_content_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, uint64_t>>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_AddSubframeContent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_CompositePageToPdf_ParamsDataView {
 public:
  PrintCompositor_CompositePageToPdf_ParamsDataView() {}

  PrintCompositor_CompositePageToPdf_ParamsDataView(
      internal::PrintCompositor_CompositePageToPdf_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint64_t frame_guid() const {
    return data_->frame_guid;
  }
  inline void GetSkRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSkRegion(UserType* output) {
    auto* pointer = data_->sk_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetSubframeContentInfoDataView(
      mojo::MapDataView<uint32_t, uint64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubframeContentInfo(UserType* output) {
    auto* pointer = data_->subframe_content_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, uint64_t>>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_CompositePageToPdf_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_CompositePageToPdf_ResponseParamsDataView {
 public:
  PrintCompositor_CompositePageToPdf_ResponseParamsDataView() {}

  PrintCompositor_CompositePageToPdf_ResponseParamsDataView(
      internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::printing::mojom::PrintCompositor_Status>(
        data_value, output);
  }

  PrintCompositor_Status status() const {
    return static_cast<PrintCompositor_Status>(data_->status);
  }
  inline void GetPdfRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPdfRegion(UserType* output) {
    auto* pointer = data_->pdf_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_CompositeDocumentToPdf_ParamsDataView {
 public:
  PrintCompositor_CompositeDocumentToPdf_ParamsDataView() {}

  PrintCompositor_CompositeDocumentToPdf_ParamsDataView(
      internal::PrintCompositor_CompositeDocumentToPdf_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint64_t frame_guid() const {
    return data_->frame_guid;
  }
  inline void GetSkRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSkRegion(UserType* output) {
    auto* pointer = data_->sk_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetSubframeContentInfoDataView(
      mojo::MapDataView<uint32_t, uint64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubframeContentInfo(UserType* output) {
    auto* pointer = data_->subframe_content_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, uint64_t>>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_CompositeDocumentToPdf_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_CompositeDocumentToPdf_ResponseParamsDataView {
 public:
  PrintCompositor_CompositeDocumentToPdf_ResponseParamsDataView() {}

  PrintCompositor_CompositeDocumentToPdf_ResponseParamsDataView(
      internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::printing::mojom::PrintCompositor_Status>(
        data_value, output);
  }

  PrintCompositor_Status status() const {
    return static_cast<PrintCompositor_Status>(data_->status);
  }
  inline void GetPdfRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPdfRegion(UserType* output) {
    auto* pointer = data_->pdf_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_PrepareForDocumentToPdf_ParamsDataView {
 public:
  PrintCompositor_PrepareForDocumentToPdf_ParamsDataView() {}

  PrintCompositor_PrepareForDocumentToPdf_ParamsDataView(
      internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data* data_ = nullptr;
};

class PrintCompositor_PrepareForDocumentToPdf_ResponseParamsDataView {
 public:
  PrintCompositor_PrepareForDocumentToPdf_ResponseParamsDataView() {}

  PrintCompositor_PrepareForDocumentToPdf_ResponseParamsDataView(
      internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::printing::mojom::PrintCompositor_Status>(
        data_value, output);
  }

  PrintCompositor_Status status() const {
    return static_cast<PrintCompositor_Status>(data_->status);
  }
 private:
  internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data* data_ = nullptr;
};

class PrintCompositor_CompleteDocumentToPdf_ParamsDataView {
 public:
  PrintCompositor_CompleteDocumentToPdf_ParamsDataView() {}

  PrintCompositor_CompleteDocumentToPdf_ParamsDataView(
      internal::PrintCompositor_CompleteDocumentToPdf_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t pages_count() const {
    return data_->pages_count;
  }
 private:
  internal::PrintCompositor_CompleteDocumentToPdf_Params_Data* data_ = nullptr;
};

class PrintCompositor_CompleteDocumentToPdf_ResponseParamsDataView {
 public:
  PrintCompositor_CompleteDocumentToPdf_ResponseParamsDataView() {}

  PrintCompositor_CompleteDocumentToPdf_ResponseParamsDataView(
      internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::printing::mojom::PrintCompositor_Status>(
        data_value, output);
  }

  PrintCompositor_Status status() const {
    return static_cast<PrintCompositor_Status>(data_->status);
  }
  inline void GetPdfRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPdfRegion(UserType* output) {
    auto* pointer = data_->pdf_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_SetWebContentsURL_ParamsDataView {
 public:
  PrintCompositor_SetWebContentsURL_ParamsDataView() {}

  PrintCompositor_SetWebContentsURL_ParamsDataView(
      internal::PrintCompositor_SetWebContentsURL_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_SetWebContentsURL_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PrintCompositor_SetUserAgent_ParamsDataView {
 public:
  PrintCompositor_SetUserAgent_ParamsDataView() {}

  PrintCompositor_SetUserAgent_ParamsDataView(
      internal::PrintCompositor_SetUserAgent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUserAgent(UserType* output) {
    auto* pointer = data_->user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PrintCompositor_SetUserAgent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};






inline void PrintCompositor_AddSubframeContent_ParamsDataView::GetSerializedContentDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->serialized_content.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void PrintCompositor_AddSubframeContent_ParamsDataView::GetSubframeContentInfoDataView(
    mojo::MapDataView<uint32_t, uint64_t>* output) {
  auto pointer = data_->subframe_content_info.Get();
  *output = mojo::MapDataView<uint32_t, uint64_t>(pointer, context_);
}


inline void PrintCompositor_CompositePageToPdf_ParamsDataView::GetSkRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->sk_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void PrintCompositor_CompositePageToPdf_ParamsDataView::GetSubframeContentInfoDataView(
    mojo::MapDataView<uint32_t, uint64_t>* output) {
  auto pointer = data_->subframe_content_info.Get();
  *output = mojo::MapDataView<uint32_t, uint64_t>(pointer, context_);
}


inline void PrintCompositor_CompositePageToPdf_ResponseParamsDataView::GetPdfRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->pdf_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}


inline void PrintCompositor_CompositeDocumentToPdf_ParamsDataView::GetSkRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->sk_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void PrintCompositor_CompositeDocumentToPdf_ParamsDataView::GetSubframeContentInfoDataView(
    mojo::MapDataView<uint32_t, uint64_t>* output) {
  auto pointer = data_->subframe_content_info.Get();
  *output = mojo::MapDataView<uint32_t, uint64_t>(pointer, context_);
}


inline void PrintCompositor_CompositeDocumentToPdf_ResponseParamsDataView::GetPdfRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->pdf_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}








inline void PrintCompositor_CompleteDocumentToPdf_ResponseParamsDataView::GetPdfRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->pdf_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}


inline void PrintCompositor_SetWebContentsURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void PrintCompositor_SetUserAgent_ParamsDataView::GetUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_agent.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace printing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_PARAMS_DATA_H_