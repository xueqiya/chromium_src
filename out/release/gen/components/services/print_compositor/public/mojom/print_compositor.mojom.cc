// components/services/print_compositor/public/mojom/print_compositor.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/services/print_compositor/public/mojom/print_compositor.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/services/print_compositor/public/mojom/print_compositor.mojom-params-data.h"
#include "components/services/print_compositor/public/mojom/print_compositor.mojom-shared-message-ids.h"

#include "components/services/print_compositor/public/mojom/print_compositor.mojom-import-headers.h"


#ifndef COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace printing {
namespace mojom {
const char PrintCompositor::Name_[] = "printing.mojom.PrintCompositor";

class PrintCompositor_CompositePageToPdf_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrintCompositor_CompositePageToPdf_ForwardToCallback(
      PrintCompositor::CompositePageToPdfCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrintCompositor::CompositePageToPdfCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompositePageToPdf_ForwardToCallback);
};

class PrintCompositor_CompositeDocumentToPdf_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrintCompositor_CompositeDocumentToPdf_ForwardToCallback(
      PrintCompositor::CompositeDocumentToPdfCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrintCompositor::CompositeDocumentToPdfCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompositeDocumentToPdf_ForwardToCallback);
};

class PrintCompositor_PrepareForDocumentToPdf_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrintCompositor_PrepareForDocumentToPdf_ForwardToCallback(
      PrintCompositor::PrepareForDocumentToPdfCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrintCompositor::PrepareForDocumentToPdfCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_PrepareForDocumentToPdf_ForwardToCallback);
};

class PrintCompositor_CompleteDocumentToPdf_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrintCompositor_CompleteDocumentToPdf_ForwardToCallback(
      PrintCompositor::CompleteDocumentToPdfCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrintCompositor::CompleteDocumentToPdfCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompleteDocumentToPdf_ForwardToCallback);
};

PrintCompositorProxy::PrintCompositorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PrintCompositorProxy::SetDiscardableSharedMemoryManager(
    mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> in_manager) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::SetDiscardableSharedMemoryManager");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_SetDiscardableSharedMemoryManager_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::discardable_memory::mojom::DiscardableSharedMemoryManagerInterfaceBase>>(
      in_manager, &params->manager, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->manager),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid manager in PrintCompositor.SetDiscardableSharedMemoryManager request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("SetDiscardableSharedMemoryManager");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PrintCompositorProxy::NotifyUnavailableSubframe(
    uint64_t in_frame_guid) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::NotifyUnavailableSubframe");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_NotifyUnavailableSubframe_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->frame_guid = in_frame_guid;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("NotifyUnavailableSubframe");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PrintCompositorProxy::AddSubframeContent(
    uint64_t in_frame_guid, ::base::ReadOnlySharedMemoryRegion in_serialized_content, const base::flat_map<uint32_t, uint64_t>& in_subframe_content_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::AddSubframeContent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_AddSubframeContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_AddSubframeContent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->frame_guid = in_frame_guid;
  typename decltype(params->serialized_content)::BaseType::BufferWriter
      serialized_content_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_serialized_content, buffer, &serialized_content_writer, &serialization_context);
  params->serialized_content.Set(
      serialized_content_writer.is_null() ? nullptr : serialized_content_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->serialized_content.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null serialized_content in PrintCompositor.AddSubframeContent request");
  typename decltype(params->subframe_content_info)::BaseType::BufferWriter
      subframe_content_info_writer;
  const mojo::internal::ContainerValidateParams subframe_content_info_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::MapDataView<uint32_t, uint64_t>>(
      in_subframe_content_info, buffer, &subframe_content_info_writer, &subframe_content_info_validate_params,
      &serialization_context);
  params->subframe_content_info.Set(
      subframe_content_info_writer.is_null() ? nullptr : subframe_content_info_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->subframe_content_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null subframe_content_info in PrintCompositor.AddSubframeContent request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("AddSubframeContent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PrintCompositorProxy::CompositePageToPdf(
    uint64_t in_frame_guid, ::base::ReadOnlySharedMemoryRegion in_sk_region, const base::flat_map<uint32_t, uint64_t>& in_subframe_content_info, CompositePageToPdfCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::CompositePageToPdf");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompositePageToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompositePageToPdf_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->frame_guid = in_frame_guid;
  typename decltype(params->sk_region)::BaseType::BufferWriter
      sk_region_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_sk_region, buffer, &sk_region_writer, &serialization_context);
  params->sk_region.Set(
      sk_region_writer.is_null() ? nullptr : sk_region_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sk_region.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sk_region in PrintCompositor.CompositePageToPdf request");
  typename decltype(params->subframe_content_info)::BaseType::BufferWriter
      subframe_content_info_writer;
  const mojo::internal::ContainerValidateParams subframe_content_info_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::MapDataView<uint32_t, uint64_t>>(
      in_subframe_content_info, buffer, &subframe_content_info_writer, &subframe_content_info_validate_params,
      &serialization_context);
  params->subframe_content_info.Set(
      subframe_content_info_writer.is_null() ? nullptr : subframe_content_info_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->subframe_content_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null subframe_content_info in PrintCompositor.CompositePageToPdf request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompositePageToPdf");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PrintCompositor_CompositePageToPdf_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PrintCompositorProxy::CompositeDocumentToPdf(
    uint64_t in_frame_guid, ::base::ReadOnlySharedMemoryRegion in_sk_region, const base::flat_map<uint32_t, uint64_t>& in_subframe_content_info, CompositeDocumentToPdfCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::CompositeDocumentToPdf");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompositeDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompositeDocumentToPdf_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->frame_guid = in_frame_guid;
  typename decltype(params->sk_region)::BaseType::BufferWriter
      sk_region_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_sk_region, buffer, &sk_region_writer, &serialization_context);
  params->sk_region.Set(
      sk_region_writer.is_null() ? nullptr : sk_region_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sk_region.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sk_region in PrintCompositor.CompositeDocumentToPdf request");
  typename decltype(params->subframe_content_info)::BaseType::BufferWriter
      subframe_content_info_writer;
  const mojo::internal::ContainerValidateParams subframe_content_info_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::MapDataView<uint32_t, uint64_t>>(
      in_subframe_content_info, buffer, &subframe_content_info_writer, &subframe_content_info_validate_params,
      &serialization_context);
  params->subframe_content_info.Set(
      subframe_content_info_writer.is_null() ? nullptr : subframe_content_info_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->subframe_content_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null subframe_content_info in PrintCompositor.CompositeDocumentToPdf request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompositeDocumentToPdf");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PrintCompositor_CompositeDocumentToPdf_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PrintCompositorProxy::PrepareForDocumentToPdf(
    PrepareForDocumentToPdfCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::PrepareForDocumentToPdf");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_PrepareForDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("PrepareForDocumentToPdf");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PrintCompositor_PrepareForDocumentToPdf_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PrintCompositorProxy::CompleteDocumentToPdf(
    uint32_t in_pages_count, CompleteDocumentToPdfCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::CompleteDocumentToPdf");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompleteDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompleteDocumentToPdf_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->pages_count = in_pages_count;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompleteDocumentToPdf");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PrintCompositor_CompleteDocumentToPdf_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PrintCompositorProxy::SetWebContentsURL(
    const ::GURL& in_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::SetWebContentsURL");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_SetWebContentsURL_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_SetWebContentsURL_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->url)::BaseType::BufferWriter
      url_writer;
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, buffer, &url_writer, &serialization_context);
  params->url.Set(
      url_writer.is_null() ? nullptr : url_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in PrintCompositor.SetWebContentsURL request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("SetWebContentsURL");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PrintCompositorProxy::SetUserAgent(
    const std::string& in_user_agent) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "printing::mojom::PrintCompositor::SetUserAgent");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_SetUserAgent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_SetUserAgent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->user_agent)::BaseType::BufferWriter
      user_agent_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_user_agent, buffer, &user_agent_writer, &serialization_context);
  params->user_agent.Set(
      user_agent_writer.is_null() ? nullptr : user_agent_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->user_agent.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null user_agent in PrintCompositor.SetUserAgent request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("SetUserAgent");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class PrintCompositor_CompositePageToPdf_ProxyToResponder {
 public:
  static PrintCompositor::CompositePageToPdfCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PrintCompositor_CompositePageToPdf_ProxyToResponder> proxy(
        new PrintCompositor_CompositePageToPdf_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&PrintCompositor_CompositePageToPdf_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PrintCompositor_CompositePageToPdf_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PrintCompositor_CompositePageToPdf_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PrintCompositor::CompositePageToPdfCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompositePageToPdf_ProxyToResponder);
};

bool PrintCompositor_CompositePageToPdf_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "printing::mojom::PrintCompositor::CompositePageToPdfCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  PrintCompositor::Status p_status{};
  ::base::ReadOnlySharedMemoryRegion p_pdf_region{};
  PrintCompositor_CompositePageToPdf_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadPdfRegion(&p_pdf_region))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PrintCompositor::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_pdf_region));
  return true;
}

void PrintCompositor_CompositePageToPdf_ProxyToResponder::Run(
    PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompositePageToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::printing::mojom::PrintCompositor_Status>(
      in_status, &params->status);
  typename decltype(params->pdf_region)::BaseType::BufferWriter
      pdf_region_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_pdf_region, buffer, &pdf_region_writer, &serialization_context);
  params->pdf_region.Set(
      pdf_region_writer.is_null() ? nullptr : pdf_region_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)printing::mojom::PrintCompositor::CompositePageToPdfCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompositePageToPdf");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PrintCompositor_CompositeDocumentToPdf_ProxyToResponder {
 public:
  static PrintCompositor::CompositeDocumentToPdfCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PrintCompositor_CompositeDocumentToPdf_ProxyToResponder> proxy(
        new PrintCompositor_CompositeDocumentToPdf_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&PrintCompositor_CompositeDocumentToPdf_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PrintCompositor_CompositeDocumentToPdf_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PrintCompositor_CompositeDocumentToPdf_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PrintCompositor::CompositeDocumentToPdfCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompositeDocumentToPdf_ProxyToResponder);
};

bool PrintCompositor_CompositeDocumentToPdf_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "printing::mojom::PrintCompositor::CompositeDocumentToPdfCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  PrintCompositor::Status p_status{};
  ::base::ReadOnlySharedMemoryRegion p_pdf_region{};
  PrintCompositor_CompositeDocumentToPdf_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadPdfRegion(&p_pdf_region))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PrintCompositor::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_pdf_region));
  return true;
}

void PrintCompositor_CompositeDocumentToPdf_ProxyToResponder::Run(
    PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompositeDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::printing::mojom::PrintCompositor_Status>(
      in_status, &params->status);
  typename decltype(params->pdf_region)::BaseType::BufferWriter
      pdf_region_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_pdf_region, buffer, &pdf_region_writer, &serialization_context);
  params->pdf_region.Set(
      pdf_region_writer.is_null() ? nullptr : pdf_region_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)printing::mojom::PrintCompositor::CompositeDocumentToPdfCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompositeDocumentToPdf");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder {
 public:
  static PrintCompositor::PrepareForDocumentToPdfCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder> proxy(
        new PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PrintCompositor::PrepareForDocumentToPdfCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PrintCompositor::Status in_status);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder);
};

bool PrintCompositor_PrepareForDocumentToPdf_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "printing::mojom::PrintCompositor::PrepareForDocumentToPdfCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  PrintCompositor::Status p_status{};
  PrintCompositor_PrepareForDocumentToPdf_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PrintCompositor::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status));
  return true;
}

void PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder::Run(
    PrintCompositor::Status in_status) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_PrepareForDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::printing::mojom::PrintCompositor_Status>(
      in_status, &params->status);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)printing::mojom::PrintCompositor::PrepareForDocumentToPdfCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("PrepareForDocumentToPdf");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PrintCompositor_CompleteDocumentToPdf_ProxyToResponder {
 public:
  static PrintCompositor::CompleteDocumentToPdfCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PrintCompositor_CompleteDocumentToPdf_ProxyToResponder> proxy(
        new PrintCompositor_CompleteDocumentToPdf_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&PrintCompositor_CompleteDocumentToPdf_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PrintCompositor_CompleteDocumentToPdf_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PrintCompositor_CompleteDocumentToPdf_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PrintCompositor::CompleteDocumentToPdfCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PrintCompositor_CompleteDocumentToPdf_ProxyToResponder);
};

bool PrintCompositor_CompleteDocumentToPdf_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "printing::mojom::PrintCompositor::CompleteDocumentToPdfCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  PrintCompositor::Status p_status{};
  ::base::ReadOnlySharedMemoryRegion p_pdf_region{};
  PrintCompositor_CompleteDocumentToPdf_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadPdfRegion(&p_pdf_region))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PrintCompositor::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_pdf_region));
  return true;
}

void PrintCompositor_CompleteDocumentToPdf_ProxyToResponder::Run(
    PrintCompositor::Status in_status, ::base::ReadOnlySharedMemoryRegion in_pdf_region) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPrintCompositor_CompleteDocumentToPdf_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::printing::mojom::internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::printing::mojom::PrintCompositor_Status>(
      in_status, &params->status);
  typename decltype(params->pdf_region)::BaseType::BufferWriter
      pdf_region_writer;
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_pdf_region, buffer, &pdf_region_writer, &serialization_context);
  params->pdf_region.Set(
      pdf_region_writer.is_null() ? nullptr : pdf_region_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)printing::mojom::PrintCompositor::CompleteDocumentToPdfCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PrintCompositor::Name_);
  message.set_method_name("CompleteDocumentToPdf");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PrintCompositorStubDispatch::Accept(
    PrintCompositor* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPrintCompositor_SetDiscardableSharedMemoryManager_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::SetDiscardableSharedMemoryManager",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::SetDiscardableSharedMemoryManager");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data* params =
          reinterpret_cast<internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> p_manager{};
      PrintCompositor_SetDiscardableSharedMemoryManager_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_manager =
            input_data_view.TakeManager<decltype(p_manager)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetDiscardableSharedMemoryManager(
std::move(p_manager));
      return true;
    }
    case internal::kPrintCompositor_NotifyUnavailableSubframe_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::NotifyUnavailableSubframe",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::NotifyUnavailableSubframe");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data* params =
          reinterpret_cast<internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_frame_guid{};
      PrintCompositor_NotifyUnavailableSubframe_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_frame_guid = input_data_view.frame_guid();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->NotifyUnavailableSubframe(
std::move(p_frame_guid));
      return true;
    }
    case internal::kPrintCompositor_AddSubframeContent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::AddSubframeContent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::AddSubframeContent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PrintCompositor_AddSubframeContent_Params_Data* params =
          reinterpret_cast<internal::PrintCompositor_AddSubframeContent_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_frame_guid{};
      ::base::ReadOnlySharedMemoryRegion p_serialized_content{};
      base::flat_map<uint32_t, uint64_t> p_subframe_content_info{};
      PrintCompositor_AddSubframeContent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_frame_guid = input_data_view.frame_guid();
      if (success && !input_data_view.ReadSerializedContent(&p_serialized_content))
        success = false;
      if (success && !input_data_view.ReadSubframeContentInfo(&p_subframe_content_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddSubframeContent(
std::move(p_frame_guid), 
std::move(p_serialized_content), 
std::move(p_subframe_content_info));
      return true;
    }
    case internal::kPrintCompositor_CompositePageToPdf_Name: {
      break;
    }
    case internal::kPrintCompositor_CompositeDocumentToPdf_Name: {
      break;
    }
    case internal::kPrintCompositor_PrepareForDocumentToPdf_Name: {
      break;
    }
    case internal::kPrintCompositor_CompleteDocumentToPdf_Name: {
      break;
    }
    case internal::kPrintCompositor_SetWebContentsURL_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::SetWebContentsURL",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::SetWebContentsURL");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PrintCompositor_SetWebContentsURL_Params_Data* params =
          reinterpret_cast<internal::PrintCompositor_SetWebContentsURL_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::GURL p_url{};
      PrintCompositor_SetWebContentsURL_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetWebContentsURL(
std::move(p_url));
      return true;
    }
    case internal::kPrintCompositor_SetUserAgent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::SetUserAgent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::SetUserAgent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PrintCompositor_SetUserAgent_Params_Data* params =
          reinterpret_cast<internal::PrintCompositor_SetUserAgent_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      std::string p_user_agent{};
      PrintCompositor_SetUserAgent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadUserAgent(&p_user_agent))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetUserAgent(
std::move(p_user_agent));
      return true;
    }
  }
  return false;
}

// static
bool PrintCompositorStubDispatch::AcceptWithResponder(
    PrintCompositor* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kPrintCompositor_SetDiscardableSharedMemoryManager_Name: {
      break;
    }
    case internal::kPrintCompositor_NotifyUnavailableSubframe_Name: {
      break;
    }
    case internal::kPrintCompositor_AddSubframeContent_Name: {
      break;
    }
    case internal::kPrintCompositor_CompositePageToPdf_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::CompositePageToPdf",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::CompositePageToPdf");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::PrintCompositor_CompositePageToPdf_Params_Data* params =
          reinterpret_cast<
              internal::PrintCompositor_CompositePageToPdf_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_frame_guid{};
      ::base::ReadOnlySharedMemoryRegion p_sk_region{};
      base::flat_map<uint32_t, uint64_t> p_subframe_content_info{};
      PrintCompositor_CompositePageToPdf_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_frame_guid = input_data_view.frame_guid();
      if (success && !input_data_view.ReadSkRegion(&p_sk_region))
        success = false;
      if (success && !input_data_view.ReadSubframeContentInfo(&p_subframe_content_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 3, false);
        return false;
      }
      PrintCompositor::CompositePageToPdfCallback callback =
          PrintCompositor_CompositePageToPdf_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CompositePageToPdf(
std::move(p_frame_guid), 
std::move(p_sk_region), 
std::move(p_subframe_content_info), std::move(callback));
      return true;
    }
    case internal::kPrintCompositor_CompositeDocumentToPdf_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::CompositeDocumentToPdf",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::CompositeDocumentToPdf");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::PrintCompositor_CompositeDocumentToPdf_Params_Data* params =
          reinterpret_cast<
              internal::PrintCompositor_CompositeDocumentToPdf_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_frame_guid{};
      ::base::ReadOnlySharedMemoryRegion p_sk_region{};
      base::flat_map<uint32_t, uint64_t> p_subframe_content_info{};
      PrintCompositor_CompositeDocumentToPdf_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_frame_guid = input_data_view.frame_guid();
      if (success && !input_data_view.ReadSkRegion(&p_sk_region))
        success = false;
      if (success && !input_data_view.ReadSubframeContentInfo(&p_subframe_content_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 4, false);
        return false;
      }
      PrintCompositor::CompositeDocumentToPdfCallback callback =
          PrintCompositor_CompositeDocumentToPdf_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CompositeDocumentToPdf(
std::move(p_frame_guid), 
std::move(p_sk_region), 
std::move(p_subframe_content_info), std::move(callback));
      return true;
    }
    case internal::kPrintCompositor_PrepareForDocumentToPdf_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::PrepareForDocumentToPdf",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::PrepareForDocumentToPdf");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data* params =
          reinterpret_cast<
              internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      PrintCompositor_PrepareForDocumentToPdf_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 5, false);
        return false;
      }
      PrintCompositor::PrepareForDocumentToPdfCallback callback =
          PrintCompositor_PrepareForDocumentToPdf_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PrepareForDocumentToPdf(std::move(callback));
      return true;
    }
    case internal::kPrintCompositor_CompleteDocumentToPdf_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)printing::mojom::PrintCompositor::CompleteDocumentToPdf",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)printing::mojom::PrintCompositor::CompleteDocumentToPdf");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::PrintCompositor_CompleteDocumentToPdf_Params_Data* params =
          reinterpret_cast<
              internal::PrintCompositor_CompleteDocumentToPdf_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint32_t p_pages_count{};
      PrintCompositor_CompleteDocumentToPdf_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_pages_count = input_data_view.pages_count();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PrintCompositor::Name_, 6, false);
        return false;
      }
      PrintCompositor::CompleteDocumentToPdfCallback callback =
          PrintCompositor_CompleteDocumentToPdf_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CompleteDocumentToPdf(
std::move(p_pages_count), std::move(callback));
      return true;
    }
    case internal::kPrintCompositor_SetWebContentsURL_Name: {
      break;
    }
    case internal::kPrintCompositor_SetUserAgent_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPrintCompositorValidationInfo[] = {
    {&internal::PrintCompositor_SetDiscardableSharedMemoryManager_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PrintCompositor_NotifyUnavailableSubframe_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PrintCompositor_AddSubframeContent_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PrintCompositor_CompositePageToPdf_Params_Data::Validate,
     &internal::PrintCompositor_CompositePageToPdf_ResponseParams_Data::Validate},
    {&internal::PrintCompositor_CompositeDocumentToPdf_Params_Data::Validate,
     &internal::PrintCompositor_CompositeDocumentToPdf_ResponseParams_Data::Validate},
    {&internal::PrintCompositor_PrepareForDocumentToPdf_Params_Data::Validate,
     &internal::PrintCompositor_PrepareForDocumentToPdf_ResponseParams_Data::Validate},
    {&internal::PrintCompositor_CompleteDocumentToPdf_Params_Data::Validate,
     &internal::PrintCompositor_CompleteDocumentToPdf_ResponseParams_Data::Validate},
    {&internal::PrintCompositor_SetWebContentsURL_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PrintCompositor_SetUserAgent_Params_Data::Validate,
     nullptr /* no response */},
};

bool PrintCompositorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::printing::mojom::PrintCompositor::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPrintCompositorValidationInfo);
}

bool PrintCompositorResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::printing::mojom::PrintCompositor::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPrintCompositorValidationInfo);
}
}  // namespace mojom
}  // namespace printing

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif