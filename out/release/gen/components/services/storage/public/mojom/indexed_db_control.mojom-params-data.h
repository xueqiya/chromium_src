// components/services/storage/public/mojom/indexed_db_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace storage {
namespace mojom {
namespace internal {
class  IndexedDBControl_GetUsage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetUsage_Params_Data));
      new (data()) IndexedDBControl_GetUsage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetUsage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetUsage_Params_Data>(index_);
    }
    IndexedDBControl_GetUsage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  IndexedDBControl_GetUsage_Params_Data();
  ~IndexedDBControl_GetUsage_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetUsage_Params_Data) == 8,
              "Bad sizeof(IndexedDBControl_GetUsage_Params_Data)");
class  IndexedDBControl_GetUsage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetUsage_ResponseParams_Data));
      new (data()) IndexedDBControl_GetUsage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetUsage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetUsage_ResponseParams_Data>(index_);
    }
    IndexedDBControl_GetUsage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IndexedDBStorageUsageInfo_Data>>> info;

 private:
  IndexedDBControl_GetUsage_ResponseParams_Data();
  ~IndexedDBControl_GetUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetUsage_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetUsage_ResponseParams_Data)");
class  IndexedDBControl_DeleteForOrigin_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_DeleteForOrigin_Params_Data));
      new (data()) IndexedDBControl_DeleteForOrigin_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_DeleteForOrigin_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_DeleteForOrigin_Params_Data>(index_);
    }
    IndexedDBControl_DeleteForOrigin_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  IndexedDBControl_DeleteForOrigin_Params_Data();
  ~IndexedDBControl_DeleteForOrigin_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DeleteForOrigin_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_DeleteForOrigin_Params_Data)");
class  IndexedDBControl_DeleteForOrigin_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_DeleteForOrigin_ResponseParams_Data));
      new (data()) IndexedDBControl_DeleteForOrigin_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_DeleteForOrigin_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_DeleteForOrigin_ResponseParams_Data>(index_);
    }
    IndexedDBControl_DeleteForOrigin_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  IndexedDBControl_DeleteForOrigin_ResponseParams_Data();
  ~IndexedDBControl_DeleteForOrigin_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DeleteForOrigin_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_DeleteForOrigin_ResponseParams_Data)");
class  IndexedDBControl_ForceClose_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_ForceClose_Params_Data));
      new (data()) IndexedDBControl_ForceClose_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_ForceClose_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_ForceClose_Params_Data>(index_);
    }
    IndexedDBControl_ForceClose_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  IndexedDBControl_ForceClose_Params_Data();
  ~IndexedDBControl_ForceClose_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_ForceClose_Params_Data) == 24,
              "Bad sizeof(IndexedDBControl_ForceClose_Params_Data)");
class  IndexedDBControl_ForceClose_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_ForceClose_ResponseParams_Data));
      new (data()) IndexedDBControl_ForceClose_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_ForceClose_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_ForceClose_ResponseParams_Data>(index_);
    }
    IndexedDBControl_ForceClose_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  IndexedDBControl_ForceClose_ResponseParams_Data();
  ~IndexedDBControl_ForceClose_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_ForceClose_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControl_ForceClose_ResponseParams_Data)");
class  IndexedDBControl_GetConnectionCount_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetConnectionCount_Params_Data));
      new (data()) IndexedDBControl_GetConnectionCount_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetConnectionCount_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetConnectionCount_Params_Data>(index_);
    }
    IndexedDBControl_GetConnectionCount_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  IndexedDBControl_GetConnectionCount_Params_Data();
  ~IndexedDBControl_GetConnectionCount_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetConnectionCount_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetConnectionCount_Params_Data)");
class  IndexedDBControl_GetConnectionCount_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetConnectionCount_ResponseParams_Data));
      new (data()) IndexedDBControl_GetConnectionCount_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetConnectionCount_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetConnectionCount_ResponseParams_Data>(index_);
    }
    IndexedDBControl_GetConnectionCount_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t connection_count;

 private:
  IndexedDBControl_GetConnectionCount_ResponseParams_Data();
  ~IndexedDBControl_GetConnectionCount_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetConnectionCount_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetConnectionCount_ResponseParams_Data)");
class  IndexedDBControl_DownloadOriginData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_DownloadOriginData_Params_Data));
      new (data()) IndexedDBControl_DownloadOriginData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_DownloadOriginData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_DownloadOriginData_Params_Data>(index_);
    }
    IndexedDBControl_DownloadOriginData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  IndexedDBControl_DownloadOriginData_Params_Data();
  ~IndexedDBControl_DownloadOriginData_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DownloadOriginData_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_DownloadOriginData_Params_Data)");
class  IndexedDBControl_DownloadOriginData_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_DownloadOriginData_ResponseParams_Data));
      new (data()) IndexedDBControl_DownloadOriginData_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_DownloadOriginData_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_DownloadOriginData_ResponseParams_Data>(index_);
    }
    IndexedDBControl_DownloadOriginData_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> temp_path;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> zip_path;

 private:
  IndexedDBControl_DownloadOriginData_ResponseParams_Data();
  ~IndexedDBControl_DownloadOriginData_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DownloadOriginData_ResponseParams_Data) == 32,
              "Bad sizeof(IndexedDBControl_DownloadOriginData_ResponseParams_Data)");
class  IndexedDBControl_GetAllOriginsDetails_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetAllOriginsDetails_Params_Data));
      new (data()) IndexedDBControl_GetAllOriginsDetails_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetAllOriginsDetails_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetAllOriginsDetails_Params_Data>(index_);
    }
    IndexedDBControl_GetAllOriginsDetails_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  IndexedDBControl_GetAllOriginsDetails_Params_Data();
  ~IndexedDBControl_GetAllOriginsDetails_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetAllOriginsDetails_Params_Data) == 8,
              "Bad sizeof(IndexedDBControl_GetAllOriginsDetails_Params_Data)");
class  IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data));
      new (data()) IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data>(index_);
    }
    IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t incognito : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ListValue_Data> details;

 private:
  IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data();
  ~IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data) == 24,
              "Bad sizeof(IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data)");

}  // namespace internal
class IndexedDBControl_GetUsage_ParamsDataView {
 public:
  IndexedDBControl_GetUsage_ParamsDataView() {}

  IndexedDBControl_GetUsage_ParamsDataView(
      internal::IndexedDBControl_GetUsage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_GetUsage_Params_Data* data_ = nullptr;
};

class IndexedDBControl_GetUsage_ResponseParamsDataView {
 public:
  IndexedDBControl_GetUsage_ResponseParamsDataView() {}

  IndexedDBControl_GetUsage_ResponseParamsDataView(
      internal::IndexedDBControl_GetUsage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<IndexedDBStorageUsageInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::IndexedDBStorageUsageInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_GetUsage_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_DeleteForOrigin_ParamsDataView {
 public:
  IndexedDBControl_DeleteForOrigin_ParamsDataView() {}

  IndexedDBControl_DeleteForOrigin_ParamsDataView(
      internal::IndexedDBControl_DeleteForOrigin_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_DeleteForOrigin_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_DeleteForOrigin_ResponseParamsDataView {
 public:
  IndexedDBControl_DeleteForOrigin_ResponseParamsDataView() {}

  IndexedDBControl_DeleteForOrigin_ResponseParamsDataView(
      internal::IndexedDBControl_DeleteForOrigin_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::IndexedDBControl_DeleteForOrigin_ResponseParams_Data* data_ = nullptr;
};

class IndexedDBControl_ForceClose_ParamsDataView {
 public:
  IndexedDBControl_ForceClose_ParamsDataView() {}

  IndexedDBControl_ForceClose_ParamsDataView(
      internal::IndexedDBControl_ForceClose_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::storage::mojom::ForceCloseReason>(
        data_value, output);
  }

  ForceCloseReason reason() const {
    return static_cast<ForceCloseReason>(data_->reason);
  }
 private:
  internal::IndexedDBControl_ForceClose_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_ForceClose_ResponseParamsDataView {
 public:
  IndexedDBControl_ForceClose_ResponseParamsDataView() {}

  IndexedDBControl_ForceClose_ResponseParamsDataView(
      internal::IndexedDBControl_ForceClose_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_ForceClose_ResponseParams_Data* data_ = nullptr;
};

class IndexedDBControl_GetConnectionCount_ParamsDataView {
 public:
  IndexedDBControl_GetConnectionCount_ParamsDataView() {}

  IndexedDBControl_GetConnectionCount_ParamsDataView(
      internal::IndexedDBControl_GetConnectionCount_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_GetConnectionCount_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_GetConnectionCount_ResponseParamsDataView {
 public:
  IndexedDBControl_GetConnectionCount_ResponseParamsDataView() {}

  IndexedDBControl_GetConnectionCount_ResponseParamsDataView(
      internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t connection_count() const {
    return data_->connection_count;
  }
 private:
  internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data* data_ = nullptr;
};

class IndexedDBControl_DownloadOriginData_ParamsDataView {
 public:
  IndexedDBControl_DownloadOriginData_ParamsDataView() {}

  IndexedDBControl_DownloadOriginData_ParamsDataView(
      internal::IndexedDBControl_DownloadOriginData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_DownloadOriginData_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_DownloadOriginData_ResponseParamsDataView {
 public:
  IndexedDBControl_DownloadOriginData_ResponseParamsDataView() {}

  IndexedDBControl_DownloadOriginData_ResponseParamsDataView(
      internal::IndexedDBControl_DownloadOriginData_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetTempPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTempPath(UserType* output) {
    auto* pointer = data_->temp_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  inline void GetZipPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadZipPath(UserType* output) {
    auto* pointer = data_->zip_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_DownloadOriginData_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IndexedDBControl_GetAllOriginsDetails_ParamsDataView {
 public:
  IndexedDBControl_GetAllOriginsDetails_ParamsDataView() {}

  IndexedDBControl_GetAllOriginsDetails_ParamsDataView(
      internal::IndexedDBControl_GetAllOriginsDetails_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_GetAllOriginsDetails_Params_Data* data_ = nullptr;
};

class IndexedDBControl_GetAllOriginsDetails_ResponseParamsDataView {
 public:
  IndexedDBControl_GetAllOriginsDetails_ResponseParamsDataView() {}

  IndexedDBControl_GetAllOriginsDetails_ResponseParamsDataView(
      internal::IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool incognito() const {
    return data_->incognito;
  }
  inline void GetDetailsDataView(
      ::mojo_base::mojom::ListValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDetails(UserType* output) {
    auto* pointer = data_->details.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ListValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::IndexedDBControl_GetAllOriginsDetails_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void IndexedDBControl_GetUsage_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<IndexedDBStorageUsageInfoDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<IndexedDBStorageUsageInfoDataView>(pointer, context_);
}


inline void IndexedDBControl_DeleteForOrigin_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}




inline void IndexedDBControl_ForceClose_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}




inline void IndexedDBControl_GetConnectionCount_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}




inline void IndexedDBControl_DownloadOriginData_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}


inline void IndexedDBControl_DownloadOriginData_ResponseParamsDataView::GetTempPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->temp_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}
inline void IndexedDBControl_DownloadOriginData_ResponseParamsDataView::GetZipPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->zip_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}




inline void IndexedDBControl_GetAllOriginsDetails_ResponseParamsDataView::GetDetailsDataView(
    ::mojo_base::mojom::ListValueDataView* output) {
  auto pointer = data_->details.Get();
  *output = ::mojo_base::mojom::ListValueDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_