// components/services/storage/public/mojom/local_storage_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace storage {
namespace mojom {
namespace internal {
class  LocalStorageControl_BindStorageArea_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_BindStorageArea_Params_Data));
      new (data()) LocalStorageControl_BindStorageArea_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_BindStorageArea_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_BindStorageArea_Params_Data>(index_);
    }
    LocalStorageControl_BindStorageArea_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  LocalStorageControl_BindStorageArea_Params_Data();
  ~LocalStorageControl_BindStorageArea_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_BindStorageArea_Params_Data) == 24,
              "Bad sizeof(LocalStorageControl_BindStorageArea_Params_Data)");
class  LocalStorageControl_GetUsage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_GetUsage_Params_Data));
      new (data()) LocalStorageControl_GetUsage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_GetUsage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_GetUsage_Params_Data>(index_);
    }
    LocalStorageControl_GetUsage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_GetUsage_Params_Data();
  ~LocalStorageControl_GetUsage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_GetUsage_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_GetUsage_Params_Data)");
class  LocalStorageControl_GetUsage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_GetUsage_ResponseParams_Data));
      new (data()) LocalStorageControl_GetUsage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_GetUsage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_GetUsage_ResponseParams_Data>(index_);
    }
    LocalStorageControl_GetUsage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::LocalStorageUsageInfo_Data>>> info;

 private:
  LocalStorageControl_GetUsage_ResponseParams_Data();
  ~LocalStorageControl_GetUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_GetUsage_ResponseParams_Data) == 16,
              "Bad sizeof(LocalStorageControl_GetUsage_ResponseParams_Data)");
class  LocalStorageControl_DeleteStorage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_DeleteStorage_Params_Data));
      new (data()) LocalStorageControl_DeleteStorage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_DeleteStorage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_DeleteStorage_Params_Data>(index_);
    }
    LocalStorageControl_DeleteStorage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  LocalStorageControl_DeleteStorage_Params_Data();
  ~LocalStorageControl_DeleteStorage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_DeleteStorage_Params_Data) == 16,
              "Bad sizeof(LocalStorageControl_DeleteStorage_Params_Data)");
class  LocalStorageControl_DeleteStorage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_DeleteStorage_ResponseParams_Data));
      new (data()) LocalStorageControl_DeleteStorage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_DeleteStorage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_DeleteStorage_ResponseParams_Data>(index_);
    }
    LocalStorageControl_DeleteStorage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_DeleteStorage_ResponseParams_Data();
  ~LocalStorageControl_DeleteStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_DeleteStorage_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_DeleteStorage_ResponseParams_Data)");
class  LocalStorageControl_CleanUpStorage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_CleanUpStorage_Params_Data));
      new (data()) LocalStorageControl_CleanUpStorage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_CleanUpStorage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_CleanUpStorage_Params_Data>(index_);
    }
    LocalStorageControl_CleanUpStorage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_CleanUpStorage_Params_Data();
  ~LocalStorageControl_CleanUpStorage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_CleanUpStorage_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_CleanUpStorage_Params_Data)");
class  LocalStorageControl_CleanUpStorage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_CleanUpStorage_ResponseParams_Data));
      new (data()) LocalStorageControl_CleanUpStorage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_CleanUpStorage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_CleanUpStorage_ResponseParams_Data>(index_);
    }
    LocalStorageControl_CleanUpStorage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_CleanUpStorage_ResponseParams_Data();
  ~LocalStorageControl_CleanUpStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_CleanUpStorage_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_CleanUpStorage_ResponseParams_Data)");
class  LocalStorageControl_Flush_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_Flush_Params_Data));
      new (data()) LocalStorageControl_Flush_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_Flush_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_Flush_Params_Data>(index_);
    }
    LocalStorageControl_Flush_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_Flush_Params_Data();
  ~LocalStorageControl_Flush_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_Flush_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_Flush_Params_Data)");
class  LocalStorageControl_Flush_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_Flush_ResponseParams_Data));
      new (data()) LocalStorageControl_Flush_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_Flush_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_Flush_ResponseParams_Data>(index_);
    }
    LocalStorageControl_Flush_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_Flush_ResponseParams_Data();
  ~LocalStorageControl_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_Flush_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_Flush_ResponseParams_Data)");
class  LocalStorageControl_PurgeMemory_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_PurgeMemory_Params_Data));
      new (data()) LocalStorageControl_PurgeMemory_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_PurgeMemory_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_PurgeMemory_Params_Data>(index_);
    }
    LocalStorageControl_PurgeMemory_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_PurgeMemory_Params_Data();
  ~LocalStorageControl_PurgeMemory_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_PurgeMemory_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_PurgeMemory_Params_Data)");
class  LocalStorageControl_ApplyPolicyUpdates_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_ApplyPolicyUpdates_Params_Data));
      new (data()) LocalStorageControl_ApplyPolicyUpdates_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_ApplyPolicyUpdates_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_ApplyPolicyUpdates_Params_Data>(index_);
    }
    LocalStorageControl_ApplyPolicyUpdates_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::LocalStoragePolicyUpdate_Data>>> policy_updates;

 private:
  LocalStorageControl_ApplyPolicyUpdates_Params_Data();
  ~LocalStorageControl_ApplyPolicyUpdates_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_ApplyPolicyUpdates_Params_Data) == 16,
              "Bad sizeof(LocalStorageControl_ApplyPolicyUpdates_Params_Data)");
class  LocalStorageControl_ForceKeepSessionState_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalStorageControl_ForceKeepSessionState_Params_Data));
      new (data()) LocalStorageControl_ForceKeepSessionState_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalStorageControl_ForceKeepSessionState_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalStorageControl_ForceKeepSessionState_Params_Data>(index_);
    }
    LocalStorageControl_ForceKeepSessionState_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalStorageControl_ForceKeepSessionState_Params_Data();
  ~LocalStorageControl_ForceKeepSessionState_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_ForceKeepSessionState_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_ForceKeepSessionState_Params_Data)");

}  // namespace internal
class LocalStorageControl_BindStorageArea_ParamsDataView {
 public:
  LocalStorageControl_BindStorageArea_ParamsDataView() {}

  LocalStorageControl_BindStorageArea_ParamsDataView(
      internal::LocalStorageControl_BindStorageArea_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalStorageControl_BindStorageArea_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalStorageControl_GetUsage_ParamsDataView {
 public:
  LocalStorageControl_GetUsage_ParamsDataView() {}

  LocalStorageControl_GetUsage_ParamsDataView(
      internal::LocalStorageControl_GetUsage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_GetUsage_Params_Data* data_ = nullptr;
};

class LocalStorageControl_GetUsage_ResponseParamsDataView {
 public:
  LocalStorageControl_GetUsage_ResponseParamsDataView() {}

  LocalStorageControl_GetUsage_ResponseParamsDataView(
      internal::LocalStorageControl_GetUsage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<LocalStorageUsageInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::LocalStorageUsageInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::LocalStorageControl_GetUsage_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalStorageControl_DeleteStorage_ParamsDataView {
 public:
  LocalStorageControl_DeleteStorage_ParamsDataView() {}

  LocalStorageControl_DeleteStorage_ParamsDataView(
      internal::LocalStorageControl_DeleteStorage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalStorageControl_DeleteStorage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalStorageControl_DeleteStorage_ResponseParamsDataView {
 public:
  LocalStorageControl_DeleteStorage_ResponseParamsDataView() {}

  LocalStorageControl_DeleteStorage_ResponseParamsDataView(
      internal::LocalStorageControl_DeleteStorage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_DeleteStorage_ResponseParams_Data* data_ = nullptr;
};

class LocalStorageControl_CleanUpStorage_ParamsDataView {
 public:
  LocalStorageControl_CleanUpStorage_ParamsDataView() {}

  LocalStorageControl_CleanUpStorage_ParamsDataView(
      internal::LocalStorageControl_CleanUpStorage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_CleanUpStorage_Params_Data* data_ = nullptr;
};

class LocalStorageControl_CleanUpStorage_ResponseParamsDataView {
 public:
  LocalStorageControl_CleanUpStorage_ResponseParamsDataView() {}

  LocalStorageControl_CleanUpStorage_ResponseParamsDataView(
      internal::LocalStorageControl_CleanUpStorage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_CleanUpStorage_ResponseParams_Data* data_ = nullptr;
};

class LocalStorageControl_Flush_ParamsDataView {
 public:
  LocalStorageControl_Flush_ParamsDataView() {}

  LocalStorageControl_Flush_ParamsDataView(
      internal::LocalStorageControl_Flush_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_Flush_Params_Data* data_ = nullptr;
};

class LocalStorageControl_Flush_ResponseParamsDataView {
 public:
  LocalStorageControl_Flush_ResponseParamsDataView() {}

  LocalStorageControl_Flush_ResponseParamsDataView(
      internal::LocalStorageControl_Flush_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_Flush_ResponseParams_Data* data_ = nullptr;
};

class LocalStorageControl_PurgeMemory_ParamsDataView {
 public:
  LocalStorageControl_PurgeMemory_ParamsDataView() {}

  LocalStorageControl_PurgeMemory_ParamsDataView(
      internal::LocalStorageControl_PurgeMemory_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_PurgeMemory_Params_Data* data_ = nullptr;
};

class LocalStorageControl_ApplyPolicyUpdates_ParamsDataView {
 public:
  LocalStorageControl_ApplyPolicyUpdates_ParamsDataView() {}

  LocalStorageControl_ApplyPolicyUpdates_ParamsDataView(
      internal::LocalStorageControl_ApplyPolicyUpdates_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPolicyUpdatesDataView(
      mojo::ArrayDataView<LocalStoragePolicyUpdateDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPolicyUpdates(UserType* output) {
    auto* pointer = data_->policy_updates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::LocalStoragePolicyUpdateDataView>>(
        pointer, output, context_);
  }
 private:
  internal::LocalStorageControl_ApplyPolicyUpdates_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalStorageControl_ForceKeepSessionState_ParamsDataView {
 public:
  LocalStorageControl_ForceKeepSessionState_ParamsDataView() {}

  LocalStorageControl_ForceKeepSessionState_ParamsDataView(
      internal::LocalStorageControl_ForceKeepSessionState_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_ForceKeepSessionState_Params_Data* data_ = nullptr;
};


inline void LocalStorageControl_BindStorageArea_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}




inline void LocalStorageControl_GetUsage_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<LocalStorageUsageInfoDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<LocalStorageUsageInfoDataView>(pointer, context_);
}


inline void LocalStorageControl_DeleteStorage_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}














inline void LocalStorageControl_ApplyPolicyUpdates_ParamsDataView::GetPolicyUpdatesDataView(
    mojo::ArrayDataView<LocalStoragePolicyUpdateDataView>* output) {
  auto pointer = data_->policy_updates.Get();
  *output = mojo::ArrayDataView<LocalStoragePolicyUpdateDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_