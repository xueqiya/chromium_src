// components/services/storage/public/mojom/local_storage_control.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/services/storage/public/mojom/local_storage_control.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "third_party/blink/public/mojom/dom_storage/storage_area.mojom.h"
#include "url/mojom/origin.mojom.h"


#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#endif


namespace storage {
namespace mojom {


void LocalStorageControlInterceptorForTesting::BindStorageArea(const ::url::Origin& origin, mojo::PendingReceiver<::blink::mojom::StorageArea> receiver) {
  GetForwardingInterface()->BindStorageArea(std::move(origin), std::move(receiver));
}
void LocalStorageControlInterceptorForTesting::GetUsage(GetUsageCallback callback) {
  GetForwardingInterface()->GetUsage(std::move(callback));
}
void LocalStorageControlInterceptorForTesting::DeleteStorage(const ::url::Origin& origin, DeleteStorageCallback callback) {
  GetForwardingInterface()->DeleteStorage(std::move(origin), std::move(callback));
}
void LocalStorageControlInterceptorForTesting::CleanUpStorage(CleanUpStorageCallback callback) {
  GetForwardingInterface()->CleanUpStorage(std::move(callback));
}
void LocalStorageControlInterceptorForTesting::Flush(FlushCallback callback) {
  GetForwardingInterface()->Flush(std::move(callback));
}
void LocalStorageControlInterceptorForTesting::PurgeMemory() {
  GetForwardingInterface()->PurgeMemory();
}
void LocalStorageControlInterceptorForTesting::ApplyPolicyUpdates(std::vector<LocalStoragePolicyUpdatePtr> policy_updates) {
  GetForwardingInterface()->ApplyPolicyUpdates(std::move(policy_updates));
}
void LocalStorageControlInterceptorForTesting::ForceKeepSessionState() {
  GetForwardingInterface()->ForceKeepSessionState();
}
LocalStorageControlAsyncWaiter::LocalStorageControlAsyncWaiter(
    LocalStorageControl* proxy) : proxy_(proxy) {}

LocalStorageControlAsyncWaiter::~LocalStorageControlAsyncWaiter() = default;

void LocalStorageControlAsyncWaiter::GetUsage(
    std::vector<LocalStorageUsageInfoPtr>* out_info) {
  base::RunLoop loop;
  proxy_->GetUsage(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<LocalStorageUsageInfoPtr>* out_info
,
             std::vector<LocalStorageUsageInfoPtr> info) {*out_info = std::move(info);
            loop->Quit();
          },
          &loop,
          out_info));
  loop.Run();
}
void LocalStorageControlAsyncWaiter::DeleteStorage(
    const ::url::Origin& origin) {
  base::RunLoop loop;
  proxy_->DeleteStorage(std::move(origin),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void LocalStorageControlAsyncWaiter::CleanUpStorage(
    ) {
  base::RunLoop loop;
  proxy_->CleanUpStorage(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void LocalStorageControlAsyncWaiter::Flush(
    ) {
  base::RunLoop loop;
  proxy_->Flush(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif