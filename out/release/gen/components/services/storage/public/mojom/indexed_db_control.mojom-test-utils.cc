// components/services/storage/public/mojom/indexed_db_control.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/services/storage/public/mojom/indexed_db_control.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file_path.mojom.h"
#include "mojo/public/mojom/base/values.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "url/mojom/origin.mojom.h"


#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_INDEXED_DB_CONTROL_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_INDEXED_DB_CONTROL_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#endif


namespace storage {
namespace mojom {


void IndexedDBControlInterceptorForTesting::GetUsage(GetUsageCallback callback) {
  GetForwardingInterface()->GetUsage(std::move(callback));
}
void IndexedDBControlInterceptorForTesting::DeleteForOrigin(const ::url::Origin& origin, DeleteForOriginCallback callback) {
  GetForwardingInterface()->DeleteForOrigin(std::move(origin), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::ForceClose(const ::url::Origin& origin, ForceCloseReason reason, ForceCloseCallback callback) {
  GetForwardingInterface()->ForceClose(std::move(origin), std::move(reason), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::GetConnectionCount(const ::url::Origin& origin, GetConnectionCountCallback callback) {
  GetForwardingInterface()->GetConnectionCount(std::move(origin), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::DownloadOriginData(const ::url::Origin& origin, DownloadOriginDataCallback callback) {
  GetForwardingInterface()->DownloadOriginData(std::move(origin), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::GetAllOriginsDetails(GetAllOriginsDetailsCallback callback) {
  GetForwardingInterface()->GetAllOriginsDetails(std::move(callback));
}
IndexedDBControlAsyncWaiter::IndexedDBControlAsyncWaiter(
    IndexedDBControl* proxy) : proxy_(proxy) {}

IndexedDBControlAsyncWaiter::~IndexedDBControlAsyncWaiter() = default;

void IndexedDBControlAsyncWaiter::GetUsage(
    std::vector<IndexedDBStorageUsageInfoPtr>* out_info) {
  base::RunLoop loop;
  proxy_->GetUsage(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<IndexedDBStorageUsageInfoPtr>* out_info
,
             std::vector<IndexedDBStorageUsageInfoPtr> info) {*out_info = std::move(info);
            loop->Quit();
          },
          &loop,
          out_info));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::DeleteForOrigin(
    const ::url::Origin& origin, bool* out_success) {
  base::RunLoop loop;
  proxy_->DeleteForOrigin(std::move(origin),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::ForceClose(
    const ::url::Origin& origin, ForceCloseReason reason) {
  base::RunLoop loop;
  proxy_->ForceClose(std::move(origin),std::move(reason),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::GetConnectionCount(
    const ::url::Origin& origin, uint64_t* out_connection_count) {
  base::RunLoop loop;
  proxy_->GetConnectionCount(std::move(origin),
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_connection_count
,
             uint64_t connection_count) {*out_connection_count = std::move(connection_count);
            loop->Quit();
          },
          &loop,
          out_connection_count));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::DownloadOriginData(
    const ::url::Origin& origin, bool* out_success, ::base::FilePath* out_temp_path, ::base::FilePath* out_zip_path) {
  base::RunLoop loop;
  proxy_->DownloadOriginData(std::move(origin),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             ::base::FilePath* out_temp_path
,
             ::base::FilePath* out_zip_path
,
             bool success,
             const ::base::FilePath& temp_path,
             const ::base::FilePath& zip_path) {*out_success = std::move(success);*out_temp_path = std::move(temp_path);*out_zip_path = std::move(zip_path);
            loop->Quit();
          },
          &loop,
          out_success,
          out_temp_path,
          out_zip_path));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::GetAllOriginsDetails(
    bool* out_incognito, ::base::Value* out_details) {
  base::RunLoop loop;
  proxy_->GetAllOriginsDetails(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_incognito
,
             ::base::Value* out_details
,
             bool incognito,
             ::base::Value details) {*out_incognito = std::move(incognito);*out_details = std::move(details);
            loop->Quit();
          },
          &loop,
          out_incognito,
          out_details));
  loop.Run();
}





}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif