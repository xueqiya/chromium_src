// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/policy/CombinedPolicyProvider

#ifndef org_chromium_policy_CombinedPolicyProvider_JNI
#define org_chromium_policy_CombinedPolicyProvider_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_policy_CombinedPolicyProvider[];
const char kClassPath_org_chromium_policy_CombinedPolicyProvider[] =
    "org/chromium/policy/CombinedPolicyProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_policy_CombinedPolicyProvider_clazz(nullptr);
#ifndef org_chromium_policy_CombinedPolicyProvider_clazz_defined
#define org_chromium_policy_CombinedPolicyProvider_clazz_defined
inline jclass org_chromium_policy_CombinedPolicyProvider_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_policy_CombinedPolicyProvider,
      &g_org_chromium_policy_CombinedPolicyProvider_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace policy {
namespace android {

JNI_GENERATOR_EXPORT void Java_J_N_M4QXUjg3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAndroidCombinedPolicyProvider,
    jobject caller) {
  AndroidCombinedPolicyProvider* native =
      reinterpret_cast<AndroidCombinedPolicyProvider*>(nativeAndroidCombinedPolicyProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlushPolicies");
  return native->FlushPolicies(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID> g_org_chromium_policy_CombinedPolicyProvider_linkNative(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CombinedPolicyProvider_linkNative(JNIEnv*
    env, jlong nativeCombinedPolicyProvider,
    const base::android::JavaRef<jobject>& policyConverter) {
  jclass clazz = org_chromium_policy_CombinedPolicyProvider_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_policy_CombinedPolicyProvider_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "linkNative",
          "(JLorg/chromium/policy/PolicyConverter;)Lorg/chromium/policy/CombinedPolicyProvider;",
          &g_org_chromium_policy_CombinedPolicyProvider_linkNative);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeCombinedPolicyProvider, policyConverter.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_policy_CombinedPolicyProvider_refreshPolicies(nullptr);
static void Java_CombinedPolicyProvider_refreshPolicies(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_policy_CombinedPolicyProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_policy_CombinedPolicyProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "refreshPolicies",
          "()V",
          &g_org_chromium_policy_CombinedPolicyProvider_refreshPolicies);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android
}  // namespace policy

// Step 4: Generated test functions (optional).


#endif  // org_chromium_policy_CombinedPolicyProvider_JNI
