// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/policy/PolicyConverter

#ifndef org_chromium_policy_PolicyConverter_JNI
#define org_chromium_policy_PolicyConverter_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_policy_PolicyConverter[];
const char kClassPath_org_chromium_policy_PolicyConverter[] = "org/chromium/policy/PolicyConverter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_policy_PolicyConverter_clazz(nullptr);
#ifndef org_chromium_policy_PolicyConverter_clazz_defined
#define org_chromium_policy_PolicyConverter_clazz_defined
inline jclass org_chromium_policy_PolicyConverter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_policy_PolicyConverter,
      &g_org_chromium_policy_PolicyConverter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace policy {
namespace android {

JNI_GENERATOR_EXPORT void Java_J_N_MpCbKnQi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyConverter,
    jobject caller,
    jstring policyKey,
    jboolean value) {
  PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyBoolean");
  return native->SetPolicyBoolean(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policyKey), value);
}

JNI_GENERATOR_EXPORT void Java_J_N_MTuFp9B7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyConverter,
    jobject caller,
    jstring policyKey,
    jint value) {
  PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyInteger");
  return native->SetPolicyInteger(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policyKey), value);
}

JNI_GENERATOR_EXPORT void Java_J_N_MeuOZAup(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyConverter,
    jobject caller,
    jstring policyKey,
    jstring value) {
  PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyString");
  return native->SetPolicyString(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policyKey),
      base::android::JavaParamRef<jstring>(env, value));
}

JNI_GENERATOR_EXPORT void Java_J_N_MGY2QXB9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyConverter,
    jobject caller,
    jstring policyKey,
    jobjectArray value) {
  PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyStringArray");
  return native->SetPolicyStringArray(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policyKey),
      base::android::JavaParamRef<jobjectArray>(env, value));
}


static std::atomic<jmethodID> g_org_chromium_policy_PolicyConverter_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PolicyConverter_create(JNIEnv* env, jlong
    nativePolicyConverter) {
  jclass clazz = org_chromium_policy_PolicyConverter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_policy_PolicyConverter_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/policy/PolicyConverter;",
          &g_org_chromium_policy_PolicyConverter_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePolicyConverter);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_policy_PolicyConverter_onNativeDestroyed(nullptr);
static void Java_PolicyConverter_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_policy_PolicyConverter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_policy_PolicyConverter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_policy_PolicyConverter_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android
}  // namespace policy

// Step 4: Generated test functions (optional).


#endif  // org_chromium_policy_PolicyConverter_JNI
