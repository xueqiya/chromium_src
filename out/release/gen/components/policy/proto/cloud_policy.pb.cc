// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_policy.proto

#include "cloud_policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
namespace enterprise_management {
class CloudPolicySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudPolicySettings> _instance;
} _CloudPolicySettings_default_instance_;
}  // namespace enterprise_management
static void InitDefaultsscc_info_CloudPolicySettings_cloud_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CloudPolicySettings_default_instance_;
    new (ptr) ::enterprise_management::CloudPolicySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CloudPolicySettings::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CloudPolicySettings_cloud_5fpolicy_2eproto}, {
      &scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,}};

namespace enterprise_management {

// ===================================================================

void CloudPolicySettings::InitAsDefaultInstance() {
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->homepagelocation_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alternateerrorpagesenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->searchsuggestenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->networkpredictionoptions_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->incognitoenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->incognitomodeavailability_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->savingbrowserhistorydisabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcesafesearch_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcegooglesafesearch_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forceyoutubesafetymode_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forceyoutuberestrict_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safebrowsingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordmanagerenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordleakdetectionenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofillenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofilladdressenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofillcreditcardenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->synctypeslistdisabled_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->signinallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxymode_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxyservermode_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxyserver_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxypacurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxybypasslist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxysettings_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authschemes_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disableauthnegotiatecnamelookup_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authserverwhitelist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authnegotiatedelegatewhitelist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authandroidnegotiateaccounttype_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->ntlmv2enabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidername_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderkeyword_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersearchurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersuggesturl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidericonurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderencodings_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovideralternateurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderimageurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidernewtaburl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersearchurlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersuggesturlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderimageurlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultcookiessetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultjavascriptsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultpopupssetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultgeolocationsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultwebbluetoothguardsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultwebusbguardsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusballowdevicesforurls_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusbaskforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusbblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiesallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiesblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiessessiononlyforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->legacysamesitecookiebehaviorenabled_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->legacysamesitecookiebehaviorenabledfordomainlist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->popupsallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->popupsblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->translateenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->editbookmarksenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlblacklist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlwhitelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disablesafebrowsingproceedanyway_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sharedclipboardenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->variationsrestrictparameter_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->managedbookmarks_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->datacompressionproxyenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enabledeprecatedwebplatformfeatures_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcebrowsersignin_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browsersignin_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sslversionmin_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforcas_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforlegacycas_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->contextualsearchenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sslerroroverrideallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alloweddomainsforapps_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enablemediarouter_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->ntpcontentsuggestionsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webrtcudpportrange_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->isolateoriginsandroid_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->siteperprocessandroid_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->restrictaccountstopatterns_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->overridesecurityrestrictionsoninsecureorigin_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlkeyedanonymizeddatacollectionenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->coalesceh2connectionswithclientcertificatesforhosts_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enterprisehardwareplatformapienabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowpopupsduringpageunload_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->hstspolicybypasslist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowsyncxhrinpagedismissal_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->tls13hardeningforlocalanchorsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webcomponentsv0enabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->paymentmethodqueryenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
}
class CloudPolicySettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudPolicySettings>()._has_bits_);
  static const ::enterprise_management::StringPolicyProto& homepagelocation(const CloudPolicySettings* msg);
  static void set_has_homepagelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& alternateerrorpagesenabled(const CloudPolicySettings* msg);
  static void set_has_alternateerrorpagesenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& searchsuggestenabled(const CloudPolicySettings* msg);
  static void set_has_searchsuggestenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::IntegerPolicyProto& networkpredictionoptions(const CloudPolicySettings* msg);
  static void set_has_networkpredictionoptions(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::enterprise_management::BooleanPolicyProto& javascriptenabled(const CloudPolicySettings* msg);
  static void set_has_javascriptenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& incognitoenabled(const CloudPolicySettings* msg);
  static void set_has_incognitoenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::IntegerPolicyProto& incognitomodeavailability(const CloudPolicySettings* msg);
  static void set_has_incognitomodeavailability(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& savingbrowserhistorydisabled(const CloudPolicySettings* msg);
  static void set_has_savingbrowserhistorydisabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& printingenabled(const CloudPolicySettings* msg);
  static void set_has_printingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcesafesearch(const CloudPolicySettings* msg);
  static void set_has_forcesafesearch(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcegooglesafesearch(const CloudPolicySettings* msg);
  static void set_has_forcegooglesafesearch(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forceyoutubesafetymode(const CloudPolicySettings* msg);
  static void set_has_forceyoutubesafetymode(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::enterprise_management::IntegerPolicyProto& forceyoutuberestrict(const CloudPolicySettings* msg);
  static void set_has_forceyoutuberestrict(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& safebrowsingenabled(const CloudPolicySettings* msg);
  static void set_has_safebrowsingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& passwordmanagerenabled(const CloudPolicySettings* msg);
  static void set_has_passwordmanagerenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& passwordleakdetectionenabled(const CloudPolicySettings* msg);
  static void set_has_passwordleakdetectionenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofillenabled(const CloudPolicySettings* msg);
  static void set_has_autofillenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofilladdressenabled(const CloudPolicySettings* msg);
  static void set_has_autofilladdressenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofillcreditcardenabled(const CloudPolicySettings* msg);
  static void set_has_autofillcreditcardenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::enterprise_management::StringListPolicyProto& synctypeslistdisabled(const CloudPolicySettings* msg);
  static void set_has_synctypeslistdisabled(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& signinallowed(const CloudPolicySettings* msg);
  static void set_has_signinallowed(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::enterprise_management::StringPolicyProto& proxymode(const CloudPolicySettings* msg);
  static void set_has_proxymode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::IntegerPolicyProto& proxyservermode(const CloudPolicySettings* msg);
  static void set_has_proxyservermode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::StringPolicyProto& proxyserver(const CloudPolicySettings* msg);
  static void set_has_proxyserver(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::StringPolicyProto& proxypacurl(const CloudPolicySettings* msg);
  static void set_has_proxypacurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::StringPolicyProto& proxybypasslist(const CloudPolicySettings* msg);
  static void set_has_proxybypasslist(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::StringPolicyProto& proxysettings(const CloudPolicySettings* msg);
  static void set_has_proxysettings(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::enterprise_management::StringPolicyProto& authschemes(const CloudPolicySettings* msg);
  static void set_has_authschemes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disableauthnegotiatecnamelookup(const CloudPolicySettings* msg);
  static void set_has_disableauthnegotiatecnamelookup(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::StringPolicyProto& authserverwhitelist(const CloudPolicySettings* msg);
  static void set_has_authserverwhitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::StringPolicyProto& authnegotiatedelegatewhitelist(const CloudPolicySettings* msg);
  static void set_has_authnegotiatedelegatewhitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::StringPolicyProto& authandroidnegotiateaccounttype(const CloudPolicySettings* msg);
  static void set_has_authandroidnegotiateaccounttype(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::enterprise_management::BooleanPolicyProto& ntlmv2enabled(const CloudPolicySettings* msg);
  static void set_has_ntlmv2enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& defaultsearchproviderenabled(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidername(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidername(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderkeyword(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderkeyword(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersearchurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersearchurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersuggesturl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersuggesturl(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidericonurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidericonurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::StringListPolicyProto& defaultsearchproviderencodings(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderencodings(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::StringListPolicyProto& defaultsearchprovideralternateurls(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovideralternateurls(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderimageurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderimageurl(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidernewtaburl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidernewtaburl(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersearchurlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersearchurlpostparams(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersuggesturlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersuggesturlpostparams(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderimageurlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderimageurlpostparams(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultcookiessetting(const CloudPolicySettings* msg);
  static void set_has_defaultcookiessetting(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultjavascriptsetting(const CloudPolicySettings* msg);
  static void set_has_defaultjavascriptsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultpopupssetting(const CloudPolicySettings* msg);
  static void set_has_defaultpopupssetting(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultgeolocationsetting(const CloudPolicySettings* msg);
  static void set_has_defaultgeolocationsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultwebbluetoothguardsetting(const CloudPolicySettings* msg);
  static void set_has_defaultwebbluetoothguardsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultwebusbguardsetting(const CloudPolicySettings* msg);
  static void set_has_defaultwebusbguardsetting(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::enterprise_management::StringPolicyProto& webusballowdevicesforurls(const CloudPolicySettings* msg);
  static void set_has_webusballowdevicesforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::enterprise_management::StringListPolicyProto& webusbaskforurls(const CloudPolicySettings* msg);
  static void set_has_webusbaskforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static const ::enterprise_management::StringListPolicyProto& webusbblockedforurls(const CloudPolicySettings* msg);
  static void set_has_webusbblockedforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiesallowedforurls(const CloudPolicySettings* msg);
  static void set_has_cookiesallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiesblockedforurls(const CloudPolicySettings* msg);
  static void set_has_cookiesblockedforurls(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiessessiononlyforurls(const CloudPolicySettings* msg);
  static void set_has_cookiessessiononlyforurls(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::enterprise_management::StringListPolicyProto& javascriptallowedforurls(const CloudPolicySettings* msg);
  static void set_has_javascriptallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::enterprise_management::StringListPolicyProto& javascriptblockedforurls(const CloudPolicySettings* msg);
  static void set_has_javascriptblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::enterprise_management::IntegerPolicyProto& legacysamesitecookiebehaviorenabled(const CloudPolicySettings* msg);
  static void set_has_legacysamesitecookiebehaviorenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& legacysamesitecookiebehaviorenabledfordomainlist(const CloudPolicySettings* msg);
  static void set_has_legacysamesitecookiebehaviorenabledfordomainlist(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static const ::enterprise_management::StringListPolicyProto& popupsallowedforurls(const CloudPolicySettings* msg);
  static void set_has_popupsallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::enterprise_management::StringListPolicyProto& popupsblockedforurls(const CloudPolicySettings* msg);
  static void set_has_popupsblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& translateenabled(const CloudPolicySettings* msg);
  static void set_has_translateenabled(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& editbookmarksenabled(const CloudPolicySettings* msg);
  static void set_has_editbookmarksenabled(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlblacklist(const CloudPolicySettings* msg);
  static void set_has_urlblacklist(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlwhitelist(const CloudPolicySettings* msg);
  static void set_has_urlwhitelist(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disablesafebrowsingproceedanyway(const CloudPolicySettings* msg);
  static void set_has_disablesafebrowsingproceedanyway(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& sharedclipboardenabled(const CloudPolicySettings* msg);
  static void set_has_sharedclipboardenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static const ::enterprise_management::StringPolicyProto& variationsrestrictparameter(const CloudPolicySettings* msg);
  static void set_has_variationsrestrictparameter(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::enterprise_management::StringPolicyProto& managedbookmarks(const CloudPolicySettings* msg);
  static void set_has_managedbookmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& datacompressionproxyenabled(const CloudPolicySettings* msg);
  static void set_has_datacompressionproxyenabled(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::enterprise_management::StringListPolicyProto& enabledeprecatedwebplatformfeatures(const CloudPolicySettings* msg);
  static void set_has_enabledeprecatedwebplatformfeatures(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcebrowsersignin(const CloudPolicySettings* msg);
  static void set_has_forcebrowsersignin(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::enterprise_management::IntegerPolicyProto& browsersignin(const CloudPolicySettings* msg);
  static void set_has_browsersignin(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static const ::enterprise_management::StringPolicyProto& sslversionmin(const CloudPolicySettings* msg);
  static void set_has_sslversionmin(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforurls(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforcas(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforcas(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforlegacycas(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforlegacycas(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& contextualsearchenabled(const CloudPolicySettings* msg);
  static void set_has_contextualsearchenabled(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& sslerroroverrideallowed(const CloudPolicySettings* msg);
  static void set_has_sslerroroverrideallowed(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::enterprise_management::StringPolicyProto& alloweddomainsforapps(const CloudPolicySettings* msg);
  static void set_has_alloweddomainsforapps(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enablemediarouter(const CloudPolicySettings* msg);
  static void set_has_enablemediarouter(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& ntpcontentsuggestionsenabled(const CloudPolicySettings* msg);
  static void set_has_ntpcontentsuggestionsenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::enterprise_management::StringPolicyProto& webrtcudpportrange(const CloudPolicySettings* msg);
  static void set_has_webrtcudpportrange(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::enterprise_management::StringPolicyProto& isolateoriginsandroid(const CloudPolicySettings* msg);
  static void set_has_isolateoriginsandroid(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static const ::enterprise_management::BooleanPolicyProto& siteperprocessandroid(const CloudPolicySettings* msg);
  static void set_has_siteperprocessandroid(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::enterprise_management::StringListPolicyProto& restrictaccountstopatterns(const CloudPolicySettings* msg);
  static void set_has_restrictaccountstopatterns(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::enterprise_management::StringListPolicyProto& overridesecurityrestrictionsoninsecureorigin(const CloudPolicySettings* msg);
  static void set_has_overridesecurityrestrictionsoninsecureorigin(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::enterprise_management::BooleanPolicyProto& urlkeyedanonymizeddatacollectionenabled(const CloudPolicySettings* msg);
  static void set_has_urlkeyedanonymizeddatacollectionenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::enterprise_management::StringListPolicyProto& coalesceh2connectionswithclientcertificatesforhosts(const CloudPolicySettings* msg);
  static void set_has_coalesceh2connectionswithclientcertificatesforhosts(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enterprisehardwareplatformapienabled(const CloudPolicySettings* msg);
  static void set_has_enterprisehardwareplatformapienabled(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowpopupsduringpageunload(const CloudPolicySettings* msg);
  static void set_has_allowpopupsduringpageunload(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static const ::enterprise_management::StringListPolicyProto& hstspolicybypasslist(const CloudPolicySettings* msg);
  static void set_has_hstspolicybypasslist(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowsyncxhrinpagedismissal(const CloudPolicySettings* msg);
  static void set_has_allowsyncxhrinpagedismissal(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static const ::enterprise_management::BooleanPolicyProto& tls13hardeningforlocalanchorsenabled(const CloudPolicySettings* msg);
  static void set_has_tls13hardeningforlocalanchorsenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static const ::enterprise_management::BooleanPolicyProto& webcomponentsv0enabled(const CloudPolicySettings* msg);
  static void set_has_webcomponentsv0enabled(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& paymentmethodqueryenabled(const CloudPolicySettings* msg);
  static void set_has_paymentmethodqueryenabled(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
};

const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::homepagelocation(const CloudPolicySettings* msg) {
  return *msg->homepagelocation_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::alternateerrorpagesenabled(const CloudPolicySettings* msg) {
  return *msg->alternateerrorpagesenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::searchsuggestenabled(const CloudPolicySettings* msg) {
  return *msg->searchsuggestenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::networkpredictionoptions(const CloudPolicySettings* msg) {
  return *msg->networkpredictionoptions_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::javascriptenabled(const CloudPolicySettings* msg) {
  return *msg->javascriptenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::incognitoenabled(const CloudPolicySettings* msg) {
  return *msg->incognitoenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::incognitomodeavailability(const CloudPolicySettings* msg) {
  return *msg->incognitomodeavailability_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::savingbrowserhistorydisabled(const CloudPolicySettings* msg) {
  return *msg->savingbrowserhistorydisabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::printingenabled(const CloudPolicySettings* msg) {
  return *msg->printingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcesafesearch(const CloudPolicySettings* msg) {
  return *msg->forcesafesearch_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcegooglesafesearch(const CloudPolicySettings* msg) {
  return *msg->forcegooglesafesearch_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forceyoutubesafetymode(const CloudPolicySettings* msg) {
  return *msg->forceyoutubesafetymode_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::forceyoutuberestrict(const CloudPolicySettings* msg) {
  return *msg->forceyoutuberestrict_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::safebrowsingenabled(const CloudPolicySettings* msg) {
  return *msg->safebrowsingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::passwordmanagerenabled(const CloudPolicySettings* msg) {
  return *msg->passwordmanagerenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::passwordleakdetectionenabled(const CloudPolicySettings* msg) {
  return *msg->passwordleakdetectionenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofillenabled(const CloudPolicySettings* msg) {
  return *msg->autofillenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofilladdressenabled(const CloudPolicySettings* msg) {
  return *msg->autofilladdressenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofillcreditcardenabled(const CloudPolicySettings* msg) {
  return *msg->autofillcreditcardenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::synctypeslistdisabled(const CloudPolicySettings* msg) {
  return *msg->synctypeslistdisabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::signinallowed(const CloudPolicySettings* msg) {
  return *msg->signinallowed_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxymode(const CloudPolicySettings* msg) {
  return *msg->proxymode_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::proxyservermode(const CloudPolicySettings* msg) {
  return *msg->proxyservermode_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxyserver(const CloudPolicySettings* msg) {
  return *msg->proxyserver_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxypacurl(const CloudPolicySettings* msg) {
  return *msg->proxypacurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxybypasslist(const CloudPolicySettings* msg) {
  return *msg->proxybypasslist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxysettings(const CloudPolicySettings* msg) {
  return *msg->proxysettings_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authschemes(const CloudPolicySettings* msg) {
  return *msg->authschemes_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disableauthnegotiatecnamelookup(const CloudPolicySettings* msg) {
  return *msg->disableauthnegotiatecnamelookup_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authserverwhitelist(const CloudPolicySettings* msg) {
  return *msg->authserverwhitelist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authnegotiatedelegatewhitelist(const CloudPolicySettings* msg) {
  return *msg->authnegotiatedelegatewhitelist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authandroidnegotiateaccounttype(const CloudPolicySettings* msg) {
  return *msg->authandroidnegotiateaccounttype_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::ntlmv2enabled(const CloudPolicySettings* msg) {
  return *msg->ntlmv2enabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderenabled(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidername(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidername_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderkeyword(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderkeyword_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersearchurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersearchurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersuggesturl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersuggesturl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidericonurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidericonurl_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderencodings(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderencodings_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovideralternateurls(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovideralternateurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderimageurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderimageurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidernewtaburl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidernewtaburl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersearchurlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersearchurlpostparams_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersuggesturlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersuggesturlpostparams_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderimageurlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderimageurlpostparams_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultcookiessetting(const CloudPolicySettings* msg) {
  return *msg->defaultcookiessetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultjavascriptsetting(const CloudPolicySettings* msg) {
  return *msg->defaultjavascriptsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultpopupssetting(const CloudPolicySettings* msg) {
  return *msg->defaultpopupssetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultgeolocationsetting(const CloudPolicySettings* msg) {
  return *msg->defaultgeolocationsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultwebbluetoothguardsetting(const CloudPolicySettings* msg) {
  return *msg->defaultwebbluetoothguardsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultwebusbguardsetting(const CloudPolicySettings* msg) {
  return *msg->defaultwebusbguardsetting_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::webusballowdevicesforurls(const CloudPolicySettings* msg) {
  return *msg->webusballowdevicesforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::webusbaskforurls(const CloudPolicySettings* msg) {
  return *msg->webusbaskforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::webusbblockedforurls(const CloudPolicySettings* msg) {
  return *msg->webusbblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiesallowedforurls(const CloudPolicySettings* msg) {
  return *msg->cookiesallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiesblockedforurls(const CloudPolicySettings* msg) {
  return *msg->cookiesblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiessessiononlyforurls(const CloudPolicySettings* msg) {
  return *msg->cookiessessiononlyforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::javascriptallowedforurls(const CloudPolicySettings* msg) {
  return *msg->javascriptallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::javascriptblockedforurls(const CloudPolicySettings* msg) {
  return *msg->javascriptblockedforurls_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::legacysamesitecookiebehaviorenabled(const CloudPolicySettings* msg) {
  return *msg->legacysamesitecookiebehaviorenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::legacysamesitecookiebehaviorenabledfordomainlist(const CloudPolicySettings* msg) {
  return *msg->legacysamesitecookiebehaviorenabledfordomainlist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::popupsallowedforurls(const CloudPolicySettings* msg) {
  return *msg->popupsallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::popupsblockedforurls(const CloudPolicySettings* msg) {
  return *msg->popupsblockedforurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::translateenabled(const CloudPolicySettings* msg) {
  return *msg->translateenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::editbookmarksenabled(const CloudPolicySettings* msg) {
  return *msg->editbookmarksenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlblacklist(const CloudPolicySettings* msg) {
  return *msg->urlblacklist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlwhitelist(const CloudPolicySettings* msg) {
  return *msg->urlwhitelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disablesafebrowsingproceedanyway(const CloudPolicySettings* msg) {
  return *msg->disablesafebrowsingproceedanyway_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::sharedclipboardenabled(const CloudPolicySettings* msg) {
  return *msg->sharedclipboardenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::variationsrestrictparameter(const CloudPolicySettings* msg) {
  return *msg->variationsrestrictparameter_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::managedbookmarks(const CloudPolicySettings* msg) {
  return *msg->managedbookmarks_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::datacompressionproxyenabled(const CloudPolicySettings* msg) {
  return *msg->datacompressionproxyenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::enabledeprecatedwebplatformfeatures(const CloudPolicySettings* msg) {
  return *msg->enabledeprecatedwebplatformfeatures_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcebrowsersignin(const CloudPolicySettings* msg) {
  return *msg->forcebrowsersignin_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::browsersignin(const CloudPolicySettings* msg) {
  return *msg->browsersignin_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::sslversionmin(const CloudPolicySettings* msg) {
  return *msg->sslversionmin_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforurls(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforcas(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforcas_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforlegacycas(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforlegacycas_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::contextualsearchenabled(const CloudPolicySettings* msg) {
  return *msg->contextualsearchenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::sslerroroverrideallowed(const CloudPolicySettings* msg) {
  return *msg->sslerroroverrideallowed_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::alloweddomainsforapps(const CloudPolicySettings* msg) {
  return *msg->alloweddomainsforapps_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enablemediarouter(const CloudPolicySettings* msg) {
  return *msg->enablemediarouter_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::ntpcontentsuggestionsenabled(const CloudPolicySettings* msg) {
  return *msg->ntpcontentsuggestionsenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::webrtcudpportrange(const CloudPolicySettings* msg) {
  return *msg->webrtcudpportrange_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::isolateoriginsandroid(const CloudPolicySettings* msg) {
  return *msg->isolateoriginsandroid_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::siteperprocessandroid(const CloudPolicySettings* msg) {
  return *msg->siteperprocessandroid_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::restrictaccountstopatterns(const CloudPolicySettings* msg) {
  return *msg->restrictaccountstopatterns_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::overridesecurityrestrictionsoninsecureorigin(const CloudPolicySettings* msg) {
  return *msg->overridesecurityrestrictionsoninsecureorigin_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::urlkeyedanonymizeddatacollectionenabled(const CloudPolicySettings* msg) {
  return *msg->urlkeyedanonymizeddatacollectionenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::coalesceh2connectionswithclientcertificatesforhosts(const CloudPolicySettings* msg) {
  return *msg->coalesceh2connectionswithclientcertificatesforhosts_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enterprisehardwareplatformapienabled(const CloudPolicySettings* msg) {
  return *msg->enterprisehardwareplatformapienabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowpopupsduringpageunload(const CloudPolicySettings* msg) {
  return *msg->allowpopupsduringpageunload_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::hstspolicybypasslist(const CloudPolicySettings* msg) {
  return *msg->hstspolicybypasslist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowsyncxhrinpagedismissal(const CloudPolicySettings* msg) {
  return *msg->allowsyncxhrinpagedismissal_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::tls13hardeningforlocalanchorsenabled(const CloudPolicySettings* msg) {
  return *msg->tls13hardeningforlocalanchorsenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::webcomponentsv0enabled(const CloudPolicySettings* msg) {
  return *msg->webcomponentsv0enabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::paymentmethodqueryenabled(const CloudPolicySettings* msg) {
  return *msg->paymentmethodqueryenabled_;
}
void CloudPolicySettings::clear_homepagelocation() {
  if (homepagelocation_ != nullptr) homepagelocation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CloudPolicySettings::clear_alternateerrorpagesenabled() {
  if (alternateerrorpagesenabled_ != nullptr) alternateerrorpagesenabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CloudPolicySettings::clear_searchsuggestenabled() {
  if (searchsuggestenabled_ != nullptr) searchsuggestenabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CloudPolicySettings::clear_networkpredictionoptions() {
  if (networkpredictionoptions_ != nullptr) networkpredictionoptions_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
void CloudPolicySettings::clear_javascriptenabled() {
  if (javascriptenabled_ != nullptr) javascriptenabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CloudPolicySettings::clear_incognitoenabled() {
  if (incognitoenabled_ != nullptr) incognitoenabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CloudPolicySettings::clear_incognitomodeavailability() {
  if (incognitomodeavailability_ != nullptr) incognitomodeavailability_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void CloudPolicySettings::clear_savingbrowserhistorydisabled() {
  if (savingbrowserhistorydisabled_ != nullptr) savingbrowserhistorydisabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CloudPolicySettings::clear_printingenabled() {
  if (printingenabled_ != nullptr) printingenabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CloudPolicySettings::clear_forcesafesearch() {
  if (forcesafesearch_ != nullptr) forcesafesearch_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void CloudPolicySettings::clear_forcegooglesafesearch() {
  if (forcegooglesafesearch_ != nullptr) forcegooglesafesearch_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
void CloudPolicySettings::clear_forceyoutubesafetymode() {
  if (forceyoutubesafetymode_ != nullptr) forceyoutubesafetymode_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
void CloudPolicySettings::clear_forceyoutuberestrict() {
  if (forceyoutuberestrict_ != nullptr) forceyoutuberestrict_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
void CloudPolicySettings::clear_safebrowsingenabled() {
  if (safebrowsingenabled_ != nullptr) safebrowsingenabled_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CloudPolicySettings::clear_passwordmanagerenabled() {
  if (passwordmanagerenabled_ != nullptr) passwordmanagerenabled_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CloudPolicySettings::clear_passwordleakdetectionenabled() {
  if (passwordleakdetectionenabled_ != nullptr) passwordleakdetectionenabled_->Clear();
  _has_bits_[2] &= ~0x02000000u;
}
void CloudPolicySettings::clear_autofillenabled() {
  if (autofillenabled_ != nullptr) autofillenabled_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CloudPolicySettings::clear_autofilladdressenabled() {
  if (autofilladdressenabled_ != nullptr) autofilladdressenabled_->Clear();
  _has_bits_[2] &= ~0x00040000u;
}
void CloudPolicySettings::clear_autofillcreditcardenabled() {
  if (autofillcreditcardenabled_ != nullptr) autofillcreditcardenabled_->Clear();
  _has_bits_[2] &= ~0x00000080u;
}
void CloudPolicySettings::clear_synctypeslistdisabled() {
  if (synctypeslistdisabled_ != nullptr) synctypeslistdisabled_->Clear();
  _has_bits_[3] &= ~0x00000002u;
}
void CloudPolicySettings::clear_signinallowed() {
  if (signinallowed_ != nullptr) signinallowed_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
void CloudPolicySettings::clear_proxymode() {
  if (proxymode_ != nullptr) proxymode_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CloudPolicySettings::clear_proxyservermode() {
  if (proxyservermode_ != nullptr) proxyservermode_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void CloudPolicySettings::clear_proxyserver() {
  if (proxyserver_ != nullptr) proxyserver_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void CloudPolicySettings::clear_proxypacurl() {
  if (proxypacurl_ != nullptr) proxypacurl_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void CloudPolicySettings::clear_proxybypasslist() {
  if (proxybypasslist_ != nullptr) proxybypasslist_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void CloudPolicySettings::clear_proxysettings() {
  if (proxysettings_ != nullptr) proxysettings_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
void CloudPolicySettings::clear_authschemes() {
  if (authschemes_ != nullptr) authschemes_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void CloudPolicySettings::clear_disableauthnegotiatecnamelookup() {
  if (disableauthnegotiatecnamelookup_ != nullptr) disableauthnegotiatecnamelookup_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void CloudPolicySettings::clear_authserverwhitelist() {
  if (authserverwhitelist_ != nullptr) authserverwhitelist_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void CloudPolicySettings::clear_authnegotiatedelegatewhitelist() {
  if (authnegotiatedelegatewhitelist_ != nullptr) authnegotiatedelegatewhitelist_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void CloudPolicySettings::clear_authandroidnegotiateaccounttype() {
  if (authandroidnegotiateaccounttype_ != nullptr) authandroidnegotiateaccounttype_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
void CloudPolicySettings::clear_ntlmv2enabled() {
  if (ntlmv2enabled_ != nullptr) ntlmv2enabled_->Clear();
  _has_bits_[2] &= ~0x00000100u;
}
void CloudPolicySettings::clear_defaultsearchproviderenabled() {
  if (defaultsearchproviderenabled_ != nullptr) defaultsearchproviderenabled_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void CloudPolicySettings::clear_defaultsearchprovidername() {
  if (defaultsearchprovidername_ != nullptr) defaultsearchprovidername_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void CloudPolicySettings::clear_defaultsearchproviderkeyword() {
  if (defaultsearchproviderkeyword_ != nullptr) defaultsearchproviderkeyword_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersearchurl() {
  if (defaultsearchprovidersearchurl_ != nullptr) defaultsearchprovidersearchurl_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersuggesturl() {
  if (defaultsearchprovidersuggesturl_ != nullptr) defaultsearchprovidersuggesturl_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void CloudPolicySettings::clear_defaultsearchprovidericonurl() {
  if (defaultsearchprovidericonurl_ != nullptr) defaultsearchprovidericonurl_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void CloudPolicySettings::clear_defaultsearchproviderencodings() {
  if (defaultsearchproviderencodings_ != nullptr) defaultsearchproviderencodings_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void CloudPolicySettings::clear_defaultsearchprovideralternateurls() {
  if (defaultsearchprovideralternateurls_ != nullptr) defaultsearchprovideralternateurls_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void CloudPolicySettings::clear_defaultsearchproviderimageurl() {
  if (defaultsearchproviderimageurl_ != nullptr) defaultsearchproviderimageurl_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void CloudPolicySettings::clear_defaultsearchprovidernewtaburl() {
  if (defaultsearchprovidernewtaburl_ != nullptr) defaultsearchprovidernewtaburl_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersearchurlpostparams() {
  if (defaultsearchprovidersearchurlpostparams_ != nullptr) defaultsearchprovidersearchurlpostparams_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersuggesturlpostparams() {
  if (defaultsearchprovidersuggesturlpostparams_ != nullptr) defaultsearchprovidersuggesturlpostparams_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
void CloudPolicySettings::clear_defaultsearchproviderimageurlpostparams() {
  if (defaultsearchproviderimageurlpostparams_ != nullptr) defaultsearchproviderimageurlpostparams_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void CloudPolicySettings::clear_defaultcookiessetting() {
  if (defaultcookiessetting_ != nullptr) defaultcookiessetting_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void CloudPolicySettings::clear_defaultjavascriptsetting() {
  if (defaultjavascriptsetting_ != nullptr) defaultjavascriptsetting_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void CloudPolicySettings::clear_defaultpopupssetting() {
  if (defaultpopupssetting_ != nullptr) defaultpopupssetting_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void CloudPolicySettings::clear_defaultgeolocationsetting() {
  if (defaultgeolocationsetting_ != nullptr) defaultgeolocationsetting_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void CloudPolicySettings::clear_defaultwebbluetoothguardsetting() {
  if (defaultwebbluetoothguardsetting_ != nullptr) defaultwebbluetoothguardsetting_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
void CloudPolicySettings::clear_defaultwebusbguardsetting() {
  if (defaultwebusbguardsetting_ != nullptr) defaultwebusbguardsetting_->Clear();
  _has_bits_[2] &= ~0x00000400u;
}
void CloudPolicySettings::clear_webusballowdevicesforurls() {
  if (webusballowdevicesforurls_ != nullptr) webusballowdevicesforurls_->Clear();
  _has_bits_[2] &= ~0x00400000u;
}
void CloudPolicySettings::clear_webusbaskforurls() {
  if (webusbaskforurls_ != nullptr) webusbaskforurls_->Clear();
  _has_bits_[2] &= ~0x00002000u;
}
void CloudPolicySettings::clear_webusbblockedforurls() {
  if (webusbblockedforurls_ != nullptr) webusbblockedforurls_->Clear();
  _has_bits_[2] &= ~0x00004000u;
}
void CloudPolicySettings::clear_cookiesallowedforurls() {
  if (cookiesallowedforurls_ != nullptr) cookiesallowedforurls_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void CloudPolicySettings::clear_cookiesblockedforurls() {
  if (cookiesblockedforurls_ != nullptr) cookiesblockedforurls_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void CloudPolicySettings::clear_cookiessessiononlyforurls() {
  if (cookiessessiononlyforurls_ != nullptr) cookiessessiononlyforurls_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void CloudPolicySettings::clear_javascriptallowedforurls() {
  if (javascriptallowedforurls_ != nullptr) javascriptallowedforurls_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void CloudPolicySettings::clear_javascriptblockedforurls() {
  if (javascriptblockedforurls_ != nullptr) javascriptblockedforurls_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void CloudPolicySettings::clear_legacysamesitecookiebehaviorenabled() {
  if (legacysamesitecookiebehaviorenabled_ != nullptr) legacysamesitecookiebehaviorenabled_->Clear();
  _has_bits_[2] &= ~0x20000000u;
}
void CloudPolicySettings::clear_legacysamesitecookiebehaviorenabledfordomainlist() {
  if (legacysamesitecookiebehaviorenabledfordomainlist_ != nullptr) legacysamesitecookiebehaviorenabledfordomainlist_->Clear();
  _has_bits_[2] &= ~0x40000000u;
}
void CloudPolicySettings::clear_popupsallowedforurls() {
  if (popupsallowedforurls_ != nullptr) popupsallowedforurls_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void CloudPolicySettings::clear_popupsblockedforurls() {
  if (popupsblockedforurls_ != nullptr) popupsblockedforurls_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void CloudPolicySettings::clear_translateenabled() {
  if (translateenabled_ != nullptr) translateenabled_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void CloudPolicySettings::clear_editbookmarksenabled() {
  if (editbookmarksenabled_ != nullptr) editbookmarksenabled_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void CloudPolicySettings::clear_urlblacklist() {
  if (urlblacklist_ != nullptr) urlblacklist_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
void CloudPolicySettings::clear_urlwhitelist() {
  if (urlwhitelist_ != nullptr) urlwhitelist_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
void CloudPolicySettings::clear_disablesafebrowsingproceedanyway() {
  if (disablesafebrowsingproceedanyway_ != nullptr) disablesafebrowsingproceedanyway_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
void CloudPolicySettings::clear_sharedclipboardenabled() {
  if (sharedclipboardenabled_ != nullptr) sharedclipboardenabled_->Clear();
  _has_bits_[2] &= ~0x10000000u;
}
void CloudPolicySettings::clear_variationsrestrictparameter() {
  if (variationsrestrictparameter_ != nullptr) variationsrestrictparameter_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void CloudPolicySettings::clear_managedbookmarks() {
  if (managedbookmarks_ != nullptr) managedbookmarks_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void CloudPolicySettings::clear_datacompressionproxyenabled() {
  if (datacompressionproxyenabled_ != nullptr) datacompressionproxyenabled_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
void CloudPolicySettings::clear_enabledeprecatedwebplatformfeatures() {
  if (enabledeprecatedwebplatformfeatures_ != nullptr) enabledeprecatedwebplatformfeatures_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
void CloudPolicySettings::clear_forcebrowsersignin() {
  if (forcebrowsersignin_ != nullptr) forcebrowsersignin_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
void CloudPolicySettings::clear_browsersignin() {
  if (browsersignin_ != nullptr) browsersignin_->Clear();
  _has_bits_[2] &= ~0x00800000u;
}
void CloudPolicySettings::clear_sslversionmin() {
  if (sslversionmin_ != nullptr) sslversionmin_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforurls() {
  if (certificatetransparencyenforcementdisabledforurls_ != nullptr) certificatetransparencyenforcementdisabledforurls_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforcas() {
  if (certificatetransparencyenforcementdisabledforcas_ != nullptr) certificatetransparencyenforcementdisabledforcas_->Clear();
  _has_bits_[2] &= ~0x00000800u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforlegacycas() {
  if (certificatetransparencyenforcementdisabledforlegacycas_ != nullptr) certificatetransparencyenforcementdisabledforlegacycas_->Clear();
  _has_bits_[2] &= ~0x00001000u;
}
void CloudPolicySettings::clear_contextualsearchenabled() {
  if (contextualsearchenabled_ != nullptr) contextualsearchenabled_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
void CloudPolicySettings::clear_sslerroroverrideallowed() {
  if (sslerroroverrideallowed_ != nullptr) sslerroroverrideallowed_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
void CloudPolicySettings::clear_alloweddomainsforapps() {
  if (alloweddomainsforapps_ != nullptr) alloweddomainsforapps_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
void CloudPolicySettings::clear_enablemediarouter() {
  if (enablemediarouter_ != nullptr) enablemediarouter_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
void CloudPolicySettings::clear_ntpcontentsuggestionsenabled() {
  if (ntpcontentsuggestionsenabled_ != nullptr) ntpcontentsuggestionsenabled_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
void CloudPolicySettings::clear_webrtcudpportrange() {
  if (webrtcudpportrange_ != nullptr) webrtcudpportrange_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
void CloudPolicySettings::clear_isolateoriginsandroid() {
  if (isolateoriginsandroid_ != nullptr) isolateoriginsandroid_->Clear();
  _has_bits_[2] &= ~0x00008000u;
}
void CloudPolicySettings::clear_siteperprocessandroid() {
  if (siteperprocessandroid_ != nullptr) siteperprocessandroid_->Clear();
  _has_bits_[2] &= ~0x00010000u;
}
void CloudPolicySettings::clear_restrictaccountstopatterns() {
  if (restrictaccountstopatterns_ != nullptr) restrictaccountstopatterns_->Clear();
  _has_bits_[2] &= ~0x00000200u;
}
void CloudPolicySettings::clear_overridesecurityrestrictionsoninsecureorigin() {
  if (overridesecurityrestrictionsoninsecureorigin_ != nullptr) overridesecurityrestrictionsoninsecureorigin_->Clear();
  _has_bits_[2] &= ~0x00020000u;
}
void CloudPolicySettings::clear_urlkeyedanonymizeddatacollectionenabled() {
  if (urlkeyedanonymizeddatacollectionenabled_ != nullptr) urlkeyedanonymizeddatacollectionenabled_->Clear();
  _has_bits_[2] &= ~0x00080000u;
}
void CloudPolicySettings::clear_coalesceh2connectionswithclientcertificatesforhosts() {
  if (coalesceh2connectionswithclientcertificatesforhosts_ != nullptr) coalesceh2connectionswithclientcertificatesforhosts_->Clear();
  _has_bits_[2] &= ~0x00100000u;
}
void CloudPolicySettings::clear_enterprisehardwareplatformapienabled() {
  if (enterprisehardwareplatformapienabled_ != nullptr) enterprisehardwareplatformapienabled_->Clear();
  _has_bits_[2] &= ~0x00200000u;
}
void CloudPolicySettings::clear_allowpopupsduringpageunload() {
  if (allowpopupsduringpageunload_ != nullptr) allowpopupsduringpageunload_->Clear();
  _has_bits_[2] &= ~0x01000000u;
}
void CloudPolicySettings::clear_hstspolicybypasslist() {
  if (hstspolicybypasslist_ != nullptr) hstspolicybypasslist_->Clear();
  _has_bits_[2] &= ~0x04000000u;
}
void CloudPolicySettings::clear_allowsyncxhrinpagedismissal() {
  if (allowsyncxhrinpagedismissal_ != nullptr) allowsyncxhrinpagedismissal_->Clear();
  _has_bits_[2] &= ~0x08000000u;
}
void CloudPolicySettings::clear_tls13hardeningforlocalanchorsenabled() {
  if (tls13hardeningforlocalanchorsenabled_ != nullptr) tls13hardeningforlocalanchorsenabled_->Clear();
  _has_bits_[2] &= ~0x80000000u;
}
void CloudPolicySettings::clear_webcomponentsv0enabled() {
  if (webcomponentsv0enabled_ != nullptr) webcomponentsv0enabled_->Clear();
  _has_bits_[3] &= ~0x00000001u;
}
void CloudPolicySettings::clear_paymentmethodqueryenabled() {
  if (paymentmethodqueryenabled_ != nullptr) paymentmethodqueryenabled_->Clear();
  _has_bits_[3] &= ~0x00000004u;
}
CloudPolicySettings::CloudPolicySettings()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CloudPolicySettings)
}
CloudPolicySettings::CloudPolicySettings(const CloudPolicySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_homepagelocation()) {
    homepagelocation_ = new ::enterprise_management::StringPolicyProto(*from.homepagelocation_);
  } else {
    homepagelocation_ = nullptr;
  }
  if (from.has_alternateerrorpagesenabled()) {
    alternateerrorpagesenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.alternateerrorpagesenabled_);
  } else {
    alternateerrorpagesenabled_ = nullptr;
  }
  if (from.has_searchsuggestenabled()) {
    searchsuggestenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.searchsuggestenabled_);
  } else {
    searchsuggestenabled_ = nullptr;
  }
  if (from.has_javascriptenabled()) {
    javascriptenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.javascriptenabled_);
  } else {
    javascriptenabled_ = nullptr;
  }
  if (from.has_incognitoenabled()) {
    incognitoenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.incognitoenabled_);
  } else {
    incognitoenabled_ = nullptr;
  }
  if (from.has_savingbrowserhistorydisabled()) {
    savingbrowserhistorydisabled_ = new ::enterprise_management::BooleanPolicyProto(*from.savingbrowserhistorydisabled_);
  } else {
    savingbrowserhistorydisabled_ = nullptr;
  }
  if (from.has_printingenabled()) {
    printingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.printingenabled_);
  } else {
    printingenabled_ = nullptr;
  }
  if (from.has_safebrowsingenabled()) {
    safebrowsingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.safebrowsingenabled_);
  } else {
    safebrowsingenabled_ = nullptr;
  }
  if (from.has_passwordmanagerenabled()) {
    passwordmanagerenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.passwordmanagerenabled_);
  } else {
    passwordmanagerenabled_ = nullptr;
  }
  if (from.has_autofillenabled()) {
    autofillenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofillenabled_);
  } else {
    autofillenabled_ = nullptr;
  }
  if (from.has_proxymode()) {
    proxymode_ = new ::enterprise_management::StringPolicyProto(*from.proxymode_);
  } else {
    proxymode_ = nullptr;
  }
  if (from.has_proxyservermode()) {
    proxyservermode_ = new ::enterprise_management::IntegerPolicyProto(*from.proxyservermode_);
  } else {
    proxyservermode_ = nullptr;
  }
  if (from.has_proxyserver()) {
    proxyserver_ = new ::enterprise_management::StringPolicyProto(*from.proxyserver_);
  } else {
    proxyserver_ = nullptr;
  }
  if (from.has_proxypacurl()) {
    proxypacurl_ = new ::enterprise_management::StringPolicyProto(*from.proxypacurl_);
  } else {
    proxypacurl_ = nullptr;
  }
  if (from.has_proxybypasslist()) {
    proxybypasslist_ = new ::enterprise_management::StringPolicyProto(*from.proxybypasslist_);
  } else {
    proxybypasslist_ = nullptr;
  }
  if (from.has_authschemes()) {
    authschemes_ = new ::enterprise_management::StringPolicyProto(*from.authschemes_);
  } else {
    authschemes_ = nullptr;
  }
  if (from.has_disableauthnegotiatecnamelookup()) {
    disableauthnegotiatecnamelookup_ = new ::enterprise_management::BooleanPolicyProto(*from.disableauthnegotiatecnamelookup_);
  } else {
    disableauthnegotiatecnamelookup_ = nullptr;
  }
  if (from.has_authserverwhitelist()) {
    authserverwhitelist_ = new ::enterprise_management::StringPolicyProto(*from.authserverwhitelist_);
  } else {
    authserverwhitelist_ = nullptr;
  }
  if (from.has_authnegotiatedelegatewhitelist()) {
    authnegotiatedelegatewhitelist_ = new ::enterprise_management::StringPolicyProto(*from.authnegotiatedelegatewhitelist_);
  } else {
    authnegotiatedelegatewhitelist_ = nullptr;
  }
  if (from.has_defaultsearchproviderenabled()) {
    defaultsearchproviderenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.defaultsearchproviderenabled_);
  } else {
    defaultsearchproviderenabled_ = nullptr;
  }
  if (from.has_defaultsearchprovidername()) {
    defaultsearchprovidername_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidername_);
  } else {
    defaultsearchprovidername_ = nullptr;
  }
  if (from.has_defaultsearchproviderkeyword()) {
    defaultsearchproviderkeyword_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderkeyword_);
  } else {
    defaultsearchproviderkeyword_ = nullptr;
  }
  if (from.has_defaultsearchprovidersearchurl()) {
    defaultsearchprovidersearchurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersearchurl_);
  } else {
    defaultsearchprovidersearchurl_ = nullptr;
  }
  if (from.has_defaultsearchprovidersuggesturl()) {
    defaultsearchprovidersuggesturl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersuggesturl_);
  } else {
    defaultsearchprovidersuggesturl_ = nullptr;
  }
  if (from.has_defaultsearchprovidericonurl()) {
    defaultsearchprovidericonurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidericonurl_);
  } else {
    defaultsearchprovidericonurl_ = nullptr;
  }
  if (from.has_defaultsearchproviderencodings()) {
    defaultsearchproviderencodings_ = new ::enterprise_management::StringListPolicyProto(*from.defaultsearchproviderencodings_);
  } else {
    defaultsearchproviderencodings_ = nullptr;
  }
  if (from.has_defaultcookiessetting()) {
    defaultcookiessetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultcookiessetting_);
  } else {
    defaultcookiessetting_ = nullptr;
  }
  if (from.has_defaultjavascriptsetting()) {
    defaultjavascriptsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultjavascriptsetting_);
  } else {
    defaultjavascriptsetting_ = nullptr;
  }
  if (from.has_defaultpopupssetting()) {
    defaultpopupssetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultpopupssetting_);
  } else {
    defaultpopupssetting_ = nullptr;
  }
  if (from.has_defaultgeolocationsetting()) {
    defaultgeolocationsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultgeolocationsetting_);
  } else {
    defaultgeolocationsetting_ = nullptr;
  }
  if (from.has_cookiesblockedforurls()) {
    cookiesblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiesblockedforurls_);
  } else {
    cookiesblockedforurls_ = nullptr;
  }
  if (from.has_cookiessessiononlyforurls()) {
    cookiessessiononlyforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiessessiononlyforurls_);
  } else {
    cookiessessiononlyforurls_ = nullptr;
  }
  if (from.has_javascriptallowedforurls()) {
    javascriptallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.javascriptallowedforurls_);
  } else {
    javascriptallowedforurls_ = nullptr;
  }
  if (from.has_javascriptblockedforurls()) {
    javascriptblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.javascriptblockedforurls_);
  } else {
    javascriptblockedforurls_ = nullptr;
  }
  if (from.has_popupsallowedforurls()) {
    popupsallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.popupsallowedforurls_);
  } else {
    popupsallowedforurls_ = nullptr;
  }
  if (from.has_popupsblockedforurls()) {
    popupsblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.popupsblockedforurls_);
  } else {
    popupsblockedforurls_ = nullptr;
  }
  if (from.has_cookiesallowedforurls()) {
    cookiesallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiesallowedforurls_);
  } else {
    cookiesallowedforurls_ = nullptr;
  }
  if (from.has_translateenabled()) {
    translateenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.translateenabled_);
  } else {
    translateenabled_ = nullptr;
  }
  if (from.has_editbookmarksenabled()) {
    editbookmarksenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.editbookmarksenabled_);
  } else {
    editbookmarksenabled_ = nullptr;
  }
  if (from.has_incognitomodeavailability()) {
    incognitomodeavailability_ = new ::enterprise_management::IntegerPolicyProto(*from.incognitomodeavailability_);
  } else {
    incognitomodeavailability_ = nullptr;
  }
  if (from.has_urlblacklist()) {
    urlblacklist_ = new ::enterprise_management::StringListPolicyProto(*from.urlblacklist_);
  } else {
    urlblacklist_ = nullptr;
  }
  if (from.has_urlwhitelist()) {
    urlwhitelist_ = new ::enterprise_management::StringListPolicyProto(*from.urlwhitelist_);
  } else {
    urlwhitelist_ = nullptr;
  }
  if (from.has_proxysettings()) {
    proxysettings_ = new ::enterprise_management::StringPolicyProto(*from.proxysettings_);
  } else {
    proxysettings_ = nullptr;
  }
  if (from.has_disablesafebrowsingproceedanyway()) {
    disablesafebrowsingproceedanyway_ = new ::enterprise_management::BooleanPolicyProto(*from.disablesafebrowsingproceedanyway_);
  } else {
    disablesafebrowsingproceedanyway_ = nullptr;
  }
  if (from.has_defaultsearchprovideralternateurls()) {
    defaultsearchprovideralternateurls_ = new ::enterprise_management::StringListPolicyProto(*from.defaultsearchprovideralternateurls_);
  } else {
    defaultsearchprovideralternateurls_ = nullptr;
  }
  if (from.has_forcesafesearch()) {
    forcesafesearch_ = new ::enterprise_management::BooleanPolicyProto(*from.forcesafesearch_);
  } else {
    forcesafesearch_ = nullptr;
  }
  if (from.has_signinallowed()) {
    signinallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.signinallowed_);
  } else {
    signinallowed_ = nullptr;
  }
  if (from.has_variationsrestrictparameter()) {
    variationsrestrictparameter_ = new ::enterprise_management::StringPolicyProto(*from.variationsrestrictparameter_);
  } else {
    variationsrestrictparameter_ = nullptr;
  }
  if (from.has_managedbookmarks()) {
    managedbookmarks_ = new ::enterprise_management::StringPolicyProto(*from.managedbookmarks_);
  } else {
    managedbookmarks_ = nullptr;
  }
  if (from.has_defaultsearchproviderimageurl()) {
    defaultsearchproviderimageurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderimageurl_);
  } else {
    defaultsearchproviderimageurl_ = nullptr;
  }
  if (from.has_defaultsearchprovidersearchurlpostparams()) {
    defaultsearchprovidersearchurlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersearchurlpostparams_);
  } else {
    defaultsearchprovidersearchurlpostparams_ = nullptr;
  }
  if (from.has_defaultsearchprovidersuggesturlpostparams()) {
    defaultsearchprovidersuggesturlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersuggesturlpostparams_);
  } else {
    defaultsearchprovidersuggesturlpostparams_ = nullptr;
  }
  if (from.has_defaultsearchproviderimageurlpostparams()) {
    defaultsearchproviderimageurlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderimageurlpostparams_);
  } else {
    defaultsearchproviderimageurlpostparams_ = nullptr;
  }
  if (from.has_defaultsearchprovidernewtaburl()) {
    defaultsearchprovidernewtaburl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidernewtaburl_);
  } else {
    defaultsearchprovidernewtaburl_ = nullptr;
  }
  if (from.has_datacompressionproxyenabled()) {
    datacompressionproxyenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.datacompressionproxyenabled_);
  } else {
    datacompressionproxyenabled_ = nullptr;
  }
  if (from.has_enabledeprecatedwebplatformfeatures()) {
    enabledeprecatedwebplatformfeatures_ = new ::enterprise_management::StringListPolicyProto(*from.enabledeprecatedwebplatformfeatures_);
  } else {
    enabledeprecatedwebplatformfeatures_ = nullptr;
  }
  if (from.has_networkpredictionoptions()) {
    networkpredictionoptions_ = new ::enterprise_management::IntegerPolicyProto(*from.networkpredictionoptions_);
  } else {
    networkpredictionoptions_ = nullptr;
  }
  if (from.has_sslversionmin()) {
    sslversionmin_ = new ::enterprise_management::StringPolicyProto(*from.sslversionmin_);
  } else {
    sslversionmin_ = nullptr;
  }
  if (from.has_contextualsearchenabled()) {
    contextualsearchenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.contextualsearchenabled_);
  } else {
    contextualsearchenabled_ = nullptr;
  }
  if (from.has_forcegooglesafesearch()) {
    forcegooglesafesearch_ = new ::enterprise_management::BooleanPolicyProto(*from.forcegooglesafesearch_);
  } else {
    forcegooglesafesearch_ = nullptr;
  }
  if (from.has_forceyoutubesafetymode()) {
    forceyoutubesafetymode_ = new ::enterprise_management::BooleanPolicyProto(*from.forceyoutubesafetymode_);
  } else {
    forceyoutubesafetymode_ = nullptr;
  }
  if (from.has_sslerroroverrideallowed()) {
    sslerroroverrideallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.sslerroroverrideallowed_);
  } else {
    sslerroroverrideallowed_ = nullptr;
  }
  if (from.has_authandroidnegotiateaccounttype()) {
    authandroidnegotiateaccounttype_ = new ::enterprise_management::StringPolicyProto(*from.authandroidnegotiateaccounttype_);
  } else {
    authandroidnegotiateaccounttype_ = nullptr;
  }
  if (from.has_defaultwebbluetoothguardsetting()) {
    defaultwebbluetoothguardsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultwebbluetoothguardsetting_);
  } else {
    defaultwebbluetoothguardsetting_ = nullptr;
  }
  if (from.has_alloweddomainsforapps()) {
    alloweddomainsforapps_ = new ::enterprise_management::StringPolicyProto(*from.alloweddomainsforapps_);
  } else {
    alloweddomainsforapps_ = nullptr;
  }
  if (from.has_enablemediarouter()) {
    enablemediarouter_ = new ::enterprise_management::BooleanPolicyProto(*from.enablemediarouter_);
  } else {
    enablemediarouter_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforurls()) {
    certificatetransparencyenforcementdisabledforurls_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforurls_);
  } else {
    certificatetransparencyenforcementdisabledforurls_ = nullptr;
  }
  if (from.has_ntpcontentsuggestionsenabled()) {
    ntpcontentsuggestionsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.ntpcontentsuggestionsenabled_);
  } else {
    ntpcontentsuggestionsenabled_ = nullptr;
  }
  if (from.has_webrtcudpportrange()) {
    webrtcudpportrange_ = new ::enterprise_management::StringPolicyProto(*from.webrtcudpportrange_);
  } else {
    webrtcudpportrange_ = nullptr;
  }
  if (from.has_forcebrowsersignin()) {
    forcebrowsersignin_ = new ::enterprise_management::BooleanPolicyProto(*from.forcebrowsersignin_);
  } else {
    forcebrowsersignin_ = nullptr;
  }
  if (from.has_forceyoutuberestrict()) {
    forceyoutuberestrict_ = new ::enterprise_management::IntegerPolicyProto(*from.forceyoutuberestrict_);
  } else {
    forceyoutuberestrict_ = nullptr;
  }
  if (from.has_autofillcreditcardenabled()) {
    autofillcreditcardenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofillcreditcardenabled_);
  } else {
    autofillcreditcardenabled_ = nullptr;
  }
  if (from.has_ntlmv2enabled()) {
    ntlmv2enabled_ = new ::enterprise_management::BooleanPolicyProto(*from.ntlmv2enabled_);
  } else {
    ntlmv2enabled_ = nullptr;
  }
  if (from.has_restrictaccountstopatterns()) {
    restrictaccountstopatterns_ = new ::enterprise_management::StringListPolicyProto(*from.restrictaccountstopatterns_);
  } else {
    restrictaccountstopatterns_ = nullptr;
  }
  if (from.has_defaultwebusbguardsetting()) {
    defaultwebusbguardsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultwebusbguardsetting_);
  } else {
    defaultwebusbguardsetting_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforcas()) {
    certificatetransparencyenforcementdisabledforcas_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforcas_);
  } else {
    certificatetransparencyenforcementdisabledforcas_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforlegacycas()) {
    certificatetransparencyenforcementdisabledforlegacycas_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforlegacycas_);
  } else {
    certificatetransparencyenforcementdisabledforlegacycas_ = nullptr;
  }
  if (from.has_webusbaskforurls()) {
    webusbaskforurls_ = new ::enterprise_management::StringListPolicyProto(*from.webusbaskforurls_);
  } else {
    webusbaskforurls_ = nullptr;
  }
  if (from.has_webusbblockedforurls()) {
    webusbblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.webusbblockedforurls_);
  } else {
    webusbblockedforurls_ = nullptr;
  }
  if (from.has_isolateoriginsandroid()) {
    isolateoriginsandroid_ = new ::enterprise_management::StringPolicyProto(*from.isolateoriginsandroid_);
  } else {
    isolateoriginsandroid_ = nullptr;
  }
  if (from.has_siteperprocessandroid()) {
    siteperprocessandroid_ = new ::enterprise_management::BooleanPolicyProto(*from.siteperprocessandroid_);
  } else {
    siteperprocessandroid_ = nullptr;
  }
  if (from.has_overridesecurityrestrictionsoninsecureorigin()) {
    overridesecurityrestrictionsoninsecureorigin_ = new ::enterprise_management::StringListPolicyProto(*from.overridesecurityrestrictionsoninsecureorigin_);
  } else {
    overridesecurityrestrictionsoninsecureorigin_ = nullptr;
  }
  if (from.has_autofilladdressenabled()) {
    autofilladdressenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofilladdressenabled_);
  } else {
    autofilladdressenabled_ = nullptr;
  }
  if (from.has_urlkeyedanonymizeddatacollectionenabled()) {
    urlkeyedanonymizeddatacollectionenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.urlkeyedanonymizeddatacollectionenabled_);
  } else {
    urlkeyedanonymizeddatacollectionenabled_ = nullptr;
  }
  if (from.has_coalesceh2connectionswithclientcertificatesforhosts()) {
    coalesceh2connectionswithclientcertificatesforhosts_ = new ::enterprise_management::StringListPolicyProto(*from.coalesceh2connectionswithclientcertificatesforhosts_);
  } else {
    coalesceh2connectionswithclientcertificatesforhosts_ = nullptr;
  }
  if (from.has_enterprisehardwareplatformapienabled()) {
    enterprisehardwareplatformapienabled_ = new ::enterprise_management::BooleanPolicyProto(*from.enterprisehardwareplatformapienabled_);
  } else {
    enterprisehardwareplatformapienabled_ = nullptr;
  }
  if (from.has_webusballowdevicesforurls()) {
    webusballowdevicesforurls_ = new ::enterprise_management::StringPolicyProto(*from.webusballowdevicesforurls_);
  } else {
    webusballowdevicesforurls_ = nullptr;
  }
  if (from.has_browsersignin()) {
    browsersignin_ = new ::enterprise_management::IntegerPolicyProto(*from.browsersignin_);
  } else {
    browsersignin_ = nullptr;
  }
  if (from.has_allowpopupsduringpageunload()) {
    allowpopupsduringpageunload_ = new ::enterprise_management::BooleanPolicyProto(*from.allowpopupsduringpageunload_);
  } else {
    allowpopupsduringpageunload_ = nullptr;
  }
  if (from.has_passwordleakdetectionenabled()) {
    passwordleakdetectionenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.passwordleakdetectionenabled_);
  } else {
    passwordleakdetectionenabled_ = nullptr;
  }
  if (from.has_hstspolicybypasslist()) {
    hstspolicybypasslist_ = new ::enterprise_management::StringListPolicyProto(*from.hstspolicybypasslist_);
  } else {
    hstspolicybypasslist_ = nullptr;
  }
  if (from.has_allowsyncxhrinpagedismissal()) {
    allowsyncxhrinpagedismissal_ = new ::enterprise_management::BooleanPolicyProto(*from.allowsyncxhrinpagedismissal_);
  } else {
    allowsyncxhrinpagedismissal_ = nullptr;
  }
  if (from.has_sharedclipboardenabled()) {
    sharedclipboardenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.sharedclipboardenabled_);
  } else {
    sharedclipboardenabled_ = nullptr;
  }
  if (from.has_legacysamesitecookiebehaviorenabled()) {
    legacysamesitecookiebehaviorenabled_ = new ::enterprise_management::IntegerPolicyProto(*from.legacysamesitecookiebehaviorenabled_);
  } else {
    legacysamesitecookiebehaviorenabled_ = nullptr;
  }
  if (from.has_legacysamesitecookiebehaviorenabledfordomainlist()) {
    legacysamesitecookiebehaviorenabledfordomainlist_ = new ::enterprise_management::StringListPolicyProto(*from.legacysamesitecookiebehaviorenabledfordomainlist_);
  } else {
    legacysamesitecookiebehaviorenabledfordomainlist_ = nullptr;
  }
  if (from.has_tls13hardeningforlocalanchorsenabled()) {
    tls13hardeningforlocalanchorsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.tls13hardeningforlocalanchorsenabled_);
  } else {
    tls13hardeningforlocalanchorsenabled_ = nullptr;
  }
  if (from.has_webcomponentsv0enabled()) {
    webcomponentsv0enabled_ = new ::enterprise_management::BooleanPolicyProto(*from.webcomponentsv0enabled_);
  } else {
    webcomponentsv0enabled_ = nullptr;
  }
  if (from.has_synctypeslistdisabled()) {
    synctypeslistdisabled_ = new ::enterprise_management::StringListPolicyProto(*from.synctypeslistdisabled_);
  } else {
    synctypeslistdisabled_ = nullptr;
  }
  if (from.has_paymentmethodqueryenabled()) {
    paymentmethodqueryenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.paymentmethodqueryenabled_);
  } else {
    paymentmethodqueryenabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CloudPolicySettings)
}

void CloudPolicySettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto.base);
  ::memset(&homepagelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paymentmethodqueryenabled_) -
      reinterpret_cast<char*>(&homepagelocation_)) + sizeof(paymentmethodqueryenabled_));
}

CloudPolicySettings::~CloudPolicySettings() {
  // @@protoc_insertion_point(destructor:enterprise_management.CloudPolicySettings)
  SharedDtor();
}

void CloudPolicySettings::SharedDtor() {
  if (this != internal_default_instance()) delete homepagelocation_;
  if (this != internal_default_instance()) delete alternateerrorpagesenabled_;
  if (this != internal_default_instance()) delete searchsuggestenabled_;
  if (this != internal_default_instance()) delete javascriptenabled_;
  if (this != internal_default_instance()) delete incognitoenabled_;
  if (this != internal_default_instance()) delete savingbrowserhistorydisabled_;
  if (this != internal_default_instance()) delete printingenabled_;
  if (this != internal_default_instance()) delete safebrowsingenabled_;
  if (this != internal_default_instance()) delete passwordmanagerenabled_;
  if (this != internal_default_instance()) delete autofillenabled_;
  if (this != internal_default_instance()) delete proxymode_;
  if (this != internal_default_instance()) delete proxyservermode_;
  if (this != internal_default_instance()) delete proxyserver_;
  if (this != internal_default_instance()) delete proxypacurl_;
  if (this != internal_default_instance()) delete proxybypasslist_;
  if (this != internal_default_instance()) delete authschemes_;
  if (this != internal_default_instance()) delete disableauthnegotiatecnamelookup_;
  if (this != internal_default_instance()) delete authserverwhitelist_;
  if (this != internal_default_instance()) delete authnegotiatedelegatewhitelist_;
  if (this != internal_default_instance()) delete defaultsearchproviderenabled_;
  if (this != internal_default_instance()) delete defaultsearchprovidername_;
  if (this != internal_default_instance()) delete defaultsearchproviderkeyword_;
  if (this != internal_default_instance()) delete defaultsearchprovidersearchurl_;
  if (this != internal_default_instance()) delete defaultsearchprovidersuggesturl_;
  if (this != internal_default_instance()) delete defaultsearchprovidericonurl_;
  if (this != internal_default_instance()) delete defaultsearchproviderencodings_;
  if (this != internal_default_instance()) delete defaultcookiessetting_;
  if (this != internal_default_instance()) delete defaultjavascriptsetting_;
  if (this != internal_default_instance()) delete defaultpopupssetting_;
  if (this != internal_default_instance()) delete defaultgeolocationsetting_;
  if (this != internal_default_instance()) delete cookiesblockedforurls_;
  if (this != internal_default_instance()) delete cookiessessiononlyforurls_;
  if (this != internal_default_instance()) delete javascriptallowedforurls_;
  if (this != internal_default_instance()) delete javascriptblockedforurls_;
  if (this != internal_default_instance()) delete popupsallowedforurls_;
  if (this != internal_default_instance()) delete popupsblockedforurls_;
  if (this != internal_default_instance()) delete cookiesallowedforurls_;
  if (this != internal_default_instance()) delete translateenabled_;
  if (this != internal_default_instance()) delete editbookmarksenabled_;
  if (this != internal_default_instance()) delete incognitomodeavailability_;
  if (this != internal_default_instance()) delete urlblacklist_;
  if (this != internal_default_instance()) delete urlwhitelist_;
  if (this != internal_default_instance()) delete proxysettings_;
  if (this != internal_default_instance()) delete disablesafebrowsingproceedanyway_;
  if (this != internal_default_instance()) delete defaultsearchprovideralternateurls_;
  if (this != internal_default_instance()) delete forcesafesearch_;
  if (this != internal_default_instance()) delete signinallowed_;
  if (this != internal_default_instance()) delete variationsrestrictparameter_;
  if (this != internal_default_instance()) delete managedbookmarks_;
  if (this != internal_default_instance()) delete defaultsearchproviderimageurl_;
  if (this != internal_default_instance()) delete defaultsearchprovidersearchurlpostparams_;
  if (this != internal_default_instance()) delete defaultsearchprovidersuggesturlpostparams_;
  if (this != internal_default_instance()) delete defaultsearchproviderimageurlpostparams_;
  if (this != internal_default_instance()) delete defaultsearchprovidernewtaburl_;
  if (this != internal_default_instance()) delete datacompressionproxyenabled_;
  if (this != internal_default_instance()) delete enabledeprecatedwebplatformfeatures_;
  if (this != internal_default_instance()) delete networkpredictionoptions_;
  if (this != internal_default_instance()) delete sslversionmin_;
  if (this != internal_default_instance()) delete contextualsearchenabled_;
  if (this != internal_default_instance()) delete forcegooglesafesearch_;
  if (this != internal_default_instance()) delete forceyoutubesafetymode_;
  if (this != internal_default_instance()) delete sslerroroverrideallowed_;
  if (this != internal_default_instance()) delete authandroidnegotiateaccounttype_;
  if (this != internal_default_instance()) delete defaultwebbluetoothguardsetting_;
  if (this != internal_default_instance()) delete alloweddomainsforapps_;
  if (this != internal_default_instance()) delete enablemediarouter_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforurls_;
  if (this != internal_default_instance()) delete ntpcontentsuggestionsenabled_;
  if (this != internal_default_instance()) delete webrtcudpportrange_;
  if (this != internal_default_instance()) delete forcebrowsersignin_;
  if (this != internal_default_instance()) delete forceyoutuberestrict_;
  if (this != internal_default_instance()) delete autofillcreditcardenabled_;
  if (this != internal_default_instance()) delete ntlmv2enabled_;
  if (this != internal_default_instance()) delete restrictaccountstopatterns_;
  if (this != internal_default_instance()) delete defaultwebusbguardsetting_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforcas_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforlegacycas_;
  if (this != internal_default_instance()) delete webusbaskforurls_;
  if (this != internal_default_instance()) delete webusbblockedforurls_;
  if (this != internal_default_instance()) delete isolateoriginsandroid_;
  if (this != internal_default_instance()) delete siteperprocessandroid_;
  if (this != internal_default_instance()) delete overridesecurityrestrictionsoninsecureorigin_;
  if (this != internal_default_instance()) delete autofilladdressenabled_;
  if (this != internal_default_instance()) delete urlkeyedanonymizeddatacollectionenabled_;
  if (this != internal_default_instance()) delete coalesceh2connectionswithclientcertificatesforhosts_;
  if (this != internal_default_instance()) delete enterprisehardwareplatformapienabled_;
  if (this != internal_default_instance()) delete webusballowdevicesforurls_;
  if (this != internal_default_instance()) delete browsersignin_;
  if (this != internal_default_instance()) delete allowpopupsduringpageunload_;
  if (this != internal_default_instance()) delete passwordleakdetectionenabled_;
  if (this != internal_default_instance()) delete hstspolicybypasslist_;
  if (this != internal_default_instance()) delete allowsyncxhrinpagedismissal_;
  if (this != internal_default_instance()) delete sharedclipboardenabled_;
  if (this != internal_default_instance()) delete legacysamesitecookiebehaviorenabled_;
  if (this != internal_default_instance()) delete legacysamesitecookiebehaviorenabledfordomainlist_;
  if (this != internal_default_instance()) delete tls13hardeningforlocalanchorsenabled_;
  if (this != internal_default_instance()) delete webcomponentsv0enabled_;
  if (this != internal_default_instance()) delete synctypeslistdisabled_;
  if (this != internal_default_instance()) delete paymentmethodqueryenabled_;
}

void CloudPolicySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudPolicySettings& CloudPolicySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void CloudPolicySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CloudPolicySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(homepagelocation_ != nullptr);
      homepagelocation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(alternateerrorpagesenabled_ != nullptr);
      alternateerrorpagesenabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(searchsuggestenabled_ != nullptr);
      searchsuggestenabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(javascriptenabled_ != nullptr);
      javascriptenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(incognitoenabled_ != nullptr);
      incognitoenabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(savingbrowserhistorydisabled_ != nullptr);
      savingbrowserhistorydisabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(printingenabled_ != nullptr);
      printingenabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(safebrowsingenabled_ != nullptr);
      safebrowsingenabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(passwordmanagerenabled_ != nullptr);
      passwordmanagerenabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(autofillenabled_ != nullptr);
      autofillenabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(proxymode_ != nullptr);
      proxymode_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(proxyservermode_ != nullptr);
      proxyservermode_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(proxyserver_ != nullptr);
      proxyserver_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(proxypacurl_ != nullptr);
      proxypacurl_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(proxybypasslist_ != nullptr);
      proxybypasslist_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(authschemes_ != nullptr);
      authschemes_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(disableauthnegotiatecnamelookup_ != nullptr);
      disableauthnegotiatecnamelookup_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(authserverwhitelist_ != nullptr);
      authserverwhitelist_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(authnegotiatedelegatewhitelist_ != nullptr);
      authnegotiatedelegatewhitelist_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(defaultsearchproviderenabled_ != nullptr);
      defaultsearchproviderenabled_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(defaultsearchprovidername_ != nullptr);
      defaultsearchprovidername_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(defaultsearchproviderkeyword_ != nullptr);
      defaultsearchproviderkeyword_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(defaultsearchprovidersearchurl_ != nullptr);
      defaultsearchprovidersearchurl_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(defaultsearchprovidersuggesturl_ != nullptr);
      defaultsearchprovidersuggesturl_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(defaultsearchprovidericonurl_ != nullptr);
      defaultsearchprovidericonurl_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(defaultsearchproviderencodings_ != nullptr);
      defaultsearchproviderencodings_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(defaultcookiessetting_ != nullptr);
      defaultcookiessetting_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(defaultjavascriptsetting_ != nullptr);
      defaultjavascriptsetting_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(defaultpopupssetting_ != nullptr);
      defaultpopupssetting_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(defaultgeolocationsetting_ != nullptr);
      defaultgeolocationsetting_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(cookiesblockedforurls_ != nullptr);
      cookiesblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(cookiessessiononlyforurls_ != nullptr);
      cookiessessiononlyforurls_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(javascriptallowedforurls_ != nullptr);
      javascriptallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(javascriptblockedforurls_ != nullptr);
      javascriptblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(popupsallowedforurls_ != nullptr);
      popupsallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(popupsblockedforurls_ != nullptr);
      popupsblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cookiesallowedforurls_ != nullptr);
      cookiesallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(translateenabled_ != nullptr);
      translateenabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(editbookmarksenabled_ != nullptr);
      editbookmarksenabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(incognitomodeavailability_ != nullptr);
      incognitomodeavailability_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(urlblacklist_ != nullptr);
      urlblacklist_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(urlwhitelist_ != nullptr);
      urlwhitelist_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(proxysettings_ != nullptr);
      proxysettings_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(disablesafebrowsingproceedanyway_ != nullptr);
      disablesafebrowsingproceedanyway_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(defaultsearchprovideralternateurls_ != nullptr);
      defaultsearchprovideralternateurls_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(forcesafesearch_ != nullptr);
      forcesafesearch_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(signinallowed_ != nullptr);
      signinallowed_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(variationsrestrictparameter_ != nullptr);
      variationsrestrictparameter_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(managedbookmarks_ != nullptr);
      managedbookmarks_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(defaultsearchproviderimageurl_ != nullptr);
      defaultsearchproviderimageurl_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(defaultsearchprovidersearchurlpostparams_ != nullptr);
      defaultsearchprovidersearchurlpostparams_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(defaultsearchprovidersuggesturlpostparams_ != nullptr);
      defaultsearchprovidersuggesturlpostparams_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(defaultsearchproviderimageurlpostparams_ != nullptr);
      defaultsearchproviderimageurlpostparams_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(defaultsearchprovidernewtaburl_ != nullptr);
      defaultsearchprovidernewtaburl_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(datacompressionproxyenabled_ != nullptr);
      datacompressionproxyenabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(enabledeprecatedwebplatformfeatures_ != nullptr);
      enabledeprecatedwebplatformfeatures_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(networkpredictionoptions_ != nullptr);
      networkpredictionoptions_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(sslversionmin_ != nullptr);
      sslversionmin_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(contextualsearchenabled_ != nullptr);
      contextualsearchenabled_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(forcegooglesafesearch_ != nullptr);
      forcegooglesafesearch_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(forceyoutubesafetymode_ != nullptr);
      forceyoutubesafetymode_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(sslerroroverrideallowed_ != nullptr);
      sslerroroverrideallowed_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(authandroidnegotiateaccounttype_ != nullptr);
      authandroidnegotiateaccounttype_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(defaultwebbluetoothguardsetting_ != nullptr);
      defaultwebbluetoothguardsetting_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(alloweddomainsforapps_ != nullptr);
      alloweddomainsforapps_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enablemediarouter_ != nullptr);
      enablemediarouter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforurls_ != nullptr);
      certificatetransparencyenforcementdisabledforurls_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ntpcontentsuggestionsenabled_ != nullptr);
      ntpcontentsuggestionsenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(webrtcudpportrange_ != nullptr);
      webrtcudpportrange_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(forcebrowsersignin_ != nullptr);
      forcebrowsersignin_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(forceyoutuberestrict_ != nullptr);
      forceyoutuberestrict_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(autofillcreditcardenabled_ != nullptr);
      autofillcreditcardenabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ntlmv2enabled_ != nullptr);
      ntlmv2enabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(restrictaccountstopatterns_ != nullptr);
      restrictaccountstopatterns_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(defaultwebusbguardsetting_ != nullptr);
      defaultwebusbguardsetting_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforcas_ != nullptr);
      certificatetransparencyenforcementdisabledforcas_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforlegacycas_ != nullptr);
      certificatetransparencyenforcementdisabledforlegacycas_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(webusbaskforurls_ != nullptr);
      webusbaskforurls_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(webusbblockedforurls_ != nullptr);
      webusbblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(isolateoriginsandroid_ != nullptr);
      isolateoriginsandroid_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(siteperprocessandroid_ != nullptr);
      siteperprocessandroid_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(overridesecurityrestrictionsoninsecureorigin_ != nullptr);
      overridesecurityrestrictionsoninsecureorigin_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(autofilladdressenabled_ != nullptr);
      autofilladdressenabled_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(urlkeyedanonymizeddatacollectionenabled_ != nullptr);
      urlkeyedanonymizeddatacollectionenabled_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(coalesceh2connectionswithclientcertificatesforhosts_ != nullptr);
      coalesceh2connectionswithclientcertificatesforhosts_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(enterprisehardwareplatformapienabled_ != nullptr);
      enterprisehardwareplatformapienabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(webusballowdevicesforurls_ != nullptr);
      webusballowdevicesforurls_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(browsersignin_ != nullptr);
      browsersignin_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(allowpopupsduringpageunload_ != nullptr);
      allowpopupsduringpageunload_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(passwordleakdetectionenabled_ != nullptr);
      passwordleakdetectionenabled_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(hstspolicybypasslist_ != nullptr);
      hstspolicybypasslist_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(allowsyncxhrinpagedismissal_ != nullptr);
      allowsyncxhrinpagedismissal_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(sharedclipboardenabled_ != nullptr);
      sharedclipboardenabled_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(legacysamesitecookiebehaviorenabled_ != nullptr);
      legacysamesitecookiebehaviorenabled_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(legacysamesitecookiebehaviorenabledfordomainlist_ != nullptr);
      legacysamesitecookiebehaviorenabledfordomainlist_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(tls13hardeningforlocalanchorsenabled_ != nullptr);
      tls13hardeningforlocalanchorsenabled_->Clear();
    }
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(webcomponentsv0enabled_ != nullptr);
      webcomponentsv0enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(synctypeslistdisabled_ != nullptr);
      synctypeslistdisabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(paymentmethodqueryenabled_ != nullptr);
      paymentmethodqueryenabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudPolicySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_homepagelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_alternateerrorpagesenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_searchsuggestenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_javascriptenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_incognitoenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_savingbrowserhistorydisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_printingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_safebrowsingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_passwordmanagerenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_autofillenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_proxymode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_proxyservermode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_proxyserver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_proxypacurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_proxybypasslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_authschemes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_disableauthnegotiatecnamelookup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_authserverwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_authnegotiatedelegatewhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidername(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderkeyword(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersearchurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersuggesturl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidericonurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderencodings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_defaultcookiessetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_defaultjavascriptsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_defaultpopupssetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_defaultgeolocationsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cookiesblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cookiessessiononlyforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_javascriptallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_javascriptblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_popupsallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_popupsblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_cookiesallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_translateenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_editbookmarksenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_incognitomodeavailability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_urlblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_urlwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_proxysettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_disablesafebrowsingproceedanyway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovideralternateurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_forcesafesearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_signinallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_variationsrestrictparameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
      case 229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_managedbookmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderimageurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersearchurlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
      case 233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersuggesturlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderimageurlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
      case 239:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidernewtaburl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DataCompressionProxyEnabled = 243;
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_datacompressionproxyenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
      case 272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_enabledeprecatedwebplatformfeatures(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
      case 275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_networkpredictionoptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
      case 281:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_sslversionmin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ContextualSearchEnabled = 283;
      case 283:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_contextualsearchenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
      case 284:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_forcegooglesafesearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
      case 285:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_forceyoutubesafetymode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_sslerroroverrideallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthAndroidNegotiateAccountType = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_authandroidnegotiateaccounttype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_defaultwebbluetoothguardsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_alloweddomainsforapps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_enablemediarouter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
      case 337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto NTPContentSuggestionsEnabled = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ntpcontentsuggestionsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
      case 341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_webrtcudpportrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceBrowserSignin = 348;
      case 348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_forcebrowsersignin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_forceyoutuberestrict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_autofillcreditcardenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
      case 395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ntlmv2enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto RestrictAccountsToPatterns = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_restrictaccountstopatterns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
      case 436:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_defaultwebusbguardsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
      case 437:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforcas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
      case 438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforlegacycas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
      case 441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_webusbaskforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
      case 442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_webusbblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto IsolateOriginsAndroid = 447;
      case 447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_isolateoriginsandroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SitePerProcessAndroid = 448;
      case 448:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_siteperprocessandroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
      case 459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_overridesecurityrestrictionsoninsecureorigin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
      case 461:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_autofilladdressenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
      case 463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_urlkeyedanonymizeddatacollectionenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
      case 468:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_coalesceh2connectionswithclientcertificatesforhosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
      case 485:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_enterprisehardwareplatformapienabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
      case 488:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_webusballowdevicesforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
      case 489:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_browsersignin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
      case 535:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_allowpopupsduringpageunload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
      case 582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_passwordleakdetectionenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_hstspolicybypasslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
      case 606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_allowsyncxhrinpagedismissal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sharedclipboardenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
      case 625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_legacysamesitecookiebehaviorenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
      case 626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_legacysamesitecookiebehaviorenabledfordomainlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
      case 628:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_tls13hardeningforlocalanchorsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto WebComponentsV0Enabled = 646;
      case 646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_webcomponentsv0enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
      case 651:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_synctypeslistdisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
      case 653:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_paymentmethodqueryenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudPolicySettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CloudPolicySettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_homepagelocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alternateerrorpagesenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_searchsuggestenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incognitoenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_savingbrowserhistorydisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safebrowsingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordmanagerenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofillenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxymode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxyservermode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxyserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxypacurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxybypasslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authschemes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disableauthnegotiatecnamelookup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authserverwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authnegotiatedelegatewhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderkeyword()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersearchurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersuggesturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidericonurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderencodings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultcookiessetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultjavascriptsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultpopupssetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultgeolocationsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiesblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiessessiononlyforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
      case 77: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_popupsallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
      case 78: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_popupsblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
      case 79: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiesallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_translateenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_editbookmarksenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
      case 95: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incognitomodeavailability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxysettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
      case 152: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disablesafebrowsingproceedanyway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
      case 163: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovideralternateurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
      case 164: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcesafesearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
      case 192: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signinallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
      case 198: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variationsrestrictparameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
      case 229: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managedbookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
      case 231: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderimageurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
      case 232: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersearchurlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
      case 233: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersuggesturlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
      case 235: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderimageurlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
      case 239: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidernewtaburl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DataCompressionProxyEnabled = 243;
      case 243: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_datacompressionproxyenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
      case 272: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabledeprecatedwebplatformfeatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
      case 275: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networkpredictionoptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
      case 281: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sslversionmin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ContextualSearchEnabled = 283;
      case 283: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contextualsearchenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
      case 284: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcegooglesafesearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
      case 285: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forceyoutubesafetymode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
      case 302: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sslerroroverrideallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthAndroidNegotiateAccountType = 307;
      case 307: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authandroidnegotiateaccounttype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
      case 322: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultwebbluetoothguardsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
      case 333: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloweddomainsforapps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
      case 335: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enablemediarouter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
      case 337: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto NTPContentSuggestionsEnabled = 340;
      case 340: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ntpcontentsuggestionsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
      case 341: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webrtcudpportrange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceBrowserSignin = 348;
      case 348: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcebrowsersignin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
      case 350: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forceyoutuberestrict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
      case 394: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofillcreditcardenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
      case 395: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ntlmv2enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto RestrictAccountsToPatterns = 412;
      case 412: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restrictaccountstopatterns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
      case 436: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultwebusbguardsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
      case 437: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforcas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
      case 438: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforlegacycas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
      case 441: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusbaskforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
      case 442: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusbblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto IsolateOriginsAndroid = 447;
      case 447: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_isolateoriginsandroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SitePerProcessAndroid = 448;
      case 448: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_siteperprocessandroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
      case 459: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_overridesecurityrestrictionsoninsecureorigin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
      case 461: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofilladdressenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
      case 463: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlkeyedanonymizeddatacollectionenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
      case 468: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_coalesceh2connectionswithclientcertificatesforhosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
      case 485: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enterprisehardwareplatformapienabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
      case 488: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusballowdevicesforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
      case 489: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browsersignin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
      case 535: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowpopupsduringpageunload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
      case 582: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordleakdetectionenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
      case 603: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hstspolicybypasslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
      case 606: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowsyncxhrinpagedismissal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
      case 612: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sharedclipboardenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
      case 625: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_legacysamesitecookiebehaviorenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
      case 626: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_legacysamesitecookiebehaviorenabledfordomainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
      case 628: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tls13hardeningforlocalanchorsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto WebComponentsV0Enabled = 646;
      case 646: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webcomponentsv0enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
      case 651: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_synctypeslistdisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
      case 653: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paymentmethodqueryenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CloudPolicySettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CloudPolicySettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudPolicySettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CloudPolicySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::homepagelocation(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::alternateerrorpagesenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::searchsuggestenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::javascriptenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::incognitoenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::savingbrowserhistorydisabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::printingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::safebrowsingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::passwordmanagerenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::autofillenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::proxymode(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::proxyservermode(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::proxyserver(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::proxypacurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::proxybypasslist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::authschemes(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::disableauthnegotiatecnamelookup(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::authserverwhitelist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::authnegotiatedelegatewhitelist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      42, _Internal::defaultsearchproviderenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::defaultsearchprovidername(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::defaultsearchproviderkeyword(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      45, _Internal::defaultsearchprovidersearchurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      46, _Internal::defaultsearchprovidersuggesturl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      48, _Internal::defaultsearchprovidericonurl(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      49, _Internal::defaultsearchproviderencodings(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      50, _Internal::defaultcookiessetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      52, _Internal::defaultjavascriptsetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54, _Internal::defaultpopupssetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      56, _Internal::defaultgeolocationsetting(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      69, _Internal::cookiesblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      70, _Internal::cookiessessiononlyforurls(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      73, _Internal::javascriptallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      74, _Internal::javascriptblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      77, _Internal::popupsallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      78, _Internal::popupsblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      79, _Internal::cookiesallowedforurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      82, _Internal::translateenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      85, _Internal::editbookmarksenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      95, _Internal::incognitomodeavailability(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      105, _Internal::urlblacklist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      106, _Internal::urlwhitelist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      118, _Internal::proxysettings(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      152, _Internal::disablesafebrowsingproceedanyway(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      163, _Internal::defaultsearchprovideralternateurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      164, _Internal::forcesafesearch(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      192, _Internal::signinallowed(this), output);
  }

  // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      198, _Internal::variationsrestrictparameter(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      229, _Internal::managedbookmarks(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      231, _Internal::defaultsearchproviderimageurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      232, _Internal::defaultsearchprovidersearchurlpostparams(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      233, _Internal::defaultsearchprovidersuggesturlpostparams(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      235, _Internal::defaultsearchproviderimageurlpostparams(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      239, _Internal::defaultsearchprovidernewtaburl(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DataCompressionProxyEnabled = 243;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      243, _Internal::datacompressionproxyenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      272, _Internal::enabledeprecatedwebplatformfeatures(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      275, _Internal::networkpredictionoptions(this), output);
  }

  // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      281, _Internal::sslversionmin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ContextualSearchEnabled = 283;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      283, _Internal::contextualsearchenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      284, _Internal::forcegooglesafesearch(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      285, _Internal::forceyoutubesafetymode(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      302, _Internal::sslerroroverrideallowed(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthAndroidNegotiateAccountType = 307;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      307, _Internal::authandroidnegotiateaccounttype(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      322, _Internal::defaultwebbluetoothguardsetting(this), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      333, _Internal::alloweddomainsforapps(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      335, _Internal::enablemediarouter(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      337, _Internal::certificatetransparencyenforcementdisabledforurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto NTPContentSuggestionsEnabled = 340;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      340, _Internal::ntpcontentsuggestionsenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      341, _Internal::webrtcudpportrange(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceBrowserSignin = 348;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      348, _Internal::forcebrowsersignin(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      350, _Internal::forceyoutuberestrict(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      394, _Internal::autofillcreditcardenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      395, _Internal::ntlmv2enabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto RestrictAccountsToPatterns = 412;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      412, _Internal::restrictaccountstopatterns(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      436, _Internal::defaultwebusbguardsetting(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      437, _Internal::certificatetransparencyenforcementdisabledforcas(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      438, _Internal::certificatetransparencyenforcementdisabledforlegacycas(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      441, _Internal::webusbaskforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      442, _Internal::webusbblockedforurls(this), output);
  }

  // optional .enterprise_management.StringPolicyProto IsolateOriginsAndroid = 447;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      447, _Internal::isolateoriginsandroid(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SitePerProcessAndroid = 448;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      448, _Internal::siteperprocessandroid(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      459, _Internal::overridesecurityrestrictionsoninsecureorigin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      461, _Internal::autofilladdressenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      463, _Internal::urlkeyedanonymizeddatacollectionenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      468, _Internal::coalesceh2connectionswithclientcertificatesforhosts(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      485, _Internal::enterprisehardwareplatformapienabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      488, _Internal::webusballowdevicesforurls(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      489, _Internal::browsersignin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      535, _Internal::allowpopupsduringpageunload(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      582, _Internal::passwordleakdetectionenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      603, _Internal::hstspolicybypasslist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      606, _Internal::allowsyncxhrinpagedismissal(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      612, _Internal::sharedclipboardenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      625, _Internal::legacysamesitecookiebehaviorenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      626, _Internal::legacysamesitecookiebehaviorenabledfordomainlist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      628, _Internal::tls13hardeningforlocalanchorsenabled(this), output);
  }

  cached_has_bits = _has_bits_[3];
  // optional .enterprise_management.BooleanPolicyProto WebComponentsV0Enabled = 646;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      646, _Internal::webcomponentsv0enabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      651, _Internal::synctypeslistdisabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      653, _Internal::paymentmethodqueryenabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CloudPolicySettings)
}

size_t CloudPolicySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CloudPolicySettings)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *homepagelocation_);
    }

    // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alternateerrorpagesenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *searchsuggestenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incognitoenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *savingbrowserhistorydisabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safebrowsingenabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordmanagerenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofillenabled_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxymode_);
    }

    // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxyservermode_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxyserver_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxypacurl_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxybypasslist_);
    }

    // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authschemes_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disableauthnegotiatecnamelookup_);
    }

    // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authserverwhitelist_);
    }

    // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authnegotiatedelegatewhitelist_);
    }

    // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderenabled_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidername_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderkeyword_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersearchurl_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersuggesturl_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidericonurl_);
    }

    // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderencodings_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultcookiessetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultjavascriptsetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultpopupssetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultgeolocationsetting_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiesblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiessessiononlyforurls_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *popupsallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *popupsblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiesallowedforurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translateenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *editbookmarksenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incognitomodeavailability_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlblacklist_);
    }

    // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlwhitelist_);
    }

    // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxysettings_);
    }

    // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disablesafebrowsingproceedanyway_);
    }

    // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovideralternateurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcesafesearch_);
    }

    // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signinallowed_);
    }

    // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variationsrestrictparameter_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *managedbookmarks_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderimageurl_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersearchurlpostparams_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersuggesturlpostparams_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderimageurlpostparams_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidernewtaburl_);
    }

    // optional .enterprise_management.BooleanPolicyProto DataCompressionProxyEnabled = 243;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datacompressionproxyenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabledeprecatedwebplatformfeatures_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *networkpredictionoptions_);
    }

    // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sslversionmin_);
    }

    // optional .enterprise_management.BooleanPolicyProto ContextualSearchEnabled = 283;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contextualsearchenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcegooglesafesearch_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forceyoutubesafetymode_);
    }

    // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sslerroroverrideallowed_);
    }

    // optional .enterprise_management.StringPolicyProto AuthAndroidNegotiateAccountType = 307;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authandroidnegotiateaccounttype_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultwebbluetoothguardsetting_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alloweddomainsforapps_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enablemediarouter_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto NTPContentSuggestionsEnabled = 340;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ntpcontentsuggestionsenabled_);
    }

    // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webrtcudpportrange_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceBrowserSignin = 348;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcebrowsersignin_);
    }

    // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forceyoutuberestrict_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofillcreditcardenabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ntlmv2enabled_);
    }

    // optional .enterprise_management.StringListPolicyProto RestrictAccountsToPatterns = 412;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictaccountstopatterns_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultwebusbguardsetting_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforcas_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforlegacycas_);
    }

    // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusbaskforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusbblockedforurls_);
    }

    // optional .enterprise_management.StringPolicyProto IsolateOriginsAndroid = 447;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *isolateoriginsandroid_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.BooleanPolicyProto SitePerProcessAndroid = 448;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *siteperprocessandroid_);
    }

    // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overridesecurityrestrictionsoninsecureorigin_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofilladdressenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlkeyedanonymizeddatacollectionenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coalesceh2connectionswithclientcertificatesforhosts_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enterprisehardwareplatformapienabled_);
    }

    // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusballowdevicesforurls_);
    }

    // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browsersignin_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowpopupsduringpageunload_);
    }

    // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordleakdetectionenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hstspolicybypasslist_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowsyncxhrinpagedismissal_);
    }

    // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sharedclipboardenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacysamesitecookiebehaviorenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacysamesitecookiebehaviorenabledfordomainlist_);
    }

    // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tls13hardeningforlocalanchorsenabled_);
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    // optional .enterprise_management.BooleanPolicyProto WebComponentsV0Enabled = 646;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webcomponentsv0enabled_);
    }

    // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *synctypeslistdisabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paymentmethodqueryenabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudPolicySettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CloudPolicySettings*>(
      &from));
}

void CloudPolicySettings::MergeFrom(const CloudPolicySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CloudPolicySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_homepagelocation()->::enterprise_management::StringPolicyProto::MergeFrom(from.homepagelocation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_alternateerrorpagesenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.alternateerrorpagesenabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_searchsuggestenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.searchsuggestenabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_javascriptenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.javascriptenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_incognitoenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.incognitoenabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_savingbrowserhistorydisabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.savingbrowserhistorydisabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_printingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.printingenabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_safebrowsingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.safebrowsingenabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_passwordmanagerenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.passwordmanagerenabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_autofillenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofillenabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_proxymode()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxymode());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_proxyservermode()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.proxyservermode());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_proxyserver()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxyserver());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_proxypacurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxypacurl());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_proxybypasslist()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxybypasslist());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_authschemes()->::enterprise_management::StringPolicyProto::MergeFrom(from.authschemes());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_disableauthnegotiatecnamelookup()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disableauthnegotiatecnamelookup());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_authserverwhitelist()->::enterprise_management::StringPolicyProto::MergeFrom(from.authserverwhitelist());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_authnegotiatedelegatewhitelist()->::enterprise_management::StringPolicyProto::MergeFrom(from.authnegotiatedelegatewhitelist());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_defaultsearchproviderenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.defaultsearchproviderenabled());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_defaultsearchprovidername()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidername());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_defaultsearchproviderkeyword()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderkeyword());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_defaultsearchprovidersearchurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersearchurl());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_defaultsearchprovidersuggesturl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersuggesturl());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_defaultsearchprovidericonurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidericonurl());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_defaultsearchproviderencodings()->::enterprise_management::StringListPolicyProto::MergeFrom(from.defaultsearchproviderencodings());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_defaultcookiessetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultcookiessetting());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_defaultjavascriptsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultjavascriptsetting());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_defaultpopupssetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultpopupssetting());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_defaultgeolocationsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultgeolocationsetting());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_cookiesblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiesblockedforurls());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_cookiessessiononlyforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiessessiononlyforurls());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_javascriptallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.javascriptallowedforurls());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_javascriptblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.javascriptblockedforurls());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_popupsallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.popupsallowedforurls());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_popupsblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.popupsblockedforurls());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_cookiesallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiesallowedforurls());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_translateenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.translateenabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_editbookmarksenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.editbookmarksenabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_incognitomodeavailability()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.incognitomodeavailability());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_urlblacklist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlblacklist());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_urlwhitelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlwhitelist());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_proxysettings()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxysettings());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_disablesafebrowsingproceedanyway()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disablesafebrowsingproceedanyway());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_defaultsearchprovideralternateurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.defaultsearchprovideralternateurls());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_forcesafesearch()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcesafesearch());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_signinallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.signinallowed());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_variationsrestrictparameter()->::enterprise_management::StringPolicyProto::MergeFrom(from.variationsrestrictparameter());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_managedbookmarks()->::enterprise_management::StringPolicyProto::MergeFrom(from.managedbookmarks());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_defaultsearchproviderimageurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderimageurl());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_defaultsearchprovidersearchurlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersearchurlpostparams());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_defaultsearchprovidersuggesturlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersuggesturlpostparams());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_defaultsearchproviderimageurlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderimageurlpostparams());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_defaultsearchprovidernewtaburl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidernewtaburl());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_datacompressionproxyenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.datacompressionproxyenabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_enabledeprecatedwebplatformfeatures()->::enterprise_management::StringListPolicyProto::MergeFrom(from.enabledeprecatedwebplatformfeatures());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_networkpredictionoptions()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.networkpredictionoptions());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_sslversionmin()->::enterprise_management::StringPolicyProto::MergeFrom(from.sslversionmin());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_contextualsearchenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.contextualsearchenabled());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_forcegooglesafesearch()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcegooglesafesearch());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_forceyoutubesafetymode()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forceyoutubesafetymode());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_sslerroroverrideallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.sslerroroverrideallowed());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_authandroidnegotiateaccounttype()->::enterprise_management::StringPolicyProto::MergeFrom(from.authandroidnegotiateaccounttype());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_defaultwebbluetoothguardsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultwebbluetoothguardsetting());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_alloweddomainsforapps()->::enterprise_management::StringPolicyProto::MergeFrom(from.alloweddomainsforapps());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enablemediarouter()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enablemediarouter());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_certificatetransparencyenforcementdisabledforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforurls());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ntpcontentsuggestionsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.ntpcontentsuggestionsenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_webrtcudpportrange()->::enterprise_management::StringPolicyProto::MergeFrom(from.webrtcudpportrange());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_forcebrowsersignin()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcebrowsersignin());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_forceyoutuberestrict()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.forceyoutuberestrict());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_autofillcreditcardenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofillcreditcardenabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ntlmv2enabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.ntlmv2enabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_restrictaccountstopatterns()->::enterprise_management::StringListPolicyProto::MergeFrom(from.restrictaccountstopatterns());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_defaultwebusbguardsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultwebusbguardsetting());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_certificatetransparencyenforcementdisabledforcas()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforcas());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_certificatetransparencyenforcementdisabledforlegacycas()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforlegacycas());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_webusbaskforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.webusbaskforurls());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_webusbblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.webusbblockedforurls());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_isolateoriginsandroid()->::enterprise_management::StringPolicyProto::MergeFrom(from.isolateoriginsandroid());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_siteperprocessandroid()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.siteperprocessandroid());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_overridesecurityrestrictionsoninsecureorigin()->::enterprise_management::StringListPolicyProto::MergeFrom(from.overridesecurityrestrictionsoninsecureorigin());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_autofilladdressenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofilladdressenabled());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_urlkeyedanonymizeddatacollectionenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.urlkeyedanonymizeddatacollectionenabled());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_coalesceh2connectionswithclientcertificatesforhosts()->::enterprise_management::StringListPolicyProto::MergeFrom(from.coalesceh2connectionswithclientcertificatesforhosts());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_enterprisehardwareplatformapienabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enterprisehardwareplatformapienabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_webusballowdevicesforurls()->::enterprise_management::StringPolicyProto::MergeFrom(from.webusballowdevicesforurls());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_browsersignin()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.browsersignin());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_allowpopupsduringpageunload()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowpopupsduringpageunload());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_passwordleakdetectionenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.passwordleakdetectionenabled());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_hstspolicybypasslist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.hstspolicybypasslist());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_allowsyncxhrinpagedismissal()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowsyncxhrinpagedismissal());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_sharedclipboardenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.sharedclipboardenabled());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_legacysamesitecookiebehaviorenabled()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.legacysamesitecookiebehaviorenabled());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_legacysamesitecookiebehaviorenabledfordomainlist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.legacysamesitecookiebehaviorenabledfordomainlist());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_tls13hardeningforlocalanchorsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.tls13hardeningforlocalanchorsenabled());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_webcomponentsv0enabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.webcomponentsv0enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_synctypeslistdisabled()->::enterprise_management::StringListPolicyProto::MergeFrom(from.synctypeslistdisabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_paymentmethodqueryenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.paymentmethodqueryenabled());
    }
  }
}

void CloudPolicySettings::CopyFrom(const CloudPolicySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CloudPolicySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudPolicySettings::IsInitialized() const {
  return true;
}

void CloudPolicySettings::InternalSwap(CloudPolicySettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(homepagelocation_, other->homepagelocation_);
  swap(alternateerrorpagesenabled_, other->alternateerrorpagesenabled_);
  swap(searchsuggestenabled_, other->searchsuggestenabled_);
  swap(javascriptenabled_, other->javascriptenabled_);
  swap(incognitoenabled_, other->incognitoenabled_);
  swap(savingbrowserhistorydisabled_, other->savingbrowserhistorydisabled_);
  swap(printingenabled_, other->printingenabled_);
  swap(safebrowsingenabled_, other->safebrowsingenabled_);
  swap(passwordmanagerenabled_, other->passwordmanagerenabled_);
  swap(autofillenabled_, other->autofillenabled_);
  swap(proxymode_, other->proxymode_);
  swap(proxyservermode_, other->proxyservermode_);
  swap(proxyserver_, other->proxyserver_);
  swap(proxypacurl_, other->proxypacurl_);
  swap(proxybypasslist_, other->proxybypasslist_);
  swap(authschemes_, other->authschemes_);
  swap(disableauthnegotiatecnamelookup_, other->disableauthnegotiatecnamelookup_);
  swap(authserverwhitelist_, other->authserverwhitelist_);
  swap(authnegotiatedelegatewhitelist_, other->authnegotiatedelegatewhitelist_);
  swap(defaultsearchproviderenabled_, other->defaultsearchproviderenabled_);
  swap(defaultsearchprovidername_, other->defaultsearchprovidername_);
  swap(defaultsearchproviderkeyword_, other->defaultsearchproviderkeyword_);
  swap(defaultsearchprovidersearchurl_, other->defaultsearchprovidersearchurl_);
  swap(defaultsearchprovidersuggesturl_, other->defaultsearchprovidersuggesturl_);
  swap(defaultsearchprovidericonurl_, other->defaultsearchprovidericonurl_);
  swap(defaultsearchproviderencodings_, other->defaultsearchproviderencodings_);
  swap(defaultcookiessetting_, other->defaultcookiessetting_);
  swap(defaultjavascriptsetting_, other->defaultjavascriptsetting_);
  swap(defaultpopupssetting_, other->defaultpopupssetting_);
  swap(defaultgeolocationsetting_, other->defaultgeolocationsetting_);
  swap(cookiesblockedforurls_, other->cookiesblockedforurls_);
  swap(cookiessessiononlyforurls_, other->cookiessessiononlyforurls_);
  swap(javascriptallowedforurls_, other->javascriptallowedforurls_);
  swap(javascriptblockedforurls_, other->javascriptblockedforurls_);
  swap(popupsallowedforurls_, other->popupsallowedforurls_);
  swap(popupsblockedforurls_, other->popupsblockedforurls_);
  swap(cookiesallowedforurls_, other->cookiesallowedforurls_);
  swap(translateenabled_, other->translateenabled_);
  swap(editbookmarksenabled_, other->editbookmarksenabled_);
  swap(incognitomodeavailability_, other->incognitomodeavailability_);
  swap(urlblacklist_, other->urlblacklist_);
  swap(urlwhitelist_, other->urlwhitelist_);
  swap(proxysettings_, other->proxysettings_);
  swap(disablesafebrowsingproceedanyway_, other->disablesafebrowsingproceedanyway_);
  swap(defaultsearchprovideralternateurls_, other->defaultsearchprovideralternateurls_);
  swap(forcesafesearch_, other->forcesafesearch_);
  swap(signinallowed_, other->signinallowed_);
  swap(variationsrestrictparameter_, other->variationsrestrictparameter_);
  swap(managedbookmarks_, other->managedbookmarks_);
  swap(defaultsearchproviderimageurl_, other->defaultsearchproviderimageurl_);
  swap(defaultsearchprovidersearchurlpostparams_, other->defaultsearchprovidersearchurlpostparams_);
  swap(defaultsearchprovidersuggesturlpostparams_, other->defaultsearchprovidersuggesturlpostparams_);
  swap(defaultsearchproviderimageurlpostparams_, other->defaultsearchproviderimageurlpostparams_);
  swap(defaultsearchprovidernewtaburl_, other->defaultsearchprovidernewtaburl_);
  swap(datacompressionproxyenabled_, other->datacompressionproxyenabled_);
  swap(enabledeprecatedwebplatformfeatures_, other->enabledeprecatedwebplatformfeatures_);
  swap(networkpredictionoptions_, other->networkpredictionoptions_);
  swap(sslversionmin_, other->sslversionmin_);
  swap(contextualsearchenabled_, other->contextualsearchenabled_);
  swap(forcegooglesafesearch_, other->forcegooglesafesearch_);
  swap(forceyoutubesafetymode_, other->forceyoutubesafetymode_);
  swap(sslerroroverrideallowed_, other->sslerroroverrideallowed_);
  swap(authandroidnegotiateaccounttype_, other->authandroidnegotiateaccounttype_);
  swap(defaultwebbluetoothguardsetting_, other->defaultwebbluetoothguardsetting_);
  swap(alloweddomainsforapps_, other->alloweddomainsforapps_);
  swap(enablemediarouter_, other->enablemediarouter_);
  swap(certificatetransparencyenforcementdisabledforurls_, other->certificatetransparencyenforcementdisabledforurls_);
  swap(ntpcontentsuggestionsenabled_, other->ntpcontentsuggestionsenabled_);
  swap(webrtcudpportrange_, other->webrtcudpportrange_);
  swap(forcebrowsersignin_, other->forcebrowsersignin_);
  swap(forceyoutuberestrict_, other->forceyoutuberestrict_);
  swap(autofillcreditcardenabled_, other->autofillcreditcardenabled_);
  swap(ntlmv2enabled_, other->ntlmv2enabled_);
  swap(restrictaccountstopatterns_, other->restrictaccountstopatterns_);
  swap(defaultwebusbguardsetting_, other->defaultwebusbguardsetting_);
  swap(certificatetransparencyenforcementdisabledforcas_, other->certificatetransparencyenforcementdisabledforcas_);
  swap(certificatetransparencyenforcementdisabledforlegacycas_, other->certificatetransparencyenforcementdisabledforlegacycas_);
  swap(webusbaskforurls_, other->webusbaskforurls_);
  swap(webusbblockedforurls_, other->webusbblockedforurls_);
  swap(isolateoriginsandroid_, other->isolateoriginsandroid_);
  swap(siteperprocessandroid_, other->siteperprocessandroid_);
  swap(overridesecurityrestrictionsoninsecureorigin_, other->overridesecurityrestrictionsoninsecureorigin_);
  swap(autofilladdressenabled_, other->autofilladdressenabled_);
  swap(urlkeyedanonymizeddatacollectionenabled_, other->urlkeyedanonymizeddatacollectionenabled_);
  swap(coalesceh2connectionswithclientcertificatesforhosts_, other->coalesceh2connectionswithclientcertificatesforhosts_);
  swap(enterprisehardwareplatformapienabled_, other->enterprisehardwareplatformapienabled_);
  swap(webusballowdevicesforurls_, other->webusballowdevicesforurls_);
  swap(browsersignin_, other->browsersignin_);
  swap(allowpopupsduringpageunload_, other->allowpopupsduringpageunload_);
  swap(passwordleakdetectionenabled_, other->passwordleakdetectionenabled_);
  swap(hstspolicybypasslist_, other->hstspolicybypasslist_);
  swap(allowsyncxhrinpagedismissal_, other->allowsyncxhrinpagedismissal_);
  swap(sharedclipboardenabled_, other->sharedclipboardenabled_);
  swap(legacysamesitecookiebehaviorenabled_, other->legacysamesitecookiebehaviorenabled_);
  swap(legacysamesitecookiebehaviorenabledfordomainlist_, other->legacysamesitecookiebehaviorenabledfordomainlist_);
  swap(tls13hardeningforlocalanchorsenabled_, other->tls13hardeningforlocalanchorsenabled_);
  swap(webcomponentsv0enabled_, other->webcomponentsv0enabled_);
  swap(synctypeslistdisabled_, other->synctypeslistdisabled_);
  swap(paymentmethodqueryenabled_, other->paymentmethodqueryenabled_);
}

std::string CloudPolicySettings::GetTypeName() const {
  return "enterprise_management.CloudPolicySettings";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::CloudPolicySettings* Arena::CreateMaybeMessage< ::enterprise_management::CloudPolicySettings >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CloudPolicySettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
