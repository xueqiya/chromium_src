// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_common_definitions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_policy_5fcommon_5fdefinitions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_policy_5fcommon_5fdefinitions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_policy_5fcommon_5fdefinitions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace enterprise_management {
class BooleanPolicyProto;
class BooleanPolicyProtoDefaultTypeInternal;
extern BooleanPolicyProtoDefaultTypeInternal _BooleanPolicyProto_default_instance_;
class IntegerPolicyProto;
class IntegerPolicyProtoDefaultTypeInternal;
extern IntegerPolicyProtoDefaultTypeInternal _IntegerPolicyProto_default_instance_;
class PolicyOptions;
class PolicyOptionsDefaultTypeInternal;
extern PolicyOptionsDefaultTypeInternal _PolicyOptions_default_instance_;
class StringList;
class StringListDefaultTypeInternal;
extern StringListDefaultTypeInternal _StringList_default_instance_;
class StringListPolicyProto;
class StringListPolicyProtoDefaultTypeInternal;
extern StringListPolicyProtoDefaultTypeInternal _StringListPolicyProto_default_instance_;
class StringPolicyProto;
class StringPolicyProtoDefaultTypeInternal;
extern StringPolicyProtoDefaultTypeInternal _StringPolicyProto_default_instance_;
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_management::BooleanPolicyProto* Arena::CreateMaybeMessage<::enterprise_management::BooleanPolicyProto>(Arena*);
template<> ::enterprise_management::IntegerPolicyProto* Arena::CreateMaybeMessage<::enterprise_management::IntegerPolicyProto>(Arena*);
template<> ::enterprise_management::PolicyOptions* Arena::CreateMaybeMessage<::enterprise_management::PolicyOptions>(Arena*);
template<> ::enterprise_management::StringList* Arena::CreateMaybeMessage<::enterprise_management::StringList>(Arena*);
template<> ::enterprise_management::StringListPolicyProto* Arena::CreateMaybeMessage<::enterprise_management::StringListPolicyProto>(Arena*);
template<> ::enterprise_management::StringPolicyProto* Arena::CreateMaybeMessage<::enterprise_management::StringPolicyProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_management {

enum PolicyOptions_PolicyMode : int {
  PolicyOptions_PolicyMode_MANDATORY = 0,
  PolicyOptions_PolicyMode_RECOMMENDED = 1,
  PolicyOptions_PolicyMode_UNSET = 2
};
bool PolicyOptions_PolicyMode_IsValid(int value);
constexpr PolicyOptions_PolicyMode PolicyOptions_PolicyMode_PolicyMode_MIN = PolicyOptions_PolicyMode_MANDATORY;
constexpr PolicyOptions_PolicyMode PolicyOptions_PolicyMode_PolicyMode_MAX = PolicyOptions_PolicyMode_UNSET;
constexpr int PolicyOptions_PolicyMode_PolicyMode_ARRAYSIZE = PolicyOptions_PolicyMode_PolicyMode_MAX + 1;

const std::string& PolicyOptions_PolicyMode_Name(PolicyOptions_PolicyMode value);
template<typename T>
inline const std::string& PolicyOptions_PolicyMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyOptions_PolicyMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyOptions_PolicyMode_Name.");
  return PolicyOptions_PolicyMode_Name(static_cast<PolicyOptions_PolicyMode>(enum_t_value));
}
bool PolicyOptions_PolicyMode_Parse(
    const std::string& name, PolicyOptions_PolicyMode* value);
// ===================================================================

class StringList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.StringList) */ {
 public:
  StringList();
  virtual ~StringList();

  StringList(const StringList& from);
  StringList(StringList&& from) noexcept
    : StringList() {
    *this = ::std::move(from);
  }

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringList& operator=(StringList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringList& a, StringList& b) {
    a.Swap(&b);
  }
  inline void Swap(StringList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringList* New() const final {
    return CreateMaybeMessage<StringList>(nullptr);
  }

  StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StringList& from);
  void MergeFrom(const StringList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.StringList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated string entries = 1;
  int entries_size() const;
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();

  // @@protoc_insertion_point(class_scope:enterprise_management.StringList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// -------------------------------------------------------------------

class PolicyOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyOptions) */ {
 public:
  PolicyOptions();
  virtual ~PolicyOptions();

  PolicyOptions(const PolicyOptions& from);
  PolicyOptions(PolicyOptions&& from) noexcept
    : PolicyOptions() {
    *this = ::std::move(from);
  }

  inline PolicyOptions& operator=(const PolicyOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyOptions& operator=(PolicyOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PolicyOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyOptions* internal_default_instance() {
    return reinterpret_cast<const PolicyOptions*>(
               &_PolicyOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PolicyOptions& a, PolicyOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyOptions* New() const final {
    return CreateMaybeMessage<PolicyOptions>(nullptr);
  }

  PolicyOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PolicyOptions& from);
  void MergeFrom(const PolicyOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PolicyOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.PolicyOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PolicyOptions_PolicyMode PolicyMode;
  static constexpr PolicyMode MANDATORY =
    PolicyOptions_PolicyMode_MANDATORY;
  static constexpr PolicyMode RECOMMENDED =
    PolicyOptions_PolicyMode_RECOMMENDED;
  static constexpr PolicyMode UNSET =
    PolicyOptions_PolicyMode_UNSET;
  static inline bool PolicyMode_IsValid(int value) {
    return PolicyOptions_PolicyMode_IsValid(value);
  }
  static constexpr PolicyMode PolicyMode_MIN =
    PolicyOptions_PolicyMode_PolicyMode_MIN;
  static constexpr PolicyMode PolicyMode_MAX =
    PolicyOptions_PolicyMode_PolicyMode_MAX;
  static constexpr int PolicyMode_ARRAYSIZE =
    PolicyOptions_PolicyMode_PolicyMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PolicyMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PolicyMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PolicyMode_Name.");
    return PolicyOptions_PolicyMode_Name(enum_t_value);
  }
  static inline bool PolicyMode_Parse(const std::string& name,
      PolicyMode* value) {
    return PolicyOptions_PolicyMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
  bool has_mode() const;
  void clear_mode();
  ::enterprise_management::PolicyOptions_PolicyMode mode() const;
  void set_mode(::enterprise_management::PolicyOptions_PolicyMode value);

  // @@protoc_insertion_point(class_scope:enterprise_management.PolicyOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// -------------------------------------------------------------------

class BooleanPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.BooleanPolicyProto) */ {
 public:
  BooleanPolicyProto();
  virtual ~BooleanPolicyProto();

  BooleanPolicyProto(const BooleanPolicyProto& from);
  BooleanPolicyProto(BooleanPolicyProto&& from) noexcept
    : BooleanPolicyProto() {
    *this = ::std::move(from);
  }

  inline BooleanPolicyProto& operator=(const BooleanPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPolicyProto& operator=(BooleanPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BooleanPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BooleanPolicyProto* internal_default_instance() {
    return reinterpret_cast<const BooleanPolicyProto*>(
               &_BooleanPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BooleanPolicyProto& a, BooleanPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanPolicyProto* New() const final {
    return CreateMaybeMessage<BooleanPolicyProto>(nullptr);
  }

  BooleanPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BooleanPolicyProto& from);
  void MergeFrom(const BooleanPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BooleanPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.BooleanPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyOptionsFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  bool has_policy_options() const;
  void clear_policy_options();
  const ::enterprise_management::PolicyOptions& policy_options() const;
  ::enterprise_management::PolicyOptions* release_policy_options();
  ::enterprise_management::PolicyOptions* mutable_policy_options();
  void set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options);

  // optional bool value = 2;
  bool has_value() const;
  void clear_value();
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:enterprise_management.BooleanPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::PolicyOptions* policy_options_;
  bool value_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// -------------------------------------------------------------------

class IntegerPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.IntegerPolicyProto) */ {
 public:
  IntegerPolicyProto();
  virtual ~IntegerPolicyProto();

  IntegerPolicyProto(const IntegerPolicyProto& from);
  IntegerPolicyProto(IntegerPolicyProto&& from) noexcept
    : IntegerPolicyProto() {
    *this = ::std::move(from);
  }

  inline IntegerPolicyProto& operator=(const IntegerPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerPolicyProto& operator=(IntegerPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IntegerPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegerPolicyProto* internal_default_instance() {
    return reinterpret_cast<const IntegerPolicyProto*>(
               &_IntegerPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntegerPolicyProto& a, IntegerPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerPolicyProto* New() const final {
    return CreateMaybeMessage<IntegerPolicyProto>(nullptr);
  }

  IntegerPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IntegerPolicyProto& from);
  void MergeFrom(const IntegerPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntegerPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.IntegerPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyOptionsFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  bool has_policy_options() const;
  void clear_policy_options();
  const ::enterprise_management::PolicyOptions& policy_options() const;
  ::enterprise_management::PolicyOptions* release_policy_options();
  ::enterprise_management::PolicyOptions* mutable_policy_options();
  void set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options);

  // optional int64 value = 2;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:enterprise_management.IntegerPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::PolicyOptions* policy_options_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// -------------------------------------------------------------------

class StringPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.StringPolicyProto) */ {
 public:
  StringPolicyProto();
  virtual ~StringPolicyProto();

  StringPolicyProto(const StringPolicyProto& from);
  StringPolicyProto(StringPolicyProto&& from) noexcept
    : StringPolicyProto() {
    *this = ::std::move(from);
  }

  inline StringPolicyProto& operator=(const StringPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPolicyProto& operator=(StringPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringPolicyProto* internal_default_instance() {
    return reinterpret_cast<const StringPolicyProto*>(
               &_StringPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringPolicyProto& a, StringPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringPolicyProto* New() const final {
    return CreateMaybeMessage<StringPolicyProto>(nullptr);
  }

  StringPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StringPolicyProto& from);
  void MergeFrom(const StringPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.StringPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kPolicyOptionsFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional .enterprise_management.PolicyOptions policy_options = 1;
  bool has_policy_options() const;
  void clear_policy_options();
  const ::enterprise_management::PolicyOptions& policy_options() const;
  ::enterprise_management::PolicyOptions* release_policy_options();
  ::enterprise_management::PolicyOptions* mutable_policy_options();
  void set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options);

  // @@protoc_insertion_point(class_scope:enterprise_management.StringPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::enterprise_management::PolicyOptions* policy_options_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// -------------------------------------------------------------------

class StringListPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.StringListPolicyProto) */ {
 public:
  StringListPolicyProto();
  virtual ~StringListPolicyProto();

  StringListPolicyProto(const StringListPolicyProto& from);
  StringListPolicyProto(StringListPolicyProto&& from) noexcept
    : StringListPolicyProto() {
    *this = ::std::move(from);
  }

  inline StringListPolicyProto& operator=(const StringListPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringListPolicyProto& operator=(StringListPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringListPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringListPolicyProto* internal_default_instance() {
    return reinterpret_cast<const StringListPolicyProto*>(
               &_StringListPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringListPolicyProto& a, StringListPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StringListPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringListPolicyProto* New() const final {
    return CreateMaybeMessage<StringListPolicyProto>(nullptr);
  }

  StringListPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringListPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StringListPolicyProto& from);
  void MergeFrom(const StringListPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringListPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.StringListPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyOptionsFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  bool has_policy_options() const;
  void clear_policy_options();
  const ::enterprise_management::PolicyOptions& policy_options() const;
  ::enterprise_management::PolicyOptions* release_policy_options();
  ::enterprise_management::PolicyOptions* mutable_policy_options();
  void set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options);

  // optional .enterprise_management.StringList value = 2;
  bool has_value() const;
  void clear_value();
  const ::enterprise_management::StringList& value() const;
  ::enterprise_management::StringList* release_value();
  ::enterprise_management::StringList* mutable_value();
  void set_allocated_value(::enterprise_management::StringList* value);

  // @@protoc_insertion_point(class_scope:enterprise_management.StringListPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::PolicyOptions* policy_options_;
  ::enterprise_management::StringList* value_;
  friend struct ::TableStruct_policy_5fcommon_5fdefinitions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringList

// repeated string entries = 1;
inline int StringList::entries_size() const {
  return entries_.size();
}
inline void StringList::clear_entries() {
  entries_.Clear();
}
inline const std::string& StringList::entries(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.StringList.entries)
  return entries_.Get(index);
}
inline std::string* StringList::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.StringList.entries)
  return entries_.Mutable(index);
}
inline void StringList::set_entries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.StringList.entries)
  entries_.Mutable(index)->assign(value);
}
inline void StringList::set_entries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.StringList.entries)
  entries_.Mutable(index)->assign(std::move(value));
}
inline void StringList::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.StringList.entries)
}
inline void StringList::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.StringList.entries)
}
inline std::string* StringList::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.StringList.entries)
  return entries_.Add();
}
inline void StringList::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.StringList.entries)
}
inline void StringList::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.StringList.entries)
}
inline void StringList::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.StringList.entries)
}
inline void StringList::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.StringList.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringList::entries() const {
  // @@protoc_insertion_point(field_list:enterprise_management.StringList.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringList::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.StringList.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// PolicyOptions

// optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
inline bool PolicyOptions::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyOptions::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::PolicyOptions_PolicyMode PolicyOptions::mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyOptions.mode)
  return static_cast< ::enterprise_management::PolicyOptions_PolicyMode >(mode_);
}
inline void PolicyOptions::set_mode(::enterprise_management::PolicyOptions_PolicyMode value) {
  assert(::enterprise_management::PolicyOptions_PolicyMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyOptions.mode)
}

// -------------------------------------------------------------------

// BooleanPolicyProto

// optional .enterprise_management.PolicyOptions policy_options = 1;
inline bool BooleanPolicyProto::has_policy_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BooleanPolicyProto::clear_policy_options() {
  if (policy_options_ != nullptr) policy_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_management::PolicyOptions& BooleanPolicyProto::policy_options() const {
  const ::enterprise_management::PolicyOptions* p = policy_options_;
  // @@protoc_insertion_point(field_get:enterprise_management.BooleanPolicyProto.policy_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline ::enterprise_management::PolicyOptions* BooleanPolicyProto::release_policy_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.BooleanPolicyProto.policy_options)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::PolicyOptions* temp = policy_options_;
  policy_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* BooleanPolicyProto::mutable_policy_options() {
  _has_bits_[0] |= 0x00000001u;
  if (policy_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArenaNoVirtual());
    policy_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.BooleanPolicyProto.policy_options)
  return policy_options_;
}
inline void BooleanPolicyProto::set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_options_;
  }
  if (policy_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_options_ = policy_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.BooleanPolicyProto.policy_options)
}

// optional bool value = 2;
inline bool BooleanPolicyProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BooleanPolicyProto::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BooleanPolicyProto::value() const {
  // @@protoc_insertion_point(field_get:enterprise_management.BooleanPolicyProto.value)
  return value_;
}
inline void BooleanPolicyProto::set_value(bool value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.BooleanPolicyProto.value)
}

// -------------------------------------------------------------------

// IntegerPolicyProto

// optional .enterprise_management.PolicyOptions policy_options = 1;
inline bool IntegerPolicyProto::has_policy_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegerPolicyProto::clear_policy_options() {
  if (policy_options_ != nullptr) policy_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_management::PolicyOptions& IntegerPolicyProto::policy_options() const {
  const ::enterprise_management::PolicyOptions* p = policy_options_;
  // @@protoc_insertion_point(field_get:enterprise_management.IntegerPolicyProto.policy_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline ::enterprise_management::PolicyOptions* IntegerPolicyProto::release_policy_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.IntegerPolicyProto.policy_options)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::PolicyOptions* temp = policy_options_;
  policy_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* IntegerPolicyProto::mutable_policy_options() {
  _has_bits_[0] |= 0x00000001u;
  if (policy_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArenaNoVirtual());
    policy_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.IntegerPolicyProto.policy_options)
  return policy_options_;
}
inline void IntegerPolicyProto::set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_options_;
  }
  if (policy_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_options_ = policy_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.IntegerPolicyProto.policy_options)
}

// optional int64 value = 2;
inline bool IntegerPolicyProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegerPolicyProto::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntegerPolicyProto::value() const {
  // @@protoc_insertion_point(field_get:enterprise_management.IntegerPolicyProto.value)
  return value_;
}
inline void IntegerPolicyProto::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.IntegerPolicyProto.value)
}

// -------------------------------------------------------------------

// StringPolicyProto

// optional .enterprise_management.PolicyOptions policy_options = 1;
inline bool StringPolicyProto::has_policy_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringPolicyProto::clear_policy_options() {
  if (policy_options_ != nullptr) policy_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::enterprise_management::PolicyOptions& StringPolicyProto::policy_options() const {
  const ::enterprise_management::PolicyOptions* p = policy_options_;
  // @@protoc_insertion_point(field_get:enterprise_management.StringPolicyProto.policy_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline ::enterprise_management::PolicyOptions* StringPolicyProto::release_policy_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.StringPolicyProto.policy_options)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_management::PolicyOptions* temp = policy_options_;
  policy_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* StringPolicyProto::mutable_policy_options() {
  _has_bits_[0] |= 0x00000002u;
  if (policy_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArenaNoVirtual());
    policy_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.StringPolicyProto.policy_options)
  return policy_options_;
}
inline void StringPolicyProto::set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_options_;
  }
  if (policy_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  policy_options_ = policy_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.StringPolicyProto.policy_options)
}

// optional string value = 2;
inline bool StringPolicyProto::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringPolicyProto::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringPolicyProto::value() const {
  // @@protoc_insertion_point(field_get:enterprise_management.StringPolicyProto.value)
  return value_.GetNoArena();
}
inline void StringPolicyProto::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.StringPolicyProto.value)
}
inline void StringPolicyProto::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.StringPolicyProto.value)
}
inline void StringPolicyProto::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.StringPolicyProto.value)
}
inline void StringPolicyProto::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.StringPolicyProto.value)
}
inline std::string* StringPolicyProto::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_management.StringPolicyProto.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringPolicyProto::release_value() {
  // @@protoc_insertion_point(field_release:enterprise_management.StringPolicyProto.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringPolicyProto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.StringPolicyProto.value)
}

// -------------------------------------------------------------------

// StringListPolicyProto

// optional .enterprise_management.PolicyOptions policy_options = 1;
inline bool StringListPolicyProto::has_policy_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringListPolicyProto::clear_policy_options() {
  if (policy_options_ != nullptr) policy_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_management::PolicyOptions& StringListPolicyProto::policy_options() const {
  const ::enterprise_management::PolicyOptions* p = policy_options_;
  // @@protoc_insertion_point(field_get:enterprise_management.StringListPolicyProto.policy_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline ::enterprise_management::PolicyOptions* StringListPolicyProto::release_policy_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.StringListPolicyProto.policy_options)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::PolicyOptions* temp = policy_options_;
  policy_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* StringListPolicyProto::mutable_policy_options() {
  _has_bits_[0] |= 0x00000001u;
  if (policy_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArenaNoVirtual());
    policy_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.StringListPolicyProto.policy_options)
  return policy_options_;
}
inline void StringListPolicyProto::set_allocated_policy_options(::enterprise_management::PolicyOptions* policy_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_options_;
  }
  if (policy_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_options_ = policy_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.StringListPolicyProto.policy_options)
}

// optional .enterprise_management.StringList value = 2;
inline bool StringListPolicyProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringListPolicyProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::enterprise_management::StringList& StringListPolicyProto::value() const {
  const ::enterprise_management::StringList* p = value_;
  // @@protoc_insertion_point(field_get:enterprise_management.StringListPolicyProto.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::StringList*>(
      &::enterprise_management::_StringList_default_instance_);
}
inline ::enterprise_management::StringList* StringListPolicyProto::release_value() {
  // @@protoc_insertion_point(field_release:enterprise_management.StringListPolicyProto.value)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_management::StringList* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::enterprise_management::StringList* StringListPolicyProto::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::StringList>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.StringListPolicyProto.value)
  return value_;
}
inline void StringListPolicyProto::set_allocated_value(::enterprise_management::StringList* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.StringListPolicyProto.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_management

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_management::PolicyOptions_PolicyMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_policy_5fcommon_5fdefinitions_2eproto
