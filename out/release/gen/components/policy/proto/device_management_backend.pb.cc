// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_management_backend.proto

#include "device_management_backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_App_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppActivity_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatterySample_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceState_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extension_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LicenseType_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkState_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OSReport_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plugin_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Policy_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignedData_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmanagement_5fbackend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto;
namespace enterprise_management {
class LicenseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseType> _instance;
} _LicenseType_default_instance_;
class SignedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedData> _instance;
} _SignedData_default_instance_;
class DeviceRegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRegisterRequest> _instance;
} _DeviceRegisterRequest_default_instance_;
class DeviceRegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRegisterResponse> _instance;
} _DeviceRegisterResponse_default_instance_;
class DeviceUnregisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUnregisterRequest> _instance;
} _DeviceUnregisterRequest_default_instance_;
class DeviceUnregisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUnregisterResponse> _instance;
} _DeviceUnregisterResponse_default_instance_;
class DeviceCertUploadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceCertUploadRequest> _instance;
} _DeviceCertUploadRequest_default_instance_;
class DeviceCertUploadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceCertUploadResponse> _instance;
} _DeviceCertUploadResponse_default_instance_;
class DeviceServiceApiAccessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceServiceApiAccessRequest> _instance;
} _DeviceServiceApiAccessRequest_default_instance_;
class DeviceServiceApiAccessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceServiceApiAccessResponse> _instance;
} _DeviceServiceApiAccessResponse_default_instance_;
class PolicyFetchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyFetchRequest> _instance;
} _PolicyFetchRequest_default_instance_;
class DisabledStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisabledState> _instance;
} _DisabledState_default_instance_;
class DeviceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceState> _instance;
} _DeviceState_default_instance_;
class CustomerLogoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerLogo> _instance;
} _CustomerLogo_default_instance_;
class PolicyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyData> _instance;
} _PolicyData_default_instance_;
class ClientActionRequiredDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientActionRequired> _instance;
} _ClientActionRequired_default_instance_;
class PolicyFetchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyFetchResponse> _instance;
} _PolicyFetchResponse_default_instance_;
class DEPRECATEDPolicyPublicKeyAndDomainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DEPRECATEDPolicyPublicKeyAndDomain> _instance;
} _DEPRECATEDPolicyPublicKeyAndDomain_default_instance_;
class PublicKeyVerificationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicKeyVerificationData> _instance;
} _PublicKeyVerificationData_default_instance_;
class DevicePolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePolicyRequest> _instance;
} _DevicePolicyRequest_default_instance_;
class DevicePolicyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePolicyResponse> _instance;
} _DevicePolicyResponse_default_instance_;
class TimePeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimePeriod> _instance;
} _TimePeriod_default_instance_;
class ActiveTimePeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveTimePeriod> _instance;
} _ActiveTimePeriod_default_instance_;
class NetworkInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkInterface> _instance;
} _NetworkInterface_default_instance_;
class NetworkStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkState> _instance;
} _NetworkState_default_instance_;
class DeviceUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUser> _instance;
} _DeviceUser_default_instance_;
class VolumeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VolumeInfo> _instance;
} _VolumeInfo_default_instance_;
class CpuUtilizationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUtilizationInfo> _instance;
} _CpuUtilizationInfo_default_instance_;
class SystemFreeRamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemFreeRamInfo> _instance;
} _SystemFreeRamInfo_default_instance_;
class CPUTempInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUTempInfo> _instance;
} _CPUTempInfo_default_instance_;
class StatefulPartitionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatefulPartitionInfo> _instance;
} _StatefulPartitionInfo_default_instance_;
class BatterySampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatterySample> _instance;
} _BatterySample_default_instance_;
class BatteryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryInfo> _instance;
} _BatteryInfo_default_instance_;
class PowerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerStatus> _instance;
} _PowerStatus_default_instance_;
class DiskLifetimeEstimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskLifetimeEstimation> _instance;
} _DiskLifetimeEstimation_default_instance_;
class DiskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskInfo> _instance;
} _DiskInfo_default_instance_;
class StorageStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageStatus> _instance;
} _StorageStatus_default_instance_;
class ThermalSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalSample> _instance;
} _ThermalSample_default_instance_;
class ThermalInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalInfo> _instance;
} _ThermalInfo_default_instance_;
class BoardStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoardStatus> _instance;
} _BoardStatus_default_instance_;
class SystemStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStatus> _instance;
} _SystemStatus_default_instance_;
class CpuInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfo> _instance;
} _CpuInfo_default_instance_;
class DisplayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayInfo> _instance;
} _DisplayInfo_default_instance_;
class GraphicsAdapterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphicsAdapterInfo> _instance;
} _GraphicsAdapterInfo_default_instance_;
class GraphicsStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphicsStatus> _instance;
} _GraphicsStatus_default_instance_;
class CrashReportInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrashReportInfo> _instance;
} _CrashReportInfo_default_instance_;
class DeviceStatusReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatusReportRequest> _instance;
} _DeviceStatusReportRequest_default_instance_;
class OsUpdateStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OsUpdateStatus> _instance;
} _OsUpdateStatus_default_instance_;
class AppStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppStatus> _instance;
} _AppStatus_default_instance_;
class AndroidAppPermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidAppPermission> _instance;
} _AndroidAppPermission_default_instance_;
class AndroidAppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidAppInfo> _instance;
} _AndroidAppInfo_default_instance_;
class ChromeUserProfileReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeUserProfileReport> _instance;
} _ChromeUserProfileReport_default_instance_;
class ChromeSignedInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeSignedInUser> _instance;
} _ChromeSignedInUser_default_instance_;
class ExtensionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionRequest> _instance;
} _ExtensionRequest_default_instance_;
class ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extension> _instance;
} _Extension_default_instance_;
class PluginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plugin> _instance;
} _Plugin_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Policy> _instance;
} _Policy_default_instance_;
class ExtensionPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionPolicy> _instance;
} _ExtensionPolicy_default_instance_;
class PolicyFetchTimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyFetchTimestamp> _instance;
} _PolicyFetchTimestamp_default_instance_;
class ChromeUserProfileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeUserProfileInfo> _instance;
} _ChromeUserProfileInfo_default_instance_;
class BrowserReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrowserReport> _instance;
} _BrowserReport_default_instance_;
class OSReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OSReport> _instance;
} _OSReport_default_instance_;
class ChromeDesktopReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeDesktopReportRequest> _instance;
} _ChromeDesktopReportRequest_default_instance_;
class ChromeOsUserReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeOsUserReportRequest> _instance;
} _ChromeOsUserReportRequest_default_instance_;
class PolicyValueValidationIssueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyValueValidationIssue> _instance;
} _PolicyValueValidationIssue_default_instance_;
class PolicyValidationReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyValidationReportRequest> _instance;
} _PolicyValidationReportRequest_default_instance_;
class PolicyValidationReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyValidationReportResponse> _instance;
} _PolicyValidationReportResponse_default_instance_;
class AndroidStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidStatus> _instance;
} _AndroidStatus_default_instance_;
class CrostiniAppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrostiniApp> _instance;
} _CrostiniApp_default_instance_;
class CrostiniStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrostiniStatus> _instance;
} _CrostiniStatus_default_instance_;
class SessionStatusReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionStatusReportRequest> _instance;
} _SessionStatusReportRequest_default_instance_;
class DeviceStatusReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatusReportResponse> _instance;
} _DeviceStatusReportResponse_default_instance_;
class ChromeDesktopReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeDesktopReportResponse> _instance;
} _ChromeDesktopReportResponse_default_instance_;
class ChromeOsUserReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeOsUserReportResponse> _instance;
} _ChromeOsUserReportResponse_default_instance_;
class SessionStatusReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionStatusReportResponse> _instance;
} _SessionStatusReportResponse_default_instance_;
class DeviceAutoEnrollmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAutoEnrollmentRequest> _instance;
} _DeviceAutoEnrollmentRequest_default_instance_;
class DeviceAutoEnrollmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAutoEnrollmentResponse> _instance;
} _DeviceAutoEnrollmentResponse_default_instance_;
class DeviceStateRetrievalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStateRetrievalRequest> _instance;
} _DeviceStateRetrievalRequest_default_instance_;
class DeviceStateKeyUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStateKeyUpdateRequest> _instance;
} _DeviceStateKeyUpdateRequest_default_instance_;
class DeviceStateRetrievalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStateRetrievalResponse> _instance;
} _DeviceStateRetrievalResponse_default_instance_;
class DeviceInitialEnrollmentStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInitialEnrollmentStateRequest> _instance;
} _DeviceInitialEnrollmentStateRequest_default_instance_;
class DeviceInitialEnrollmentStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInitialEnrollmentStateResponse> _instance;
} _DeviceInitialEnrollmentStateResponse_default_instance_;
class DevicePairingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePairingRequest> _instance;
} _DevicePairingRequest_default_instance_;
class DevicePairingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePairingResponse> _instance;
} _DevicePairingResponse_default_instance_;
class CheckDevicePairingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDevicePairingRequest> _instance;
} _CheckDevicePairingRequest_default_instance_;
class CheckDevicePairingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDevicePairingResponse> _instance;
} _CheckDevicePairingResponse_default_instance_;
class RemoteCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteCommand> _instance;
} _RemoteCommand_default_instance_;
class RemoteCommandResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteCommandResult> _instance;
} _RemoteCommandResult_default_instance_;
class DeviceRemoteCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRemoteCommandRequest> _instance;
} _DeviceRemoteCommandRequest_default_instance_;
class DeviceRemoteCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRemoteCommandResponse> _instance;
} _DeviceRemoteCommandResponse_default_instance_;
class DeviceAttributeUpdatePermissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributeUpdatePermissionRequest> _instance;
} _DeviceAttributeUpdatePermissionRequest_default_instance_;
class DeviceAttributeUpdatePermissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributeUpdatePermissionResponse> _instance;
} _DeviceAttributeUpdatePermissionResponse_default_instance_;
class DeviceAttributeUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributeUpdateRequest> _instance;
} _DeviceAttributeUpdateRequest_default_instance_;
class DeviceAttributeUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributeUpdateResponse> _instance;
} _DeviceAttributeUpdateResponse_default_instance_;
class GcmIdUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcmIdUpdateRequest> _instance;
} _GcmIdUpdateRequest_default_instance_;
class GcmIdUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcmIdUpdateResponse> _instance;
} _GcmIdUpdateResponse_default_instance_;
class CheckAndroidManagementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAndroidManagementRequest> _instance;
} _CheckAndroidManagementRequest_default_instance_;
class CheckAndroidManagementResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAndroidManagementResponse> _instance;
} _CheckAndroidManagementResponse_default_instance_;
class CertificateBasedDeviceRegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CertificateBasedDeviceRegisterRequest> _instance;
} _CertificateBasedDeviceRegisterRequest_default_instance_;
class DeviceRegisterConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRegisterConfiguration> _instance;
} _DeviceRegisterConfiguration_default_instance_;
class CertificateBasedDeviceRegistrationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CertificateBasedDeviceRegistrationData> _instance;
} _CertificateBasedDeviceRegistrationData_default_instance_;
class RegisterBrowserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterBrowserRequest> _instance;
} _RegisterBrowserRequest_default_instance_;
class ActiveDirectoryEnrollPlayUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryEnrollPlayUserRequest> _instance;
} _ActiveDirectoryEnrollPlayUserRequest_default_instance_;
class ActiveDirectoryEnrollPlayUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryEnrollPlayUserResponse> _instance;
} _ActiveDirectoryEnrollPlayUserResponse_default_instance_;
class SamlParametersProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamlParametersProto> _instance;
} _SamlParametersProto_default_instance_;
class PublicSamlUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicSamlUserRequest> _instance;
} _PublicSamlUserRequest_default_instance_;
class PublicSamlUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicSamlUserResponse> _instance;
} _PublicSamlUserResponse_default_instance_;
class ActiveDirectoryPlayActivityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryPlayActivityRequest> _instance;
} _ActiveDirectoryPlayActivityRequest_default_instance_;
class ActiveDirectoryPlayActivityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryPlayActivityResponse> _instance;
} _ActiveDirectoryPlayActivityResponse_default_instance_;
class CheckDeviceLicenseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDeviceLicenseRequest> _instance;
} _CheckDeviceLicenseRequest_default_instance_;
class LicenseAvailabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseAvailability> _instance;
} _LicenseAvailability_default_instance_;
class CheckDeviceLicenseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDeviceLicenseResponse> _instance;
} _CheckDeviceLicenseResponse_default_instance_;
class ActiveDirectoryUserSigninRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryUserSigninRequest> _instance;
} _ActiveDirectoryUserSigninRequest_default_instance_;
class ActiveDirectoryUserSigninResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveDirectoryUserSigninResponse> _instance;
} _ActiveDirectoryUserSigninResponse_default_instance_;
class TpmVersionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TpmVersionInfo> _instance;
} _TpmVersionInfo_default_instance_;
class TpmStatusInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TpmStatusInfo> _instance;
} _TpmStatusInfo_default_instance_;
class SystemStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemState> _instance;
} _SystemState_default_instance_;
class AppInstallReportLogEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInstallReportLogEvent> _instance;
} _AppInstallReportLogEvent_default_instance_;
class AppInstallReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInstallReport> _instance;
} _AppInstallReport_default_instance_;
class AppInstallReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInstallReportRequest> _instance;
} _AppInstallReportRequest_default_instance_;
class AppInstallReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInstallReportResponse> _instance;
} _AppInstallReportResponse_default_instance_;
class RefreshAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshAccountRequest> _instance;
} _RefreshAccountRequest_default_instance_;
class RefreshAccountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshAccountResponse> _instance;
} _RefreshAccountResponse_default_instance_;
class RsuLookupKeyUploadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RsuLookupKeyUploadRequest> _instance;
} _RsuLookupKeyUploadRequest_default_instance_;
class RsuLookupKeyUploadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RsuLookupKeyUploadResponse> _instance;
} _RsuLookupKeyUploadResponse_default_instance_;
class AppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<App> _instance;
} _App_default_instance_;
class AppActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppActivity> _instance;
} _AppActivity_default_instance_;
class ScreenTimeSpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScreenTimeSpan> _instance;
} _ScreenTimeSpan_default_instance_;
class ChildStatusReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChildStatusReportRequest> _instance;
} _ChildStatusReportRequest_default_instance_;
class ChildStatusReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChildStatusReportResponse> _instance;
} _ChildStatusReportResponse_default_instance_;
class DeviceManagementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceManagementRequest> _instance;
} _DeviceManagementRequest_default_instance_;
class DeviceManagementResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceManagementResponse> _instance;
} _DeviceManagementResponse_default_instance_;
}  // namespace enterprise_management
static void InitDefaultsscc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryEnrollPlayUserRequest_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryEnrollPlayUserResponse_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryPlayActivityRequest_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryPlayActivityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryPlayActivityRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryPlayActivityResponse_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryPlayActivityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryPlayActivityResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryUserSigninRequest_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryUserSigninRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryUserSigninRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveDirectoryUserSigninResponse_default_instance_;
    new (ptr) ::enterprise_management::ActiveDirectoryUserSigninResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveDirectoryUserSigninResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ActiveTimePeriod_default_instance_;
    new (ptr) ::enterprise_management::ActiveTimePeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ActiveTimePeriod::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AndroidAppInfo_default_instance_;
    new (ptr) ::enterprise_management::AndroidAppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AndroidAppInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AndroidAppPermission_default_instance_;
    new (ptr) ::enterprise_management::AndroidAppPermission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AndroidAppPermission::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AndroidStatus_default_instance_;
    new (ptr) ::enterprise_management::AndroidStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AndroidStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_App_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_App_default_instance_;
    new (ptr) ::enterprise_management::App();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::App::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_App_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_App_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_AppActivity_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppActivity_default_instance_;
    new (ptr) ::enterprise_management::AppActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppActivity::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppActivity_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AppActivity_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_App_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppInstallReport_default_instance_;
    new (ptr) ::enterprise_management::AppInstallReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppInstallReport::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppInstallReportLogEvent_default_instance_;
    new (ptr) ::enterprise_management::AppInstallReportLogEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppInstallReportLogEvent::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppInstallReportRequest_default_instance_;
    new (ptr) ::enterprise_management::AppInstallReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppInstallReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppInstallReportResponse_default_instance_;
    new (ptr) ::enterprise_management::AppInstallReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppInstallReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_AppStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AppStatus_default_instance_;
    new (ptr) ::enterprise_management::AppStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AppStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppStatus_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_BatteryInfo_default_instance_;
    new (ptr) ::enterprise_management::BatteryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::BatteryInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_BatterySample_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_BatterySample_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_BatterySample_default_instance_;
    new (ptr) ::enterprise_management::BatterySample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::BatterySample::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatterySample_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BatterySample_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_BoardStatus_default_instance_;
    new (ptr) ::enterprise_management::BoardStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::BoardStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_BrowserReport_default_instance_;
    new (ptr) ::enterprise_management::BrowserReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::BrowserReport::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_Plugin_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CPUTempInfo_default_instance_;
    new (ptr) ::enterprise_management::CPUTempInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CPUTempInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CertificateBasedDeviceRegisterRequest_default_instance_;
    new (ptr) ::enterprise_management::CertificateBasedDeviceRegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CertificateBasedDeviceRegisterRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_SignedData_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_CertificateBasedDeviceRegistrationData_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CertificateBasedDeviceRegistrationData_default_instance_;
    new (ptr) ::enterprise_management::CertificateBasedDeviceRegistrationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CertificateBasedDeviceRegistrationData::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CertificateBasedDeviceRegistrationData_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CertificateBasedDeviceRegistrationData_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckAndroidManagementRequest_default_instance_;
    new (ptr) ::enterprise_management::CheckAndroidManagementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckAndroidManagementRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckAndroidManagementResponse_default_instance_;
    new (ptr) ::enterprise_management::CheckAndroidManagementResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckAndroidManagementResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckDeviceLicenseRequest_default_instance_;
    new (ptr) ::enterprise_management::CheckDeviceLicenseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckDeviceLicenseRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckDeviceLicenseResponse_default_instance_;
    new (ptr) ::enterprise_management::CheckDeviceLicenseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckDeviceLicenseResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckDevicePairingRequest_default_instance_;
    new (ptr) ::enterprise_management::CheckDevicePairingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckDevicePairingRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CheckDevicePairingResponse_default_instance_;
    new (ptr) ::enterprise_management::CheckDevicePairingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CheckDevicePairingResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChildStatusReportRequest_default_instance_;
    new (ptr) ::enterprise_management::ChildStatusReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChildStatusReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AppActivity_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChildStatusReportResponse_default_instance_;
    new (ptr) ::enterprise_management::ChildStatusReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChildStatusReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeDesktopReportRequest_default_instance_;
    new (ptr) ::enterprise_management::ChromeDesktopReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeDesktopReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_OSReport_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeDesktopReportResponse_default_instance_;
    new (ptr) ::enterprise_management::ChromeDesktopReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeDesktopReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeOsUserReportRequest_default_instance_;
    new (ptr) ::enterprise_management::ChromeOsUserReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeOsUserReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeOsUserReportResponse_default_instance_;
    new (ptr) ::enterprise_management::ChromeOsUserReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeOsUserReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeSignedInUser_default_instance_;
    new (ptr) ::enterprise_management::ChromeSignedInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeSignedInUser::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeUserProfileInfo_default_instance_;
    new (ptr) ::enterprise_management::ChromeUserProfileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeUserProfileInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_Extension_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_Policy_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeUserProfileReport_default_instance_;
    new (ptr) ::enterprise_management::ChromeUserProfileReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeUserProfileReport::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ClientActionRequired_default_instance_;
    new (ptr) ::enterprise_management::ClientActionRequired();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ClientActionRequired::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CpuInfo_default_instance_;
    new (ptr) ::enterprise_management::CpuInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CpuInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CpuUtilizationInfo_default_instance_;
    new (ptr) ::enterprise_management::CpuUtilizationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CpuUtilizationInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CrashReportInfo_default_instance_;
    new (ptr) ::enterprise_management::CrashReportInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CrashReportInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CrostiniApp_default_instance_;
    new (ptr) ::enterprise_management::CrostiniApp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CrostiniApp::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CrostiniStatus_default_instance_;
    new (ptr) ::enterprise_management::CrostiniStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CrostiniStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CustomerLogo_default_instance_;
    new (ptr) ::enterprise_management::CustomerLogo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CustomerLogo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DEPRECATEDPolicyPublicKeyAndDomain_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DEPRECATEDPolicyPublicKeyAndDomain_default_instance_;
    new (ptr) ::enterprise_management::DEPRECATEDPolicyPublicKeyAndDomain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DEPRECATEDPolicyPublicKeyAndDomain::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DEPRECATEDPolicyPublicKeyAndDomain_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DEPRECATEDPolicyPublicKeyAndDomain_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAttributeUpdatePermissionRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceAttributeUpdatePermissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAttributeUpdatePermissionRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAttributeUpdatePermissionResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceAttributeUpdatePermissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAttributeUpdatePermissionResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAttributeUpdateRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceAttributeUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAttributeUpdateRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAttributeUpdateResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceAttributeUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAttributeUpdateResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAutoEnrollmentRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceAutoEnrollmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAutoEnrollmentRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAutoEnrollmentResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceAutoEnrollmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAutoEnrollmentResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceCertUploadRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceCertUploadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceCertUploadRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceCertUploadResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceCertUploadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceCertUploadResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceInitialEnrollmentStateRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceInitialEnrollmentStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceInitialEnrollmentStateRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceInitialEnrollmentStateResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceInitialEnrollmentStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceInitialEnrollmentStateResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceManagementRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceManagementRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceManagementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceManagementRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<32> scc_info_DeviceManagementRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 32, InitDefaultsscc_info_DeviceManagementRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceManagementResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceManagementResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceManagementResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceManagementResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_DeviceManagementResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 29, InitDefaultsscc_info_DeviceManagementResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePairingRequest_default_instance_;
    new (ptr) ::enterprise_management::DevicePairingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePairingRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePairingResponse_default_instance_;
    new (ptr) ::enterprise_management::DevicePairingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePairingResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePolicyRequest_default_instance_;
    new (ptr) ::enterprise_management::DevicePolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePolicyRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePolicyResponse_default_instance_;
    new (ptr) ::enterprise_management::DevicePolicyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePolicyResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRegisterConfiguration_default_instance_;
    new (ptr) ::enterprise_management::DeviceRegisterConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRegisterConfiguration::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRegisterRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceRegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRegisterRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_LicenseType_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRegisterResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceRegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRegisterResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRemoteCommandRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceRemoteCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRemoteCommandRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRemoteCommandResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceRemoteCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRemoteCommandResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_SignedData_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceServiceApiAccessRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceServiceApiAccessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceServiceApiAccessRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceServiceApiAccessResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceServiceApiAccessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceServiceApiAccessResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceState_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceState_default_instance_;
    new (ptr) ::enterprise_management::DeviceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceState::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceState_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeviceState_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceStateKeyUpdateRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceStateKeyUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceStateKeyUpdateRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceStateRetrievalRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceStateRetrievalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceStateRetrievalRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceStateRetrievalResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceStateRetrievalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceStateRetrievalResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceStatusReportRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceStatusReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceStatusReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, InitDefaultsscc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_NetworkState_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceStatusReportResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceStatusReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceStatusReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUnregisterRequest_default_instance_;
    new (ptr) ::enterprise_management::DeviceUnregisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUnregisterRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUnregisterResponse_default_instance_;
    new (ptr) ::enterprise_management::DeviceUnregisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUnregisterResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUser_default_instance_;
    new (ptr) ::enterprise_management::DeviceUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUser::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DisabledState_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DisabledState_default_instance_;
    new (ptr) ::enterprise_management::DisabledState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DisabledState::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisabledState_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DiskInfo_default_instance_;
    new (ptr) ::enterprise_management::DiskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DiskInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DiskLifetimeEstimation_default_instance_;
    new (ptr) ::enterprise_management::DiskLifetimeEstimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DiskLifetimeEstimation::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DisplayInfo_default_instance_;
    new (ptr) ::enterprise_management::DisplayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DisplayInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_Extension_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_Extension_default_instance_;
    new (ptr) ::enterprise_management::Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::Extension::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extension_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Extension_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ExtensionPolicy_default_instance_;
    new (ptr) ::enterprise_management::ExtensionPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ExtensionPolicy::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_Policy_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ExtensionRequest_default_instance_;
    new (ptr) ::enterprise_management::ExtensionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ExtensionRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_GcmIdUpdateRequest_default_instance_;
    new (ptr) ::enterprise_management::GcmIdUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::GcmIdUpdateRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_GcmIdUpdateResponse_default_instance_;
    new (ptr) ::enterprise_management::GcmIdUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::GcmIdUpdateResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_GraphicsAdapterInfo_default_instance_;
    new (ptr) ::enterprise_management::GraphicsAdapterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::GraphicsAdapterInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_GraphicsStatus_default_instance_;
    new (ptr) ::enterprise_management::GraphicsStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::GraphicsStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LicenseAvailability_default_instance_;
    new (ptr) ::enterprise_management::LicenseAvailability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LicenseAvailability::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_LicenseType_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_LicenseType_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LicenseType_default_instance_;
    new (ptr) ::enterprise_management::LicenseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LicenseType::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LicenseType_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LicenseType_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_NetworkInterface_default_instance_;
    new (ptr) ::enterprise_management::NetworkInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::NetworkInterface::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetworkState_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_NetworkState_default_instance_;
    new (ptr) ::enterprise_management::NetworkState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::NetworkState::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkState_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkState_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_OSReport_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OSReport_default_instance_;
    new (ptr) ::enterprise_management::OSReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OSReport::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OSReport_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OSReport_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OsUpdateStatus_default_instance_;
    new (ptr) ::enterprise_management::OsUpdateStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OsUpdateStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_Plugin_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_Plugin_default_instance_;
    new (ptr) ::enterprise_management::Plugin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::Plugin::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plugin_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Plugin_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_Policy_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_Policy_default_instance_;
    new (ptr) ::enterprise_management::Policy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::Policy::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Policy_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Policy_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PolicyData_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyData_default_instance_;
    new (ptr) ::enterprise_management::PolicyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyData::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PolicyData_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PolicyData_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DeviceState_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyFetchRequest_default_instance_;
    new (ptr) ::enterprise_management::PolicyFetchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyFetchRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyFetchResponse_default_instance_;
    new (ptr) ::enterprise_management::PolicyFetchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyFetchResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyFetchTimestamp_default_instance_;
    new (ptr) ::enterprise_management::PolicyFetchTimestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyFetchTimestamp::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyValidationReportRequest_default_instance_;
    new (ptr) ::enterprise_management::PolicyValidationReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyValidationReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyValidationReportResponse_default_instance_;
    new (ptr) ::enterprise_management::PolicyValidationReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyValidationReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyValueValidationIssue_default_instance_;
    new (ptr) ::enterprise_management::PolicyValueValidationIssue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyValueValidationIssue::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PowerStatus_default_instance_;
    new (ptr) ::enterprise_management::PowerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PowerStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_PublicKeyVerificationData_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PublicKeyVerificationData_default_instance_;
    new (ptr) ::enterprise_management::PublicKeyVerificationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PublicKeyVerificationData::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKeyVerificationData_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PublicKeyVerificationData_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PublicSamlUserRequest_default_instance_;
    new (ptr) ::enterprise_management::PublicSamlUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PublicSamlUserRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PublicSamlUserResponse_default_instance_;
    new (ptr) ::enterprise_management::PublicSamlUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PublicSamlUserResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RefreshAccountRequest_default_instance_;
    new (ptr) ::enterprise_management::RefreshAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RefreshAccountRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RefreshAccountResponse_default_instance_;
    new (ptr) ::enterprise_management::RefreshAccountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RefreshAccountResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RegisterBrowserRequest_default_instance_;
    new (ptr) ::enterprise_management::RegisterBrowserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RegisterBrowserRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RemoteCommand_default_instance_;
    new (ptr) ::enterprise_management::RemoteCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RemoteCommand::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RemoteCommandResult_default_instance_;
    new (ptr) ::enterprise_management::RemoteCommandResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RemoteCommandResult::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RsuLookupKeyUploadRequest_default_instance_;
    new (ptr) ::enterprise_management::RsuLookupKeyUploadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RsuLookupKeyUploadRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RsuLookupKeyUploadResponse_default_instance_;
    new (ptr) ::enterprise_management::RsuLookupKeyUploadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RsuLookupKeyUploadResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SamlParametersProto_default_instance_;
    new (ptr) ::enterprise_management::SamlParametersProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SamlParametersProto::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ScreenTimeSpan_default_instance_;
    new (ptr) ::enterprise_management::ScreenTimeSpan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ScreenTimeSpan::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SessionStatusReportRequest_default_instance_;
    new (ptr) ::enterprise_management::SessionStatusReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SessionStatusReportRequest::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SessionStatusReportResponse_default_instance_;
    new (ptr) ::enterprise_management::SessionStatusReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SessionStatusReportResponse::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_SignedData_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SignedData_default_instance_;
    new (ptr) ::enterprise_management::SignedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SignedData::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignedData_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SignedData_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StatefulPartitionInfo_default_instance_;
    new (ptr) ::enterprise_management::StatefulPartitionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StatefulPartitionInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StorageStatus_default_instance_;
    new (ptr) ::enterprise_management::StorageStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StorageStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto.base,
      &scc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemFreeRamInfo_default_instance_;
    new (ptr) ::enterprise_management::SystemFreeRamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemFreeRamInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_SystemState_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemState_default_instance_;
    new (ptr) ::enterprise_management::SystemState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemState::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemState_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemState_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemStatus_default_instance_;
    new (ptr) ::enterprise_management::SystemStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemStatus::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ThermalInfo_default_instance_;
    new (ptr) ::enterprise_management::ThermalInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ThermalInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto}, {
      &scc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto.base,}};

static void InitDefaultsscc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ThermalSample_default_instance_;
    new (ptr) ::enterprise_management::ThermalSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ThermalSample::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_TimePeriod_default_instance_;
    new (ptr) ::enterprise_management::TimePeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::TimePeriod::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_TpmStatusInfo_default_instance_;
    new (ptr) ::enterprise_management::TpmStatusInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::TpmStatusInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_TpmVersionInfo_default_instance_;
    new (ptr) ::enterprise_management::TpmVersionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::TpmVersionInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto}, {}};

static void InitDefaultsscc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_VolumeInfo_default_instance_;
    new (ptr) ::enterprise_management::VolumeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::VolumeInfo::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto}, {}};

namespace enterprise_management {
bool LicenseType_LicenseTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LicenseType_LicenseTypeEnum_strings[4] = {};

static const char LicenseType_LicenseTypeEnum_names[] =
  "CDM_ANNUAL"
  "CDM_PERPETUAL"
  "KIOSK"
  "UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LicenseType_LicenseTypeEnum_entries[] = {
  { {LicenseType_LicenseTypeEnum_names + 0, 10}, 2 },
  { {LicenseType_LicenseTypeEnum_names + 10, 13}, 1 },
  { {LicenseType_LicenseTypeEnum_names + 23, 5}, 3 },
  { {LicenseType_LicenseTypeEnum_names + 28, 9}, 0 },
};

static const int LicenseType_LicenseTypeEnum_entries_by_number[] = {
  3, // 0 -> UNDEFINED
  1, // 1 -> CDM_PERPETUAL
  0, // 2 -> CDM_ANNUAL
  2, // 3 -> KIOSK
};

const std::string& LicenseType_LicenseTypeEnum_Name(
    LicenseType_LicenseTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LicenseType_LicenseTypeEnum_entries,
          LicenseType_LicenseTypeEnum_entries_by_number,
          4, LicenseType_LicenseTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LicenseType_LicenseTypeEnum_entries,
      LicenseType_LicenseTypeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LicenseType_LicenseTypeEnum_strings[idx].get();
}
bool LicenseType_LicenseTypeEnum_Parse(
    const std::string& name, LicenseType_LicenseTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LicenseType_LicenseTypeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LicenseType_LicenseTypeEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LicenseType_LicenseTypeEnum LicenseType::UNDEFINED;
constexpr LicenseType_LicenseTypeEnum LicenseType::CDM_PERPETUAL;
constexpr LicenseType_LicenseTypeEnum LicenseType::CDM_ANNUAL;
constexpr LicenseType_LicenseTypeEnum LicenseType::KIOSK;
constexpr LicenseType_LicenseTypeEnum LicenseType::LicenseTypeEnum_MIN;
constexpr LicenseType_LicenseTypeEnum LicenseType::LicenseTypeEnum_MAX;
constexpr int LicenseType::LicenseTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceRegisterRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceRegisterRequest_Type_strings[5] = {};

static const char DeviceRegisterRequest_Type_names[] =
  "ANDROID_BROWSER"
  "BROWSER"
  "DEVICE"
  "TT"
  "USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceRegisterRequest_Type_entries[] = {
  { {DeviceRegisterRequest_Type_names + 0, 15}, 4 },
  { {DeviceRegisterRequest_Type_names + 15, 7}, 3 },
  { {DeviceRegisterRequest_Type_names + 22, 6}, 2 },
  { {DeviceRegisterRequest_Type_names + 28, 2}, 0 },
  { {DeviceRegisterRequest_Type_names + 30, 4}, 1 },
};

static const int DeviceRegisterRequest_Type_entries_by_number[] = {
  3, // 0 -> TT
  4, // 1 -> USER
  2, // 2 -> DEVICE
  1, // 3 -> BROWSER
  0, // 4 -> ANDROID_BROWSER
};

const std::string& DeviceRegisterRequest_Type_Name(
    DeviceRegisterRequest_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceRegisterRequest_Type_entries,
          DeviceRegisterRequest_Type_entries_by_number,
          5, DeviceRegisterRequest_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceRegisterRequest_Type_entries,
      DeviceRegisterRequest_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceRegisterRequest_Type_strings[idx].get();
}
bool DeviceRegisterRequest_Type_Parse(
    const std::string& name, DeviceRegisterRequest_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceRegisterRequest_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DeviceRegisterRequest_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::TT;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::USER;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::DEVICE;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::BROWSER;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::ANDROID_BROWSER;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MIN;
constexpr DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MAX;
constexpr int DeviceRegisterRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceRegisterRequest_Flavor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceRegisterRequest_Flavor_strings[16] = {};

static const char DeviceRegisterRequest_Flavor_names[] =
  "FLAVOR_ENROLLMENT_ATTESTATION"
  "FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_MANUAL_FALLBACK"
  "FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_SERVER_FORCED"
  "FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED"
  "FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK"
  "FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED"
  "FLAVOR_ENROLLMENT_ATTESTATION_USB_ENROLLMENT"
  "FLAVOR_ENROLLMENT_INITIAL_SERVER_FORCED"
  "FLAVOR_ENROLLMENT_LOCAL_ADVERTISED"
  "FLAVOR_ENROLLMENT_LOCAL_FORCED"
  "FLAVOR_ENROLLMENT_MANUAL"
  "FLAVOR_ENROLLMENT_MANUAL_RENEW"
  "FLAVOR_ENROLLMENT_RECOVERY"
  "FLAVOR_ENROLLMENT_SERVER_ADVERTISED"
  "FLAVOR_ENROLLMENT_SERVER_FORCED"
  "FLAVOR_USER_REGISTRATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceRegisterRequest_Flavor_entries[] = {
  { {DeviceRegisterRequest_Flavor_names + 0, 29}, 8 },
  { {DeviceRegisterRequest_Flavor_names + 29, 53}, 15 },
  { {DeviceRegisterRequest_Flavor_names + 82, 51}, 14 },
  { {DeviceRegisterRequest_Flavor_names + 133, 42}, 9 },
  { {DeviceRegisterRequest_Flavor_names + 175, 45}, 11 },
  { {DeviceRegisterRequest_Flavor_names + 220, 43}, 10 },
  { {DeviceRegisterRequest_Flavor_names + 263, 44}, 12 },
  { {DeviceRegisterRequest_Flavor_names + 307, 39}, 13 },
  { {DeviceRegisterRequest_Flavor_names + 346, 34}, 3 },
  { {DeviceRegisterRequest_Flavor_names + 380, 30}, 2 },
  { {DeviceRegisterRequest_Flavor_names + 410, 24}, 0 },
  { {DeviceRegisterRequest_Flavor_names + 434, 30}, 1 },
  { {DeviceRegisterRequest_Flavor_names + 464, 26}, 6 },
  { {DeviceRegisterRequest_Flavor_names + 490, 35}, 5 },
  { {DeviceRegisterRequest_Flavor_names + 525, 31}, 4 },
  { {DeviceRegisterRequest_Flavor_names + 556, 24}, 7 },
};

static const int DeviceRegisterRequest_Flavor_entries_by_number[] = {
  10, // 0 -> FLAVOR_ENROLLMENT_MANUAL
  11, // 1 -> FLAVOR_ENROLLMENT_MANUAL_RENEW
  9, // 2 -> FLAVOR_ENROLLMENT_LOCAL_FORCED
  8, // 3 -> FLAVOR_ENROLLMENT_LOCAL_ADVERTISED
  14, // 4 -> FLAVOR_ENROLLMENT_SERVER_FORCED
  13, // 5 -> FLAVOR_ENROLLMENT_SERVER_ADVERTISED
  12, // 6 -> FLAVOR_ENROLLMENT_RECOVERY
  15, // 7 -> FLAVOR_USER_REGISTRATION
  0, // 8 -> FLAVOR_ENROLLMENT_ATTESTATION
  3, // 9 -> FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED
  5, // 10 -> FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED
  4, // 11 -> FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK
  6, // 12 -> FLAVOR_ENROLLMENT_ATTESTATION_USB_ENROLLMENT
  7, // 13 -> FLAVOR_ENROLLMENT_INITIAL_SERVER_FORCED
  2, // 14 -> FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_SERVER_FORCED
  1, // 15 -> FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_MANUAL_FALLBACK
};

const std::string& DeviceRegisterRequest_Flavor_Name(
    DeviceRegisterRequest_Flavor value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceRegisterRequest_Flavor_entries,
          DeviceRegisterRequest_Flavor_entries_by_number,
          16, DeviceRegisterRequest_Flavor_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceRegisterRequest_Flavor_entries,
      DeviceRegisterRequest_Flavor_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceRegisterRequest_Flavor_strings[idx].get();
}
bool DeviceRegisterRequest_Flavor_Parse(
    const std::string& name, DeviceRegisterRequest_Flavor* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceRegisterRequest_Flavor_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<DeviceRegisterRequest_Flavor>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL_RENEW;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_ADVERTISED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_ADVERTISED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_RECOVERY;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_USER_REGISTRATION;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_USB_ENROLLMENT;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_INITIAL_SERVER_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_SERVER_FORCED;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_INITIAL_MANUAL_FALLBACK;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MIN;
constexpr DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MAX;
constexpr int DeviceRegisterRequest::Flavor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceRegisterRequest_Lifetime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceRegisterRequest_Lifetime_strings[3] = {};

static const char DeviceRegisterRequest_Lifetime_names[] =
  "LIFETIME_EPHEMERAL_USER"
  "LIFETIME_INDEFINITE"
  "LIFETIME_UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceRegisterRequest_Lifetime_entries[] = {
  { {DeviceRegisterRequest_Lifetime_names + 0, 23}, 2 },
  { {DeviceRegisterRequest_Lifetime_names + 23, 19}, 1 },
  { {DeviceRegisterRequest_Lifetime_names + 42, 18}, 0 },
};

static const int DeviceRegisterRequest_Lifetime_entries_by_number[] = {
  2, // 0 -> LIFETIME_UNDEFINED
  1, // 1 -> LIFETIME_INDEFINITE
  0, // 2 -> LIFETIME_EPHEMERAL_USER
};

const std::string& DeviceRegisterRequest_Lifetime_Name(
    DeviceRegisterRequest_Lifetime value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceRegisterRequest_Lifetime_entries,
          DeviceRegisterRequest_Lifetime_entries_by_number,
          3, DeviceRegisterRequest_Lifetime_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceRegisterRequest_Lifetime_entries,
      DeviceRegisterRequest_Lifetime_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceRegisterRequest_Lifetime_strings[idx].get();
}
bool DeviceRegisterRequest_Lifetime_Parse(
    const std::string& name, DeviceRegisterRequest_Lifetime* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceRegisterRequest_Lifetime_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceRegisterRequest_Lifetime>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_UNDEFINED;
constexpr DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_INDEFINITE;
constexpr DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_EPHEMERAL_USER;
constexpr DeviceRegisterRequest_Lifetime DeviceRegisterRequest::Lifetime_MIN;
constexpr DeviceRegisterRequest_Lifetime DeviceRegisterRequest::Lifetime_MAX;
constexpr int DeviceRegisterRequest::Lifetime_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceRegisterResponse_DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceRegisterResponse_DeviceMode_strings[4] = {};

static const char DeviceRegisterResponse_DeviceMode_names[] =
  "CHROME_AD"
  "DEMO"
  "ENTERPRISE"
  "RETAIL_DEPRECATED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceRegisterResponse_DeviceMode_entries[] = {
  { {DeviceRegisterResponse_DeviceMode_names + 0, 9}, 2 },
  { {DeviceRegisterResponse_DeviceMode_names + 9, 4}, 3 },
  { {DeviceRegisterResponse_DeviceMode_names + 13, 10}, 0 },
  { {DeviceRegisterResponse_DeviceMode_names + 23, 17}, 1 },
};

static const int DeviceRegisterResponse_DeviceMode_entries_by_number[] = {
  2, // 0 -> ENTERPRISE
  3, // 1 -> RETAIL_DEPRECATED
  0, // 2 -> CHROME_AD
  1, // 3 -> DEMO
};

const std::string& DeviceRegisterResponse_DeviceMode_Name(
    DeviceRegisterResponse_DeviceMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceRegisterResponse_DeviceMode_entries,
          DeviceRegisterResponse_DeviceMode_entries_by_number,
          4, DeviceRegisterResponse_DeviceMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceRegisterResponse_DeviceMode_entries,
      DeviceRegisterResponse_DeviceMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceRegisterResponse_DeviceMode_strings[idx].get();
}
bool DeviceRegisterResponse_DeviceMode_Parse(
    const std::string& name, DeviceRegisterResponse_DeviceMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceRegisterResponse_DeviceMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceRegisterResponse_DeviceMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::ENTERPRISE;
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::RETAIL_DEPRECATED;
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::CHROME_AD;
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DEMO;
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MIN;
constexpr DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MAX;
constexpr int DeviceRegisterResponse::DeviceMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceCertUploadRequest_CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceCertUploadRequest_CertificateType_strings[3] = {};

static const char DeviceCertUploadRequest_CertificateType_names[] =
  "CERTIFICATE_TYPE_UNSPECIFIED"
  "ENTERPRISE_ENROLLMENT_CERTIFICATE"
  "ENTERPRISE_MACHINE_CERTIFICATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceCertUploadRequest_CertificateType_entries[] = {
  { {DeviceCertUploadRequest_CertificateType_names + 0, 28}, 0 },
  { {DeviceCertUploadRequest_CertificateType_names + 28, 33}, 2 },
  { {DeviceCertUploadRequest_CertificateType_names + 61, 30}, 1 },
};

static const int DeviceCertUploadRequest_CertificateType_entries_by_number[] = {
  0, // 0 -> CERTIFICATE_TYPE_UNSPECIFIED
  2, // 1 -> ENTERPRISE_MACHINE_CERTIFICATE
  1, // 2 -> ENTERPRISE_ENROLLMENT_CERTIFICATE
};

const std::string& DeviceCertUploadRequest_CertificateType_Name(
    DeviceCertUploadRequest_CertificateType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceCertUploadRequest_CertificateType_entries,
          DeviceCertUploadRequest_CertificateType_entries_by_number,
          3, DeviceCertUploadRequest_CertificateType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceCertUploadRequest_CertificateType_entries,
      DeviceCertUploadRequest_CertificateType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceCertUploadRequest_CertificateType_strings[idx].get();
}
bool DeviceCertUploadRequest_CertificateType_Parse(
    const std::string& name, DeviceCertUploadRequest_CertificateType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceCertUploadRequest_CertificateType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceCertUploadRequest_CertificateType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CERTIFICATE_TYPE_UNSPECIFIED;
constexpr DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::ENTERPRISE_MACHINE_CERTIFICATE;
constexpr DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::ENTERPRISE_ENROLLMENT_CERTIFICATE;
constexpr DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CertificateType_MIN;
constexpr DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CertificateType_MAX;
constexpr int DeviceCertUploadRequest::CertificateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceServiceApiAccessRequest_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceServiceApiAccessRequest_DeviceType_strings[3] = {};

static const char DeviceServiceApiAccessRequest_DeviceType_names[] =
  "ANDROID_OS"
  "CHROME_OS"
  "CHROME_OS_DEMO_MODE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceServiceApiAccessRequest_DeviceType_entries[] = {
  { {DeviceServiceApiAccessRequest_DeviceType_names + 0, 10}, 1 },
  { {DeviceServiceApiAccessRequest_DeviceType_names + 10, 9}, 0 },
  { {DeviceServiceApiAccessRequest_DeviceType_names + 19, 19}, 2 },
};

static const int DeviceServiceApiAccessRequest_DeviceType_entries_by_number[] = {
  1, // 0 -> CHROME_OS
  0, // 1 -> ANDROID_OS
  2, // 2 -> CHROME_OS_DEMO_MODE
};

const std::string& DeviceServiceApiAccessRequest_DeviceType_Name(
    DeviceServiceApiAccessRequest_DeviceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceServiceApiAccessRequest_DeviceType_entries,
          DeviceServiceApiAccessRequest_DeviceType_entries_by_number,
          3, DeviceServiceApiAccessRequest_DeviceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceServiceApiAccessRequest_DeviceType_entries,
      DeviceServiceApiAccessRequest_DeviceType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceServiceApiAccessRequest_DeviceType_strings[idx].get();
}
bool DeviceServiceApiAccessRequest_DeviceType_Parse(
    const std::string& name, DeviceServiceApiAccessRequest_DeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceServiceApiAccessRequest_DeviceType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceServiceApiAccessRequest_DeviceType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::CHROME_OS;
constexpr DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::ANDROID_OS;
constexpr DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::CHROME_OS_DEMO_MODE;
constexpr DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MIN;
constexpr DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MAX;
constexpr int DeviceServiceApiAccessRequest::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyFetchRequest_SignatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyFetchRequest_SignatureType_strings[2] = {};

static const char PolicyFetchRequest_SignatureType_names[] =
  "NONE"
  "SHA1_RSA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyFetchRequest_SignatureType_entries[] = {
  { {PolicyFetchRequest_SignatureType_names + 0, 4}, 0 },
  { {PolicyFetchRequest_SignatureType_names + 4, 8}, 1 },
};

static const int PolicyFetchRequest_SignatureType_entries_by_number[] = {
  0, // 0 -> NONE
  1, // 1 -> SHA1_RSA
};

const std::string& PolicyFetchRequest_SignatureType_Name(
    PolicyFetchRequest_SignatureType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyFetchRequest_SignatureType_entries,
          PolicyFetchRequest_SignatureType_entries_by_number,
          2, PolicyFetchRequest_SignatureType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyFetchRequest_SignatureType_entries,
      PolicyFetchRequest_SignatureType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyFetchRequest_SignatureType_strings[idx].get();
}
bool PolicyFetchRequest_SignatureType_Parse(
    const std::string& name, PolicyFetchRequest_SignatureType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyFetchRequest_SignatureType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PolicyFetchRequest_SignatureType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyFetchRequest_SignatureType PolicyFetchRequest::NONE;
constexpr PolicyFetchRequest_SignatureType PolicyFetchRequest::SHA1_RSA;
constexpr PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MIN;
constexpr PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MAX;
constexpr int PolicyFetchRequest::SignatureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceState_DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceState_DeviceMode_strings[2] = {};

static const char DeviceState_DeviceMode_names[] =
  "DEVICE_MODE_DISABLED"
  "DEVICE_MODE_NORMAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceState_DeviceMode_entries[] = {
  { {DeviceState_DeviceMode_names + 0, 20}, 1 },
  { {DeviceState_DeviceMode_names + 20, 18}, 0 },
};

static const int DeviceState_DeviceMode_entries_by_number[] = {
  1, // 0 -> DEVICE_MODE_NORMAL
  0, // 1 -> DEVICE_MODE_DISABLED
};

const std::string& DeviceState_DeviceMode_Name(
    DeviceState_DeviceMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceState_DeviceMode_entries,
          DeviceState_DeviceMode_entries_by_number,
          2, DeviceState_DeviceMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceState_DeviceMode_entries,
      DeviceState_DeviceMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceState_DeviceMode_strings[idx].get();
}
bool DeviceState_DeviceMode_Parse(
    const std::string& name, DeviceState_DeviceMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceState_DeviceMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DeviceState_DeviceMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceState_DeviceMode DeviceState::DEVICE_MODE_NORMAL;
constexpr DeviceState_DeviceMode DeviceState::DEVICE_MODE_DISABLED;
constexpr DeviceState_DeviceMode DeviceState::DeviceMode_MIN;
constexpr DeviceState_DeviceMode DeviceState::DeviceMode_MAX;
constexpr int DeviceState::DeviceMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyData_AssociationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyData_AssociationState_strings[3] = {};

static const char PolicyData_AssociationState_names[] =
  "ACTIVE"
  "DEPROVISIONED"
  "UNMANAGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyData_AssociationState_entries[] = {
  { {PolicyData_AssociationState_names + 0, 6}, 0 },
  { {PolicyData_AssociationState_names + 6, 13}, 2 },
  { {PolicyData_AssociationState_names + 19, 9}, 1 },
};

static const int PolicyData_AssociationState_entries_by_number[] = {
  0, // 0 -> ACTIVE
  2, // 1 -> UNMANAGED
  1, // 2 -> DEPROVISIONED
};

const std::string& PolicyData_AssociationState_Name(
    PolicyData_AssociationState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyData_AssociationState_entries,
          PolicyData_AssociationState_entries_by_number,
          3, PolicyData_AssociationState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyData_AssociationState_entries,
      PolicyData_AssociationState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyData_AssociationState_strings[idx].get();
}
bool PolicyData_AssociationState_Parse(
    const std::string& name, PolicyData_AssociationState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyData_AssociationState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyData_AssociationState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyData_AssociationState PolicyData::ACTIVE;
constexpr PolicyData_AssociationState PolicyData::UNMANAGED;
constexpr PolicyData_AssociationState PolicyData::DEPROVISIONED;
constexpr PolicyData_AssociationState PolicyData::AssociationState_MIN;
constexpr PolicyData_AssociationState PolicyData::AssociationState_MAX;
constexpr int PolicyData::AssociationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyData_ManagementMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyData_ManagementMode_strings[3] = {};

static const char PolicyData_ManagementMode_names[] =
  "ENTERPRISE_MANAGED"
  "LOCAL_OWNER"
  "OBSOLETE_CONSUMER_MANAGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyData_ManagementMode_entries[] = {
  { {PolicyData_ManagementMode_names + 0, 18}, 1 },
  { {PolicyData_ManagementMode_names + 18, 11}, 0 },
  { {PolicyData_ManagementMode_names + 29, 25}, 2 },
};

static const int PolicyData_ManagementMode_entries_by_number[] = {
  1, // 0 -> LOCAL_OWNER
  0, // 1 -> ENTERPRISE_MANAGED
  2, // 2 -> OBSOLETE_CONSUMER_MANAGED
};

const std::string& PolicyData_ManagementMode_Name(
    PolicyData_ManagementMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyData_ManagementMode_entries,
          PolicyData_ManagementMode_entries_by_number,
          3, PolicyData_ManagementMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyData_ManagementMode_entries,
      PolicyData_ManagementMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyData_ManagementMode_strings[idx].get();
}
bool PolicyData_ManagementMode_Parse(
    const std::string& name, PolicyData_ManagementMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyData_ManagementMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyData_ManagementMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyData_ManagementMode PolicyData::LOCAL_OWNER;
constexpr PolicyData_ManagementMode PolicyData::ENTERPRISE_MANAGED;
constexpr PolicyData_ManagementMode PolicyData::OBSOLETE_CONSUMER_MANAGED;
constexpr PolicyData_ManagementMode PolicyData::ManagementMode_MIN;
constexpr PolicyData_ManagementMode PolicyData::ManagementMode_MAX;
constexpr int PolicyData::ManagementMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyData_MarketSegment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyData_MarketSegment_strings[3] = {};

static const char PolicyData_MarketSegment_names[] =
  "ENROLLED_EDUCATION"
  "ENROLLED_ENTERPRISE"
  "MARKET_SEGMENT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyData_MarketSegment_entries[] = {
  { {PolicyData_MarketSegment_names + 0, 18}, 1 },
  { {PolicyData_MarketSegment_names + 18, 19}, 2 },
  { {PolicyData_MarketSegment_names + 37, 26}, 0 },
};

static const int PolicyData_MarketSegment_entries_by_number[] = {
  2, // 0 -> MARKET_SEGMENT_UNSPECIFIED
  0, // 1 -> ENROLLED_EDUCATION
  1, // 2 -> ENROLLED_ENTERPRISE
};

const std::string& PolicyData_MarketSegment_Name(
    PolicyData_MarketSegment value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyData_MarketSegment_entries,
          PolicyData_MarketSegment_entries_by_number,
          3, PolicyData_MarketSegment_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyData_MarketSegment_entries,
      PolicyData_MarketSegment_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyData_MarketSegment_strings[idx].get();
}
bool PolicyData_MarketSegment_Parse(
    const std::string& name, PolicyData_MarketSegment* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyData_MarketSegment_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyData_MarketSegment>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyData_MarketSegment PolicyData::MARKET_SEGMENT_UNSPECIFIED;
constexpr PolicyData_MarketSegment PolicyData::ENROLLED_EDUCATION;
constexpr PolicyData_MarketSegment PolicyData::ENROLLED_ENTERPRISE;
constexpr PolicyData_MarketSegment PolicyData::MarketSegment_MIN;
constexpr PolicyData_MarketSegment PolicyData::MarketSegment_MAX;
constexpr int PolicyData::MarketSegment_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetworkInterface_NetworkDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkInterface_NetworkDeviceType_strings[4] = {};

static const char NetworkInterface_NetworkDeviceType_names[] =
  "TYPE_BLUETOOTH"
  "TYPE_CELLULAR"
  "TYPE_ETHERNET"
  "TYPE_WIFI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetworkInterface_NetworkDeviceType_entries[] = {
  { {NetworkInterface_NetworkDeviceType_names + 0, 14}, 3 },
  { {NetworkInterface_NetworkDeviceType_names + 14, 13}, 4 },
  { {NetworkInterface_NetworkDeviceType_names + 27, 13}, 0 },
  { {NetworkInterface_NetworkDeviceType_names + 40, 9}, 1 },
};

static const int NetworkInterface_NetworkDeviceType_entries_by_number[] = {
  2, // 0 -> TYPE_ETHERNET
  3, // 1 -> TYPE_WIFI
  0, // 3 -> TYPE_BLUETOOTH
  1, // 4 -> TYPE_CELLULAR
};

const std::string& NetworkInterface_NetworkDeviceType_Name(
    NetworkInterface_NetworkDeviceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetworkInterface_NetworkDeviceType_entries,
          NetworkInterface_NetworkDeviceType_entries_by_number,
          4, NetworkInterface_NetworkDeviceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetworkInterface_NetworkDeviceType_entries,
      NetworkInterface_NetworkDeviceType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetworkInterface_NetworkDeviceType_strings[idx].get();
}
bool NetworkInterface_NetworkDeviceType_Parse(
    const std::string& name, NetworkInterface_NetworkDeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetworkInterface_NetworkDeviceType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<NetworkInterface_NetworkDeviceType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_ETHERNET;
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_WIFI;
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_BLUETOOTH;
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_CELLULAR;
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MIN;
constexpr NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MAX;
constexpr int NetworkInterface::NetworkDeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetworkState_ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkState_ConnectionState_strings[12] = {};

static const char NetworkState_ConnectionState_names[] =
  "ACTIVATION_FAILURE"
  "ASSOCIATION"
  "CARRIER"
  "CONFIGURATION"
  "DISCONNECT"
  "FAILURE"
  "IDLE"
  "OFFLINE"
  "ONLINE"
  "PORTAL"
  "READY"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetworkState_ConnectionState_entries[] = {
  { {NetworkState_ConnectionState_names + 0, 18}, 10 },
  { {NetworkState_ConnectionState_names + 18, 11}, 2 },
  { {NetworkState_ConnectionState_names + 29, 7}, 1 },
  { {NetworkState_ConnectionState_names + 36, 13}, 3 },
  { {NetworkState_ConnectionState_names + 49, 10}, 8 },
  { {NetworkState_ConnectionState_names + 59, 7}, 9 },
  { {NetworkState_ConnectionState_names + 66, 4}, 0 },
  { {NetworkState_ConnectionState_names + 70, 7}, 6 },
  { {NetworkState_ConnectionState_names + 77, 6}, 7 },
  { {NetworkState_ConnectionState_names + 83, 6}, 5 },
  { {NetworkState_ConnectionState_names + 89, 5}, 4 },
  { {NetworkState_ConnectionState_names + 94, 7}, 11 },
};

static const int NetworkState_ConnectionState_entries_by_number[] = {
  6, // 0 -> IDLE
  2, // 1 -> CARRIER
  1, // 2 -> ASSOCIATION
  3, // 3 -> CONFIGURATION
  10, // 4 -> READY
  9, // 5 -> PORTAL
  7, // 6 -> OFFLINE
  8, // 7 -> ONLINE
  4, // 8 -> DISCONNECT
  5, // 9 -> FAILURE
  0, // 10 -> ACTIVATION_FAILURE
  11, // 11 -> UNKNOWN
};

const std::string& NetworkState_ConnectionState_Name(
    NetworkState_ConnectionState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetworkState_ConnectionState_entries,
          NetworkState_ConnectionState_entries_by_number,
          12, NetworkState_ConnectionState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetworkState_ConnectionState_entries,
      NetworkState_ConnectionState_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetworkState_ConnectionState_strings[idx].get();
}
bool NetworkState_ConnectionState_Parse(
    const std::string& name, NetworkState_ConnectionState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetworkState_ConnectionState_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<NetworkState_ConnectionState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetworkState_ConnectionState NetworkState::IDLE;
constexpr NetworkState_ConnectionState NetworkState::CARRIER;
constexpr NetworkState_ConnectionState NetworkState::ASSOCIATION;
constexpr NetworkState_ConnectionState NetworkState::CONFIGURATION;
constexpr NetworkState_ConnectionState NetworkState::READY;
constexpr NetworkState_ConnectionState NetworkState::PORTAL;
constexpr NetworkState_ConnectionState NetworkState::OFFLINE;
constexpr NetworkState_ConnectionState NetworkState::ONLINE;
constexpr NetworkState_ConnectionState NetworkState::DISCONNECT;
constexpr NetworkState_ConnectionState NetworkState::FAILURE;
constexpr NetworkState_ConnectionState NetworkState::ACTIVATION_FAILURE;
constexpr NetworkState_ConnectionState NetworkState::UNKNOWN;
constexpr NetworkState_ConnectionState NetworkState::ConnectionState_MIN;
constexpr NetworkState_ConnectionState NetworkState::ConnectionState_MAX;
constexpr int NetworkState::ConnectionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceUser_UserType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceUser_UserType_strings[2] = {};

static const char DeviceUser_UserType_names[] =
  "USER_TYPE_MANAGED"
  "USER_TYPE_UNMANAGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceUser_UserType_entries[] = {
  { {DeviceUser_UserType_names + 0, 17}, 0 },
  { {DeviceUser_UserType_names + 17, 19}, 1 },
};

static const int DeviceUser_UserType_entries_by_number[] = {
  0, // 0 -> USER_TYPE_MANAGED
  1, // 1 -> USER_TYPE_UNMANAGED
};

const std::string& DeviceUser_UserType_Name(
    DeviceUser_UserType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceUser_UserType_entries,
          DeviceUser_UserType_entries_by_number,
          2, DeviceUser_UserType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceUser_UserType_entries,
      DeviceUser_UserType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceUser_UserType_strings[idx].get();
}
bool DeviceUser_UserType_Parse(
    const std::string& name, DeviceUser_UserType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceUser_UserType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DeviceUser_UserType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceUser_UserType DeviceUser::USER_TYPE_MANAGED;
constexpr DeviceUser_UserType DeviceUser::USER_TYPE_UNMANAGED;
constexpr DeviceUser_UserType DeviceUser::UserType_MIN;
constexpr DeviceUser_UserType DeviceUser::UserType_MAX;
constexpr int DeviceUser::UserType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PowerStatus_PowerSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerStatus_PowerSource_strings[3] = {};

static const char PowerStatus_PowerSource_names[] =
  "POWER_AC"
  "POWER_BATTERY"
  "POWER_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerStatus_PowerSource_entries[] = {
  { {PowerStatus_PowerSource_names + 0, 8}, 1 },
  { {PowerStatus_PowerSource_names + 8, 13}, 2 },
  { {PowerStatus_PowerSource_names + 21, 13}, 0 },
};

static const int PowerStatus_PowerSource_entries_by_number[] = {
  2, // 0 -> POWER_UNKNOWN
  0, // 1 -> POWER_AC
  1, // 2 -> POWER_BATTERY
};

const std::string& PowerStatus_PowerSource_Name(
    PowerStatus_PowerSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerStatus_PowerSource_entries,
          PowerStatus_PowerSource_entries_by_number,
          3, PowerStatus_PowerSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerStatus_PowerSource_entries,
      PowerStatus_PowerSource_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerStatus_PowerSource_strings[idx].get();
}
bool PowerStatus_PowerSource_Parse(
    const std::string& name, PowerStatus_PowerSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerStatus_PowerSource_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PowerStatus_PowerSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerStatus_PowerSource PowerStatus::POWER_UNKNOWN;
constexpr PowerStatus_PowerSource PowerStatus::POWER_AC;
constexpr PowerStatus_PowerSource PowerStatus::POWER_BATTERY;
constexpr PowerStatus_PowerSource PowerStatus::PowerSource_MIN;
constexpr PowerStatus_PowerSource PowerStatus::PowerSource_MAX;
constexpr int PowerStatus::PowerSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CpuInfo_Architecture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CpuInfo_Architecture_strings[2] = {};

static const char CpuInfo_Architecture_names[] =
  "ARCHITECTURE_UNSPECIFIED"
  "X86_64";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CpuInfo_Architecture_entries[] = {
  { {CpuInfo_Architecture_names + 0, 24}, 0 },
  { {CpuInfo_Architecture_names + 24, 6}, 1 },
};

static const int CpuInfo_Architecture_entries_by_number[] = {
  0, // 0 -> ARCHITECTURE_UNSPECIFIED
  1, // 1 -> X86_64
};

const std::string& CpuInfo_Architecture_Name(
    CpuInfo_Architecture value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CpuInfo_Architecture_entries,
          CpuInfo_Architecture_entries_by_number,
          2, CpuInfo_Architecture_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CpuInfo_Architecture_entries,
      CpuInfo_Architecture_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CpuInfo_Architecture_strings[idx].get();
}
bool CpuInfo_Architecture_Parse(
    const std::string& name, CpuInfo_Architecture* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CpuInfo_Architecture_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CpuInfo_Architecture>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CpuInfo_Architecture CpuInfo::ARCHITECTURE_UNSPECIFIED;
constexpr CpuInfo_Architecture CpuInfo::X86_64;
constexpr CpuInfo_Architecture CpuInfo::Architecture_MIN;
constexpr CpuInfo_Architecture CpuInfo::Architecture_MAX;
constexpr int CpuInfo::Architecture_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool OsUpdateStatus_UpdateStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OsUpdateStatus_UpdateStatus_strings[4] = {};

static const char OsUpdateStatus_UpdateStatus_names[] =
  "OS_IMAGE_DOWNLOAD_IN_PROGRESS"
  "OS_IMAGE_DOWNLOAD_NOT_STARTED"
  "OS_UPDATE_NEED_REBOOT"
  "OS_UP_TO_DATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OsUpdateStatus_UpdateStatus_entries[] = {
  { {OsUpdateStatus_UpdateStatus_names + 0, 29}, 2 },
  { {OsUpdateStatus_UpdateStatus_names + 29, 29}, 1 },
  { {OsUpdateStatus_UpdateStatus_names + 58, 21}, 3 },
  { {OsUpdateStatus_UpdateStatus_names + 79, 13}, 0 },
};

static const int OsUpdateStatus_UpdateStatus_entries_by_number[] = {
  3, // 0 -> OS_UP_TO_DATE
  1, // 1 -> OS_IMAGE_DOWNLOAD_NOT_STARTED
  0, // 2 -> OS_IMAGE_DOWNLOAD_IN_PROGRESS
  2, // 3 -> OS_UPDATE_NEED_REBOOT
};

const std::string& OsUpdateStatus_UpdateStatus_Name(
    OsUpdateStatus_UpdateStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OsUpdateStatus_UpdateStatus_entries,
          OsUpdateStatus_UpdateStatus_entries_by_number,
          4, OsUpdateStatus_UpdateStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OsUpdateStatus_UpdateStatus_entries,
      OsUpdateStatus_UpdateStatus_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OsUpdateStatus_UpdateStatus_strings[idx].get();
}
bool OsUpdateStatus_UpdateStatus_Parse(
    const std::string& name, OsUpdateStatus_UpdateStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OsUpdateStatus_UpdateStatus_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<OsUpdateStatus_UpdateStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UP_TO_DATE;
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_NOT_STARTED;
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_IN_PROGRESS;
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UPDATE_NEED_REBOOT;
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MIN;
constexpr OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MAX;
constexpr int OsUpdateStatus::UpdateStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AndroidAppInfo_AndroidAppStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidAppInfo_AndroidAppStatus_strings[4] = {};

static const char AndroidAppInfo_AndroidAppStatus_names[] =
  "STATUS_DISABLED"
  "STATUS_ENABLED"
  "STATUS_SUSPENDED"
  "STATUS_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidAppInfo_AndroidAppStatus_entries[] = {
  { {AndroidAppInfo_AndroidAppStatus_names + 0, 15}, 3 },
  { {AndroidAppInfo_AndroidAppStatus_names + 15, 14}, 1 },
  { {AndroidAppInfo_AndroidAppStatus_names + 29, 16}, 2 },
  { {AndroidAppInfo_AndroidAppStatus_names + 45, 14}, 0 },
};

static const int AndroidAppInfo_AndroidAppStatus_entries_by_number[] = {
  3, // 0 -> STATUS_UNKNOWN
  1, // 1 -> STATUS_ENABLED
  2, // 2 -> STATUS_SUSPENDED
  0, // 3 -> STATUS_DISABLED
};

const std::string& AndroidAppInfo_AndroidAppStatus_Name(
    AndroidAppInfo_AndroidAppStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidAppInfo_AndroidAppStatus_entries,
          AndroidAppInfo_AndroidAppStatus_entries_by_number,
          4, AndroidAppInfo_AndroidAppStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidAppInfo_AndroidAppStatus_entries,
      AndroidAppInfo_AndroidAppStatus_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidAppInfo_AndroidAppStatus_strings[idx].get();
}
bool AndroidAppInfo_AndroidAppStatus_Parse(
    const std::string& name, AndroidAppInfo_AndroidAppStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidAppInfo_AndroidAppStatus_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AndroidAppInfo_AndroidAppStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::STATUS_UNKNOWN;
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::STATUS_ENABLED;
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::STATUS_SUSPENDED;
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::STATUS_DISABLED;
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::AndroidAppStatus_MIN;
constexpr AndroidAppInfo_AndroidAppStatus AndroidAppInfo::AndroidAppStatus_MAX;
constexpr int AndroidAppInfo::AndroidAppStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AndroidAppInfo_InstalledSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidAppInfo_InstalledSource_strings[4] = {};

static const char AndroidAppInfo_InstalledSource_names[] =
  "SOURCE_BY_ADMIN"
  "SOURCE_BY_USER"
  "SOURCE_NOT_INSTALLED"
  "SOURCE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidAppInfo_InstalledSource_entries[] = {
  { {AndroidAppInfo_InstalledSource_names + 0, 15}, 1 },
  { {AndroidAppInfo_InstalledSource_names + 15, 14}, 2 },
  { {AndroidAppInfo_InstalledSource_names + 29, 20}, 3 },
  { {AndroidAppInfo_InstalledSource_names + 49, 14}, 0 },
};

static const int AndroidAppInfo_InstalledSource_entries_by_number[] = {
  3, // 0 -> SOURCE_UNKNOWN
  0, // 1 -> SOURCE_BY_ADMIN
  1, // 2 -> SOURCE_BY_USER
  2, // 3 -> SOURCE_NOT_INSTALLED
};

const std::string& AndroidAppInfo_InstalledSource_Name(
    AndroidAppInfo_InstalledSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidAppInfo_InstalledSource_entries,
          AndroidAppInfo_InstalledSource_entries_by_number,
          4, AndroidAppInfo_InstalledSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidAppInfo_InstalledSource_entries,
      AndroidAppInfo_InstalledSource_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidAppInfo_InstalledSource_strings[idx].get();
}
bool AndroidAppInfo_InstalledSource_Parse(
    const std::string& name, AndroidAppInfo_InstalledSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidAppInfo_InstalledSource_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AndroidAppInfo_InstalledSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::SOURCE_UNKNOWN;
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::SOURCE_BY_ADMIN;
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::SOURCE_BY_USER;
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::SOURCE_NOT_INSTALLED;
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::InstalledSource_MIN;
constexpr AndroidAppInfo_InstalledSource AndroidAppInfo::InstalledSource_MAX;
constexpr int AndroidAppInfo::InstalledSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Extension_ExtensionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Extension_ExtensionType_strings[9] = {};

static const char Extension_ExtensionType_names[] =
  "TYPE_EXTENSION"
  "TYPE_HOSTED_APP"
  "TYPE_LEGACY_PACKAGED_APP"
  "TYPE_LOGIN_SCREEN_EXTENSION"
  "TYPE_PACKAGED_APP"
  "TYPE_PLATFORM_APP"
  "TYPE_THEME"
  "TYPE_UNKNOWN"
  "TYPE_USER_SCRIPT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Extension_ExtensionType_entries[] = {
  { {Extension_ExtensionType_names + 0, 14}, 1 },
  { {Extension_ExtensionType_names + 14, 15}, 2 },
  { {Extension_ExtensionType_names + 29, 24}, 4 },
  { {Extension_ExtensionType_names + 53, 27}, 8 },
  { {Extension_ExtensionType_names + 80, 17}, 3 },
  { {Extension_ExtensionType_names + 97, 17}, 7 },
  { {Extension_ExtensionType_names + 114, 10}, 5 },
  { {Extension_ExtensionType_names + 124, 12}, 0 },
  { {Extension_ExtensionType_names + 136, 16}, 6 },
};

static const int Extension_ExtensionType_entries_by_number[] = {
  7, // 0 -> TYPE_UNKNOWN
  0, // 1 -> TYPE_EXTENSION
  1, // 2 -> TYPE_HOSTED_APP
  4, // 3 -> TYPE_PACKAGED_APP
  2, // 4 -> TYPE_LEGACY_PACKAGED_APP
  6, // 5 -> TYPE_THEME
  8, // 6 -> TYPE_USER_SCRIPT
  5, // 7 -> TYPE_PLATFORM_APP
  3, // 8 -> TYPE_LOGIN_SCREEN_EXTENSION
};

const std::string& Extension_ExtensionType_Name(
    Extension_ExtensionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Extension_ExtensionType_entries,
          Extension_ExtensionType_entries_by_number,
          9, Extension_ExtensionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Extension_ExtensionType_entries,
      Extension_ExtensionType_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Extension_ExtensionType_strings[idx].get();
}
bool Extension_ExtensionType_Parse(
    const std::string& name, Extension_ExtensionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Extension_ExtensionType_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<Extension_ExtensionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Extension_ExtensionType Extension::TYPE_UNKNOWN;
constexpr Extension_ExtensionType Extension::TYPE_EXTENSION;
constexpr Extension_ExtensionType Extension::TYPE_HOSTED_APP;
constexpr Extension_ExtensionType Extension::TYPE_PACKAGED_APP;
constexpr Extension_ExtensionType Extension::TYPE_LEGACY_PACKAGED_APP;
constexpr Extension_ExtensionType Extension::TYPE_THEME;
constexpr Extension_ExtensionType Extension::TYPE_USER_SCRIPT;
constexpr Extension_ExtensionType Extension::TYPE_PLATFORM_APP;
constexpr Extension_ExtensionType Extension::TYPE_LOGIN_SCREEN_EXTENSION;
constexpr Extension_ExtensionType Extension::ExtensionType_MIN;
constexpr Extension_ExtensionType Extension::ExtensionType_MAX;
constexpr int Extension::ExtensionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Extension_InstallType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Extension_InstallType_strings[5] = {};

static const char Extension_InstallType_names[] =
  "TYPE_ADMIN"
  "TYPE_DEVELOPMENT"
  "TYPE_NORMAL"
  "TYPE_OTHER"
  "TYPE_SIDELOAD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Extension_InstallType_entries[] = {
  { {Extension_InstallType_names + 0, 10}, 3 },
  { {Extension_InstallType_names + 10, 16}, 1 },
  { {Extension_InstallType_names + 26, 11}, 0 },
  { {Extension_InstallType_names + 37, 10}, 4 },
  { {Extension_InstallType_names + 47, 13}, 2 },
};

static const int Extension_InstallType_entries_by_number[] = {
  2, // 0 -> TYPE_NORMAL
  1, // 1 -> TYPE_DEVELOPMENT
  4, // 2 -> TYPE_SIDELOAD
  0, // 3 -> TYPE_ADMIN
  3, // 4 -> TYPE_OTHER
};

const std::string& Extension_InstallType_Name(
    Extension_InstallType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Extension_InstallType_entries,
          Extension_InstallType_entries_by_number,
          5, Extension_InstallType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Extension_InstallType_entries,
      Extension_InstallType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Extension_InstallType_strings[idx].get();
}
bool Extension_InstallType_Parse(
    const std::string& name, Extension_InstallType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Extension_InstallType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Extension_InstallType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Extension_InstallType Extension::TYPE_NORMAL;
constexpr Extension_InstallType Extension::TYPE_DEVELOPMENT;
constexpr Extension_InstallType Extension::TYPE_SIDELOAD;
constexpr Extension_InstallType Extension::TYPE_ADMIN;
constexpr Extension_InstallType Extension::TYPE_OTHER;
constexpr Extension_InstallType Extension::InstallType_MIN;
constexpr Extension_InstallType Extension::InstallType_MAX;
constexpr int Extension::InstallType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Policy_PolicyLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Policy_PolicyLevel_strings[3] = {};

static const char Policy_PolicyLevel_names[] =
  "LEVEL_MANDATORY"
  "LEVEL_RECOMMENDED"
  "LEVEL_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Policy_PolicyLevel_entries[] = {
  { {Policy_PolicyLevel_names + 0, 15}, 2 },
  { {Policy_PolicyLevel_names + 15, 17}, 1 },
  { {Policy_PolicyLevel_names + 32, 13}, 0 },
};

static const int Policy_PolicyLevel_entries_by_number[] = {
  2, // 0 -> LEVEL_UNKNOWN
  1, // 1 -> LEVEL_RECOMMENDED
  0, // 2 -> LEVEL_MANDATORY
};

const std::string& Policy_PolicyLevel_Name(
    Policy_PolicyLevel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Policy_PolicyLevel_entries,
          Policy_PolicyLevel_entries_by_number,
          3, Policy_PolicyLevel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Policy_PolicyLevel_entries,
      Policy_PolicyLevel_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Policy_PolicyLevel_strings[idx].get();
}
bool Policy_PolicyLevel_Parse(
    const std::string& name, Policy_PolicyLevel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Policy_PolicyLevel_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Policy_PolicyLevel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Policy_PolicyLevel Policy::LEVEL_UNKNOWN;
constexpr Policy_PolicyLevel Policy::LEVEL_RECOMMENDED;
constexpr Policy_PolicyLevel Policy::LEVEL_MANDATORY;
constexpr Policy_PolicyLevel Policy::PolicyLevel_MIN;
constexpr Policy_PolicyLevel Policy::PolicyLevel_MAX;
constexpr int Policy::PolicyLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Policy_PolicyScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Policy_PolicyScope_strings[3] = {};

static const char Policy_PolicyScope_names[] =
  "SCOPE_MACHINE"
  "SCOPE_UNKNOWN"
  "SCOPE_USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Policy_PolicyScope_entries[] = {
  { {Policy_PolicyScope_names + 0, 13}, 2 },
  { {Policy_PolicyScope_names + 13, 13}, 0 },
  { {Policy_PolicyScope_names + 26, 10}, 1 },
};

static const int Policy_PolicyScope_entries_by_number[] = {
  1, // 0 -> SCOPE_UNKNOWN
  2, // 1 -> SCOPE_USER
  0, // 2 -> SCOPE_MACHINE
};

const std::string& Policy_PolicyScope_Name(
    Policy_PolicyScope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Policy_PolicyScope_entries,
          Policy_PolicyScope_entries_by_number,
          3, Policy_PolicyScope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Policy_PolicyScope_entries,
      Policy_PolicyScope_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Policy_PolicyScope_strings[idx].get();
}
bool Policy_PolicyScope_Parse(
    const std::string& name, Policy_PolicyScope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Policy_PolicyScope_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Policy_PolicyScope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Policy_PolicyScope Policy::SCOPE_UNKNOWN;
constexpr Policy_PolicyScope Policy::SCOPE_USER;
constexpr Policy_PolicyScope Policy::SCOPE_MACHINE;
constexpr Policy_PolicyScope Policy::PolicyScope_MIN;
constexpr Policy_PolicyScope Policy::PolicyScope_MAX;
constexpr int Policy::PolicyScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Policy_PolicySource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Policy_PolicySource_strings[8] = {};

static const char Policy_PolicySource_names[] =
  "SOURCE_ACTIVE_DIRECTORY"
  "SOURCE_CLOUD"
  "SOURCE_DEVICE_LOCAL_ACCOUNT_OVERRIDE"
  "SOURCE_ENTERPRISE_DEFAULT"
  "SOURCE_MERGED"
  "SOURCE_PLATFORM"
  "SOURCE_PRIORITY_CLOUD"
  "SOURCE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Policy_PolicySource_entries[] = {
  { {Policy_PolicySource_names + 0, 23}, 3 },
  { {Policy_PolicySource_names + 23, 12}, 2 },
  { {Policy_PolicySource_names + 35, 36}, 4 },
  { {Policy_PolicySource_names + 71, 25}, 1 },
  { {Policy_PolicySource_names + 96, 13}, 7 },
  { {Policy_PolicySource_names + 109, 15}, 5 },
  { {Policy_PolicySource_names + 124, 21}, 6 },
  { {Policy_PolicySource_names + 145, 14}, 0 },
};

static const int Policy_PolicySource_entries_by_number[] = {
  7, // 0 -> SOURCE_UNKNOWN
  3, // 1 -> SOURCE_ENTERPRISE_DEFAULT
  1, // 2 -> SOURCE_CLOUD
  0, // 3 -> SOURCE_ACTIVE_DIRECTORY
  2, // 4 -> SOURCE_DEVICE_LOCAL_ACCOUNT_OVERRIDE
  5, // 5 -> SOURCE_PLATFORM
  6, // 6 -> SOURCE_PRIORITY_CLOUD
  4, // 7 -> SOURCE_MERGED
};

const std::string& Policy_PolicySource_Name(
    Policy_PolicySource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Policy_PolicySource_entries,
          Policy_PolicySource_entries_by_number,
          8, Policy_PolicySource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Policy_PolicySource_entries,
      Policy_PolicySource_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Policy_PolicySource_strings[idx].get();
}
bool Policy_PolicySource_Parse(
    const std::string& name, Policy_PolicySource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Policy_PolicySource_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Policy_PolicySource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Policy_PolicySource Policy::SOURCE_UNKNOWN;
constexpr Policy_PolicySource Policy::SOURCE_ENTERPRISE_DEFAULT;
constexpr Policy_PolicySource Policy::SOURCE_CLOUD;
constexpr Policy_PolicySource Policy::SOURCE_ACTIVE_DIRECTORY;
constexpr Policy_PolicySource Policy::SOURCE_DEVICE_LOCAL_ACCOUNT_OVERRIDE;
constexpr Policy_PolicySource Policy::SOURCE_PLATFORM;
constexpr Policy_PolicySource Policy::SOURCE_PRIORITY_CLOUD;
constexpr Policy_PolicySource Policy::SOURCE_MERGED;
constexpr Policy_PolicySource Policy::PolicySource_MIN;
constexpr Policy_PolicySource Policy::PolicySource_MAX;
constexpr int Policy::PolicySource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyValueValidationIssue_ValueValidationIssueSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyValueValidationIssue_ValueValidationIssueSeverity_strings[3] = {};

static const char PolicyValueValidationIssue_ValueValidationIssueSeverity_names[] =
  "VALUE_VALIDATION_ISSUE_SEVERITY_ERROR"
  "VALUE_VALIDATION_ISSUE_SEVERITY_UNSPECIFIED"
  "VALUE_VALIDATION_ISSUE_SEVERITY_WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyValueValidationIssue_ValueValidationIssueSeverity_entries[] = {
  { {PolicyValueValidationIssue_ValueValidationIssueSeverity_names + 0, 37}, 2 },
  { {PolicyValueValidationIssue_ValueValidationIssueSeverity_names + 37, 43}, 0 },
  { {PolicyValueValidationIssue_ValueValidationIssueSeverity_names + 80, 39}, 1 },
};

static const int PolicyValueValidationIssue_ValueValidationIssueSeverity_entries_by_number[] = {
  1, // 0 -> VALUE_VALIDATION_ISSUE_SEVERITY_UNSPECIFIED
  2, // 1 -> VALUE_VALIDATION_ISSUE_SEVERITY_WARNING
  0, // 2 -> VALUE_VALIDATION_ISSUE_SEVERITY_ERROR
};

const std::string& PolicyValueValidationIssue_ValueValidationIssueSeverity_Name(
    PolicyValueValidationIssue_ValueValidationIssueSeverity value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyValueValidationIssue_ValueValidationIssueSeverity_entries,
          PolicyValueValidationIssue_ValueValidationIssueSeverity_entries_by_number,
          3, PolicyValueValidationIssue_ValueValidationIssueSeverity_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyValueValidationIssue_ValueValidationIssueSeverity_entries,
      PolicyValueValidationIssue_ValueValidationIssueSeverity_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyValueValidationIssue_ValueValidationIssueSeverity_strings[idx].get();
}
bool PolicyValueValidationIssue_ValueValidationIssueSeverity_Parse(
    const std::string& name, PolicyValueValidationIssue_ValueValidationIssueSeverity* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyValueValidationIssue_ValueValidationIssueSeverity_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyValueValidationIssue_ValueValidationIssueSeverity>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyValueValidationIssue_ValueValidationIssueSeverity PolicyValueValidationIssue::VALUE_VALIDATION_ISSUE_SEVERITY_UNSPECIFIED;
constexpr PolicyValueValidationIssue_ValueValidationIssueSeverity PolicyValueValidationIssue::VALUE_VALIDATION_ISSUE_SEVERITY_WARNING;
constexpr PolicyValueValidationIssue_ValueValidationIssueSeverity PolicyValueValidationIssue::VALUE_VALIDATION_ISSUE_SEVERITY_ERROR;
constexpr PolicyValueValidationIssue_ValueValidationIssueSeverity PolicyValueValidationIssue::ValueValidationIssueSeverity_MIN;
constexpr PolicyValueValidationIssue_ValueValidationIssueSeverity PolicyValueValidationIssue::ValueValidationIssueSeverity_MAX;
constexpr int PolicyValueValidationIssue::ValueValidationIssueSeverity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PolicyValidationReportRequest_ValidationResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyValidationReportRequest_ValidationResultType_strings[16] = {};

static const char PolicyValidationReportRequest_ValidationResultType_names[] =
  "VALIDATION_RESULT_TYPE_BAD_DEVICE_ID"
  "VALIDATION_RESULT_TYPE_BAD_DM_TOKEN"
  "VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE"
  "VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE"
  "VALIDATION_RESULT_TYPE_BAD_SIGNATURE"
  "VALIDATION_RESULT_TYPE_BAD_TIMESTAMP"
  "VALIDATION_RESULT_TYPE_BAD_USER"
  "VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT"
  "VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED"
  "VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR"
  "VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR"
  "VALIDATION_RESULT_TYPE_SUCCESS"
  "VALIDATION_RESULT_TYPE_VALUE_ERROR"
  "VALIDATION_RESULT_TYPE_VALUE_WARNING"
  "VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE"
  "VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyValidationReportRequest_ValidationResultType_entries[] = {
  { {PolicyValidationReportRequest_ValidationResultType_names + 0, 36}, 10 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 36, 35}, 9 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 71, 44}, 2 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 115, 53}, 13 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 168, 36}, 3 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 204, 36}, 8 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 240, 31}, 11 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 271, 41}, 4 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 312, 40}, 0 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 352, 42}, 5 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 394, 41}, 12 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 435, 30}, 1 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 465, 34}, 15 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 499, 36}, 14 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 535, 40}, 6 },
  { {PolicyValidationReportRequest_ValidationResultType_names + 575, 47}, 7 },
};

static const int PolicyValidationReportRequest_ValidationResultType_entries_by_number[] = {
  8, // 0 -> VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED
  11, // 1 -> VALIDATION_RESULT_TYPE_SUCCESS
  2, // 2 -> VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE
  4, // 3 -> VALIDATION_RESULT_TYPE_BAD_SIGNATURE
  7, // 4 -> VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT
  9, // 5 -> VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR
  14, // 6 -> VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE
  15, // 7 -> VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID
  5, // 8 -> VALIDATION_RESULT_TYPE_BAD_TIMESTAMP
  1, // 9 -> VALIDATION_RESULT_TYPE_BAD_DM_TOKEN
  0, // 10 -> VALIDATION_RESULT_TYPE_BAD_DEVICE_ID
  6, // 11 -> VALIDATION_RESULT_TYPE_BAD_USER
  10, // 12 -> VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR
  3, // 13 -> VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE
  13, // 14 -> VALIDATION_RESULT_TYPE_VALUE_WARNING
  12, // 15 -> VALIDATION_RESULT_TYPE_VALUE_ERROR
};

const std::string& PolicyValidationReportRequest_ValidationResultType_Name(
    PolicyValidationReportRequest_ValidationResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyValidationReportRequest_ValidationResultType_entries,
          PolicyValidationReportRequest_ValidationResultType_entries_by_number,
          16, PolicyValidationReportRequest_ValidationResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyValidationReportRequest_ValidationResultType_entries,
      PolicyValidationReportRequest_ValidationResultType_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyValidationReportRequest_ValidationResultType_strings[idx].get();
}
bool PolicyValidationReportRequest_ValidationResultType_Parse(
    const std::string& name, PolicyValidationReportRequest_ValidationResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyValidationReportRequest_ValidationResultType_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<PolicyValidationReportRequest_ValidationResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_SUCCESS;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_SIGNATURE;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_TIMESTAMP;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_DM_TOKEN;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_DEVICE_ID;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_USER;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_VALUE_WARNING;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_VALUE_ERROR;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::ValidationResultType_MIN;
constexpr PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::ValidationResultType_MAX;
constexpr int PolicyValidationReportRequest::ValidationResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceAutoEnrollmentRequest_EnrollmentCheckType_strings[3] = {};

static const char DeviceAutoEnrollmentRequest_EnrollmentCheckType_names[] =
  "ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT"
  "ENROLLMENT_CHECK_TYPE_FRE"
  "ENROLLMENT_CHECK_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries[] = {
  { {DeviceAutoEnrollmentRequest_EnrollmentCheckType_names + 0, 39}, 2 },
  { {DeviceAutoEnrollmentRequest_EnrollmentCheckType_names + 39, 25}, 1 },
  { {DeviceAutoEnrollmentRequest_EnrollmentCheckType_names + 64, 33}, 0 },
};

static const int DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries_by_number[] = {
  2, // 0 -> ENROLLMENT_CHECK_TYPE_UNSPECIFIED
  1, // 1 -> ENROLLMENT_CHECK_TYPE_FRE
  0, // 2 -> ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT
};

const std::string& DeviceAutoEnrollmentRequest_EnrollmentCheckType_Name(
    DeviceAutoEnrollmentRequest_EnrollmentCheckType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries,
          DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries_by_number,
          3, DeviceAutoEnrollmentRequest_EnrollmentCheckType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries,
      DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceAutoEnrollmentRequest_EnrollmentCheckType_strings[idx].get();
}
bool DeviceAutoEnrollmentRequest_EnrollmentCheckType_Parse(
    const std::string& name, DeviceAutoEnrollmentRequest_EnrollmentCheckType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceAutoEnrollmentRequest_EnrollmentCheckType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceAutoEnrollmentRequest_EnrollmentCheckType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_UNSPECIFIED;
constexpr DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_FRE;
constexpr DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT;
constexpr DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::EnrollmentCheckType_MIN;
constexpr DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::EnrollmentCheckType_MAX;
constexpr int DeviceAutoEnrollmentRequest::EnrollmentCheckType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceStateRetrievalResponse_RestoreMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceStateRetrievalResponse_RestoreMode_strings[5] = {};

static const char DeviceStateRetrievalResponse_RestoreMode_names[] =
  "RESTORE_MODE_DISABLED"
  "RESTORE_MODE_NONE"
  "RESTORE_MODE_REENROLLMENT_ENFORCED"
  "RESTORE_MODE_REENROLLMENT_REQUESTED"
  "RESTORE_MODE_REENROLLMENT_ZERO_TOUCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceStateRetrievalResponse_RestoreMode_entries[] = {
  { {DeviceStateRetrievalResponse_RestoreMode_names + 0, 21}, 3 },
  { {DeviceStateRetrievalResponse_RestoreMode_names + 21, 17}, 0 },
  { {DeviceStateRetrievalResponse_RestoreMode_names + 38, 34}, 2 },
  { {DeviceStateRetrievalResponse_RestoreMode_names + 72, 35}, 1 },
  { {DeviceStateRetrievalResponse_RestoreMode_names + 107, 36}, 4 },
};

static const int DeviceStateRetrievalResponse_RestoreMode_entries_by_number[] = {
  1, // 0 -> RESTORE_MODE_NONE
  3, // 1 -> RESTORE_MODE_REENROLLMENT_REQUESTED
  2, // 2 -> RESTORE_MODE_REENROLLMENT_ENFORCED
  0, // 3 -> RESTORE_MODE_DISABLED
  4, // 4 -> RESTORE_MODE_REENROLLMENT_ZERO_TOUCH
};

const std::string& DeviceStateRetrievalResponse_RestoreMode_Name(
    DeviceStateRetrievalResponse_RestoreMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceStateRetrievalResponse_RestoreMode_entries,
          DeviceStateRetrievalResponse_RestoreMode_entries_by_number,
          5, DeviceStateRetrievalResponse_RestoreMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceStateRetrievalResponse_RestoreMode_entries,
      DeviceStateRetrievalResponse_RestoreMode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceStateRetrievalResponse_RestoreMode_strings[idx].get();
}
bool DeviceStateRetrievalResponse_RestoreMode_Parse(
    const std::string& name, DeviceStateRetrievalResponse_RestoreMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceStateRetrievalResponse_RestoreMode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DeviceStateRetrievalResponse_RestoreMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_NONE;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_REQUESTED;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_ENFORCED;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_DISABLED;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_ZERO_TOUCH;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MIN;
constexpr DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MAX;
constexpr int DeviceStateRetrievalResponse::RestoreMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_strings[3] = {};

static const char DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_names[] =
  "INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED"
  "INITIAL_ENROLLMENT_MODE_NONE"
  "INITIAL_ENROLLMENT_MODE_ZERO_TOUCH_ENFORCED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries[] = {
  { {DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_names + 0, 43}, 1 },
  { {DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_names + 43, 28}, 0 },
  { {DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_names + 71, 43}, 2 },
};

static const int DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries_by_number[] = {
  1, // 0 -> INITIAL_ENROLLMENT_MODE_NONE
  0, // 1 -> INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED
  2, // 2 -> INITIAL_ENROLLMENT_MODE_ZERO_TOUCH_ENFORCED
};

const std::string& DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_Name(
    DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries,
          DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries_by_number,
          3, DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries,
      DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_strings[idx].get();
}
bool DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_Parse(
    const std::string& name, DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::INITIAL_ENROLLMENT_MODE_NONE;
constexpr DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED;
constexpr DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::INITIAL_ENROLLMENT_MODE_ZERO_TOUCH_ENFORCED;
constexpr DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_MIN;
constexpr DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_MAX;
constexpr int DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DevicePairingResponse_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DevicePairingResponse_StatusCode_strings[6] = {};

static const char DevicePairingResponse_StatusCode_names[] =
  "CONTROLLER_DEVICE_DEPROVISIONED"
  "CONTROLLER_DEVICE_NOT_FOUND"
  "FAILED"
  "HOST_DEVICE_DEPROVISIONED"
  "HOST_DEVICE_NOT_FOUND"
  "SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DevicePairingResponse_StatusCode_entries[] = {
  { {DevicePairingResponse_StatusCode_names + 0, 31}, 5 },
  { {DevicePairingResponse_StatusCode_names + 31, 27}, 3 },
  { {DevicePairingResponse_StatusCode_names + 58, 6}, 1 },
  { {DevicePairingResponse_StatusCode_names + 64, 25}, 4 },
  { {DevicePairingResponse_StatusCode_names + 89, 21}, 2 },
  { {DevicePairingResponse_StatusCode_names + 110, 7}, 0 },
};

static const int DevicePairingResponse_StatusCode_entries_by_number[] = {
  5, // 0 -> SUCCESS
  2, // 1 -> FAILED
  4, // 2 -> HOST_DEVICE_NOT_FOUND
  1, // 3 -> CONTROLLER_DEVICE_NOT_FOUND
  3, // 4 -> HOST_DEVICE_DEPROVISIONED
  0, // 5 -> CONTROLLER_DEVICE_DEPROVISIONED
};

const std::string& DevicePairingResponse_StatusCode_Name(
    DevicePairingResponse_StatusCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DevicePairingResponse_StatusCode_entries,
          DevicePairingResponse_StatusCode_entries_by_number,
          6, DevicePairingResponse_StatusCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DevicePairingResponse_StatusCode_entries,
      DevicePairingResponse_StatusCode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DevicePairingResponse_StatusCode_strings[idx].get();
}
bool DevicePairingResponse_StatusCode_Parse(
    const std::string& name, DevicePairingResponse_StatusCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DevicePairingResponse_StatusCode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DevicePairingResponse_StatusCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::SUCCESS;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::FAILED;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_NOT_FOUND;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MIN;
constexpr DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MAX;
constexpr int DevicePairingResponse::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CheckDevicePairingResponse_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CheckDevicePairingResponse_StatusCode_strings[7] = {};

static const char CheckDevicePairingResponse_StatusCode_names[] =
  "CONTROLLER_DEVICE_DEPROVISIONED"
  "CONTROLLER_DEVICE_NOT_FOUND"
  "HOST_DEVICE_DEPROVISIONED"
  "HOST_DEVICE_NOT_FOUND"
  "INVALID_CONTROLLER_DEVICE_IDENTITY"
  "NOT_PAIRED"
  "PAIRED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CheckDevicePairingResponse_StatusCode_entries[] = {
  { {CheckDevicePairingResponse_StatusCode_names + 0, 31}, 5 },
  { {CheckDevicePairingResponse_StatusCode_names + 31, 27}, 3 },
  { {CheckDevicePairingResponse_StatusCode_names + 58, 25}, 4 },
  { {CheckDevicePairingResponse_StatusCode_names + 83, 21}, 2 },
  { {CheckDevicePairingResponse_StatusCode_names + 104, 34}, 6 },
  { {CheckDevicePairingResponse_StatusCode_names + 138, 10}, 1 },
  { {CheckDevicePairingResponse_StatusCode_names + 148, 6}, 0 },
};

static const int CheckDevicePairingResponse_StatusCode_entries_by_number[] = {
  6, // 0 -> PAIRED
  5, // 1 -> NOT_PAIRED
  3, // 2 -> HOST_DEVICE_NOT_FOUND
  1, // 3 -> CONTROLLER_DEVICE_NOT_FOUND
  2, // 4 -> HOST_DEVICE_DEPROVISIONED
  0, // 5 -> CONTROLLER_DEVICE_DEPROVISIONED
  4, // 6 -> INVALID_CONTROLLER_DEVICE_IDENTITY
};

const std::string& CheckDevicePairingResponse_StatusCode_Name(
    CheckDevicePairingResponse_StatusCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CheckDevicePairingResponse_StatusCode_entries,
          CheckDevicePairingResponse_StatusCode_entries_by_number,
          7, CheckDevicePairingResponse_StatusCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CheckDevicePairingResponse_StatusCode_entries,
      CheckDevicePairingResponse_StatusCode_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CheckDevicePairingResponse_StatusCode_strings[idx].get();
}
bool CheckDevicePairingResponse_StatusCode_Parse(
    const std::string& name, CheckDevicePairingResponse_StatusCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CheckDevicePairingResponse_StatusCode_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<CheckDevicePairingResponse_StatusCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::PAIRED;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::NOT_PAIRED;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_NOT_FOUND;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::INVALID_CONTROLLER_DEVICE_IDENTITY;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MIN;
constexpr CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MAX;
constexpr int CheckDevicePairingResponse::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RemoteCommand_Type_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RemoteCommand_Type_strings[10] = {};

static const char RemoteCommand_Type_names[] =
  "COMMAND_ECHO_TEST"
  "DEVICE_FETCH_STATUS"
  "DEVICE_REBOOT"
  "DEVICE_REFRESH_ENTERPRISE_MACHINE_CERTIFICATE"
  "DEVICE_REMOTE_POWERWASH"
  "DEVICE_SCREENSHOT"
  "DEVICE_SET_VOLUME"
  "DEVICE_START_CRD_SESSION"
  "DEVICE_WIPE_USERS"
  "USER_ARC_COMMAND";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RemoteCommand_Type_entries[] = {
  { {RemoteCommand_Type_names + 0, 17}, -1 },
  { {RemoteCommand_Type_names + 17, 19}, 3 },
  { {RemoteCommand_Type_names + 36, 13}, 0 },
  { {RemoteCommand_Type_names + 49, 45}, 8 },
  { {RemoteCommand_Type_names + 94, 23}, 7 },
  { {RemoteCommand_Type_names + 117, 17}, 1 },
  { {RemoteCommand_Type_names + 134, 17}, 2 },
  { {RemoteCommand_Type_names + 151, 24}, 6 },
  { {RemoteCommand_Type_names + 175, 17}, 5 },
  { {RemoteCommand_Type_names + 192, 16}, 4 },
};

static const int RemoteCommand_Type_entries_by_number[] = {
  0, // -1 -> COMMAND_ECHO_TEST
  2, // 0 -> DEVICE_REBOOT
  5, // 1 -> DEVICE_SCREENSHOT
  6, // 2 -> DEVICE_SET_VOLUME
  1, // 3 -> DEVICE_FETCH_STATUS
  9, // 4 -> USER_ARC_COMMAND
  8, // 5 -> DEVICE_WIPE_USERS
  7, // 6 -> DEVICE_START_CRD_SESSION
  4, // 7 -> DEVICE_REMOTE_POWERWASH
  3, // 8 -> DEVICE_REFRESH_ENTERPRISE_MACHINE_CERTIFICATE
};

const std::string& RemoteCommand_Type_Name(
    RemoteCommand_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RemoteCommand_Type_entries,
          RemoteCommand_Type_entries_by_number,
          10, RemoteCommand_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RemoteCommand_Type_entries,
      RemoteCommand_Type_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RemoteCommand_Type_strings[idx].get();
}
bool RemoteCommand_Type_Parse(
    const std::string& name, RemoteCommand_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RemoteCommand_Type_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<RemoteCommand_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RemoteCommand_Type RemoteCommand::COMMAND_ECHO_TEST;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_REBOOT;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_SCREENSHOT;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_SET_VOLUME;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_FETCH_STATUS;
constexpr RemoteCommand_Type RemoteCommand::USER_ARC_COMMAND;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_WIPE_USERS;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_START_CRD_SESSION;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_REMOTE_POWERWASH;
constexpr RemoteCommand_Type RemoteCommand::DEVICE_REFRESH_ENTERPRISE_MACHINE_CERTIFICATE;
constexpr RemoteCommand_Type RemoteCommand::Type_MIN;
constexpr RemoteCommand_Type RemoteCommand::Type_MAX;
constexpr int RemoteCommand::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RemoteCommandResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RemoteCommandResult_ResultType_strings[3] = {};

static const char RemoteCommandResult_ResultType_names[] =
  "RESULT_FAILURE"
  "RESULT_IGNORED"
  "RESULT_SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RemoteCommandResult_ResultType_entries[] = {
  { {RemoteCommandResult_ResultType_names + 0, 14}, 1 },
  { {RemoteCommandResult_ResultType_names + 14, 14}, 0 },
  { {RemoteCommandResult_ResultType_names + 28, 14}, 2 },
};

static const int RemoteCommandResult_ResultType_entries_by_number[] = {
  1, // 0 -> RESULT_IGNORED
  0, // 1 -> RESULT_FAILURE
  2, // 2 -> RESULT_SUCCESS
};

const std::string& RemoteCommandResult_ResultType_Name(
    RemoteCommandResult_ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RemoteCommandResult_ResultType_entries,
          RemoteCommandResult_ResultType_entries_by_number,
          3, RemoteCommandResult_ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RemoteCommandResult_ResultType_entries,
      RemoteCommandResult_ResultType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RemoteCommandResult_ResultType_strings[idx].get();
}
bool RemoteCommandResult_ResultType_Parse(
    const std::string& name, RemoteCommandResult_ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RemoteCommandResult_ResultType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RemoteCommandResult_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RemoteCommandResult_ResultType RemoteCommandResult::RESULT_IGNORED;
constexpr RemoteCommandResult_ResultType RemoteCommandResult::RESULT_FAILURE;
constexpr RemoteCommandResult_ResultType RemoteCommandResult::RESULT_SUCCESS;
constexpr RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MIN;
constexpr RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MAX;
constexpr int RemoteCommandResult::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceAttributeUpdatePermissionResponse_ResultType_strings[2] = {};

static const char DeviceAttributeUpdatePermissionResponse_ResultType_names[] =
  "ATTRIBUTE_UPDATE_ALLOWED"
  "ATTRIBUTE_UPDATE_DISALLOWED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceAttributeUpdatePermissionResponse_ResultType_entries[] = {
  { {DeviceAttributeUpdatePermissionResponse_ResultType_names + 0, 24}, 1 },
  { {DeviceAttributeUpdatePermissionResponse_ResultType_names + 24, 27}, 0 },
};

static const int DeviceAttributeUpdatePermissionResponse_ResultType_entries_by_number[] = {
  1, // 0 -> ATTRIBUTE_UPDATE_DISALLOWED
  0, // 1 -> ATTRIBUTE_UPDATE_ALLOWED
};

const std::string& DeviceAttributeUpdatePermissionResponse_ResultType_Name(
    DeviceAttributeUpdatePermissionResponse_ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceAttributeUpdatePermissionResponse_ResultType_entries,
          DeviceAttributeUpdatePermissionResponse_ResultType_entries_by_number,
          2, DeviceAttributeUpdatePermissionResponse_ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceAttributeUpdatePermissionResponse_ResultType_entries,
      DeviceAttributeUpdatePermissionResponse_ResultType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceAttributeUpdatePermissionResponse_ResultType_strings[idx].get();
}
bool DeviceAttributeUpdatePermissionResponse_ResultType_Parse(
    const std::string& name, DeviceAttributeUpdatePermissionResponse_ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceAttributeUpdatePermissionResponse_ResultType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DeviceAttributeUpdatePermissionResponse_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_DISALLOWED;
constexpr DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_ALLOWED;
constexpr DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MIN;
constexpr DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MAX;
constexpr int DeviceAttributeUpdatePermissionResponse::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceAttributeUpdateResponse_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceAttributeUpdateResponse_ResultType_strings[2] = {};

static const char DeviceAttributeUpdateResponse_ResultType_names[] =
  "ATTRIBUTE_UPDATE_ERROR"
  "ATTRIBUTE_UPDATE_SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceAttributeUpdateResponse_ResultType_entries[] = {
  { {DeviceAttributeUpdateResponse_ResultType_names + 0, 22}, 0 },
  { {DeviceAttributeUpdateResponse_ResultType_names + 22, 24}, 1 },
};

static const int DeviceAttributeUpdateResponse_ResultType_entries_by_number[] = {
  0, // 0 -> ATTRIBUTE_UPDATE_ERROR
  1, // 1 -> ATTRIBUTE_UPDATE_SUCCESS
};

const std::string& DeviceAttributeUpdateResponse_ResultType_Name(
    DeviceAttributeUpdateResponse_ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceAttributeUpdateResponse_ResultType_entries,
          DeviceAttributeUpdateResponse_ResultType_entries_by_number,
          2, DeviceAttributeUpdateResponse_ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceAttributeUpdateResponse_ResultType_entries,
      DeviceAttributeUpdateResponse_ResultType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceAttributeUpdateResponse_ResultType_strings[idx].get();
}
bool DeviceAttributeUpdateResponse_ResultType_Parse(
    const std::string& name, DeviceAttributeUpdateResponse_ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceAttributeUpdateResponse_ResultType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DeviceAttributeUpdateResponse_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_ERROR;
constexpr DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_SUCCESS;
constexpr DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MIN;
constexpr DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MAX;
constexpr int DeviceAttributeUpdateResponse::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CertificateBasedDeviceRegistrationData_CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CertificateBasedDeviceRegistrationData_CertificateType_strings[2] = {};

static const char CertificateBasedDeviceRegistrationData_CertificateType_names[] =
  "ENTERPRISE_ENROLLMENT_CERTIFICATE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CertificateBasedDeviceRegistrationData_CertificateType_entries[] = {
  { {CertificateBasedDeviceRegistrationData_CertificateType_names + 0, 33}, 1 },
  { {CertificateBasedDeviceRegistrationData_CertificateType_names + 33, 7}, 0 },
};

static const int CertificateBasedDeviceRegistrationData_CertificateType_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> ENTERPRISE_ENROLLMENT_CERTIFICATE
};

const std::string& CertificateBasedDeviceRegistrationData_CertificateType_Name(
    CertificateBasedDeviceRegistrationData_CertificateType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CertificateBasedDeviceRegistrationData_CertificateType_entries,
          CertificateBasedDeviceRegistrationData_CertificateType_entries_by_number,
          2, CertificateBasedDeviceRegistrationData_CertificateType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CertificateBasedDeviceRegistrationData_CertificateType_entries,
      CertificateBasedDeviceRegistrationData_CertificateType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CertificateBasedDeviceRegistrationData_CertificateType_strings[idx].get();
}
bool CertificateBasedDeviceRegistrationData_CertificateType_Parse(
    const std::string& name, CertificateBasedDeviceRegistrationData_CertificateType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CertificateBasedDeviceRegistrationData_CertificateType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CertificateBasedDeviceRegistrationData_CertificateType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::UNKNOWN;
constexpr CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::ENTERPRISE_ENROLLMENT_CERTIFICATE;
constexpr CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MIN;
constexpr CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MAX;
constexpr int CertificateBasedDeviceRegistrationData::CertificateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CheckDeviceLicenseResponse_LicenseSelectionMode_strings[3] = {};

static const char CheckDeviceLicenseResponse_LicenseSelectionMode_names[] =
  "ADMIN_SELECTION"
  "UNDEFINED"
  "USER_SELECTION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CheckDeviceLicenseResponse_LicenseSelectionMode_entries[] = {
  { {CheckDeviceLicenseResponse_LicenseSelectionMode_names + 0, 15}, 2 },
  { {CheckDeviceLicenseResponse_LicenseSelectionMode_names + 15, 9}, 0 },
  { {CheckDeviceLicenseResponse_LicenseSelectionMode_names + 24, 14}, 1 },
};

static const int CheckDeviceLicenseResponse_LicenseSelectionMode_entries_by_number[] = {
  1, // 0 -> UNDEFINED
  2, // 1 -> USER_SELECTION
  0, // 2 -> ADMIN_SELECTION
};

const std::string& CheckDeviceLicenseResponse_LicenseSelectionMode_Name(
    CheckDeviceLicenseResponse_LicenseSelectionMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CheckDeviceLicenseResponse_LicenseSelectionMode_entries,
          CheckDeviceLicenseResponse_LicenseSelectionMode_entries_by_number,
          3, CheckDeviceLicenseResponse_LicenseSelectionMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CheckDeviceLicenseResponse_LicenseSelectionMode_entries,
      CheckDeviceLicenseResponse_LicenseSelectionMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CheckDeviceLicenseResponse_LicenseSelectionMode_strings[idx].get();
}
bool CheckDeviceLicenseResponse_LicenseSelectionMode_Parse(
    const std::string& name, CheckDeviceLicenseResponse_LicenseSelectionMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CheckDeviceLicenseResponse_LicenseSelectionMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CheckDeviceLicenseResponse_LicenseSelectionMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::UNDEFINED;
constexpr CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::USER_SELECTION;
constexpr CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::ADMIN_SELECTION;
constexpr CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::LicenseSelectionMode_MIN;
constexpr CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::LicenseSelectionMode_MAX;
constexpr int CheckDeviceLicenseResponse::LicenseSelectionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AppInstallReportLogEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppInstallReportLogEvent_EventType_strings[15] = {};

static const char AppInstallReportLogEvent_EventType_names[] =
  "CANCELED"
  "CLOUDDPC_MAIN_LOOP_FAILED"
  "CLOUDDPC_REQUEST"
  "CLOUDDPS_REQUEST"
  "CLOUDDPS_RESPONSE"
  "CONNECTIVITY_CHANGE"
  "DIRECT_INSTALL"
  "INSTALLATION_FAILED"
  "INSTALLATION_FINISHED"
  "INSTALLATION_STARTED"
  "LOG_EVENT_TYPE_UNKNOWN"
  "PHONESKY_LOG"
  "SERVER_REQUEST"
  "SESSION_STATE_CHANGE"
  "SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppInstallReportLogEvent_EventType_entries[] = {
  { {AppInstallReportLogEvent_EventType_names + 0, 8}, 7 },
  { {AppInstallReportLogEvent_EventType_names + 8, 25}, 14 },
  { {AppInstallReportLogEvent_EventType_names + 33, 16}, 2 },
  { {AppInstallReportLogEvent_EventType_names + 49, 16}, 3 },
  { {AppInstallReportLogEvent_EventType_names + 65, 17}, 4 },
  { {AppInstallReportLogEvent_EventType_names + 82, 19}, 8 },
  { {AppInstallReportLogEvent_EventType_names + 101, 14}, 13 },
  { {AppInstallReportLogEvent_EventType_names + 115, 19}, 12 },
  { {AppInstallReportLogEvent_EventType_names + 134, 21}, 11 },
  { {AppInstallReportLogEvent_EventType_names + 155, 20}, 10 },
  { {AppInstallReportLogEvent_EventType_names + 175, 22}, 0 },
  { {AppInstallReportLogEvent_EventType_names + 197, 12}, 5 },
  { {AppInstallReportLogEvent_EventType_names + 209, 14}, 1 },
  { {AppInstallReportLogEvent_EventType_names + 223, 20}, 9 },
  { {AppInstallReportLogEvent_EventType_names + 243, 7}, 6 },
};

static const int AppInstallReportLogEvent_EventType_entries_by_number[] = {
  10, // 0 -> LOG_EVENT_TYPE_UNKNOWN
  12, // 1 -> SERVER_REQUEST
  2, // 2 -> CLOUDDPC_REQUEST
  3, // 3 -> CLOUDDPS_REQUEST
  4, // 4 -> CLOUDDPS_RESPONSE
  11, // 5 -> PHONESKY_LOG
  14, // 6 -> SUCCESS
  0, // 7 -> CANCELED
  5, // 8 -> CONNECTIVITY_CHANGE
  13, // 9 -> SESSION_STATE_CHANGE
  9, // 10 -> INSTALLATION_STARTED
  8, // 11 -> INSTALLATION_FINISHED
  7, // 12 -> INSTALLATION_FAILED
  6, // 13 -> DIRECT_INSTALL
  1, // 14 -> CLOUDDPC_MAIN_LOOP_FAILED
};

const std::string& AppInstallReportLogEvent_EventType_Name(
    AppInstallReportLogEvent_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppInstallReportLogEvent_EventType_entries,
          AppInstallReportLogEvent_EventType_entries_by_number,
          15, AppInstallReportLogEvent_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppInstallReportLogEvent_EventType_entries,
      AppInstallReportLogEvent_EventType_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppInstallReportLogEvent_EventType_strings[idx].get();
}
bool AppInstallReportLogEvent_EventType_Parse(
    const std::string& name, AppInstallReportLogEvent_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppInstallReportLogEvent_EventType_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<AppInstallReportLogEvent_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::LOG_EVENT_TYPE_UNKNOWN;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SERVER_REQUEST;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPC_REQUEST;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPS_REQUEST;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPS_RESPONSE;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::PHONESKY_LOG;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SUCCESS;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CANCELED;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CONNECTIVITY_CHANGE;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SESSION_STATE_CHANGE;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_STARTED;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_FINISHED;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_FAILED;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::DIRECT_INSTALL;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPC_MAIN_LOOP_FAILED;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::EventType_MIN;
constexpr AppInstallReportLogEvent_EventType AppInstallReportLogEvent::EventType_MAX;
constexpr int AppInstallReportLogEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AppInstallReportLogEvent_SessionStateChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppInstallReportLogEvent_SessionStateChangeType_strings[5] = {};

static const char AppInstallReportLogEvent_SessionStateChangeType_names[] =
  "LOGIN"
  "LOGOUT"
  "RESUME"
  "SESSION_STATE_CHANGE_TYPE_UNKNOWN"
  "SUSPEND";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppInstallReportLogEvent_SessionStateChangeType_entries[] = {
  { {AppInstallReportLogEvent_SessionStateChangeType_names + 0, 5}, 1 },
  { {AppInstallReportLogEvent_SessionStateChangeType_names + 5, 6}, 2 },
  { {AppInstallReportLogEvent_SessionStateChangeType_names + 11, 6}, 4 },
  { {AppInstallReportLogEvent_SessionStateChangeType_names + 17, 33}, 0 },
  { {AppInstallReportLogEvent_SessionStateChangeType_names + 50, 7}, 3 },
};

static const int AppInstallReportLogEvent_SessionStateChangeType_entries_by_number[] = {
  3, // 0 -> SESSION_STATE_CHANGE_TYPE_UNKNOWN
  0, // 1 -> LOGIN
  1, // 2 -> LOGOUT
  4, // 3 -> SUSPEND
  2, // 4 -> RESUME
};

const std::string& AppInstallReportLogEvent_SessionStateChangeType_Name(
    AppInstallReportLogEvent_SessionStateChangeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppInstallReportLogEvent_SessionStateChangeType_entries,
          AppInstallReportLogEvent_SessionStateChangeType_entries_by_number,
          5, AppInstallReportLogEvent_SessionStateChangeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppInstallReportLogEvent_SessionStateChangeType_entries,
      AppInstallReportLogEvent_SessionStateChangeType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppInstallReportLogEvent_SessionStateChangeType_strings[idx].get();
}
bool AppInstallReportLogEvent_SessionStateChangeType_Parse(
    const std::string& name, AppInstallReportLogEvent_SessionStateChangeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppInstallReportLogEvent_SessionStateChangeType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AppInstallReportLogEvent_SessionStateChangeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SESSION_STATE_CHANGE_TYPE_UNKNOWN;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::LOGIN;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::LOGOUT;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SUSPEND;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::RESUME;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SessionStateChangeType_MIN;
constexpr AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SessionStateChangeType_MAX;
constexpr int AppInstallReportLogEvent::SessionStateChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RefreshAccountRequest_AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RefreshAccountRequest_AccountType_strings[2] = {};

static const char RefreshAccountRequest_AccountType_names[] =
  "ACCOUNT_TYPE_UNSPECIFIED"
  "CHROME_OS_DEMO_MODE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RefreshAccountRequest_AccountType_entries[] = {
  { {RefreshAccountRequest_AccountType_names + 0, 24}, 0 },
  { {RefreshAccountRequest_AccountType_names + 24, 19}, 1 },
};

static const int RefreshAccountRequest_AccountType_entries_by_number[] = {
  0, // 0 -> ACCOUNT_TYPE_UNSPECIFIED
  1, // 1 -> CHROME_OS_DEMO_MODE
};

const std::string& RefreshAccountRequest_AccountType_Name(
    RefreshAccountRequest_AccountType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RefreshAccountRequest_AccountType_entries,
          RefreshAccountRequest_AccountType_entries_by_number,
          2, RefreshAccountRequest_AccountType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RefreshAccountRequest_AccountType_entries,
      RefreshAccountRequest_AccountType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RefreshAccountRequest_AccountType_strings[idx].get();
}
bool RefreshAccountRequest_AccountType_Parse(
    const std::string& name, RefreshAccountRequest_AccountType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RefreshAccountRequest_AccountType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RefreshAccountRequest_AccountType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RefreshAccountRequest_AccountType RefreshAccountRequest::ACCOUNT_TYPE_UNSPECIFIED;
constexpr RefreshAccountRequest_AccountType RefreshAccountRequest::CHROME_OS_DEMO_MODE;
constexpr RefreshAccountRequest_AccountType RefreshAccountRequest::AccountType_MIN;
constexpr RefreshAccountRequest_AccountType RefreshAccountRequest::AccountType_MAX;
constexpr int RefreshAccountRequest::AccountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool App_AppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> App_AppType_strings[6] = {};

static const char App_AppType_names[] =
  "ARC"
  "BUILT_IN"
  "CROSTINI"
  "EXTENSION"
  "UNKNOWN"
  "WEB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry App_AppType_entries[] = {
  { {App_AppType_names + 0, 3}, 1 },
  { {App_AppType_names + 3, 8}, 2 },
  { {App_AppType_names + 11, 8}, 3 },
  { {App_AppType_names + 19, 9}, 4 },
  { {App_AppType_names + 28, 7}, 0 },
  { {App_AppType_names + 35, 3}, 5 },
};

static const int App_AppType_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  0, // 1 -> ARC
  1, // 2 -> BUILT_IN
  2, // 3 -> CROSTINI
  3, // 4 -> EXTENSION
  5, // 5 -> WEB
};

const std::string& App_AppType_Name(
    App_AppType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          App_AppType_entries,
          App_AppType_entries_by_number,
          6, App_AppType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      App_AppType_entries,
      App_AppType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     App_AppType_strings[idx].get();
}
bool App_AppType_Parse(
    const std::string& name, App_AppType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      App_AppType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<App_AppType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr App_AppType App::UNKNOWN;
constexpr App_AppType App::ARC;
constexpr App_AppType App::BUILT_IN;
constexpr App_AppType App::CROSTINI;
constexpr App_AppType App::EXTENSION;
constexpr App_AppType App::WEB;
constexpr App_AppType App::AppType_MIN;
constexpr App_AppType App::AppType_MAX;
constexpr int App::AppType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AppActivity_AppState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppActivity_AppState_strings[6] = {};

static const char AppActivity_AppState_names[] =
  "ALWAYS_AVAILABLE"
  "BLOCKED"
  "DEFAULT"
  "LIMIT_REACHED"
  "UNINSTALLED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppActivity_AppState_entries[] = {
  { {AppActivity_AppState_names + 0, 16}, 2 },
  { {AppActivity_AppState_names + 16, 7}, 3 },
  { {AppActivity_AppState_names + 23, 7}, 1 },
  { {AppActivity_AppState_names + 30, 13}, 4 },
  { {AppActivity_AppState_names + 43, 11}, 5 },
  { {AppActivity_AppState_names + 54, 7}, 0 },
};

static const int AppActivity_AppState_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  2, // 1 -> DEFAULT
  0, // 2 -> ALWAYS_AVAILABLE
  1, // 3 -> BLOCKED
  3, // 4 -> LIMIT_REACHED
  4, // 5 -> UNINSTALLED
};

const std::string& AppActivity_AppState_Name(
    AppActivity_AppState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppActivity_AppState_entries,
          AppActivity_AppState_entries_by_number,
          6, AppActivity_AppState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppActivity_AppState_entries,
      AppActivity_AppState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppActivity_AppState_strings[idx].get();
}
bool AppActivity_AppState_Parse(
    const std::string& name, AppActivity_AppState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppActivity_AppState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<AppActivity_AppState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppActivity_AppState AppActivity::UNKNOWN;
constexpr AppActivity_AppState AppActivity::DEFAULT;
constexpr AppActivity_AppState AppActivity::ALWAYS_AVAILABLE;
constexpr AppActivity_AppState AppActivity::BLOCKED;
constexpr AppActivity_AppState AppActivity::LIMIT_REACHED;
constexpr AppActivity_AppState AppActivity::UNINSTALLED;
constexpr AppActivity_AppState AppActivity::AppState_MIN;
constexpr AppActivity_AppState AppActivity::AppState_MAX;
constexpr int AppActivity::AppState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Channel_strings[5] = {};

static const char Channel_names[] =
  "CHANNEL_BETA"
  "CHANNEL_CANARY"
  "CHANNEL_DEV"
  "CHANNEL_STABLE"
  "CHANNEL_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Channel_entries[] = {
  { {Channel_names + 0, 12}, 3 },
  { {Channel_names + 12, 14}, 1 },
  { {Channel_names + 26, 11}, 2 },
  { {Channel_names + 37, 14}, 4 },
  { {Channel_names + 51, 15}, 0 },
};

static const int Channel_entries_by_number[] = {
  4, // 0 -> CHANNEL_UNKNOWN
  1, // 1 -> CHANNEL_CANARY
  2, // 2 -> CHANNEL_DEV
  0, // 3 -> CHANNEL_BETA
  3, // 4 -> CHANNEL_STABLE
};

const std::string& Channel_Name(
    Channel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Channel_entries,
          Channel_entries_by_number,
          5, Channel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Channel_entries,
      Channel_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Channel_strings[idx].get();
}
bool Channel_Parse(
    const std::string& name, Channel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Channel_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Channel>(int_value);
  }
  return success;
}
bool CrostiniAppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CrostiniAppType_strings[3] = {};

static const char CrostiniAppType_names[] =
  "CROSTINI_APP_TYPE_INTERACTIVE"
  "CROSTINI_APP_TYPE_OTHER"
  "CROSTINI_APP_TYPE_TERMINAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CrostiniAppType_entries[] = {
  { {CrostiniAppType_names + 0, 29}, 1 },
  { {CrostiniAppType_names + 29, 23}, 2 },
  { {CrostiniAppType_names + 52, 26}, 0 },
};

static const int CrostiniAppType_entries_by_number[] = {
  2, // 0 -> CROSTINI_APP_TYPE_TERMINAL
  0, // 1 -> CROSTINI_APP_TYPE_INTERACTIVE
  1, // 2 -> CROSTINI_APP_TYPE_OTHER
};

const std::string& CrostiniAppType_Name(
    CrostiniAppType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CrostiniAppType_entries,
          CrostiniAppType_entries_by_number,
          3, CrostiniAppType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CrostiniAppType_entries,
      CrostiniAppType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CrostiniAppType_strings[idx].get();
}
bool CrostiniAppType_Parse(
    const std::string& name, CrostiniAppType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CrostiniAppType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CrostiniAppType>(int_value);
  }
  return success;
}

// ===================================================================

void LicenseType::InitAsDefaultInstance() {
}
class LicenseType::_Internal {
 public:
  using HasBits = decltype(std::declval<LicenseType>()._has_bits_);
  static void set_has_license_type_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LicenseType::LicenseType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.LicenseType)
}
LicenseType::LicenseType(const LicenseType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_type_deprecated_ = from.license_type_deprecated_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LicenseType)
}

void LicenseType::SharedCtor() {
  license_type_deprecated_ = 0;
}

LicenseType::~LicenseType() {
  // @@protoc_insertion_point(destructor:enterprise_management.LicenseType)
  SharedDtor();
}

void LicenseType::SharedDtor() {
}

void LicenseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseType& LicenseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseType_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void LicenseType::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LicenseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_type_deprecated_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type_deprecated = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::LicenseType_LicenseTypeEnum_IsValid(val))) {
            set_license_type_deprecated(static_cast<::enterprise_management::LicenseType_LicenseTypeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.LicenseType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type_deprecated = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::LicenseType_LicenseTypeEnum_IsValid(value)) {
            set_license_type_deprecated(static_cast< ::enterprise_management::LicenseType_LicenseTypeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.LicenseType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.LicenseType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.LicenseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type_deprecated = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->license_type_deprecated(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.LicenseType)
}

size_t LicenseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LicenseType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type_deprecated = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->license_type_deprecated());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LicenseType*>(
      &from));
}

void LicenseType::MergeFrom(const LicenseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LicenseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_license_type_deprecated()) {
    set_license_type_deprecated(from.license_type_deprecated());
  }
}

void LicenseType::CopyFrom(const LicenseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LicenseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseType::IsInitialized() const {
  return true;
}

void LicenseType::InternalSwap(LicenseType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(license_type_deprecated_, other->license_type_deprecated_);
}

std::string LicenseType::GetTypeName() const {
  return "enterprise_management.LicenseType";
}


// ===================================================================

void SignedData::InitAsDefaultInstance() {
}
class SignedData::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedData>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_data_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SignedData::SignedData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SignedData)
}
SignedData::SignedData(const SignedData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  extra_data_bytes_ = from.extra_data_bytes_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SignedData)
}

void SignedData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedData_device_5fmanagement_5fbackend_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_bytes_ = 0;
}

SignedData::~SignedData() {
  // @@protoc_insertion_point(destructor:enterprise_management.SignedData)
  SharedDtor();
}

void SignedData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedData& SignedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedData_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SignedData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SignedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  extra_data_bytes_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 extra_data_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extra_data_bytes(&has_bits);
          extra_data_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignedData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SignedData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extra_data_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_extra_data_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SignedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SignedData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignedData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SignedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional int32 extra_data_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->extra_data_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SignedData)
}

size_t SignedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SignedData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional int32 extra_data_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->extra_data_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SignedData*>(
      &from));
}

void SignedData::MergeFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      extra_data_bytes_ = from.extra_data_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignedData::CopyFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedData::IsInitialized() const {
  return true;
}

void SignedData::InternalSwap(SignedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extra_data_bytes_, other->extra_data_bytes_);
}

std::string SignedData::GetTypeName() const {
  return "enterprise_management.SignedData";
}


// ===================================================================

void DeviceRegisterRequest::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceRegisterRequest_default_instance_._instance.get_mutable()->license_type_ = const_cast< ::enterprise_management::LicenseType*>(
      ::enterprise_management::LicenseType::internal_default_instance());
}
class DeviceRegisterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRegisterRequest>()._has_bits_);
  static void set_has_reregister(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_machine_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requisition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_backed_state_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flavor(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::LicenseType& license_type(const DeviceRegisterRequest* msg);
  static void set_has_license_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_brand_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reregistration_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ethernet_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dock_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manufacture_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_expected_enrollment_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::enterprise_management::LicenseType&
DeviceRegisterRequest::_Internal::license_type(const DeviceRegisterRequest* msg) {
  return *msg->license_type_;
}
DeviceRegisterRequest::DeviceRegisterRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterRequest)
}
DeviceRegisterRequest::DeviceRegisterRequest(const DeviceRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_id()) {
    machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  machine_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_model()) {
    machine_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_model_);
  }
  requisition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_requisition()) {
    requisition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requisition_);
  }
  server_backed_state_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_backed_state_key()) {
    server_backed_state_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
  brand_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand_code()) {
    brand_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
  }
  reregistration_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reregistration_dm_token()) {
    reregistration_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reregistration_dm_token_);
  }
  ethernet_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ethernet_mac_address()) {
    ethernet_mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ethernet_mac_address_);
  }
  dock_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_dock_mac_address()) {
    dock_mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dock_mac_address_);
  }
  manufacture_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacture_date()) {
    manufacture_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  expected_enrollment_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_expected_enrollment_domain()) {
    expected_enrollment_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expected_enrollment_domain_);
  }
  if (from.has_license_type()) {
    license_type_ = new ::enterprise_management::LicenseType(*from.license_type_);
  } else {
    license_type_ = nullptr;
  }
  ::memcpy(&reregister_, &from.reregister_,
    static_cast<size_t>(reinterpret_cast<char*>(&lifetime_) -
    reinterpret_cast<char*>(&reregister_)) + sizeof(lifetime_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterRequest)
}

void DeviceRegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base);
  machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requisition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_backed_state_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reregistration_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethernet_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dock_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_enrollment_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&license_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flavor_) -
      reinterpret_cast<char*>(&license_type_)) + sizeof(flavor_));
  lifetime_ = 1;
}

DeviceRegisterRequest::~DeviceRegisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterRequest)
  SharedDtor();
}

void DeviceRegisterRequest::SharedDtor() {
  machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requisition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_backed_state_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reregistration_dm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ethernet_mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dock_mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_enrollment_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete license_type_;
}

void DeviceRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRegisterRequest& DeviceRegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      machine_model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      requisition_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      server_backed_state_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      brand_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      reregistration_dm_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      ethernet_mac_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      dock_mac_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      manufacture_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      expected_enrollment_domain_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(license_type_ != nullptr);
      license_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&reregister_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flavor_) -
        reinterpret_cast<char*>(&reregister_)) + sizeof(flavor_));
    lifetime_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceRegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool reregister = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reregister(&has_bits);
          reregister_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceRegisterRequest_Type_IsValid(val))) {
            set_type(static_cast<::enterprise_management::DeviceRegisterRequest_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string machine_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_model(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requisition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_requisition(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes server_backed_state_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_backed_state_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(val))) {
            set_flavor(static_cast<::enterprise_management::DeviceRegisterRequest_Flavor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LicenseType license_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_license_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceRegisterRequest_Lifetime_IsValid(val))) {
            set_lifetime(static_cast<::enterprise_management::DeviceRegisterRequest_Lifetime>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string brand_code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_brand_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reregistration_dm_token = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_reregistration_dm_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ethernet_mac_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ethernet_mac_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dock_mac_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_dock_mac_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacture_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_manufacture_date(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string expected_enrollment_domain = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_expected_enrollment_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceRegisterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reregister = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_reregister(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reregister_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Type_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::DeviceRegisterRequest_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_model = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string requisition = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_requisition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server_backed_state_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_backed_state_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value)) {
            set_flavor(static_cast< ::enterprise_management::DeviceRegisterRequest_Flavor >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.LicenseType license_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_license_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Lifetime_IsValid(value)) {
            set_lifetime(static_cast< ::enterprise_management::DeviceRegisterRequest_Lifetime >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand_code = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reregistration_dm_token = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reregistration_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ethernet_mac_address = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ethernet_mac_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dock_mac_address = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dock_mac_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacture_date = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string expected_enrollment_domain = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_expected_enrollment_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceRegisterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reregister = 1;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->reregister(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string machine_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_id(), output);
  }

  // optional string machine_model = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_model(), output);
  }

  // optional string requisition = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->requisition(), output);
  }

  // optional bytes server_backed_state_key = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->server_backed_state_key(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->flavor(), output);
  }

  // optional .enterprise_management.LicenseType license_type = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::license_type(this), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->lifetime(), output);
  }

  // optional string brand_code = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->brand_code(), output);
  }

  // optional string reregistration_dm_token = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->reregistration_dm_token(), output);
  }

  // optional string ethernet_mac_address = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ethernet_mac_address(), output);
  }

  // optional string dock_mac_address = 15;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->dock_mac_address(), output);
  }

  // optional string manufacture_date = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->manufacture_date(), output);
  }

  // optional string expected_enrollment_domain = 17;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->expected_enrollment_domain(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterRequest)
}

size_t DeviceRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string machine_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string machine_model = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_model());
    }

    // optional string requisition = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->requisition());
    }

    // optional bytes server_backed_state_key = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->server_backed_state_key());
    }

    // optional string brand_code = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->brand_code());
    }

    // optional string reregistration_dm_token = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->reregistration_dm_token());
    }

    // optional string ethernet_mac_address = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->ethernet_mac_address());
    }

    // optional string dock_mac_address = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->dock_mac_address());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string manufacture_date = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->manufacture_date());
    }

    // optional string expected_enrollment_domain = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->expected_enrollment_domain());
    }

    // optional .enterprise_management.LicenseType license_type = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_type_);
    }

    // optional bool reregister = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flavor());
    }

    // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lifetime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRegisterRequest*>(
      &from));
}

void DeviceRegisterRequest::MergeFrom(const DeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      machine_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_model_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      requisition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requisition_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      server_backed_state_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      brand_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      reregistration_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reregistration_dm_token_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      ethernet_mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ethernet_mac_address_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      dock_mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dock_mac_address_);
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      manufacture_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      expected_enrollment_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expected_enrollment_domain_);
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_license_type()->::enterprise_management::LicenseType::MergeFrom(from.license_type());
    }
    if (cached_has_bits & 0x00000800u) {
      reregister_ = from.reregister_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      flavor_ = from.flavor_;
    }
    if (cached_has_bits & 0x00004000u) {
      lifetime_ = from.lifetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceRegisterRequest::CopyFrom(const DeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRegisterRequest::IsInitialized() const {
  return true;
}

void DeviceRegisterRequest::InternalSwap(DeviceRegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_id_.Swap(&other->machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_model_.Swap(&other->machine_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requisition_.Swap(&other->requisition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_backed_state_key_.Swap(&other->server_backed_state_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_code_.Swap(&other->brand_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reregistration_dm_token_.Swap(&other->reregistration_dm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ethernet_mac_address_.Swap(&other->ethernet_mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dock_mac_address_.Swap(&other->dock_mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacture_date_.Swap(&other->manufacture_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expected_enrollment_domain_.Swap(&other->expected_enrollment_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(license_type_, other->license_type_);
  swap(reregister_, other->reregister_);
  swap(type_, other->type_);
  swap(flavor_, other->flavor_);
  swap(lifetime_, other->lifetime_);
}

std::string DeviceRegisterRequest::GetTypeName() const {
  return "enterprise_management.DeviceRegisterRequest";
}


// ===================================================================

void DeviceRegisterResponse::InitAsDefaultInstance() {
}
class DeviceRegisterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRegisterResponse>()._has_bits_);
  static void set_has_device_management_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enrollment_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_configuration_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeviceRegisterResponse::DeviceRegisterResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterResponse)
}
DeviceRegisterResponse::DeviceRegisterResponse(const DeviceRegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_affiliation_ids_(from.user_affiliation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_management_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_management_token()) {
    device_management_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_management_token_);
  }
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  configuration_seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_configuration_seed()) {
    configuration_seed_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configuration_seed_);
  }
  enrollment_type_ = from.enrollment_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterResponse)
}

void DeviceRegisterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto.base);
  device_management_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enrollment_type_ = 0;
}

DeviceRegisterResponse::~DeviceRegisterResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterResponse)
  SharedDtor();
}

void DeviceRegisterResponse::SharedDtor() {
  device_management_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceRegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRegisterResponse& DeviceRegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRegisterResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_affiliation_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_management_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      configuration_seed_.ClearNonDefaultToEmptyNoArena();
    }
  }
  enrollment_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceRegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string device_management_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_management_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(val))) {
            set_enrollment_type(static_cast<::enterprise_management::DeviceRegisterResponse_DeviceMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string configuration_seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_configuration_seed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_affiliation_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_user_affiliation_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceRegisterResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_management_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_management_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value)) {
            set_enrollment_type(static_cast< ::enterprise_management::DeviceRegisterResponse_DeviceMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string configuration_seed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration_seed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_affiliation_ids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_user_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceRegisterResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string device_management_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_management_token(), output);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->enrollment_type(), output);
  }

  // optional string configuration_seed = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->configuration_seed(), output);
  }

  // repeated string user_affiliation_ids = 5;
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->user_affiliation_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterResponse)
}

size_t DeviceRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string device_management_token = 1;
  if (has_device_management_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_management_token());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_affiliation_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->user_affiliation_ids_size());
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->user_affiliation_ids(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string machine_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string configuration_seed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->configuration_seed());
    }

    // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->enrollment_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRegisterResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRegisterResponse*>(
      &from));
}

void DeviceRegisterResponse::MergeFrom(const DeviceRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_affiliation_ids_.MergeFrom(from.user_affiliation_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_management_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_management_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      configuration_seed_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configuration_seed_);
    }
    if (cached_has_bits & 0x00000008u) {
      enrollment_type_ = from.enrollment_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceRegisterResponse::CopyFrom(const DeviceRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DeviceRegisterResponse::InternalSwap(DeviceRegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_affiliation_ids_.InternalSwap(CastToBase(&other->user_affiliation_ids_));
  device_management_token_.Swap(&other->device_management_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configuration_seed_.Swap(&other->configuration_seed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enrollment_type_, other->enrollment_type_);
}

std::string DeviceRegisterResponse::GetTypeName() const {
  return "enterprise_management.DeviceRegisterResponse";
}


// ===================================================================

void DeviceUnregisterRequest::InitAsDefaultInstance() {
}
class DeviceUnregisterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUnregisterRequest>()._has_bits_);
};

DeviceUnregisterRequest::DeviceUnregisterRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterRequest)
}
DeviceUnregisterRequest::DeviceUnregisterRequest(const DeviceUnregisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterRequest)
}

void DeviceUnregisterRequest::SharedCtor() {
}

DeviceUnregisterRequest::~DeviceUnregisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterRequest)
  SharedDtor();
}

void DeviceUnregisterRequest::SharedDtor() {
}

void DeviceUnregisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUnregisterRequest& DeviceUnregisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUnregisterRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceUnregisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceUnregisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceUnregisterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceUnregisterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterRequest)
}

size_t DeviceUnregisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUnregisterRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUnregisterRequest*>(
      &from));
}

void DeviceUnregisterRequest::MergeFrom(const DeviceUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceUnregisterRequest::CopyFrom(const DeviceUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnregisterRequest::IsInitialized() const {
  return true;
}

void DeviceUnregisterRequest::InternalSwap(DeviceUnregisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DeviceUnregisterRequest::GetTypeName() const {
  return "enterprise_management.DeviceUnregisterRequest";
}


// ===================================================================

void DeviceUnregisterResponse::InitAsDefaultInstance() {
}
class DeviceUnregisterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUnregisterResponse>()._has_bits_);
};

DeviceUnregisterResponse::DeviceUnregisterResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterResponse)
}
DeviceUnregisterResponse::DeviceUnregisterResponse(const DeviceUnregisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterResponse)
}

void DeviceUnregisterResponse::SharedCtor() {
}

DeviceUnregisterResponse::~DeviceUnregisterResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterResponse)
  SharedDtor();
}

void DeviceUnregisterResponse::SharedDtor() {
}

void DeviceUnregisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUnregisterResponse& DeviceUnregisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUnregisterResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceUnregisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceUnregisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceUnregisterResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceUnregisterResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterResponse)
}

size_t DeviceUnregisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUnregisterResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUnregisterResponse*>(
      &from));
}

void DeviceUnregisterResponse::MergeFrom(const DeviceUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceUnregisterResponse::CopyFrom(const DeviceUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnregisterResponse::IsInitialized() const {
  return true;
}

void DeviceUnregisterResponse::InternalSwap(DeviceUnregisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DeviceUnregisterResponse::GetTypeName() const {
  return "enterprise_management.DeviceUnregisterResponse";
}


// ===================================================================

void DeviceCertUploadRequest::InitAsDefaultInstance() {
}
class DeviceCertUploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceCertUploadRequest>()._has_bits_);
  static void set_has_device_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_certificate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enrollment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceCertUploadRequest::DeviceCertUploadRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadRequest)
}
DeviceCertUploadRequest::DeviceCertUploadRequest(const DeviceCertUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_certificate()) {
    device_certificate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
  }
  enrollment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_enrollment_id()) {
    enrollment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enrollment_id_);
  }
  certificate_type_ = from.certificate_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadRequest)
}

void DeviceCertUploadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto.base);
  device_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enrollment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificate_type_ = 0;
}

DeviceCertUploadRequest::~DeviceCertUploadRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadRequest)
  SharedDtor();
}

void DeviceCertUploadRequest::SharedDtor() {
  device_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enrollment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceCertUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceCertUploadRequest& DeviceCertUploadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceCertUploadRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceCertUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_certificate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      enrollment_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  certificate_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceCertUploadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes device_certificate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_certificate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceCertUploadRequest_CertificateType_IsValid(val))) {
            set_certificate_type(static_cast<::enterprise_management::DeviceCertUploadRequest_CertificateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes enrollment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_enrollment_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceCertUploadRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device_certificate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceCertUploadRequest_CertificateType_IsValid(value)) {
            set_certificate_type(static_cast< ::enterprise_management::DeviceCertUploadRequest_CertificateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enrollment_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enrollment_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceCertUploadRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device_certificate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_certificate(), output);
  }

  // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->certificate_type(), output);
  }

  // optional bytes enrollment_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->enrollment_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadRequest)
}

size_t DeviceCertUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes device_certificate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->device_certificate());
    }

    // optional bytes enrollment_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->enrollment_id());
    }

    // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->certificate_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceCertUploadRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceCertUploadRequest*>(
      &from));
}

void DeviceCertUploadRequest::MergeFrom(const DeviceCertUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_certificate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      enrollment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enrollment_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      certificate_type_ = from.certificate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceCertUploadRequest::CopyFrom(const DeviceCertUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCertUploadRequest::IsInitialized() const {
  return true;
}

void DeviceCertUploadRequest::InternalSwap(DeviceCertUploadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_certificate_.Swap(&other->device_certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enrollment_id_.Swap(&other->enrollment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(certificate_type_, other->certificate_type_);
}

std::string DeviceCertUploadRequest::GetTypeName() const {
  return "enterprise_management.DeviceCertUploadRequest";
}


// ===================================================================

void DeviceCertUploadResponse::InitAsDefaultInstance() {
}
class DeviceCertUploadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceCertUploadResponse>()._has_bits_);
};

DeviceCertUploadResponse::DeviceCertUploadResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadResponse)
}
DeviceCertUploadResponse::DeviceCertUploadResponse(const DeviceCertUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadResponse)
}

void DeviceCertUploadResponse::SharedCtor() {
}

DeviceCertUploadResponse::~DeviceCertUploadResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadResponse)
  SharedDtor();
}

void DeviceCertUploadResponse::SharedDtor() {
}

void DeviceCertUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceCertUploadResponse& DeviceCertUploadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceCertUploadResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceCertUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceCertUploadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceCertUploadResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceCertUploadResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadResponse)
}

size_t DeviceCertUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceCertUploadResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceCertUploadResponse*>(
      &from));
}

void DeviceCertUploadResponse::MergeFrom(const DeviceCertUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceCertUploadResponse::CopyFrom(const DeviceCertUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCertUploadResponse::IsInitialized() const {
  return true;
}

void DeviceCertUploadResponse::InternalSwap(DeviceCertUploadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DeviceCertUploadResponse::GetTypeName() const {
  return "enterprise_management.DeviceCertUploadResponse";
}


// ===================================================================

void DeviceServiceApiAccessRequest::InitAsDefaultInstance() {
}
class DeviceServiceApiAccessRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceServiceApiAccessRequest>()._has_bits_);
  static void set_has_oauth2_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessRequest)
}
DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest(const DeviceServiceApiAccessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      auth_scopes_(from.auth_scopes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oauth2_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_oauth2_client_id()) {
    oauth2_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id_);
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessRequest)
}

void DeviceServiceApiAccessRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto.base);
  oauth2_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
}

DeviceServiceApiAccessRequest::~DeviceServiceApiAccessRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessRequest)
  SharedDtor();
}

void DeviceServiceApiAccessRequest::SharedDtor() {
  oauth2_client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceServiceApiAccessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceServiceApiAccessRequest& DeviceServiceApiAccessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceServiceApiAccessRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceServiceApiAccessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_scopes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    oauth2_client_id_.ClearNonDefaultToEmptyNoArena();
  }
  device_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceServiceApiAccessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string auth_scopes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_auth_scopes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string oauth2_client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_oauth2_client_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(val))) {
            set_device_type(static_cast<::enterprise_management::DeviceServiceApiAccessRequest_DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceServiceApiAccessRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string auth_scopes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_auth_scopes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oauth2_client_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth2_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceServiceApiAccessRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string auth_scopes = 1;
  for (int i = 0, n = this->auth_scopes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->auth_scopes(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string oauth2_client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->oauth2_client_id(), output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->device_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessRequest)
}

size_t DeviceServiceApiAccessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string auth_scopes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->auth_scopes_size());
  for (int i = 0, n = this->auth_scopes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->auth_scopes(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string oauth2_client_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->oauth2_client_id());
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceServiceApiAccessRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceServiceApiAccessRequest*>(
      &from));
}

void DeviceServiceApiAccessRequest::MergeFrom(const DeviceServiceApiAccessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_scopes_.MergeFrom(from.auth_scopes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      oauth2_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceServiceApiAccessRequest::CopyFrom(const DeviceServiceApiAccessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceServiceApiAccessRequest::IsInitialized() const {
  return true;
}

void DeviceServiceApiAccessRequest::InternalSwap(DeviceServiceApiAccessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_scopes_.InternalSwap(CastToBase(&other->auth_scopes_));
  oauth2_client_id_.Swap(&other->oauth2_client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_type_, other->device_type_);
}

std::string DeviceServiceApiAccessRequest::GetTypeName() const {
  return "enterprise_management.DeviceServiceApiAccessRequest";
}


// ===================================================================

void DeviceServiceApiAccessResponse::InitAsDefaultInstance() {
}
class DeviceServiceApiAccessResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceServiceApiAccessResponse>()._has_bits_);
  static void set_has_auth_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessResponse)
}
DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse(const DeviceServiceApiAccessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessResponse)
}

void DeviceServiceApiAccessResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto.base);
  auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceServiceApiAccessResponse::~DeviceServiceApiAccessResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessResponse)
  SharedDtor();
}

void DeviceServiceApiAccessResponse::SharedDtor() {
  auth_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceServiceApiAccessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceServiceApiAccessResponse& DeviceServiceApiAccessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceServiceApiAccessResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceServiceApiAccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auth_code_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceServiceApiAccessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auth_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceServiceApiAccessResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceServiceApiAccessResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessResponse)
}

size_t DeviceServiceApiAccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auth_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceServiceApiAccessResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceServiceApiAccessResponse*>(
      &from));
}

void DeviceServiceApiAccessResponse::MergeFrom(const DeviceServiceApiAccessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_code()) {
    _has_bits_[0] |= 0x00000001u;
    auth_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
}

void DeviceServiceApiAccessResponse::CopyFrom(const DeviceServiceApiAccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceServiceApiAccessResponse::IsInitialized() const {
  return true;
}

void DeviceServiceApiAccessResponse::InternalSwap(DeviceServiceApiAccessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_code_.Swap(&other->auth_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DeviceServiceApiAccessResponse::GetTypeName() const {
  return "enterprise_management.DeviceServiceApiAccessResponse";
}


// ===================================================================

void PolicyFetchRequest::InitAsDefaultInstance() {
}
class PolicyFetchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyFetchRequest>()._has_bits_);
  static void set_has_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_signature_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_public_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_settings_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invalidation_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_invalidation_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verification_key_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_policy_invalidation_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_invalidation_topics_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_device_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

PolicyFetchRequest::PolicyFetchRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchRequest)
}
PolicyFetchRequest::PolicyFetchRequest(const PolicyFetchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  settings_entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_settings_entity_id()) {
    settings_entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
  }
  invalidation_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidation_payload()) {
    invalidation_payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidation_payload_);
  }
  verification_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_verification_key_hash()) {
    verification_key_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_hash_);
  }
  policy_invalidation_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_invalidation_info()) {
    policy_invalidation_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_info_);
  }
  device_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_dm_token()) {
    device_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_dm_token_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalidation_topics_only_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(invalidation_topics_only_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchRequest)
}

void PolicyFetchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto.base);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidation_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalidation_topics_only_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(invalidation_topics_only_));
}

PolicyFetchRequest::~PolicyFetchRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchRequest)
  SharedDtor();
}

void PolicyFetchRequest::SharedDtor() {
  policy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidation_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_dm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyFetchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyFetchRequest& PolicyFetchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyFetchRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyFetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      policy_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      settings_entity_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      invalidation_payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      verification_key_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      policy_invalidation_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      device_dm_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signature_type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(signature_type_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&public_key_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invalidation_topics_only_) -
        reinterpret_cast<char*>(&public_key_version_)) + sizeof(invalidation_topics_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyFetchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(val))) {
            set_signature_type(static_cast<::enterprise_management::PolicyFetchRequest_SignatureType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 public_key_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_public_key_version(&has_bits);
          public_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string settings_entity_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_settings_entity_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 invalidation_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_invalidation_version(&has_bits);
          invalidation_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes invalidation_payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_invalidation_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verification_key_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_verification_key_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_invalidation_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_invalidation_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invalidation_topics_only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_invalidation_topics_only(&has_bits);
          invalidation_topics_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_dm_token = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_dm_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyFetchRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value)) {
            set_signature_type(static_cast< ::enterprise_management::PolicyFetchRequest_SignatureType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_key_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_public_key_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settings_entity_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_settings_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 invalidation_version = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_invalidation_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &invalidation_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes invalidation_payload = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invalidation_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string verification_key_hash = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_verification_key_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_invalidation_info = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_invalidation_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invalidation_topics_only = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_invalidation_topics_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidation_topics_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_dm_token = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyFetchRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->signature_type(), output);
  }

  // optional int32 public_key_version = 4;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->public_key_version(), output);
  }

  // optional string settings_entity_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->settings_entity_id(), output);
  }

  // optional int64 invalidation_version = 7;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->invalidation_version(), output);
  }

  // optional bytes invalidation_payload = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->invalidation_payload(), output);
  }

  // optional string verification_key_hash = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->verification_key_hash(), output);
  }

  // optional string policy_invalidation_info = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->policy_invalidation_info(), output);
  }

  // optional bool invalidation_topics_only = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->invalidation_topics_only(), output);
  }

  // optional string device_dm_token = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->device_dm_token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchRequest)
}

size_t PolicyFetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string policy_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string settings_entity_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->settings_entity_id());
    }

    // optional bytes invalidation_payload = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->invalidation_payload());
    }

    // optional string verification_key_hash = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->verification_key_hash());
    }

    // optional string policy_invalidation_info = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_invalidation_info());
    }

    // optional string device_dm_token = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_dm_token());
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->signature_type());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 public_key_version = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->public_key_version());
    }

    // optional int64 invalidation_version = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->invalidation_version());
    }

    // optional bool invalidation_topics_only = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyFetchRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyFetchRequest*>(
      &from));
}

void PolicyFetchRequest::MergeFrom(const PolicyFetchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      settings_entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      invalidation_payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidation_payload_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      verification_key_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      policy_invalidation_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_info_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      device_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_dm_token_);
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      signature_type_ = from.signature_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      public_key_version_ = from.public_key_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      invalidation_version_ = from.invalidation_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      invalidation_topics_only_ = from.invalidation_topics_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyFetchRequest::CopyFrom(const PolicyFetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyFetchRequest::IsInitialized() const {
  return true;
}

void PolicyFetchRequest::InternalSwap(PolicyFetchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  policy_type_.Swap(&other->policy_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  settings_entity_id_.Swap(&other->settings_entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invalidation_payload_.Swap(&other->invalidation_payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verification_key_hash_.Swap(&other->verification_key_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_invalidation_info_.Swap(&other->policy_invalidation_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_dm_token_.Swap(&other->device_dm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(signature_type_, other->signature_type_);
  swap(public_key_version_, other->public_key_version_);
  swap(invalidation_version_, other->invalidation_version_);
  swap(invalidation_topics_only_, other->invalidation_topics_only_);
}

std::string PolicyFetchRequest::GetTypeName() const {
  return "enterprise_management.PolicyFetchRequest";
}


// ===================================================================

void DisabledState::InitAsDefaultInstance() {
}
class DisabledState::_Internal {
 public:
  using HasBits = decltype(std::declval<DisabledState>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisabledState::DisabledState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DisabledState)
}
DisabledState::DisabledState(const DisabledState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DisabledState)
}

void DisabledState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisabledState::~DisabledState() {
  // @@protoc_insertion_point(destructor:enterprise_management.DisabledState)
  SharedDtor();
}

void DisabledState::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisabledState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisabledState& DisabledState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisabledState_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DisabledState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DisabledState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisabledState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisabledState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DisabledState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DisabledState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DisabledState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisabledState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DisabledState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DisabledState)
}

size_t DisabledState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DisabledState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisabledState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisabledState*>(
      &from));
}

void DisabledState::MergeFrom(const DisabledState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DisabledState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void DisabledState::CopyFrom(const DisabledState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DisabledState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisabledState::IsInitialized() const {
  return true;
}

void DisabledState::InternalSwap(DisabledState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DisabledState::GetTypeName() const {
  return "enterprise_management.DisabledState";
}


// ===================================================================

void DeviceState::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceState_default_instance_._instance.get_mutable()->disabled_state_ = const_cast< ::enterprise_management::DisabledState*>(
      ::enterprise_management::DisabledState::internal_default_instance());
}
class DeviceState::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceState>()._has_bits_);
  static void set_has_device_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::DisabledState& disabled_state(const DeviceState* msg);
  static void set_has_disabled_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::DisabledState&
DeviceState::_Internal::disabled_state(const DeviceState* msg) {
  return *msg->disabled_state_;
}
DeviceState::DeviceState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_disabled_state()) {
    disabled_state_ = new ::enterprise_management::DisabledState(*from.disabled_state_);
  } else {
    disabled_state_ = nullptr;
  }
  device_mode_ = from.device_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceState)
}

void DeviceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceState_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&disabled_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_mode_) -
      reinterpret_cast<char*>(&disabled_state_)) + sizeof(device_mode_));
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceState)
  SharedDtor();
}

void DeviceState::SharedDtor() {
  if (this != internal_default_instance()) delete disabled_state_;
}

void DeviceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceState& DeviceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceState_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(disabled_state_ != nullptr);
    disabled_state_->Clear();
  }
  device_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceState_DeviceMode_IsValid(val))) {
            set_device_mode(static_cast<::enterprise_management::DeviceState_DeviceMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DisabledState disabled_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_disabled_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceState_DeviceMode_IsValid(value)) {
            set_device_mode(static_cast< ::enterprise_management::DeviceState_DeviceMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DisabledState disabled_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->device_mode(), output);
  }

  // optional .enterprise_management.DisabledState disabled_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::disabled_state(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceState)
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.DisabledState disabled_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_state_);
    }

    // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->device_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceState*>(
      &from));
}

void DeviceState::MergeFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
    }
    if (cached_has_bits & 0x00000002u) {
      device_mode_ = from.device_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::InternalSwap(DeviceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disabled_state_, other->disabled_state_);
  swap(device_mode_, other->device_mode_);
}

std::string DeviceState::GetTypeName() const {
  return "enterprise_management.DeviceState";
}


// ===================================================================

void CustomerLogo::InitAsDefaultInstance() {
}
class CustomerLogo::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomerLogo>()._has_bits_);
  static void set_has_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CustomerLogo::CustomerLogo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CustomerLogo)
}
CustomerLogo::CustomerLogo(const CustomerLogo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo_url()) {
    logo_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logo_url_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CustomerLogo)
}

void CustomerLogo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto.base);
  logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomerLogo::~CustomerLogo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CustomerLogo)
  SharedDtor();
}

void CustomerLogo::SharedDtor() {
  logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomerLogo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerLogo& CustomerLogo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerLogo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CustomerLogo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CustomerLogo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    logo_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomerLogo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string logo_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_logo_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomerLogo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CustomerLogo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string logo_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CustomerLogo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CustomerLogo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomerLogo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CustomerLogo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string logo_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->logo_url(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CustomerLogo)
}

size_t CustomerLogo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CustomerLogo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string logo_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->logo_url());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerLogo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CustomerLogo*>(
      &from));
}

void CustomerLogo::MergeFrom(const CustomerLogo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CustomerLogo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logo_url()) {
    _has_bits_[0] |= 0x00000001u;
    logo_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logo_url_);
  }
}

void CustomerLogo::CopyFrom(const CustomerLogo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CustomerLogo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerLogo::IsInitialized() const {
  return true;
}

void CustomerLogo::InternalSwap(CustomerLogo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  logo_url_.Swap(&other->logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CustomerLogo::GetTypeName() const {
  return "enterprise_management.CustomerLogo";
}


// ===================================================================

void PolicyData::InitAsDefaultInstance() {
  ::enterprise_management::_PolicyData_default_instance_._instance.get_mutable()->device_state_ = const_cast< ::enterprise_management::DeviceState*>(
      ::enterprise_management::DeviceState::internal_default_instance());
  ::enterprise_management::_PolicyData_default_instance_._instance.get_mutable()->customer_logo_ = const_cast< ::enterprise_management::CustomerLogo*>(
      ::enterprise_management::CustomerLogo::internal_default_instance());
  ::enterprise_management::_PolicyData_default_instance_._instance.get_mutable()->client_action_required_ = const_cast< ::enterprise_management::ClientActionRequired*>(
      ::enterprise_management::ClientActionRequired::internal_default_instance());
}
class PolicyData::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyData>()._has_bits_);
  static void set_has_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_request_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_policy_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_public_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_settings_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_service_account_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_invalidation_source(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_invalidation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_policy_token(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_management_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::DeviceState& device_state(const PolicyData* msg);
  static void set_has_device_state(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_command_invalidation_source(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_command_invalidation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_annotated_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_annotated_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_directory_api_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_display_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_policy_invalidation_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_command_invalidation_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enrollment_id_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_market_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::CustomerLogo& customer_logo(const PolicyData* msg);
  static void set_has_customer_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_change_password_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::ClientActionRequired& client_action_required(const PolicyData* msg);
  static void set_has_client_action_required(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::enterprise_management::DeviceState&
PolicyData::_Internal::device_state(const PolicyData* msg) {
  return *msg->device_state_;
}
const ::enterprise_management::CustomerLogo&
PolicyData::_Internal::customer_logo(const PolicyData* msg) {
  return *msg->customer_logo_;
}
const ::enterprise_management::ClientActionRequired&
PolicyData::_Internal::client_action_required(const PolicyData* msg) {
  return *msg->client_action_required_;
}
PolicyData::PolicyData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyData)
}
PolicyData::PolicyData(const PolicyData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      device_affiliation_ids_(from.device_affiliation_ids_),
      user_affiliation_ids_(from.user_affiliation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_token()) {
    request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
  policy_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_value()) {
    policy_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_value_);
  }
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_id()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  settings_entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_settings_entity_id()) {
    settings_entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
  }
  service_account_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_account_identity()) {
    service_account_identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_account_identity_);
  }
  invalidation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidation_name()) {
    invalidation_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidation_name_);
  }
  policy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_token()) {
    policy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
  }
  command_invalidation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_invalidation_name()) {
    command_invalidation_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_name_);
  }
  annotated_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_annotated_location()) {
    annotated_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_location_);
  }
  annotated_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_annotated_asset_id()) {
    annotated_asset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_asset_id_);
  }
  directory_api_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_directory_api_id()) {
    directory_api_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_api_id_);
  }
  display_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_domain()) {
    display_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_domain_);
  }
  policy_invalidation_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_invalidation_topic()) {
    policy_invalidation_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_topic_);
  }
  command_invalidation_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_invalidation_topic()) {
    command_invalidation_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_topic_);
  }
  gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_gaia_id()) {
    gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
  }
  change_password_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_change_password_uri()) {
    change_password_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.change_password_uri_);
  }
  if (from.has_device_state()) {
    device_state_ = new ::enterprise_management::DeviceState(*from.device_state_);
  } else {
    device_state_ = nullptr;
  }
  if (from.has_customer_logo()) {
    customer_logo_ = new ::enterprise_management::CustomerLogo(*from.customer_logo_);
  } else {
    customer_logo_ = nullptr;
  }
  if (from.has_client_action_required()) {
    client_action_required_ = new ::enterprise_management::ClientActionRequired(*from.client_action_required_);
  } else {
    client_action_required_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_segment_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(market_segment_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyData)
}

void PolicyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyData_device_5fmanagement_5fbackend_2eproto.base);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_account_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_invalidation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_api_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_invalidation_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_password_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_segment_) -
      reinterpret_cast<char*>(&device_state_)) + sizeof(market_segment_));
}

PolicyData::~PolicyData() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyData)
  SharedDtor();
}

void PolicyData::SharedDtor() {
  policy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_account_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_invalidation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_api_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_invalidation_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gaia_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_password_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_state_;
  if (this != internal_default_instance()) delete customer_logo_;
  if (this != internal_default_instance()) delete client_action_required_;
}

void PolicyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyData& PolicyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyData_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_affiliation_ids_.Clear();
  user_affiliation_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      policy_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      policy_value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      device_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      settings_entity_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      service_account_identity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      invalidation_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      policy_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      command_invalidation_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      annotated_location_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      annotated_asset_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      directory_api_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      display_domain_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      policy_invalidation_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      command_invalidation_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00020000u) {
      gaia_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00040000u) {
      change_password_uri_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(device_state_ != nullptr);
      device_state_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(customer_logo_ != nullptr);
      customer_logo_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(client_action_required_ != nullptr);
      client_action_required_->Clear();
    }
  }
  if (cached_has_bits & 0x00c00000u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_key_version_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(public_key_version_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_segment_) -
        reinterpret_cast<char*>(&state_)) + sizeof(market_segment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string request_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes policy_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 public_key_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_public_key_version(&has_bits);
          public_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string username = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_username(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyData_AssociationState_IsValid(val))) {
            set_state(static_cast<::enterprise_management::PolicyData_AssociationState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string settings_entity_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_settings_entity_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service_account_identity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_service_account_identity(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 invalidation_source = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_invalidation_source(&has_bits);
          invalidation_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes invalidation_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_invalidation_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_token = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyData_ManagementMode_IsValid(val))) {
            set_management_mode(static_cast<::enterprise_management::PolicyData_ManagementMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceState device_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_device_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 command_invalidation_source = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_command_invalidation_source(&has_bits);
          command_invalidation_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes command_invalidation_name = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_command_invalidation_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string annotated_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_annotated_location(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string annotated_asset_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_annotated_asset_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string directory_api_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_directory_api_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_affiliation_ids = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_device_affiliation_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated string user_affiliation_ids = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_user_affiliation_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // optional string display_domain = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_display_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_invalidation_topic = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_invalidation_topic(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string command_invalidation_topic = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_command_invalidation_topic(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enrollment_id_needed = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enrollment_id_needed(&has_bits);
          enrollment_id_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gaia_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_gaia_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyData.MarketSegment market_segment = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyData_MarketSegment_IsValid(val))) {
            set_market_segment(static_cast<::enterprise_management::PolicyData_MarketSegment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CustomerLogo customer_logo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_customer_logo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string change_password_uri = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_change_password_uri(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ClientActionRequired client_action_required = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_client_action_required(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_token = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_key_version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_public_key_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyData_AssociationState_IsValid(value)) {
            set_state(static_cast< ::enterprise_management::PolicyData_AssociationState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settings_entity_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_settings_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_account_identity = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_account_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invalidation_source = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_invalidation_source(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &invalidation_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes invalidation_name = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invalidation_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_token = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyData_ManagementMode_IsValid(value)) {
            set_management_mode(static_cast< ::enterprise_management::PolicyData_ManagementMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(128u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceState device_state = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 command_invalidation_source = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_command_invalidation_source(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_invalidation_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes command_invalidation_name = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_invalidation_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string annotated_location = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_annotated_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string annotated_asset_id = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_annotated_asset_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string directory_api_id = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_directory_api_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_affiliation_ids = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_device_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_affiliation_ids = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_user_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_domain = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_display_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_invalidation_topic = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_invalidation_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_invalidation_topic = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_command_invalidation_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enrollment_id_needed = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_enrollment_id_needed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enrollment_id_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gaia_id = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gaia_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyData.MarketSegment market_segment = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyData_MarketSegment_IsValid(value)) {
            set_market_segment(static_cast< ::enterprise_management::PolicyData_MarketSegment >(value));
          } else {
            unknown_fields_stream.WriteVarint32(240u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CustomerLogo customer_logo = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_customer_logo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string change_password_uri = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_change_password_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ClientActionRequired client_action_required = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_action_required()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string request_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_token(), output);
  }

  // optional bytes policy_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->policy_value(), output);
  }

  // optional string machine_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->machine_name(), output);
  }

  // optional int32 public_key_version = 6;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->public_key_version(), output);
  }

  // optional string username = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional string device_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_id(), output);
  }

  // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->state(), output);
  }

  // optional string settings_entity_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->settings_entity_id(), output);
  }

  // optional string service_account_identity = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->service_account_identity(), output);
  }

  // optional int32 invalidation_source = 13;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->invalidation_source(), output);
  }

  // optional bytes invalidation_name = 14;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->invalidation_name(), output);
  }

  // optional string policy_token = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->policy_token(), output);
  }

  // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->management_mode(), output);
  }

  // optional .enterprise_management.DeviceState device_state = 17;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::device_state(this), output);
  }

  // optional int32 command_invalidation_source = 18;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->command_invalidation_source(), output);
  }

  // optional bytes command_invalidation_name = 19;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->command_invalidation_name(), output);
  }

  // optional string annotated_location = 20;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->annotated_location(), output);
  }

  // optional string annotated_asset_id = 21;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->annotated_asset_id(), output);
  }

  // optional string directory_api_id = 22;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->directory_api_id(), output);
  }

  // repeated string device_affiliation_ids = 23;
  for (int i = 0, n = this->device_affiliation_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      23, this->device_affiliation_ids(i), output);
  }

  // repeated string user_affiliation_ids = 24;
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      24, this->user_affiliation_ids(i), output);
  }

  // optional string display_domain = 25;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->display_domain(), output);
  }

  // optional string policy_invalidation_topic = 26;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->policy_invalidation_topic(), output);
  }

  // optional string command_invalidation_topic = 27;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->command_invalidation_topic(), output);
  }

  // optional bool enrollment_id_needed = 28;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(28, this->enrollment_id_needed(), output);
  }

  // optional string gaia_id = 29;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->gaia_id(), output);
  }

  // optional .enterprise_management.PolicyData.MarketSegment market_segment = 30;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      30, this->market_segment(), output);
  }

  // optional .enterprise_management.CustomerLogo customer_logo = 31;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::customer_logo(this), output);
  }

  // optional string change_password_uri = 32;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->change_password_uri(), output);
  }

  // optional .enterprise_management.ClientActionRequired client_action_required = 33;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::client_action_required(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyData)
}

size_t PolicyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_affiliation_ids = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_affiliation_ids_size());
  for (int i = 0, n = this->device_affiliation_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->device_affiliation_ids(i));
  }

  // repeated string user_affiliation_ids = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->user_affiliation_ids_size());
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->user_affiliation_ids(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string policy_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string request_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->request_token());
    }

    // optional bytes policy_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->policy_value());
    }

    // optional string machine_name = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string username = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string device_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string settings_entity_id = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->settings_entity_id());
    }

    // optional string service_account_identity = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_account_identity());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes invalidation_name = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->invalidation_name());
    }

    // optional string policy_token = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_token());
    }

    // optional bytes command_invalidation_name = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->command_invalidation_name());
    }

    // optional string annotated_location = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->annotated_location());
    }

    // optional string annotated_asset_id = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->annotated_asset_id());
    }

    // optional string directory_api_id = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->directory_api_id());
    }

    // optional string display_domain = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->display_domain());
    }

    // optional string policy_invalidation_topic = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_invalidation_topic());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string command_invalidation_topic = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->command_invalidation_topic());
    }

    // optional string gaia_id = 29;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->gaia_id());
    }

    // optional string change_password_uri = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->change_password_uri());
    }

    // optional .enterprise_management.DeviceState device_state = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_state_);
    }

    // optional .enterprise_management.CustomerLogo customer_logo = 31;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_logo_);
    }

    // optional .enterprise_management.ClientActionRequired client_action_required = 33;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_action_required_);
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 public_key_version = 6;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->public_key_version());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 invalidation_source = 13;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->invalidation_source());
    }

    // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->management_mode());
    }

    // optional int32 command_invalidation_source = 18;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->command_invalidation_source());
    }

    // optional bool enrollment_id_needed = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional .enterprise_management.PolicyData.MarketSegment market_segment = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->market_segment());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyData*>(
      &from));
}

void PolicyData::MergeFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_affiliation_ids_.MergeFrom(from.device_affiliation_ids_);
  user_affiliation_ids_.MergeFrom(from.user_affiliation_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      policy_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_value_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      settings_entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      service_account_identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_account_identity_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      invalidation_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidation_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      policy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      command_invalidation_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_name_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      annotated_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_location_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      annotated_asset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_asset_id_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      directory_api_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_api_id_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      display_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_domain_);
    }
    if (cached_has_bits & 0x00008000u) {
      _has_bits_[0] |= 0x00008000u;
      policy_invalidation_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_topic_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _has_bits_[0] |= 0x00010000u;
      command_invalidation_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_topic_);
    }
    if (cached_has_bits & 0x00020000u) {
      _has_bits_[0] |= 0x00020000u;
      gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
    }
    if (cached_has_bits & 0x00040000u) {
      _has_bits_[0] |= 0x00040000u;
      change_password_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.change_password_uri_);
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_device_state()->::enterprise_management::DeviceState::MergeFrom(from.device_state());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_customer_logo()->::enterprise_management::CustomerLogo::MergeFrom(from.customer_logo());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_client_action_required()->::enterprise_management::ClientActionRequired::MergeFrom(from.client_action_required());
    }
    if (cached_has_bits & 0x00400000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00800000u) {
      public_key_version_ = from.public_key_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x02000000u) {
      invalidation_source_ = from.invalidation_source_;
    }
    if (cached_has_bits & 0x04000000u) {
      management_mode_ = from.management_mode_;
    }
    if (cached_has_bits & 0x08000000u) {
      command_invalidation_source_ = from.command_invalidation_source_;
    }
    if (cached_has_bits & 0x10000000u) {
      enrollment_id_needed_ = from.enrollment_id_needed_;
    }
    if (cached_has_bits & 0x20000000u) {
      market_segment_ = from.market_segment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyData::CopyFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyData::IsInitialized() const {
  return true;
}

void PolicyData::InternalSwap(PolicyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_affiliation_ids_.InternalSwap(CastToBase(&other->device_affiliation_ids_));
  user_affiliation_ids_.InternalSwap(CastToBase(&other->user_affiliation_ids_));
  policy_type_.Swap(&other->policy_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_token_.Swap(&other->request_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_value_.Swap(&other->policy_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  settings_entity_id_.Swap(&other->settings_entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_account_identity_.Swap(&other->service_account_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invalidation_name_.Swap(&other->invalidation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_token_.Swap(&other->policy_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_invalidation_name_.Swap(&other->command_invalidation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  annotated_location_.Swap(&other->annotated_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  annotated_asset_id_.Swap(&other->annotated_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  directory_api_id_.Swap(&other->directory_api_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_domain_.Swap(&other->display_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_invalidation_topic_.Swap(&other->policy_invalidation_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_invalidation_topic_.Swap(&other->command_invalidation_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gaia_id_.Swap(&other->gaia_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  change_password_uri_.Swap(&other->change_password_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_state_, other->device_state_);
  swap(customer_logo_, other->customer_logo_);
  swap(client_action_required_, other->client_action_required_);
  swap(timestamp_, other->timestamp_);
  swap(public_key_version_, other->public_key_version_);
  swap(state_, other->state_);
  swap(invalidation_source_, other->invalidation_source_);
  swap(management_mode_, other->management_mode_);
  swap(command_invalidation_source_, other->command_invalidation_source_);
  swap(enrollment_id_needed_, other->enrollment_id_needed_);
  swap(market_segment_, other->market_segment_);
}

std::string PolicyData::GetTypeName() const {
  return "enterprise_management.PolicyData";
}


// ===================================================================

void ClientActionRequired::InitAsDefaultInstance() {
}
class ClientActionRequired::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientActionRequired>()._has_bits_);
  static void set_has_enrollment_certificate_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientActionRequired::ClientActionRequired()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ClientActionRequired)
}
ClientActionRequired::ClientActionRequired(const ClientActionRequired& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enrollment_certificate_needed_ = from.enrollment_certificate_needed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ClientActionRequired)
}

void ClientActionRequired::SharedCtor() {
  enrollment_certificate_needed_ = false;
}

ClientActionRequired::~ClientActionRequired() {
  // @@protoc_insertion_point(destructor:enterprise_management.ClientActionRequired)
  SharedDtor();
}

void ClientActionRequired::SharedDtor() {
}

void ClientActionRequired::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientActionRequired& ClientActionRequired::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientActionRequired_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ClientActionRequired::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ClientActionRequired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollment_certificate_needed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientActionRequired::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enrollment_certificate_needed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enrollment_certificate_needed(&has_bits);
          enrollment_certificate_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientActionRequired::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ClientActionRequired)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enrollment_certificate_needed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enrollment_certificate_needed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enrollment_certificate_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ClientActionRequired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ClientActionRequired)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientActionRequired::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ClientActionRequired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enrollment_certificate_needed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enrollment_certificate_needed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ClientActionRequired)
}

size_t ClientActionRequired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ClientActionRequired)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enrollment_certificate_needed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientActionRequired::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientActionRequired*>(
      &from));
}

void ClientActionRequired::MergeFrom(const ClientActionRequired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ClientActionRequired)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enrollment_certificate_needed()) {
    set_enrollment_certificate_needed(from.enrollment_certificate_needed());
  }
}

void ClientActionRequired::CopyFrom(const ClientActionRequired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ClientActionRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientActionRequired::IsInitialized() const {
  return true;
}

void ClientActionRequired::InternalSwap(ClientActionRequired* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enrollment_certificate_needed_, other->enrollment_certificate_needed_);
}

std::string ClientActionRequired::GetTypeName() const {
  return "enterprise_management.ClientActionRequired";
}


// ===================================================================

void PolicyFetchResponse::InitAsDefaultInstance() {
}
class PolicyFetchResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyFetchResponse>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_policy_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_policy_data_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_public_key_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_public_key_verification_signature_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_public_key_verification_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_new_public_key_verification_data_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PolicyFetchResponse::PolicyFetchResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchResponse)
}
PolicyFetchResponse::PolicyFetchResponse(const PolicyFetchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  policy_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data()) {
    policy_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
  }
  policy_data_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data_signature()) {
    policy_data_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_signature_);
  }
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  new_public_key_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_signature()) {
    new_public_key_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_signature_);
  }
  new_public_key_verification_signature_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_signature_deprecated()) {
    new_public_key_verification_signature_deprecated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_signature_deprecated_);
  }
  new_public_key_verification_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_data()) {
    new_public_key_verification_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_);
  }
  new_public_key_verification_data_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_data_signature()) {
    new_public_key_verification_data_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_signature_);
  }
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchResponse)
}

void PolicyFetchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_signature_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

PolicyFetchResponse::~PolicyFetchResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchResponse)
  SharedDtor();
}

void PolicyFetchResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_signature_deprecated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyFetchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyFetchResponse& PolicyFetchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyFetchResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyFetchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      policy_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      policy_data_signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      new_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      new_public_key_signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      new_public_key_verification_signature_deprecated_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      new_public_key_verification_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      new_public_key_verification_data_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    policy_type_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyFetchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes policy_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes policy_data_signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_data_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes new_public_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes new_public_key_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key_verification_signature_deprecated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes new_public_key_verification_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key_verification_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes new_public_key_verification_data_signature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key_verification_data_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_type = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyFetchResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_error_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_data_signature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_data_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_signature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_signature_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_data_signature = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_data_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_type = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyFetchResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional bytes policy_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->policy_data(), output);
  }

  // optional bytes policy_data_signature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->policy_data_signature(), output);
  }

  // optional bytes new_public_key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->new_public_key(), output);
  }

  // optional bytes new_public_key_signature = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->new_public_key_signature(), output);
  }

  // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->new_public_key_verification_signature_deprecated(), output);
  }

  // optional bytes new_public_key_verification_data = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->new_public_key_verification_data(), output);
  }

  // optional bytes new_public_key_verification_data_signature = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->new_public_key_verification_data_signature(), output);
  }

  // optional string policy_type = 10 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->policy_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchResponse)
}

size_t PolicyFetchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional bytes policy_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->policy_data());
    }

    // optional bytes policy_data_signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->policy_data_signature());
    }

    // optional bytes new_public_key = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional bytes new_public_key_signature = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key_signature());
    }

    // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_signature_deprecated());
    }

    // optional bytes new_public_key_verification_data = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_data());
    }

    // optional bytes new_public_key_verification_data_signature = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_data_signature());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional string policy_type = 10 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyFetchResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyFetchResponse*>(
      &from));
}

void PolicyFetchResponse::MergeFrom(const PolicyFetchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      policy_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      policy_data_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      new_public_key_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_signature_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      new_public_key_verification_signature_deprecated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_signature_deprecated_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      new_public_key_verification_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      new_public_key_verification_data_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_signature_);
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000200u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyFetchResponse::CopyFrom(const PolicyFetchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyFetchResponse::IsInitialized() const {
  return true;
}

void PolicyFetchResponse::InternalSwap(PolicyFetchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_data_.Swap(&other->policy_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_data_signature_.Swap(&other->policy_data_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_public_key_.Swap(&other->new_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_public_key_signature_.Swap(&other->new_public_key_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_public_key_verification_signature_deprecated_.Swap(&other->new_public_key_verification_signature_deprecated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_public_key_verification_data_.Swap(&other->new_public_key_verification_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_public_key_verification_data_signature_.Swap(&other->new_public_key_verification_data_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_type_.Swap(&other->policy_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

std::string PolicyFetchResponse::GetTypeName() const {
  return "enterprise_management.PolicyFetchResponse";
}


// ===================================================================

void DEPRECATEDPolicyPublicKeyAndDomain::InitAsDefaultInstance() {
}
class DEPRECATEDPolicyPublicKeyAndDomain::_Internal {
 public:
  using HasBits = decltype(std::declval<DEPRECATEDPolicyPublicKeyAndDomain>()._has_bits_);
  static void set_has_new_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}
DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain(const DEPRECATEDPolicyPublicKeyAndDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DEPRECATEDPolicyPublicKeyAndDomain_device_5fmanagement_5fbackend_2eproto.base);
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DEPRECATEDPolicyPublicKeyAndDomain::~DEPRECATEDPolicyPublicKeyAndDomain() {
  // @@protoc_insertion_point(destructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  SharedDtor();
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedDtor() {
  new_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DEPRECATEDPolicyPublicKeyAndDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DEPRECATEDPolicyPublicKeyAndDomain& DEPRECATEDPolicyPublicKeyAndDomain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DEPRECATEDPolicyPublicKeyAndDomain_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DEPRECATEDPolicyPublicKeyAndDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      domain_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DEPRECATEDPolicyPublicKeyAndDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes new_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DEPRECATEDPolicyPublicKeyAndDomain::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes new_public_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DEPRECATEDPolicyPublicKeyAndDomain::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes new_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_public_key(), output);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

size_t DEPRECATEDPolicyPublicKeyAndDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes new_public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional string domain = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DEPRECATEDPolicyPublicKeyAndDomain::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DEPRECATEDPolicyPublicKeyAndDomain*>(
      &from));
}

void DEPRECATEDPolicyPublicKeyAndDomain::MergeFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
  }
}

void DEPRECATEDPolicyPublicKeyAndDomain::CopyFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEPRECATEDPolicyPublicKeyAndDomain::IsInitialized() const {
  return true;
}

void DEPRECATEDPolicyPublicKeyAndDomain::InternalSwap(DEPRECATEDPolicyPublicKeyAndDomain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  new_public_key_.Swap(&other->new_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DEPRECATEDPolicyPublicKeyAndDomain::GetTypeName() const {
  return "enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain";
}


// ===================================================================

void PublicKeyVerificationData::InitAsDefaultInstance() {
}
class PublicKeyVerificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicKeyVerificationData>()._has_bits_);
  static void set_has_new_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_public_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublicKeyVerificationData::PublicKeyVerificationData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PublicKeyVerificationData)
}
PublicKeyVerificationData::PublicKeyVerificationData(const PublicKeyVerificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  new_public_key_version_ = from.new_public_key_version_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PublicKeyVerificationData)
}

void PublicKeyVerificationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicKeyVerificationData_device_5fmanagement_5fbackend_2eproto.base);
  new_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_public_key_version_ = 0;
}

PublicKeyVerificationData::~PublicKeyVerificationData() {
  // @@protoc_insertion_point(destructor:enterprise_management.PublicKeyVerificationData)
  SharedDtor();
}

void PublicKeyVerificationData::SharedDtor() {
  new_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicKeyVerificationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicKeyVerificationData& PublicKeyVerificationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicKeyVerificationData_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PublicKeyVerificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PublicKeyVerificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      domain_.ClearNonDefaultToEmptyNoArena();
    }
  }
  new_public_key_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublicKeyVerificationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes new_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_public_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_public_key_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_public_key_version(&has_bits);
          new_public_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublicKeyVerificationData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PublicKeyVerificationData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes new_public_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_public_key_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_new_public_key_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PublicKeyVerificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PublicKeyVerificationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublicKeyVerificationData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PublicKeyVerificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes new_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_public_key(), output);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional int32 new_public_key_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->new_public_key_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PublicKeyVerificationData)
}

size_t PublicKeyVerificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PublicKeyVerificationData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes new_public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional string domain = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional int32 new_public_key_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->new_public_key_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKeyVerificationData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PublicKeyVerificationData*>(
      &from));
}

void PublicKeyVerificationData::MergeFrom(const PublicKeyVerificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PublicKeyVerificationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      new_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000004u) {
      new_public_key_version_ = from.new_public_key_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublicKeyVerificationData::CopyFrom(const PublicKeyVerificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PublicKeyVerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyVerificationData::IsInitialized() const {
  return true;
}

void PublicKeyVerificationData::InternalSwap(PublicKeyVerificationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  new_public_key_.Swap(&other->new_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_public_key_version_, other->new_public_key_version_);
}

std::string PublicKeyVerificationData::GetTypeName() const {
  return "enterprise_management.PublicKeyVerificationData";
}


// ===================================================================

void DevicePolicyRequest::InitAsDefaultInstance() {
}
class DevicePolicyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePolicyRequest>()._has_bits_);
};

DevicePolicyRequest::DevicePolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyRequest)
}
DevicePolicyRequest::DevicePolicyRequest(const DevicePolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyRequest)
}

void DevicePolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto.base);
}

DevicePolicyRequest::~DevicePolicyRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyRequest)
  SharedDtor();
}

void DevicePolicyRequest::SharedDtor() {
}

void DevicePolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePolicyRequest& DevicePolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePolicyRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DevicePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DevicePolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.PolicyFetchRequest requests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DevicePolicyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.PolicyFetchRequest requests = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DevicePolicyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchRequest requests = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->requests(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyRequest)
}

size_t DevicePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchRequest requests = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePolicyRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePolicyRequest*>(
      &from));
}

void DevicePolicyRequest::MergeFrom(const DevicePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
}

void DevicePolicyRequest::CopyFrom(const DevicePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicyRequest::IsInitialized() const {
  return true;
}

void DevicePolicyRequest::InternalSwap(DevicePolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
}

std::string DevicePolicyRequest::GetTypeName() const {
  return "enterprise_management.DevicePolicyRequest";
}


// ===================================================================

void DevicePolicyResponse::InitAsDefaultInstance() {
}
class DevicePolicyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePolicyResponse>()._has_bits_);
};

DevicePolicyResponse::DevicePolicyResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyResponse)
}
DevicePolicyResponse::DevicePolicyResponse(const DevicePolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyResponse)
}

void DevicePolicyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto.base);
}

DevicePolicyResponse::~DevicePolicyResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyResponse)
  SharedDtor();
}

void DevicePolicyResponse::SharedDtor() {
}

void DevicePolicyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePolicyResponse& DevicePolicyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePolicyResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DevicePolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DevicePolicyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.PolicyFetchResponse responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DevicePolicyResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.PolicyFetchResponse responses = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DevicePolicyResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchResponse responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->responses(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyResponse)
}

size_t DevicePolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchResponse responses = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePolicyResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePolicyResponse*>(
      &from));
}

void DevicePolicyResponse::MergeFrom(const DevicePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void DevicePolicyResponse::CopyFrom(const DevicePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicyResponse::IsInitialized() const {
  return true;
}

void DevicePolicyResponse::InternalSwap(DevicePolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
}

std::string DevicePolicyResponse::GetTypeName() const {
  return "enterprise_management.DevicePolicyResponse";
}


// ===================================================================

void TimePeriod::InitAsDefaultInstance() {
}
class TimePeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<TimePeriod>()._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimePeriod::TimePeriod()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.TimePeriod)
}
TimePeriod::TimePeriod(const TimePeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TimePeriod)
}

void TimePeriod::SharedCtor() {
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TimePeriod::~TimePeriod() {
  // @@protoc_insertion_point(destructor:enterprise_management.TimePeriod)
  SharedDtor();
}

void TimePeriod::SharedDtor() {
}

void TimePeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimePeriod& TimePeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimePeriod_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void TimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimePeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimePeriod::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.TimePeriod)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.TimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.TimePeriod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimePeriod::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.TimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_timestamp(), output);
  }

  // optional int64 end_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.TimePeriod)
}

size_t TimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TimePeriod)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 start_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_timestamp());
    }

    // optional int64 end_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimePeriod::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimePeriod*>(
      &from));
}

void TimePeriod::MergeFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_timestamp_ = from.end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimePeriod::CopyFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePeriod::IsInitialized() const {
  return true;
}

void TimePeriod::InternalSwap(TimePeriod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
}

std::string TimePeriod::GetTypeName() const {
  return "enterprise_management.TimePeriod";
}


// ===================================================================

void ActiveTimePeriod::InitAsDefaultInstance() {
  ::enterprise_management::_ActiveTimePeriod_default_instance_._instance.get_mutable()->time_period_ = const_cast< ::enterprise_management::TimePeriod*>(
      ::enterprise_management::TimePeriod::internal_default_instance());
}
class ActiveTimePeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveTimePeriod>()._has_bits_);
  static const ::enterprise_management::TimePeriod& time_period(const ActiveTimePeriod* msg);
  static void set_has_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::TimePeriod&
ActiveTimePeriod::_Internal::time_period(const ActiveTimePeriod* msg) {
  return *msg->time_period_;
}
ActiveTimePeriod::ActiveTimePeriod()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveTimePeriod)
}
ActiveTimePeriod::ActiveTimePeriod(const ActiveTimePeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_email()) {
    user_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_email_);
  }
  if (from.has_time_period()) {
    time_period_ = new ::enterprise_management::TimePeriod(*from.time_period_);
  } else {
    time_period_ = nullptr;
  }
  active_duration_ = from.active_duration_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveTimePeriod)
}

void ActiveTimePeriod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto.base);
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_duration_) -
      reinterpret_cast<char*>(&time_period_)) + sizeof(active_duration_));
}

ActiveTimePeriod::~ActiveTimePeriod() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveTimePeriod)
  SharedDtor();
}

void ActiveTimePeriod::SharedDtor() {
  user_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_period_;
}

void ActiveTimePeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveTimePeriod& ActiveTimePeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveTimePeriod_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveTimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveTimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_period_ != nullptr);
      time_period_->Clear();
    }
  }
  active_duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveTimePeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.TimePeriod time_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_time_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 active_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active_duration(&has_bits);
          active_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_email(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveTimePeriod::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveTimePeriod)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.TimePeriod time_period = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_active_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_email = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveTimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveTimePeriod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveTimePeriod::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveTimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.TimePeriod time_period = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::time_period(this), output);
  }

  // optional int32 active_duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->active_duration(), output);
  }

  // optional string user_email = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_email(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveTimePeriod)
}

size_t ActiveTimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveTimePeriod)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_email = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_email());
    }

    // optional .enterprise_management.TimePeriod time_period = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_period_);
    }

    // optional int32 active_duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->active_duration());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveTimePeriod::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveTimePeriod*>(
      &from));
}

void ActiveTimePeriod::MergeFrom(const ActiveTimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveTimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      user_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_email_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_period()->::enterprise_management::TimePeriod::MergeFrom(from.time_period());
    }
    if (cached_has_bits & 0x00000004u) {
      active_duration_ = from.active_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveTimePeriod::CopyFrom(const ActiveTimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveTimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveTimePeriod::IsInitialized() const {
  return true;
}

void ActiveTimePeriod::InternalSwap(ActiveTimePeriod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_email_.Swap(&other->user_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_period_, other->time_period_);
  swap(active_duration_, other->active_duration_);
}

std::string ActiveTimePeriod::GetTypeName() const {
  return "enterprise_management.ActiveTimePeriod";
}


// ===================================================================

void NetworkInterface::InitAsDefaultInstance() {
}
class NetworkInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterface>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_meid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NetworkInterface::NetworkInterface()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.NetworkInterface)
}
NetworkInterface::NetworkInterface(const NetworkInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac_address()) {
    mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  meid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_meid()) {
    meid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meid_);
  }
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  device_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_path()) {
    device_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_path_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkInterface)
}

void NetworkInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

NetworkInterface::~NetworkInterface() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkInterface)
  SharedDtor();
}

void NetworkInterface::SharedDtor() {
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInterface& NetworkInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkInterface_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void NetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mac_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      meid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      imei_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      device_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(val))) {
            set_type(static_cast<::enterprise_management::NetworkInterface_NetworkDeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mac_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string meid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_meid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string imei = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_imei(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkInterface::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.NetworkInterface)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::NetworkInterface_NetworkDeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mac_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_meid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imei = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.NetworkInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkInterface)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkInterface::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string mac_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac_address(), output);
  }

  // optional string meid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->meid(), output);
  }

  // optional string imei = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imei(), output);
  }

  // optional string device_path = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_path(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkInterface)
}

size_t NetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkInterface)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string mac_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mac_address());
    }

    // optional string meid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->meid());
    }

    // optional string imei = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string device_path = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_path());
    }

    // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInterface::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkInterface*>(
      &from));
}

void NetworkInterface::MergeFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      meid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meid_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      device_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkInterface::CopyFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const {
  return true;
}

void NetworkInterface::InternalSwap(NetworkInterface* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  meid_.Swap(&other->meid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_path_.Swap(&other->device_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

std::string NetworkInterface::GetTypeName() const {
  return "enterprise_management.NetworkInterface";
}


// ===================================================================

void NetworkState::InitAsDefaultInstance() {
}
class NetworkState::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkState>()._has_bits_);
  static void set_has_device_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connection_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gateway(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NetworkState::NetworkState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.NetworkState)
}
NetworkState::NetworkState(const NetworkState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_path()) {
    device_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_path_);
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_address()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_gateway()) {
    gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  ::memcpy(&connection_state_, &from.connection_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkState)
}

void NetworkState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkState_device_5fmanagement_5fbackend_2eproto.base);
  device_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
}

NetworkState::~NetworkState() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkState)
  SharedDtor();
}

void NetworkState::SharedDtor() {
  device_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkState& NetworkState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkState_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void NetworkState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gateway_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&connection_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::NetworkState_ConnectionState_IsValid(val))) {
            set_connection_state(static_cast<::enterprise_management::NetworkState_ConnectionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 signal_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ip_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gateway = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_gateway(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.NetworkState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::NetworkState_ConnectionState_IsValid(value)) {
            set_connection_state(static_cast< ::enterprise_management::NetworkState_ConnectionState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_strength = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_signal_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_address = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gateway = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.NetworkState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_path(), output);
  }

  // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->connection_state(), output);
  }

  // optional int32 signal_strength = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
  }

  // optional string ip_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_address(), output);
  }

  // optional string gateway = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gateway(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkState)
}

size_t NetworkState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string device_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_path());
    }

    // optional string ip_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // optional string gateway = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->gateway());
    }

    // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->connection_state());
    }

    // optional int32 signal_strength = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkState*>(
      &from));
}

void NetworkState::MergeFrom(const NetworkState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
    }
    if (cached_has_bits & 0x00000008u) {
      connection_state_ = from.connection_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkState::CopyFrom(const NetworkState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkState::IsInitialized() const {
  return true;
}

void NetworkState::InternalSwap(NetworkState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_path_.Swap(&other->device_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_state_, other->connection_state_);
  swap(signal_strength_, other->signal_strength_);
}

std::string NetworkState::GetTypeName() const {
  return "enterprise_management.NetworkState";
}


// ===================================================================

void DeviceUser::InitAsDefaultInstance() {
}
class DeviceUser::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUser>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceUser::DeviceUser()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUser)
}
DeviceUser::DeviceUser(const DeviceUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUser)
}

void DeviceUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DeviceUser::~DeviceUser() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUser)
  SharedDtor();
}

void DeviceUser::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUser& DeviceUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUser_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceUser::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .enterprise_management.DeviceUser.UserType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceUser_UserType_IsValid(val))) {
            set_type(static_cast<::enterprise_management::DeviceUser_UserType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_email(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceUser::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUser)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enterprise_management.DeviceUser.UserType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceUser_UserType_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::DeviceUser_UserType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceUser::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .enterprise_management.DeviceUser.UserType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUser)
}

size_t DeviceUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUser)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .enterprise_management.DeviceUser.UserType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string email = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUser*>(
      &from));
}

void DeviceUser::MergeFrom(const DeviceUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceUser::CopyFrom(const DeviceUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DeviceUser::InternalSwap(DeviceUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

std::string DeviceUser::GetTypeName() const {
  return "enterprise_management.DeviceUser";
}


// ===================================================================

void VolumeInfo::InitAsDefaultInstance() {
}
class VolumeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VolumeInfo>()._has_bits_);
  static void set_has_volume_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_storage_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storage_free(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VolumeInfo::VolumeInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.VolumeInfo)
}
VolumeInfo::VolumeInfo(const VolumeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_volume_id()) {
    volume_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.volume_id_);
  }
  ::memcpy(&storage_total_, &from.storage_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_free_) -
    reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.VolumeInfo)
}

void VolumeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto.base);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_free_) -
      reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
}

VolumeInfo::~VolumeInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.VolumeInfo)
  SharedDtor();
}

void VolumeInfo::SharedDtor() {
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VolumeInfo& VolumeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VolumeInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void VolumeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.VolumeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    volume_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&storage_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&storage_free_) -
        reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VolumeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_volume_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 storage_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_storage_total(&has_bits);
          storage_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 storage_free = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_storage_free(&has_bits);
          storage_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VolumeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.VolumeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string volume_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_storage_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_free = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_storage_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.VolumeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.VolumeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VolumeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.VolumeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string volume_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->volume_id(), output);
  }

  // optional int64 storage_total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->storage_total(), output);
  }

  // optional int64 storage_free = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->storage_free(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.VolumeInfo)
}

size_t VolumeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.VolumeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string volume_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->volume_id());
    }

    // optional int64 storage_total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->storage_total());
    }

    // optional int64 storage_free = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->storage_free());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VolumeInfo*>(
      &from));
}

void VolumeInfo::MergeFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.VolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      volume_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.volume_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      storage_total_ = from.storage_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      storage_free_ = from.storage_free_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VolumeInfo::CopyFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.VolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeInfo::IsInitialized() const {
  return true;
}

void VolumeInfo::InternalSwap(VolumeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(storage_total_, other->storage_total_);
  swap(storage_free_, other->storage_free_);
}

std::string VolumeInfo::GetTypeName() const {
  return "enterprise_management.VolumeInfo";
}


// ===================================================================

void CpuUtilizationInfo::InitAsDefaultInstance() {
}
class CpuUtilizationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuUtilizationInfo>()._has_bits_);
  static void set_has_cpu_utilization_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CpuUtilizationInfo::CpuUtilizationInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CpuUtilizationInfo)
}
CpuUtilizationInfo::CpuUtilizationInfo(const CpuUtilizationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_utilization_pct_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_utilization_pct_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CpuUtilizationInfo)
}

void CpuUtilizationInfo::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_utilization_pct_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_utilization_pct_));
}

CpuUtilizationInfo::~CpuUtilizationInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CpuUtilizationInfo)
  SharedDtor();
}

void CpuUtilizationInfo::SharedDtor() {
}

void CpuUtilizationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUtilizationInfo& CpuUtilizationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUtilizationInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CpuUtilizationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CpuUtilizationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_utilization_pct_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_utilization_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuUtilizationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cpu_utilization_pct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu_utilization_pct(&has_bits);
          cpu_utilization_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuUtilizationInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CpuUtilizationInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cpu_utilization_pct = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cpu_utilization_pct(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_utilization_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CpuUtilizationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CpuUtilizationInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuUtilizationInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CpuUtilizationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cpu_utilization_pct = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cpu_utilization_pct(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CpuUtilizationInfo)
}

size_t CpuUtilizationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CpuUtilizationInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 cpu_utilization_pct = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cpu_utilization_pct());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUtilizationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuUtilizationInfo*>(
      &from));
}

void CpuUtilizationInfo::MergeFrom(const CpuUtilizationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CpuUtilizationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_utilization_pct_ = from.cpu_utilization_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuUtilizationInfo::CopyFrom(const CpuUtilizationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CpuUtilizationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUtilizationInfo::IsInitialized() const {
  return true;
}

void CpuUtilizationInfo::InternalSwap(CpuUtilizationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(cpu_utilization_pct_, other->cpu_utilization_pct_);
}

std::string CpuUtilizationInfo::GetTypeName() const {
  return "enterprise_management.CpuUtilizationInfo";
}


// ===================================================================

void SystemFreeRamInfo::InitAsDefaultInstance() {
}
class SystemFreeRamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemFreeRamInfo>()._has_bits_);
  static void set_has_size_in_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SystemFreeRamInfo::SystemFreeRamInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SystemFreeRamInfo)
}
SystemFreeRamInfo::SystemFreeRamInfo(const SystemFreeRamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_in_bytes_, &from.size_in_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&size_in_bytes_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemFreeRamInfo)
}

void SystemFreeRamInfo::SharedCtor() {
  ::memset(&size_in_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&size_in_bytes_)) + sizeof(timestamp_));
}

SystemFreeRamInfo::~SystemFreeRamInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemFreeRamInfo)
  SharedDtor();
}

void SystemFreeRamInfo::SharedDtor() {
}

void SystemFreeRamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemFreeRamInfo& SystemFreeRamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemFreeRamInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SystemFreeRamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemFreeRamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&size_in_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&size_in_bytes_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemFreeRamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 size_in_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size_in_bytes(&has_bits);
          size_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemFreeRamInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SystemFreeRamInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 size_in_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_size_in_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_in_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SystemFreeRamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SystemFreeRamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemFreeRamInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SystemFreeRamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 size_in_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->size_in_bytes(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SystemFreeRamInfo)
}

size_t SystemFreeRamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemFreeRamInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 size_in_bytes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->size_in_bytes());
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemFreeRamInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemFreeRamInfo*>(
      &from));
}

void SystemFreeRamInfo::MergeFrom(const SystemFreeRamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemFreeRamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_in_bytes_ = from.size_in_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemFreeRamInfo::CopyFrom(const SystemFreeRamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemFreeRamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemFreeRamInfo::IsInitialized() const {
  return true;
}

void SystemFreeRamInfo::InternalSwap(SystemFreeRamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_in_bytes_, other->size_in_bytes_);
  swap(timestamp_, other->timestamp_);
}

std::string SystemFreeRamInfo::GetTypeName() const {
  return "enterprise_management.SystemFreeRamInfo";
}


// ===================================================================

void CPUTempInfo::InitAsDefaultInstance() {
}
class CPUTempInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPUTempInfo>()._has_bits_);
  static void set_has_cpu_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpu_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPUTempInfo::CPUTempInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CPUTempInfo)
}
CPUTempInfo::CPUTempInfo(const CPUTempInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cpu_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpu_label()) {
    cpu_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_label_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_temp_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_temp_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CPUTempInfo)
}

void CPUTempInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto.base);
  cpu_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_temp_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_temp_));
}

CPUTempInfo::~CPUTempInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CPUTempInfo)
  SharedDtor();
}

void CPUTempInfo::SharedDtor() {
  cpu_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUTempInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPUTempInfo& CPUTempInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPUTempInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CPUTempInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CPUTempInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cpu_label_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_temp_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(cpu_temp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPUTempInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cpu_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cpu_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cpu_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cpu_temp(&has_bits);
          cpu_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPUTempInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CPUTempInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cpu_label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cpu_temp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cpu_temp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CPUTempInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CPUTempInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPUTempInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CPUTempInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cpu_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cpu_label(), output);
  }

  // optional int32 cpu_temp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cpu_temp(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CPUTempInfo)
}

size_t CPUTempInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CPUTempInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string cpu_label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cpu_label());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 cpu_temp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cpu_temp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPUTempInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CPUTempInfo*>(
      &from));
}

void CPUTempInfo::MergeFrom(const CPUTempInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CPUTempInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cpu_label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      cpu_temp_ = from.cpu_temp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPUTempInfo::CopyFrom(const CPUTempInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CPUTempInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUTempInfo::IsInitialized() const {
  return true;
}

void CPUTempInfo::InternalSwap(CPUTempInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cpu_label_.Swap(&other->cpu_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(cpu_temp_, other->cpu_temp_);
}

std::string CPUTempInfo::GetTypeName() const {
  return "enterprise_management.CPUTempInfo";
}


// ===================================================================

void StatefulPartitionInfo::InitAsDefaultInstance() {
}
class StatefulPartitionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<StatefulPartitionInfo>()._has_bits_);
  static void set_has_available_space(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StatefulPartitionInfo::StatefulPartitionInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.StatefulPartitionInfo)
}
StatefulPartitionInfo::StatefulPartitionInfo(const StatefulPartitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&available_space_, &from.available_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_space_) -
    reinterpret_cast<char*>(&available_space_)) + sizeof(total_space_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StatefulPartitionInfo)
}

void StatefulPartitionInfo::SharedCtor() {
  ::memset(&available_space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_space_) -
      reinterpret_cast<char*>(&available_space_)) + sizeof(total_space_));
}

StatefulPartitionInfo::~StatefulPartitionInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.StatefulPartitionInfo)
  SharedDtor();
}

void StatefulPartitionInfo::SharedDtor() {
}

void StatefulPartitionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatefulPartitionInfo& StatefulPartitionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatefulPartitionInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void StatefulPartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StatefulPartitionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&available_space_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_space_) -
        reinterpret_cast<char*>(&available_space_)) + sizeof(total_space_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatefulPartitionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 available_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_available_space(&has_bits);
          available_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_space(&has_bits);
          total_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatefulPartitionInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.StatefulPartitionInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 available_space = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_available_space(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_space = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_space(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.StatefulPartitionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.StatefulPartitionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatefulPartitionInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.StatefulPartitionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 available_space = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->available_space(), output);
  }

  // optional int64 total_space = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->total_space(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.StatefulPartitionInfo)
}

size_t StatefulPartitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StatefulPartitionInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 available_space = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->available_space());
    }

    // optional int64 total_space = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_space());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatefulPartitionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatefulPartitionInfo*>(
      &from));
}

void StatefulPartitionInfo::MergeFrom(const StatefulPartitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StatefulPartitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      available_space_ = from.available_space_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_space_ = from.total_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatefulPartitionInfo::CopyFrom(const StatefulPartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StatefulPartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatefulPartitionInfo::IsInitialized() const {
  return true;
}

void StatefulPartitionInfo::InternalSwap(StatefulPartitionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_space_, other->available_space_);
  swap(total_space_, other->total_space_);
}

std::string StatefulPartitionInfo::GetTypeName() const {
  return "enterprise_management.StatefulPartitionInfo";
}


// ===================================================================

void BatterySample::InitAsDefaultInstance() {
}
class BatterySample::_Internal {
 public:
  using HasBits = decltype(std::declval<BatterySample>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remaining_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discharge_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_charge_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BatterySample::BatterySample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BatterySample)
}
BatterySample::BatterySample(const BatterySample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&charge_rate_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(charge_rate_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BatterySample)
}

void BatterySample::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charge_rate_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(charge_rate_));
}

BatterySample::~BatterySample() {
  // @@protoc_insertion_point(destructor:enterprise_management.BatterySample)
  SharedDtor();
}

void BatterySample::SharedDtor() {
}

void BatterySample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatterySample& BatterySample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatterySample_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void BatterySample::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BatterySample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&charge_rate_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(charge_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatterySample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_voltage(&has_bits);
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 remaining_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remaining_capacity(&has_bits);
          remaining_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 discharge_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_discharge_rate(&has_bits);
          discharge_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 charge_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_charge_rate(&has_bits);
          charge_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatterySample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BatterySample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 voltage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 remaining_capacity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_remaining_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaining_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 temperature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_temperature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 discharge_rate = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_discharge_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &discharge_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 charge_rate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_charge_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BatterySample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BatterySample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatterySample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BatterySample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int64 voltage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->voltage(), output);
  }

  // optional int64 remaining_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->remaining_capacity(), output);
  }

  // optional int32 temperature = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->temperature(), output);
  }

  // optional int32 discharge_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->discharge_rate(), output);
  }

  // optional int32 charge_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->charge_rate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BatterySample)
}

size_t BatterySample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BatterySample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 voltage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->voltage());
    }

    // optional int64 remaining_capacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->remaining_capacity());
    }

    // optional int32 temperature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->temperature());
    }

    // optional int32 discharge_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->discharge_rate());
    }

    // optional int32 charge_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->charge_rate());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatterySample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BatterySample*>(
      &from));
}

void BatterySample::MergeFrom(const BatterySample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BatterySample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      voltage_ = from.voltage_;
    }
    if (cached_has_bits & 0x00000004u) {
      remaining_capacity_ = from.remaining_capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000010u) {
      discharge_rate_ = from.discharge_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      charge_rate_ = from.charge_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatterySample::CopyFrom(const BatterySample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BatterySample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatterySample::IsInitialized() const {
  return true;
}

void BatterySample::InternalSwap(BatterySample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(voltage_, other->voltage_);
  swap(remaining_capacity_, other->remaining_capacity_);
  swap(temperature_, other->temperature_);
  swap(discharge_rate_, other->discharge_rate_);
  swap(charge_rate_, other->charge_rate_);
}

std::string BatterySample::GetTypeName() const {
  return "enterprise_management.BatterySample";
}


// ===================================================================

void BatteryInfo::InitAsDefaultInstance() {
}
class BatteryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryInfo>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battery_health(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_design_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_full_charge_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cycle_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_design_min_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manufacture_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BatteryInfo::BatteryInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BatteryInfo)
}
BatteryInfo::BatteryInfo(const BatteryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial()) {
    serial_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  battery_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_battery_health()) {
    battery_health_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battery_health_);
  }
  manufacture_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacture_date()) {
    manufacture_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  ::memcpy(&design_capacity_, &from.design_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&design_min_voltage_) -
    reinterpret_cast<char*>(&design_capacity_)) + sizeof(design_min_voltage_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BatteryInfo)
}

void BatteryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto.base);
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battery_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&design_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&design_min_voltage_) -
      reinterpret_cast<char*>(&design_capacity_)) + sizeof(design_min_voltage_));
}

BatteryInfo::~BatteryInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.BatteryInfo)
  SharedDtor();
}

void BatteryInfo::SharedDtor() {
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battery_health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatteryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryInfo& BatteryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void BatteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BatteryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      serial_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      battery_health_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      manufacture_date_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&design_capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&design_min_voltage_) -
        reinterpret_cast<char*>(&design_capacity_)) + sizeof(design_min_voltage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatteryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serial(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_manufacturer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battery_health = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_battery_health(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 design_capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_design_capacity(&has_bits);
          design_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 full_charge_capacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_full_charge_capacity(&has_bits);
          full_charge_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cycle_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cycle_count(&has_bits);
          cycle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.BatterySample samples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int32 design_min_voltage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_design_min_voltage(&has_bits);
          design_min_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacture_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_manufacture_date(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatteryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BatteryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string battery_health = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_battery_health()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 design_capacity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_design_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &design_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 full_charge_capacity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_full_charge_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_charge_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cycle_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_cycle_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.BatterySample samples = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 design_min_voltage = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_design_min_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_min_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacture_date = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BatteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BatteryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatteryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BatteryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional string manufacturer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // optional string battery_health = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->battery_health(), output);
  }

  // optional int64 design_capacity = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->design_capacity(), output);
  }

  // optional int64 full_charge_capacity = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->full_charge_capacity(), output);
  }

  // optional int32 cycle_count = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->cycle_count(), output);
  }

  // repeated .enterprise_management.BatterySample samples = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->samples(static_cast<int>(i)),
      output);
  }

  // optional int32 design_min_voltage = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->design_min_voltage(), output);
  }

  // optional string manufacture_date = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->manufacture_date(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BatteryInfo)
}

size_t BatteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BatteryInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.BatterySample samples = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string serial = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // optional string manufacturer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string battery_health = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->battery_health());
    }

    // optional string manufacture_date = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->manufacture_date());
    }

    // optional int64 design_capacity = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->design_capacity());
    }

    // optional int64 full_charge_capacity = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->full_charge_capacity());
    }

    // optional int32 cycle_count = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cycle_count());
    }

    // optional int32 design_min_voltage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->design_min_voltage());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BatteryInfo*>(
      &from));
}

void BatteryInfo::MergeFrom(const BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BatteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serial_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      battery_health_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battery_health_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      manufacture_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
    }
    if (cached_has_bits & 0x00000010u) {
      design_capacity_ = from.design_capacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      full_charge_capacity_ = from.full_charge_capacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      cycle_count_ = from.cycle_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      design_min_voltage_ = from.design_min_voltage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatteryInfo::CopyFrom(const BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BatteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryInfo::IsInitialized() const {
  return true;
}

void BatteryInfo::InternalSwap(BatteryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  serial_.Swap(&other->serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battery_health_.Swap(&other->battery_health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacture_date_.Swap(&other->manufacture_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(design_capacity_, other->design_capacity_);
  swap(full_charge_capacity_, other->full_charge_capacity_);
  swap(cycle_count_, other->cycle_count_);
  swap(design_min_voltage_, other->design_min_voltage_);
}

std::string BatteryInfo::GetTypeName() const {
  return "enterprise_management.BatteryInfo";
}


// ===================================================================

void PowerStatus::InitAsDefaultInstance() {
}
class PowerStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerStatus>()._has_bits_);
  static void set_has_power_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerStatus::PowerStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PowerStatus)
}
PowerStatus::PowerStatus(const PowerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      batteries_(from.batteries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  power_source_ = from.power_source_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PowerStatus)
}

void PowerStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto.base);
  power_source_ = 0;
}

PowerStatus::~PowerStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.PowerStatus)
  SharedDtor();
}

void PowerStatus::SharedDtor() {
}

void PowerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerStatus& PowerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PowerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PowerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batteries_.Clear();
  power_source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PowerStatus.PowerSource power_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PowerStatus_PowerSource_IsValid(val))) {
            set_power_source(static_cast<::enterprise_management::PowerStatus_PowerSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.BatteryInfo batteries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_batteries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PowerStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PowerStatus.PowerSource power_source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PowerStatus_PowerSource_IsValid(value)) {
            set_power_source(static_cast< ::enterprise_management::PowerStatus_PowerSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.BatteryInfo batteries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_batteries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PowerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PowerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PowerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PowerStatus.PowerSource power_source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->power_source(), output);
  }

  // repeated .enterprise_management.BatteryInfo batteries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batteries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->batteries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PowerStatus)
}

size_t PowerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PowerStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.BatteryInfo batteries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->batteries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->batteries(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.PowerStatus.PowerSource power_source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->power_source());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerStatus*>(
      &from));
}

void PowerStatus::MergeFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PowerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batteries_.MergeFrom(from.batteries_);
  if (from.has_power_source()) {
    set_power_source(from.power_source());
  }
}

void PowerStatus::CopyFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PowerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStatus::IsInitialized() const {
  return true;
}

void PowerStatus::InternalSwap(PowerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&batteries_)->InternalSwap(CastToBase(&other->batteries_));
  swap(power_source_, other->power_source_);
}

std::string PowerStatus::GetTypeName() const {
  return "enterprise_management.PowerStatus";
}


// ===================================================================

void DiskLifetimeEstimation::InitAsDefaultInstance() {
}
class DiskLifetimeEstimation::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskLifetimeEstimation>()._has_bits_);
  static void set_has_slc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mlc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DiskLifetimeEstimation::DiskLifetimeEstimation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DiskLifetimeEstimation)
}
DiskLifetimeEstimation::DiskLifetimeEstimation(const DiskLifetimeEstimation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slc_, &from.slc_,
    static_cast<size_t>(reinterpret_cast<char*>(&mlc_) -
    reinterpret_cast<char*>(&slc_)) + sizeof(mlc_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DiskLifetimeEstimation)
}

void DiskLifetimeEstimation::SharedCtor() {
  ::memset(&slc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mlc_) -
      reinterpret_cast<char*>(&slc_)) + sizeof(mlc_));
}

DiskLifetimeEstimation::~DiskLifetimeEstimation() {
  // @@protoc_insertion_point(destructor:enterprise_management.DiskLifetimeEstimation)
  SharedDtor();
}

void DiskLifetimeEstimation::SharedDtor() {
}

void DiskLifetimeEstimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskLifetimeEstimation& DiskLifetimeEstimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskLifetimeEstimation_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DiskLifetimeEstimation::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DiskLifetimeEstimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&slc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mlc_) -
        reinterpret_cast<char*>(&slc_)) + sizeof(mlc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskLifetimeEstimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 slc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slc(&has_bits);
          slc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mlc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mlc(&has_bits);
          mlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskLifetimeEstimation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DiskLifetimeEstimation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_slc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &slc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mlc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mlc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mlc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DiskLifetimeEstimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DiskLifetimeEstimation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskLifetimeEstimation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DiskLifetimeEstimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->slc(), output);
  }

  // optional int32 mlc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mlc(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DiskLifetimeEstimation)
}

size_t DiskLifetimeEstimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DiskLifetimeEstimation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 slc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->slc());
    }

    // optional int32 mlc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mlc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskLifetimeEstimation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskLifetimeEstimation*>(
      &from));
}

void DiskLifetimeEstimation::MergeFrom(const DiskLifetimeEstimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DiskLifetimeEstimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slc_ = from.slc_;
    }
    if (cached_has_bits & 0x00000002u) {
      mlc_ = from.mlc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskLifetimeEstimation::CopyFrom(const DiskLifetimeEstimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DiskLifetimeEstimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskLifetimeEstimation::IsInitialized() const {
  return true;
}

void DiskLifetimeEstimation::InternalSwap(DiskLifetimeEstimation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slc_, other->slc_);
  swap(mlc_, other->mlc_);
}

std::string DiskLifetimeEstimation::GetTypeName() const {
  return "enterprise_management.DiskLifetimeEstimation";
}


// ===================================================================

void DiskInfo::InitAsDefaultInstance() {
}
class DiskInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskInfo>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DiskInfo::DiskInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DiskInfo)
}
DiskInfo::DiskInfo(const DiskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial()) {
    serial_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_health()) {
    health_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.health_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DiskInfo)
}

void DiskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto.base);
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_LONGLONG(0);
}

DiskInfo::~DiskInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.DiskInfo)
  SharedDtor();
}

void DiskInfo::SharedDtor() {
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskInfo& DiskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DiskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DiskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      serial_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      health_.ClearNonDefaultToEmptyNoArena();
    }
  }
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serial(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_manufacturer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_model(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string health = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_health(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string volumes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_volumes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DiskInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string health = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_health()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string volumes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_volumes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DiskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DiskInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DiskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional string manufacturer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // optional string model = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional int64 size = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->size(), output);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional string health = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->health(), output);
  }

  // repeated string volumes = 7;
  for (int i = 0, n = this->volumes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->volumes(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DiskInfo)
}

size_t DiskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DiskInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string volumes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->volumes_size());
  for (int i = 0, n = this->volumes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->volumes(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string serial = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // optional string manufacturer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string health = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->health());
    }

    // optional int64 size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskInfo*>(
      &from));
}

void DiskInfo::MergeFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DiskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serial_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      health_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.health_);
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DiskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  return true;
}

void DiskInfo::InternalSwap(DiskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  volumes_.InternalSwap(CastToBase(&other->volumes_));
  serial_.Swap(&other->serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

std::string DiskInfo::GetTypeName() const {
  return "enterprise_management.DiskInfo";
}


// ===================================================================

void StorageStatus::InitAsDefaultInstance() {
  ::enterprise_management::_StorageStatus_default_instance_._instance.get_mutable()->lifetime_estimation_ = const_cast< ::enterprise_management::DiskLifetimeEstimation*>(
      ::enterprise_management::DiskLifetimeEstimation::internal_default_instance());
}
class StorageStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageStatus>()._has_bits_);
  static const ::enterprise_management::DiskLifetimeEstimation& lifetime_estimation(const StorageStatus* msg);
  static void set_has_lifetime_estimation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::DiskLifetimeEstimation&
StorageStatus::_Internal::lifetime_estimation(const StorageStatus* msg) {
  return *msg->lifetime_estimation_;
}
StorageStatus::StorageStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.StorageStatus)
}
StorageStatus::StorageStatus(const StorageStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disks_(from.disks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lifetime_estimation()) {
    lifetime_estimation_ = new ::enterprise_management::DiskLifetimeEstimation(*from.lifetime_estimation_);
  } else {
    lifetime_estimation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StorageStatus)
}

void StorageStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto.base);
  lifetime_estimation_ = nullptr;
}

StorageStatus::~StorageStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.StorageStatus)
  SharedDtor();
}

void StorageStatus::SharedDtor() {
  if (this != internal_default_instance()) delete lifetime_estimation_;
}

void StorageStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageStatus& StorageStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void StorageStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StorageStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lifetime_estimation_ != nullptr);
    lifetime_estimation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StorageStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.DiskInfo disks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_disks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DiskLifetimeEstimation lifetime_estimation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lifetime_estimation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StorageStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.StorageStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.DiskInfo disks = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_disks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DiskLifetimeEstimation lifetime_estimation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lifetime_estimation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.StorageStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.StorageStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StorageStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.StorageStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.DiskInfo disks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->disks(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DiskLifetimeEstimation lifetime_estimation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::lifetime_estimation(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.StorageStatus)
}

size_t StorageStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StorageStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.DiskInfo disks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->disks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->disks(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.DiskLifetimeEstimation lifetime_estimation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_estimation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StorageStatus*>(
      &from));
}

void StorageStatus::MergeFrom(const StorageStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StorageStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disks_.MergeFrom(from.disks_);
  if (from.has_lifetime_estimation()) {
    mutable_lifetime_estimation()->::enterprise_management::DiskLifetimeEstimation::MergeFrom(from.lifetime_estimation());
  }
}

void StorageStatus::CopyFrom(const StorageStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StorageStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageStatus::IsInitialized() const {
  return true;
}

void StorageStatus::InternalSwap(StorageStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&disks_)->InternalSwap(CastToBase(&other->disks_));
  swap(lifetime_estimation_, other->lifetime_estimation_);
}

std::string StorageStatus::GetTypeName() const {
  return "enterprise_management.StorageStatus";
}


// ===================================================================

void ThermalSample::InitAsDefaultInstance() {
}
class ThermalSample::_Internal {
 public:
  using HasBits = decltype(std::declval<ThermalSample>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ThermalSample::ThermalSample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ThermalSample)
}
ThermalSample::ThermalSample(const ThermalSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(temperature_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ThermalSample)
}

void ThermalSample::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(temperature_));
}

ThermalSample::~ThermalSample() {
  // @@protoc_insertion_point(destructor:enterprise_management.ThermalSample)
  SharedDtor();
}

void ThermalSample::SharedDtor() {
}

void ThermalSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalSample& ThermalSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalSample_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ThermalSample::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ThermalSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temperature_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(temperature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThermalSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThermalSample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ThermalSample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 temperature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_temperature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ThermalSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ThermalSample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThermalSample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ThermalSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->temperature(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ThermalSample)
}

size_t ThermalSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ThermalSample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->temperature());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ThermalSample*>(
      &from));
}

void ThermalSample::MergeFrom(const ThermalSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ThermalSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThermalSample::CopyFrom(const ThermalSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ThermalSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalSample::IsInitialized() const {
  return true;
}

void ThermalSample::InternalSwap(ThermalSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(temperature_, other->temperature_);
}

std::string ThermalSample::GetTypeName() const {
  return "enterprise_management.ThermalSample";
}


// ===================================================================

void ThermalInfo::InitAsDefaultInstance() {
}
class ThermalInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ThermalInfo>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThermalInfo::ThermalInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ThermalInfo)
}
ThermalInfo::ThermalInfo(const ThermalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ThermalInfo)
}

void ThermalInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ThermalInfo::~ThermalInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.ThermalInfo)
  SharedDtor();
}

void ThermalInfo::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThermalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalInfo& ThermalInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ThermalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ThermalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThermalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ThermalSample samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThermalInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ThermalInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ThermalSample samples = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ThermalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ThermalInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThermalInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ThermalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // repeated .enterprise_management.ThermalSample samples = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->samples(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ThermalInfo)
}

size_t ThermalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ThermalInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ThermalSample samples = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  // optional string label = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->label());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ThermalInfo*>(
      &from));
}

void ThermalInfo::MergeFrom(const ThermalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ThermalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  if (from.has_label()) {
    _has_bits_[0] |= 0x00000001u;
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
}

void ThermalInfo::CopyFrom(const ThermalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ThermalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalInfo::IsInitialized() const {
  return true;
}

void ThermalInfo::InternalSwap(ThermalInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ThermalInfo::GetTypeName() const {
  return "enterprise_management.ThermalInfo";
}


// ===================================================================

void BoardStatus::InitAsDefaultInstance() {
}
class BoardStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<BoardStatus>()._has_bits_);
};

BoardStatus::BoardStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BoardStatus)
}
BoardStatus::BoardStatus(const BoardStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      thermal_infos_(from.thermal_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BoardStatus)
}

void BoardStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto.base);
}

BoardStatus::~BoardStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.BoardStatus)
  SharedDtor();
}

void BoardStatus::SharedDtor() {
}

void BoardStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoardStatus& BoardStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoardStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void BoardStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BoardStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thermal_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoardStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.ThermalInfo thermal_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_thermal_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoardStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BoardStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.ThermalInfo thermal_infos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_thermal_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BoardStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BoardStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoardStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BoardStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.ThermalInfo thermal_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thermal_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->thermal_infos(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BoardStatus)
}

size_t BoardStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BoardStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ThermalInfo thermal_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->thermal_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->thermal_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoardStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoardStatus*>(
      &from));
}

void BoardStatus::MergeFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BoardStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thermal_infos_.MergeFrom(from.thermal_infos_);
}

void BoardStatus::CopyFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BoardStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStatus::IsInitialized() const {
  return true;
}

void BoardStatus::InternalSwap(BoardStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&thermal_infos_)->InternalSwap(CastToBase(&other->thermal_infos_));
}

std::string BoardStatus::GetTypeName() const {
  return "enterprise_management.BoardStatus";
}


// ===================================================================

void SystemStatus::InitAsDefaultInstance() {
}
class SystemStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemStatus>()._has_bits_);
  static void set_has_vpd_sku_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SystemStatus::SystemStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SystemStatus)
}
SystemStatus::SystemStatus(const SystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vpd_sku_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_vpd_sku_number()) {
    vpd_sku_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vpd_sku_number_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemStatus)
}

void SystemStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto.base);
  vpd_sku_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SystemStatus::~SystemStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemStatus)
  SharedDtor();
}

void SystemStatus::SharedDtor() {
  vpd_sku_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemStatus& SystemStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vpd_sku_number_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string vpd_sku_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vpd_sku_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SystemStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vpd_sku_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vpd_sku_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SystemStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SystemStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SystemStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vpd_sku_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vpd_sku_number(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SystemStatus)
}

size_t SystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vpd_sku_number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->vpd_sku_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemStatus*>(
      &from));
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vpd_sku_number()) {
    _has_bits_[0] |= 0x00000001u;
    vpd_sku_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vpd_sku_number_);
  }
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {
  return true;
}

void SystemStatus::InternalSwap(SystemStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vpd_sku_number_.Swap(&other->vpd_sku_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SystemStatus::GetTypeName() const {
  return "enterprise_management.SystemStatus";
}


// ===================================================================

void CpuInfo::InitAsDefaultInstance() {
}
class CpuInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfo>()._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_architecture(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_clock_speed_khz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CpuInfo::CpuInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CpuInfo)
}
CpuInfo::CpuInfo(const CpuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  ::memcpy(&architecture_, &from.architecture_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_clock_speed_khz_) -
    reinterpret_cast<char*>(&architecture_)) + sizeof(max_clock_speed_khz_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CpuInfo)
}

void CpuInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&architecture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_clock_speed_khz_) -
      reinterpret_cast<char*>(&architecture_)) + sizeof(max_clock_speed_khz_));
}

CpuInfo::~CpuInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CpuInfo)
  SharedDtor();
}

void CpuInfo::SharedDtor() {
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CpuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfo& CpuInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CpuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&architecture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_clock_speed_khz_) -
        reinterpret_cast<char*>(&architecture_)) + sizeof(max_clock_speed_khz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_model_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CpuInfo.Architecture architecture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::CpuInfo_Architecture_IsValid(val))) {
            set_architecture(static_cast<::enterprise_management::CpuInfo_Architecture>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 max_clock_speed_khz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_clock_speed_khz(&has_bits);
          max_clock_speed_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CpuInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CpuInfo.Architecture architecture = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CpuInfo_Architecture_IsValid(value)) {
            set_architecture(static_cast< ::enterprise_management::CpuInfo_Architecture >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_clock_speed_khz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_clock_speed_khz(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_clock_speed_khz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CpuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CpuInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional .enterprise_management.CpuInfo.Architecture architecture = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->architecture(), output);
  }

  // optional uint32 max_clock_speed_khz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->max_clock_speed_khz(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CpuInfo)
}

size_t CpuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CpuInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional .enterprise_management.CpuInfo.Architecture architecture = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->architecture());
    }

    // optional uint32 max_clock_speed_khz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_clock_speed_khz());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfo*>(
      &from));
}

void CpuInfo::MergeFrom(const CpuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CpuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      architecture_ = from.architecture_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_clock_speed_khz_ = from.max_clock_speed_khz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuInfo::CopyFrom(const CpuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfo::IsInitialized() const {
  return true;
}

void CpuInfo::InternalSwap(CpuInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(architecture_, other->architecture_);
  swap(max_clock_speed_khz_, other->max_clock_speed_khz_);
}

std::string CpuInfo::GetTypeName() const {
  return "enterprise_management.CpuInfo";
}


// ===================================================================

void DisplayInfo::InitAsDefaultInstance() {
}
class DisplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayInfo>()._has_bits_);
  static void set_has_resolution_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resolution_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_refresh_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DisplayInfo::DisplayInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DisplayInfo)
}
DisplayInfo::DisplayInfo(const DisplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resolution_width_, &from.resolution_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_internal_) -
    reinterpret_cast<char*>(&resolution_width_)) + sizeof(is_internal_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DisplayInfo)
}

void DisplayInfo::SharedCtor() {
  ::memset(&resolution_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_internal_) -
      reinterpret_cast<char*>(&resolution_width_)) + sizeof(is_internal_));
}

DisplayInfo::~DisplayInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.DisplayInfo)
  SharedDtor();
}

void DisplayInfo::SharedDtor() {
}

void DisplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayInfo& DisplayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&resolution_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_internal_) -
        reinterpret_cast<char*>(&resolution_width_)) + sizeof(is_internal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 resolution_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_resolution_width(&has_bits);
          resolution_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resolution_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_resolution_height(&has_bits);
          resolution_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 refresh_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_refresh_rate(&has_bits);
          refresh_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_internal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_internal(&has_bits);
          is_internal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DisplayInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resolution_width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_resolution_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resolution_height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_resolution_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 refresh_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_refresh_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_internal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_internal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DisplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DisplayInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 resolution_width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->resolution_width(), output);
  }

  // optional uint32 resolution_height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->resolution_height(), output);
  }

  // optional uint32 refresh_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->refresh_rate(), output);
  }

  // optional bool is_internal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_internal(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DisplayInfo)
}

size_t DisplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DisplayInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 resolution_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->resolution_width());
    }

    // optional uint32 resolution_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->resolution_height());
    }

    // optional uint32 refresh_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->refresh_rate());
    }

    // optional bool is_internal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayInfo*>(
      &from));
}

void DisplayInfo::MergeFrom(const DisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      resolution_width_ = from.resolution_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      resolution_height_ = from.resolution_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      refresh_rate_ = from.refresh_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_internal_ = from.is_internal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayInfo::CopyFrom(const DisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayInfo::IsInitialized() const {
  return true;
}

void DisplayInfo::InternalSwap(DisplayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(resolution_width_, other->resolution_width_);
  swap(resolution_height_, other->resolution_height_);
  swap(refresh_rate_, other->refresh_rate_);
  swap(is_internal_, other->is_internal_);
}

std::string DisplayInfo::GetTypeName() const {
  return "enterprise_management.DisplayInfo";
}


// ===================================================================

void GraphicsAdapterInfo::InitAsDefaultInstance() {
}
class GraphicsAdapterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsAdapterInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_system_ram_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GraphicsAdapterInfo::GraphicsAdapterInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GraphicsAdapterInfo)
}
GraphicsAdapterInfo::GraphicsAdapterInfo(const GraphicsAdapterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  driver_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_version()) {
    driver_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_ram_usage_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(system_ram_usage_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GraphicsAdapterInfo)
}

void GraphicsAdapterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_ram_usage_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(system_ram_usage_));
}

GraphicsAdapterInfo::~GraphicsAdapterInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.GraphicsAdapterInfo)
  SharedDtor();
}

void GraphicsAdapterInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphicsAdapterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphicsAdapterInfo& GraphicsAdapterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphicsAdapterInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void GraphicsAdapterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GraphicsAdapterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      driver_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_ram_usage_) -
        reinterpret_cast<char*>(&device_id_)) + sizeof(system_ram_usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphicsAdapterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string driver_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_driver_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 system_ram_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_system_ram_usage(&has_bits);
          system_ram_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphicsAdapterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GraphicsAdapterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 device_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_device_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 system_ram_usage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_system_ram_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_ram_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GraphicsAdapterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GraphicsAdapterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphicsAdapterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GraphicsAdapterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string driver_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->driver_version(), output);
  }

  // optional uint64 device_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->device_id(), output);
  }

  // optional uint64 system_ram_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->system_ram_usage(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GraphicsAdapterInfo)
}

size_t GraphicsAdapterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GraphicsAdapterInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string driver_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->driver_version());
    }

    // optional uint64 device_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->device_id());
    }

    // optional uint64 system_ram_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->system_ram_usage());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsAdapterInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphicsAdapterInfo*>(
      &from));
}

void GraphicsAdapterInfo::MergeFrom(const GraphicsAdapterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GraphicsAdapterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      driver_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_ram_usage_ = from.system_ram_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GraphicsAdapterInfo::CopyFrom(const GraphicsAdapterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GraphicsAdapterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsAdapterInfo::IsInitialized() const {
  return true;
}

void GraphicsAdapterInfo::InternalSwap(GraphicsAdapterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  driver_version_.Swap(&other->driver_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_id_, other->device_id_);
  swap(system_ram_usage_, other->system_ram_usage_);
}

std::string GraphicsAdapterInfo::GetTypeName() const {
  return "enterprise_management.GraphicsAdapterInfo";
}


// ===================================================================

void GraphicsStatus::InitAsDefaultInstance() {
  ::enterprise_management::_GraphicsStatus_default_instance_._instance.get_mutable()->adapter_ = const_cast< ::enterprise_management::GraphicsAdapterInfo*>(
      ::enterprise_management::GraphicsAdapterInfo::internal_default_instance());
}
class GraphicsStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsStatus>()._has_bits_);
  static const ::enterprise_management::GraphicsAdapterInfo& adapter(const GraphicsStatus* msg);
  static void set_has_adapter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::GraphicsAdapterInfo&
GraphicsStatus::_Internal::adapter(const GraphicsStatus* msg) {
  return *msg->adapter_;
}
GraphicsStatus::GraphicsStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GraphicsStatus)
}
GraphicsStatus::GraphicsStatus(const GraphicsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      displays_(from.displays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_adapter()) {
    adapter_ = new ::enterprise_management::GraphicsAdapterInfo(*from.adapter_);
  } else {
    adapter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GraphicsStatus)
}

void GraphicsStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto.base);
  adapter_ = nullptr;
}

GraphicsStatus::~GraphicsStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.GraphicsStatus)
  SharedDtor();
}

void GraphicsStatus::SharedDtor() {
  if (this != internal_default_instance()) delete adapter_;
}

void GraphicsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphicsStatus& GraphicsStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphicsStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void GraphicsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GraphicsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  displays_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(adapter_ != nullptr);
    adapter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphicsStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.GraphicsAdapterInfo adapter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_adapter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.DisplayInfo displays = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_displays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphicsStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GraphicsStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.GraphicsAdapterInfo adapter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adapter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.DisplayInfo displays = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_displays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GraphicsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GraphicsStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphicsStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GraphicsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.GraphicsAdapterInfo adapter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::adapter(this), output);
  }

  // repeated .enterprise_management.DisplayInfo displays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->displays_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->displays(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GraphicsStatus)
}

size_t GraphicsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GraphicsStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.DisplayInfo displays = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->displays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->displays(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.GraphicsAdapterInfo adapter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adapter_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphicsStatus*>(
      &from));
}

void GraphicsStatus::MergeFrom(const GraphicsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GraphicsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  displays_.MergeFrom(from.displays_);
  if (from.has_adapter()) {
    mutable_adapter()->::enterprise_management::GraphicsAdapterInfo::MergeFrom(from.adapter());
  }
}

void GraphicsStatus::CopyFrom(const GraphicsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GraphicsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsStatus::IsInitialized() const {
  return true;
}

void GraphicsStatus::InternalSwap(GraphicsStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&displays_)->InternalSwap(CastToBase(&other->displays_));
  swap(adapter_, other->adapter_);
}

std::string GraphicsStatus::GetTypeName() const {
  return "enterprise_management.GraphicsStatus";
}


// ===================================================================

void CrashReportInfo::InitAsDefaultInstance() {
}
class CrashReportInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CrashReportInfo>()._has_bits_);
  static void set_has_remote_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_capture_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CrashReportInfo::CrashReportInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CrashReportInfo)
}
CrashReportInfo::CrashReportInfo(const CrashReportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_remote_id()) {
    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cause()) {
    cause_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cause_);
  }
  capture_timestamp_ = from.capture_timestamp_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CrashReportInfo)
}

void CrashReportInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capture_timestamp_ = PROTOBUF_LONGLONG(0);
}

CrashReportInfo::~CrashReportInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CrashReportInfo)
  SharedDtor();
}

void CrashReportInfo::SharedDtor() {
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cause_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrashReportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrashReportInfo& CrashReportInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrashReportInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CrashReportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CrashReportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      remote_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cause_.ClearNonDefaultToEmptyNoArena();
    }
  }
  capture_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrashReportInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_remote_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 capture_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_capture_timestamp(&has_bits);
          capture_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cause(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrashReportInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CrashReportInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string remote_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 capture_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_capture_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &capture_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cause = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CrashReportInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CrashReportInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrashReportInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CrashReportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string remote_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_id(), output);
  }

  // optional int64 capture_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->capture_timestamp(), output);
  }

  // optional string cause = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cause(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CrashReportInfo)
}

size_t CrashReportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CrashReportInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string remote_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->remote_id());
    }

    // optional string cause = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cause());
    }

    // optional int64 capture_timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->capture_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrashReportInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CrashReportInfo*>(
      &from));
}

void CrashReportInfo::MergeFrom(const CrashReportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CrashReportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cause_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cause_);
    }
    if (cached_has_bits & 0x00000004u) {
      capture_timestamp_ = from.capture_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrashReportInfo::CopyFrom(const CrashReportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CrashReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashReportInfo::IsInitialized() const {
  return true;
}

void CrashReportInfo::InternalSwap(CrashReportInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cause_.Swap(&other->cause_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capture_timestamp_, other->capture_timestamp_);
}

std::string CrashReportInfo::GetTypeName() const {
  return "enterprise_management.CrashReportInfo";
}


// ===================================================================

void DeviceStatusReportRequest::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->os_update_status_ = const_cast< ::enterprise_management::OsUpdateStatus*>(
      ::enterprise_management::OsUpdateStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->running_kiosk_app_ = const_cast< ::enterprise_management::AppStatus*>(
      ::enterprise_management::AppStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->tpm_version_info_ = const_cast< ::enterprise_management::TpmVersionInfo*>(
      ::enterprise_management::TpmVersionInfo::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->tpm_status_info_ = const_cast< ::enterprise_management::TpmStatusInfo*>(
      ::enterprise_management::TpmStatusInfo::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->power_status_ = const_cast< ::enterprise_management::PowerStatus*>(
      ::enterprise_management::PowerStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->storage_status_ = const_cast< ::enterprise_management::StorageStatus*>(
      ::enterprise_management::StorageStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->board_status_ = const_cast< ::enterprise_management::BoardStatus*>(
      ::enterprise_management::BoardStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->system_status_ = const_cast< ::enterprise_management::SystemStatus*>(
      ::enterprise_management::SystemStatus::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->stateful_partition_info_ = const_cast< ::enterprise_management::StatefulPartitionInfo*>(
      ::enterprise_management::StatefulPartitionInfo::internal_default_instance());
  ::enterprise_management::_DeviceStatusReportRequest_default_instance_._instance.get_mutable()->graphics_status_ = const_cast< ::enterprise_management::GraphicsStatus*>(
      ::enterprise_management::GraphicsStatus::internal_default_instance());
}
class DeviceStatusReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStatusReportRequest>()._has_bits_);
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_firmware_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_boot_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_browser_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_system_ram_total(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::OsUpdateStatus& os_update_status(const DeviceStatusReportRequest* msg);
  static void set_has_os_update_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::AppStatus& running_kiosk_app(const DeviceStatusReportRequest* msg);
  static void set_has_running_kiosk_app(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sound_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::TpmVersionInfo& tpm_version_info(const DeviceStatusReportRequest* msg);
  static void set_has_tpm_version_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::TpmStatusInfo& tpm_status_info(const DeviceStatusReportRequest* msg);
  static void set_has_tpm_status_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_write_protect_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::PowerStatus& power_status(const DeviceStatusReportRequest* msg);
  static void set_has_power_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::StorageStatus& storage_status(const DeviceStatusReportRequest* msg);
  static void set_has_storage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::BoardStatus& board_status(const DeviceStatusReportRequest* msg);
  static void set_has_board_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::SystemStatus& system_status(const DeviceStatusReportRequest* msg);
  static void set_has_system_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::StatefulPartitionInfo& stateful_partition_info(const DeviceStatusReportRequest* msg);
  static void set_has_stateful_partition_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::GraphicsStatus& graphics_status(const DeviceStatusReportRequest* msg);
  static void set_has_graphics_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::enterprise_management::OsUpdateStatus&
DeviceStatusReportRequest::_Internal::os_update_status(const DeviceStatusReportRequest* msg) {
  return *msg->os_update_status_;
}
const ::enterprise_management::AppStatus&
DeviceStatusReportRequest::_Internal::running_kiosk_app(const DeviceStatusReportRequest* msg) {
  return *msg->running_kiosk_app_;
}
const ::enterprise_management::TpmVersionInfo&
DeviceStatusReportRequest::_Internal::tpm_version_info(const DeviceStatusReportRequest* msg) {
  return *msg->tpm_version_info_;
}
const ::enterprise_management::TpmStatusInfo&
DeviceStatusReportRequest::_Internal::tpm_status_info(const DeviceStatusReportRequest* msg) {
  return *msg->tpm_status_info_;
}
const ::enterprise_management::PowerStatus&
DeviceStatusReportRequest::_Internal::power_status(const DeviceStatusReportRequest* msg) {
  return *msg->power_status_;
}
const ::enterprise_management::StorageStatus&
DeviceStatusReportRequest::_Internal::storage_status(const DeviceStatusReportRequest* msg) {
  return *msg->storage_status_;
}
const ::enterprise_management::BoardStatus&
DeviceStatusReportRequest::_Internal::board_status(const DeviceStatusReportRequest* msg) {
  return *msg->board_status_;
}
const ::enterprise_management::SystemStatus&
DeviceStatusReportRequest::_Internal::system_status(const DeviceStatusReportRequest* msg) {
  return *msg->system_status_;
}
const ::enterprise_management::StatefulPartitionInfo&
DeviceStatusReportRequest::_Internal::stateful_partition_info(const DeviceStatusReportRequest* msg) {
  return *msg->stateful_partition_info_;
}
const ::enterprise_management::GraphicsStatus&
DeviceStatusReportRequest::_Internal::graphics_status(const DeviceStatusReportRequest* msg) {
  return *msg->graphics_status_;
}
DeviceStatusReportRequest::DeviceStatusReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportRequest)
}
DeviceStatusReportRequest::DeviceStatusReportRequest(const DeviceStatusReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_periods_(from.active_periods_),
      network_interfaces_(from.network_interfaces_),
      users_(from.users_),
      volume_infos_(from.volume_infos_),
      network_states_(from.network_states_),
      cpu_utilization_pct_samples_(from.cpu_utilization_pct_samples_),
      system_ram_free_samples_(from.system_ram_free_samples_),
      cpu_temp_infos_(from.cpu_temp_infos_),
      cpu_utilization_infos_(from.cpu_utilization_infos_),
      system_ram_free_infos_(from.system_ram_free_infos_),
      cpu_info_(from.cpu_info_),
      crash_report_infos_(from.crash_report_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_firmware_version()) {
    firmware_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  boot_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_boot_mode()) {
    boot_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
  }
  browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_version()) {
    browser_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
  }
  if (from.has_os_update_status()) {
    os_update_status_ = new ::enterprise_management::OsUpdateStatus(*from.os_update_status_);
  } else {
    os_update_status_ = nullptr;
  }
  if (from.has_running_kiosk_app()) {
    running_kiosk_app_ = new ::enterprise_management::AppStatus(*from.running_kiosk_app_);
  } else {
    running_kiosk_app_ = nullptr;
  }
  if (from.has_tpm_version_info()) {
    tpm_version_info_ = new ::enterprise_management::TpmVersionInfo(*from.tpm_version_info_);
  } else {
    tpm_version_info_ = nullptr;
  }
  if (from.has_tpm_status_info()) {
    tpm_status_info_ = new ::enterprise_management::TpmStatusInfo(*from.tpm_status_info_);
  } else {
    tpm_status_info_ = nullptr;
  }
  if (from.has_power_status()) {
    power_status_ = new ::enterprise_management::PowerStatus(*from.power_status_);
  } else {
    power_status_ = nullptr;
  }
  if (from.has_storage_status()) {
    storage_status_ = new ::enterprise_management::StorageStatus(*from.storage_status_);
  } else {
    storage_status_ = nullptr;
  }
  if (from.has_board_status()) {
    board_status_ = new ::enterprise_management::BoardStatus(*from.board_status_);
  } else {
    board_status_ = nullptr;
  }
  if (from.has_system_status()) {
    system_status_ = new ::enterprise_management::SystemStatus(*from.system_status_);
  } else {
    system_status_ = nullptr;
  }
  if (from.has_stateful_partition_info()) {
    stateful_partition_info_ = new ::enterprise_management::StatefulPartitionInfo(*from.stateful_partition_info_);
  } else {
    stateful_partition_info_ = nullptr;
  }
  if (from.has_graphics_status()) {
    graphics_status_ = new ::enterprise_management::GraphicsStatus(*from.graphics_status_);
  } else {
    graphics_status_ = nullptr;
  }
  ::memcpy(&system_ram_total_, &from.system_ram_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_protect_switch_) -
    reinterpret_cast<char*>(&system_ram_total_)) + sizeof(write_protect_switch_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportRequest)
}

void DeviceStatusReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_update_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_protect_switch_) -
      reinterpret_cast<char*>(&os_update_status_)) + sizeof(write_protect_switch_));
}

DeviceStatusReportRequest::~DeviceStatusReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportRequest)
  SharedDtor();
}

void DeviceStatusReportRequest::SharedDtor() {
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete os_update_status_;
  if (this != internal_default_instance()) delete running_kiosk_app_;
  if (this != internal_default_instance()) delete tpm_version_info_;
  if (this != internal_default_instance()) delete tpm_status_info_;
  if (this != internal_default_instance()) delete power_status_;
  if (this != internal_default_instance()) delete storage_status_;
  if (this != internal_default_instance()) delete board_status_;
  if (this != internal_default_instance()) delete system_status_;
  if (this != internal_default_instance()) delete stateful_partition_info_;
  if (this != internal_default_instance()) delete graphics_status_;
}

void DeviceStatusReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatusReportRequest& DeviceStatusReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatusReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_periods_.Clear();
  network_interfaces_.Clear();
  users_.Clear();
  volume_infos_.Clear();
  network_states_.Clear();
  cpu_utilization_pct_samples_.Clear();
  system_ram_free_samples_.Clear();
  cpu_temp_infos_.Clear();
  cpu_utilization_infos_.Clear();
  system_ram_free_infos_.Clear();
  cpu_info_.Clear();
  crash_report_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      firmware_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      boot_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      browser_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(os_update_status_ != nullptr);
      os_update_status_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(running_kiosk_app_ != nullptr);
      running_kiosk_app_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tpm_version_info_ != nullptr);
      tpm_version_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tpm_status_info_ != nullptr);
      tpm_status_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(power_status_ != nullptr);
      power_status_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(storage_status_ != nullptr);
      storage_status_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(board_status_ != nullptr);
      board_status_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(system_status_ != nullptr);
      system_status_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(stateful_partition_info_ != nullptr);
      stateful_partition_info_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(graphics_status_ != nullptr);
      graphics_status_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&system_ram_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sound_volume_) -
        reinterpret_cast<char*>(&system_ram_total_)) + sizeof(sound_volume_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&write_protect_switch_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(write_protect_switch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceStatusReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string os_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string firmware_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_firmware_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string boot_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_boot_mode(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string browser_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_browser_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ActiveTimePeriod active_periods = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.NetworkInterface network_interfaces = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_network_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.DeviceUser users = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.VolumeInfo volume_infos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_volume_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.NetworkState network_states = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_network_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated int32 cpu_utilization_pct_samples = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_cpu_utilization_pct_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 96);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_cpu_utilization_pct_samples(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_ram_total = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_system_ram_total(&has_bits);
          system_ram_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 system_ram_free_samples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_system_ram_free_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 120);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_system_ram_free_samples(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.CPUTempInfo cpu_temp_infos = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cpu_temp_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_os_update_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppStatus running_kiosk_app = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_running_kiosk_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sound_volume = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_sound_volume(&has_bits);
          sound_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_tpm_version_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Channel channel = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Channel_IsValid(val))) {
            set_channel(static_cast<::enterprise_management::Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.TpmStatusInfo tpm_status_info = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_tpm_status_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool write_protect_switch = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_write_protect_switch(&has_bits);
          write_protect_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PowerStatus power_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_power_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StorageStatus storage_status = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_storage_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BoardStatus board_status = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_board_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemStatus system_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_system_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StatefulPartitionInfo stateful_partition_info = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_stateful_partition_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.CpuUtilizationInfo cpu_utilization_infos = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cpu_utilization_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.SystemFreeRamInfo system_ram_free_infos = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_system_ram_free_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 506);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.CpuInfo cpu_info = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cpu_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 642);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.GraphicsStatus graphics_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_graphics_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.CrashReportInfo crash_report_infos = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_crash_report_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 658);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceStatusReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string firmware_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string boot_mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_boot_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ActiveTimePeriod active_periods = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_periods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.NetworkInterface network_interfaces = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_network_interfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.DeviceUser users = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.VolumeInfo volume_infos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_volume_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.NetworkState network_states = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_network_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cpu_utilization_pct_samples = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_cpu_utilization_pct_samples())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cpu_utilization_pct_samples())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_ram_total = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_system_ram_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_ram_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 system_ram_free_samples = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 120u, input, this->mutable_system_ram_free_samples())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_system_ram_free_samples())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CPUTempInfo cpu_temp_infos = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_temp_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_os_update_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppStatus running_kiosk_app = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_running_kiosk_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sound_volume = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_sound_volume(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tpm_version_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Channel channel = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Channel_IsValid(value)) {
            set_channel(static_cast< ::enterprise_management::Channel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(176u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.TpmStatusInfo tpm_status_info = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tpm_status_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool write_protect_switch = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_write_protect_switch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_protect_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PowerStatus power_status = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StorageStatus storage_status = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BoardStatus board_status = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_board_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SystemStatus system_status = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StatefulPartitionInfo stateful_partition_info = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stateful_partition_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CpuUtilizationInfo cpu_utilization_infos = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_utilization_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.SystemFreeRamInfo system_ram_free_infos = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_system_ram_free_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CpuInfo cpu_info = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.GraphicsStatus graphics_status = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graphics_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CrashReportInfo crash_report_infos = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_crash_report_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceStatusReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string os_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os_version(), output);
  }

  // optional string firmware_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firmware_version(), output);
  }

  // optional string boot_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->boot_mode(), output);
  }

  // optional string browser_version = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->browser_version(), output);
  }

  // repeated .enterprise_management.ActiveTimePeriod active_periods = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_periods_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->active_periods(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.NetworkInterface network_interfaces = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_interfaces_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->network_interfaces(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.DeviceUser users = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->users(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.VolumeInfo volume_infos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->volume_infos(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.NetworkState network_states = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11,
      this->network_states(static_cast<int>(i)),
      output);
  }

  // repeated int32 cpu_utilization_pct_samples = 12;
  for (int i = 0, n = this->cpu_utilization_pct_samples_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      12, this->cpu_utilization_pct_samples(i), output);
  }

  // optional int64 system_ram_total = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->system_ram_total(), output);
  }

  // repeated int64 system_ram_free_samples = 15;
  for (int i = 0, n = this->system_ram_free_samples_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      15, this->system_ram_free_samples(i), output);
  }

  // repeated .enterprise_management.CPUTempInfo cpu_temp_infos = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_temp_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->cpu_temp_infos(static_cast<int>(i)),
      output);
  }

  // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::os_update_status(this), output);
  }

  // optional .enterprise_management.AppStatus running_kiosk_app = 18;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::running_kiosk_app(this), output);
  }

  // optional int32 sound_volume = 19;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->sound_volume(), output);
  }

  // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::tpm_version_info(this), output);
  }

  // optional .enterprise_management.Channel channel = 22;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->channel(), output);
  }

  // optional .enterprise_management.TpmStatusInfo tpm_status_info = 23;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::tpm_status_info(this), output);
  }

  // optional bool write_protect_switch = 24;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->write_protect_switch(), output);
  }

  // optional .enterprise_management.PowerStatus power_status = 25;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::power_status(this), output);
  }

  // optional .enterprise_management.StorageStatus storage_status = 26;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::storage_status(this), output);
  }

  // optional .enterprise_management.BoardStatus board_status = 27;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::board_status(this), output);
  }

  // optional .enterprise_management.SystemStatus system_status = 28;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::system_status(this), output);
  }

  // optional .enterprise_management.StatefulPartitionInfo stateful_partition_info = 29;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::stateful_partition_info(this), output);
  }

  // repeated .enterprise_management.CpuUtilizationInfo cpu_utilization_infos = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_utilization_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30,
      this->cpu_utilization_infos(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.SystemFreeRamInfo system_ram_free_infos = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_ram_free_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31,
      this->system_ram_free_infos(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.CpuInfo cpu_info = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32,
      this->cpu_info(static_cast<int>(i)),
      output);
  }

  // optional .enterprise_management.GraphicsStatus graphics_status = 33;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::graphics_status(this), output);
  }

  // repeated .enterprise_management.CrashReportInfo crash_report_infos = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crash_report_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34,
      this->crash_report_infos(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportRequest)
}

size_t DeviceStatusReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ActiveTimePeriod active_periods = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->active_periods_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_periods(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.NetworkInterface network_interfaces = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->network_interfaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->network_interfaces(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.DeviceUser users = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.VolumeInfo volume_infos = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->volume_infos(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.NetworkState network_states = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->network_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->network_states(static_cast<int>(i)));
    }
  }

  // repeated int32 cpu_utilization_pct_samples = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cpu_utilization_pct_samples_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cpu_utilization_pct_samples_size());
    total_size += data_size;
  }

  // repeated int64 system_ram_free_samples = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->system_ram_free_samples_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->system_ram_free_samples_size());
    total_size += data_size;
  }

  // repeated .enterprise_management.CPUTempInfo cpu_temp_infos = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_temp_infos_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_temp_infos(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.CpuUtilizationInfo cpu_utilization_infos = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_utilization_infos_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_utilization_infos(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.SystemFreeRamInfo system_ram_free_infos = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->system_ram_free_infos_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->system_ram_free_infos(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.CpuInfo cpu_info = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_info(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.CrashReportInfo crash_report_infos = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->crash_report_infos_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->crash_report_infos(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string os_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string firmware_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->firmware_version());
    }

    // optional string boot_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->boot_mode());
    }

    // optional string browser_version = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->browser_version());
    }

    // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *os_update_status_);
    }

    // optional .enterprise_management.AppStatus running_kiosk_app = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *running_kiosk_app_);
    }

    // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tpm_version_info_);
    }

    // optional .enterprise_management.TpmStatusInfo tpm_status_info = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tpm_status_info_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.PowerStatus power_status = 25;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_status_);
    }

    // optional .enterprise_management.StorageStatus storage_status = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_status_);
    }

    // optional .enterprise_management.BoardStatus board_status = 27;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *board_status_);
    }

    // optional .enterprise_management.SystemStatus system_status = 28;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_status_);
    }

    // optional .enterprise_management.StatefulPartitionInfo stateful_partition_info = 29;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stateful_partition_info_);
    }

    // optional .enterprise_management.GraphicsStatus graphics_status = 33;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *graphics_status_);
    }

    // optional int64 system_ram_total = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->system_ram_total());
    }

    // optional int32 sound_volume = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sound_volume());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .enterprise_management.Channel channel = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional bool write_protect_switch = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatusReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStatusReportRequest*>(
      &from));
}

void DeviceStatusReportRequest::MergeFrom(const DeviceStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_periods_.MergeFrom(from.active_periods_);
  network_interfaces_.MergeFrom(from.network_interfaces_);
  users_.MergeFrom(from.users_);
  volume_infos_.MergeFrom(from.volume_infos_);
  network_states_.MergeFrom(from.network_states_);
  cpu_utilization_pct_samples_.MergeFrom(from.cpu_utilization_pct_samples_);
  system_ram_free_samples_.MergeFrom(from.system_ram_free_samples_);
  cpu_temp_infos_.MergeFrom(from.cpu_temp_infos_);
  cpu_utilization_infos_.MergeFrom(from.cpu_utilization_infos_);
  system_ram_free_infos_.MergeFrom(from.system_ram_free_infos_);
  cpu_info_.MergeFrom(from.cpu_info_);
  crash_report_infos_.MergeFrom(from.crash_report_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      firmware_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      boot_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      browser_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_os_update_status()->::enterprise_management::OsUpdateStatus::MergeFrom(from.os_update_status());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_running_kiosk_app()->::enterprise_management::AppStatus::MergeFrom(from.running_kiosk_app());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_tpm_version_info()->::enterprise_management::TpmVersionInfo::MergeFrom(from.tpm_version_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_tpm_status_info()->::enterprise_management::TpmStatusInfo::MergeFrom(from.tpm_status_info());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_power_status()->::enterprise_management::PowerStatus::MergeFrom(from.power_status());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_storage_status()->::enterprise_management::StorageStatus::MergeFrom(from.storage_status());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_board_status()->::enterprise_management::BoardStatus::MergeFrom(from.board_status());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_system_status()->::enterprise_management::SystemStatus::MergeFrom(from.system_status());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_stateful_partition_info()->::enterprise_management::StatefulPartitionInfo::MergeFrom(from.stateful_partition_info());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_graphics_status()->::enterprise_management::GraphicsStatus::MergeFrom(from.graphics_status());
    }
    if (cached_has_bits & 0x00004000u) {
      system_ram_total_ = from.system_ram_total_;
    }
    if (cached_has_bits & 0x00008000u) {
      sound_volume_ = from.sound_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00020000u) {
      write_protect_switch_ = from.write_protect_switch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStatusReportRequest::CopyFrom(const DeviceStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusReportRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void DeviceStatusReportRequest::InternalSwap(DeviceStatusReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&active_periods_)->InternalSwap(CastToBase(&other->active_periods_));
  CastToBase(&network_interfaces_)->InternalSwap(CastToBase(&other->network_interfaces_));
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  CastToBase(&volume_infos_)->InternalSwap(CastToBase(&other->volume_infos_));
  CastToBase(&network_states_)->InternalSwap(CastToBase(&other->network_states_));
  cpu_utilization_pct_samples_.InternalSwap(&other->cpu_utilization_pct_samples_);
  system_ram_free_samples_.InternalSwap(&other->system_ram_free_samples_);
  CastToBase(&cpu_temp_infos_)->InternalSwap(CastToBase(&other->cpu_temp_infos_));
  CastToBase(&cpu_utilization_infos_)->InternalSwap(CastToBase(&other->cpu_utilization_infos_));
  CastToBase(&system_ram_free_infos_)->InternalSwap(CastToBase(&other->system_ram_free_infos_));
  CastToBase(&cpu_info_)->InternalSwap(CastToBase(&other->cpu_info_));
  CastToBase(&crash_report_infos_)->InternalSwap(CastToBase(&other->crash_report_infos_));
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_version_.Swap(&other->firmware_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  boot_mode_.Swap(&other->boot_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  browser_version_.Swap(&other->browser_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(os_update_status_, other->os_update_status_);
  swap(running_kiosk_app_, other->running_kiosk_app_);
  swap(tpm_version_info_, other->tpm_version_info_);
  swap(tpm_status_info_, other->tpm_status_info_);
  swap(power_status_, other->power_status_);
  swap(storage_status_, other->storage_status_);
  swap(board_status_, other->board_status_);
  swap(system_status_, other->system_status_);
  swap(stateful_partition_info_, other->stateful_partition_info_);
  swap(graphics_status_, other->graphics_status_);
  swap(system_ram_total_, other->system_ram_total_);
  swap(sound_volume_, other->sound_volume_);
  swap(channel_, other->channel_);
  swap(write_protect_switch_, other->write_protect_switch_);
}

std::string DeviceStatusReportRequest::GetTypeName() const {
  return "enterprise_management.DeviceStatusReportRequest";
}


// ===================================================================

void OsUpdateStatus::InitAsDefaultInstance() {
}
class OsUpdateStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<OsUpdateStatus>()._has_bits_);
  static void set_has_update_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_required_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_checked_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_reboot_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OsUpdateStatus::OsUpdateStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.OsUpdateStatus)
}
OsUpdateStatus::OsUpdateStatus(const OsUpdateStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_platform_version()) {
    new_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_platform_version_);
  }
  new_required_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_required_platform_version()) {
    new_required_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_required_platform_version_);
  }
  ::memcpy(&last_checked_timestamp_, &from.last_checked_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_status_) -
    reinterpret_cast<char*>(&last_checked_timestamp_)) + sizeof(update_status_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OsUpdateStatus)
}

void OsUpdateStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto.base);
  new_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_required_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_checked_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_status_) -
      reinterpret_cast<char*>(&last_checked_timestamp_)) + sizeof(update_status_));
}

OsUpdateStatus::~OsUpdateStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.OsUpdateStatus)
  SharedDtor();
}

void OsUpdateStatus::SharedDtor() {
  new_platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_required_platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OsUpdateStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsUpdateStatus& OsUpdateStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OsUpdateStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void OsUpdateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OsUpdateStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_platform_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      new_required_platform_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&last_checked_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_status_) -
        reinterpret_cast<char*>(&last_checked_timestamp_)) + sizeof(update_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OsUpdateStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(val))) {
            set_update_status(static_cast<::enterprise_management::OsUpdateStatus_UpdateStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string new_platform_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_platform_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_required_platform_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_new_required_platform_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_checked_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_checked_timestamp(&has_bits);
          last_checked_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_reboot_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_reboot_timestamp(&has_bits);
          last_reboot_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OsUpdateStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.OsUpdateStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value)) {
            set_update_status(static_cast< ::enterprise_management::OsUpdateStatus_UpdateStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string new_platform_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_new_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string new_required_platform_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_new_required_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_checked_timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_checked_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_checked_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_reboot_timestamp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_reboot_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reboot_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.OsUpdateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.OsUpdateStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OsUpdateStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.OsUpdateStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->update_status(), output);
  }

  // optional string new_platform_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_platform_version(), output);
  }

  // optional string new_required_platform_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_required_platform_version(), output);
  }

  // optional int64 last_checked_timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_checked_timestamp(), output);
  }

  // optional int64 last_reboot_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_reboot_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.OsUpdateStatus)
}

size_t OsUpdateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OsUpdateStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string new_platform_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->new_platform_version());
    }

    // optional string new_required_platform_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->new_required_platform_version());
    }

    // optional int64 last_checked_timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_checked_timestamp());
    }

    // optional int64 last_reboot_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_reboot_timestamp());
    }

    // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->update_status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsUpdateStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OsUpdateStatus*>(
      &from));
}

void OsUpdateStatus::MergeFrom(const OsUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OsUpdateStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      new_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_platform_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      new_required_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_required_platform_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      last_checked_timestamp_ = from.last_checked_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_reboot_timestamp_ = from.last_reboot_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_status_ = from.update_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OsUpdateStatus::CopyFrom(const OsUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OsUpdateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsUpdateStatus::IsInitialized() const {
  return true;
}

void OsUpdateStatus::InternalSwap(OsUpdateStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  new_platform_version_.Swap(&other->new_platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_required_platform_version_.Swap(&other->new_required_platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_checked_timestamp_, other->last_checked_timestamp_);
  swap(last_reboot_timestamp_, other->last_reboot_timestamp_);
  swap(update_status_, other->update_status_);
}

std::string OsUpdateStatus::GetTypeName() const {
  return "enterprise_management.OsUpdateStatus";
}


// ===================================================================

void AppStatus::InitAsDefaultInstance() {
}
class AppStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStatus>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extension_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_required_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppStatus::AppStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppStatus)
}
AppStatus::AppStatus(const AppStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  extension_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_version()) {
    extension_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  required_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_required_platform_version()) {
    required_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_platform_version_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppStatus)
}

void AppStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = false;
}

AppStatus::~AppStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppStatus)
  SharedDtor();
}

void AppStatus::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppStatus& AppStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      extension_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      required_platform_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  error_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extension_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_error(&has_bits);
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_platform_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_required_platform_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool error = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string required_platform_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_required_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string extension_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension_version(), output);
  }

  // optional string status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // optional bool error = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->error(), output);
  }

  // optional string required_platform_version = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->required_platform_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppStatus)
}

size_t AppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string extension_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_version());
    }

    // optional string status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string required_platform_version = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->required_platform_version());
    }

    // optional bool error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppStatus*>(
      &from));
}

void AppStatus::MergeFrom(const AppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      extension_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      required_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_platform_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppStatus::CopyFrom(const AppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStatus::IsInitialized() const {
  return true;
}

void AppStatus::InternalSwap(AppStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_version_.Swap(&other->extension_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  required_platform_version_.Swap(&other->required_platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

std::string AppStatus::GetTypeName() const {
  return "enterprise_management.AppStatus";
}


// ===================================================================

void AndroidAppPermission::InitAsDefaultInstance() {
}
class AndroidAppPermission::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidAppPermission>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_managed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AndroidAppPermission::AndroidAppPermission()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AndroidAppPermission)
}
AndroidAppPermission::AndroidAppPermission(const AndroidAppPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&granted_, &from.granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&managed_) -
    reinterpret_cast<char*>(&granted_)) + sizeof(managed_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidAppPermission)
}

void AndroidAppPermission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&granted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&managed_) -
      reinterpret_cast<char*>(&granted_)) + sizeof(managed_));
}

AndroidAppPermission::~AndroidAppPermission() {
  // @@protoc_insertion_point(destructor:enterprise_management.AndroidAppPermission)
  SharedDtor();
}

void AndroidAppPermission::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AndroidAppPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidAppPermission& AndroidAppPermission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidAppPermission_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AndroidAppPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidAppPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&granted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&managed_) -
      reinterpret_cast<char*>(&granted_)) + sizeof(managed_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidAppPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_granted(&has_bits);
          granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool managed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_managed(&has_bits);
          managed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidAppPermission::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AndroidAppPermission)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool granted = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_granted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool managed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_managed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AndroidAppPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AndroidAppPermission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidAppPermission::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AndroidAppPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool granted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->granted(), output);
  }

  // optional bool managed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->managed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AndroidAppPermission)
}

size_t AndroidAppPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidAppPermission)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool managed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidAppPermission::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidAppPermission*>(
      &from));
}

void AndroidAppPermission::MergeFrom(const AndroidAppPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidAppPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      granted_ = from.granted_;
    }
    if (cached_has_bits & 0x00000004u) {
      managed_ = from.managed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AndroidAppPermission::CopyFrom(const AndroidAppPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidAppPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidAppPermission::IsInitialized() const {
  return true;
}

void AndroidAppPermission::InternalSwap(AndroidAppPermission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(granted_, other->granted_);
  swap(managed_, other->managed_);
}

std::string AndroidAppPermission::GetTypeName() const {
  return "enterprise_management.AndroidAppPermission";
}


// ===================================================================

void AndroidAppInfo::InitAsDefaultInstance() {
}
class AndroidAppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidAppInfo>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_installed_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AndroidAppInfo::AndroidAppInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AndroidAppInfo)
}
AndroidAppInfo::AndroidAppInfo(const AndroidAppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&status_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidAppInfo)
}

void AndroidAppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&status_)) + sizeof(version_));
}

AndroidAppInfo::~AndroidAppInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.AndroidAppInfo)
  SharedDtor();
}

void AndroidAppInfo::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AndroidAppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidAppInfo& AndroidAppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidAppInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AndroidAppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&status_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidAppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AndroidAppInfo.AndroidAppStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AndroidAppInfo_AndroidAppStatus_IsValid(val))) {
            set_status(static_cast<::enterprise_management::AndroidAppInfo_AndroidAppStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AndroidAppInfo.InstalledSource installed_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AndroidAppInfo_InstalledSource_IsValid(val))) {
            set_installed_source(static_cast<::enterprise_management::AndroidAppInfo_InstalledSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AndroidAppPermission permissions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidAppInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AndroidAppInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AndroidAppInfo.AndroidAppStatus status = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AndroidAppInfo_AndroidAppStatus_IsValid(value)) {
            set_status(static_cast< ::enterprise_management::AndroidAppInfo_AndroidAppStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AndroidAppInfo.InstalledSource installed_source = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AndroidAppInfo_InstalledSource_IsValid(value)) {
            set_installed_source(static_cast< ::enterprise_management::AndroidAppInfo_InstalledSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AndroidAppPermission permissions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AndroidAppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AndroidAppInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidAppInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AndroidAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string app_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_name(), output);
  }

  // optional string package_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->package_name(), output);
  }

  // optional .enterprise_management.AndroidAppInfo.AndroidAppStatus status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .enterprise_management.AndroidAppInfo.InstalledSource installed_source = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->installed_source(), output);
  }

  // optional int32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->version(), output);
  }

  // repeated .enterprise_management.AndroidAppPermission permissions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permissions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->permissions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AndroidAppInfo)
}

size_t AndroidAppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidAppInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AndroidAppPermission permissions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->permissions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->permissions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string package_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .enterprise_management.AndroidAppInfo.AndroidAppStatus status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .enterprise_management.AndroidAppInfo.InstalledSource installed_source = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->installed_source());
    }

    // optional int32 version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidAppInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidAppInfo*>(
      &from));
}

void AndroidAppInfo::MergeFrom(const AndroidAppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      installed_source_ = from.installed_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AndroidAppInfo::CopyFrom(const AndroidAppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidAppInfo::IsInitialized() const {
  return true;
}

void AndroidAppInfo::InternalSwap(AndroidAppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&permissions_)->InternalSwap(CastToBase(&other->permissions_));
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(installed_source_, other->installed_source_);
  swap(version_, other->version_);
}

std::string AndroidAppInfo::GetTypeName() const {
  return "enterprise_management.AndroidAppInfo";
}


// ===================================================================

void ChromeUserProfileReport::InitAsDefaultInstance() {
}
class ChromeUserProfileReport::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserProfileReport>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chrome_signed_in_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extension_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plugins(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_policy_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_policy_fetched_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_safe_browsing_warnings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_safe_browsing_warnings_click_through(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChromeUserProfileReport::ChromeUserProfileReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeUserProfileReport)
}
ChromeUserProfileReport::ChromeUserProfileReport(const ChromeUserProfileReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extension_requests_(from.extension_requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  chrome_signed_in_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_signed_in_user()) {
    chrome_signed_in_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chrome_signed_in_user_);
  }
  extension_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_data()) {
    extension_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_data_);
  }
  plugins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugins()) {
    plugins_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plugins_);
  }
  policy_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data()) {
    policy_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&policy_fetched_timestamp_, &from.policy_fetched_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_browsing_warnings_click_through_) -
    reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_click_through_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeUserProfileReport)
}

void ChromeUserProfileReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chrome_signed_in_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&policy_fetched_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_browsing_warnings_click_through_) -
      reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_click_through_));
}

ChromeUserProfileReport::~ChromeUserProfileReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeUserProfileReport)
  SharedDtor();
}

void ChromeUserProfileReport::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chrome_signed_in_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugins_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeUserProfileReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeUserProfileReport& ChromeUserProfileReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeUserProfileReport_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeUserProfileReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeUserProfileReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_requests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_signed_in_user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      extension_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      plugins_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      policy_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&policy_fetched_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_browsing_warnings_) -
        reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_));
  }
  safe_browsing_warnings_click_through_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeUserProfileReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string chrome_signed_in_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_chrome_signed_in_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extension_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string plugins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_plugins(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 policy_fetched_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_policy_fetched_timestamp(&has_bits);
          policy_fetched_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 safe_browsing_warnings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_safe_browsing_warnings(&has_bits);
          safe_browsing_warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 safe_browsing_warnings_click_through = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_safe_browsing_warnings_click_through(&has_bits);
          safe_browsing_warnings_click_through_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extension_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeUserProfileReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeUserProfileReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_signed_in_user = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_signed_in_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plugins = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 policy_fetched_timestamp = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_policy_fetched_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &policy_fetched_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 safe_browsing_warnings = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_safe_browsing_warnings(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_browsing_warnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 safe_browsing_warnings_click_through = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_safe_browsing_warnings_click_through(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_browsing_warnings_click_through_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extension_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeUserProfileReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeUserProfileReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeUserProfileReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeUserProfileReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string chrome_signed_in_user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chrome_signed_in_user(), output);
  }

  // optional string extension_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extension_data(), output);
  }

  // optional string plugins = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plugins(), output);
  }

  // optional string policy_data = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->policy_data(), output);
  }

  // optional int64 policy_fetched_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->policy_fetched_timestamp(), output);
  }

  // optional uint64 safe_browsing_warnings = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->safe_browsing_warnings(), output);
  }

  // optional uint64 safe_browsing_warnings_click_through = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->safe_browsing_warnings_click_through(), output);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->extension_requests(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeUserProfileReport)
}

size_t ChromeUserProfileReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeUserProfileReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extension_requests(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string chrome_signed_in_user = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->chrome_signed_in_user());
    }

    // optional string extension_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_data());
    }

    // optional string plugins = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->plugins());
    }

    // optional string policy_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_data());
    }

    // optional string name = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 policy_fetched_timestamp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->policy_fetched_timestamp());
    }

    // optional uint64 safe_browsing_warnings = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->safe_browsing_warnings());
    }

  }
  // optional uint64 safe_browsing_warnings_click_through = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->safe_browsing_warnings_click_through());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserProfileReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeUserProfileReport*>(
      &from));
}

void ChromeUserProfileReport::MergeFrom(const ChromeUserProfileReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeUserProfileReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_requests_.MergeFrom(from.extension_requests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      chrome_signed_in_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chrome_signed_in_user_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      extension_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      plugins_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plugins_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      policy_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000040u) {
      policy_fetched_timestamp_ = from.policy_fetched_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      safe_browsing_warnings_ = from.safe_browsing_warnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_safe_browsing_warnings_click_through(from.safe_browsing_warnings_click_through());
  }
}

void ChromeUserProfileReport::CopyFrom(const ChromeUserProfileReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeUserProfileReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserProfileReport::IsInitialized() const {
  return true;
}

void ChromeUserProfileReport::InternalSwap(ChromeUserProfileReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&extension_requests_)->InternalSwap(CastToBase(&other->extension_requests_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chrome_signed_in_user_.Swap(&other->chrome_signed_in_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_data_.Swap(&other->extension_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plugins_.Swap(&other->plugins_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_data_.Swap(&other->policy_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(policy_fetched_timestamp_, other->policy_fetched_timestamp_);
  swap(safe_browsing_warnings_, other->safe_browsing_warnings_);
  swap(safe_browsing_warnings_click_through_, other->safe_browsing_warnings_click_through_);
}

std::string ChromeUserProfileReport::GetTypeName() const {
  return "enterprise_management.ChromeUserProfileReport";
}


// ===================================================================

void ChromeSignedInUser::InitAsDefaultInstance() {
}
class ChromeSignedInUser::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSignedInUser>()._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obfudscated_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeSignedInUser::ChromeSignedInUser()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeSignedInUser)
}
ChromeSignedInUser::ChromeSignedInUser(const ChromeSignedInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  obfudscated_gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_obfudscated_gaia_id()) {
    obfudscated_gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obfudscated_gaia_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeSignedInUser)
}

void ChromeSignedInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obfudscated_gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChromeSignedInUser::~ChromeSignedInUser() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeSignedInUser)
  SharedDtor();
}

void ChromeSignedInUser::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obfudscated_gaia_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeSignedInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeSignedInUser& ChromeSignedInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeSignedInUser_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeSignedInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeSignedInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      obfudscated_gaia_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeSignedInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_email(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string obfudscated_gaia_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_obfudscated_gaia_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeSignedInUser::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeSignedInUser)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string obfudscated_gaia_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_obfudscated_gaia_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeSignedInUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeSignedInUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeSignedInUser::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeSignedInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string obfudscated_gaia_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->obfudscated_gaia_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeSignedInUser)
}

size_t ChromeSignedInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeSignedInUser)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string obfudscated_gaia_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->obfudscated_gaia_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSignedInUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeSignedInUser*>(
      &from));
}

void ChromeSignedInUser::MergeFrom(const ChromeSignedInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeSignedInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      obfudscated_gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obfudscated_gaia_id_);
    }
  }
}

void ChromeSignedInUser::CopyFrom(const ChromeSignedInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeSignedInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSignedInUser::IsInitialized() const {
  return true;
}

void ChromeSignedInUser::InternalSwap(ChromeSignedInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  obfudscated_gaia_id_.Swap(&other->obfudscated_gaia_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ChromeSignedInUser::GetTypeName() const {
  return "enterprise_management.ChromeSignedInUser";
}


// ===================================================================

void ExtensionRequest::InitAsDefaultInstance() {
}
class ExtensionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExtensionRequest::ExtensionRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ExtensionRequest)
}
ExtensionRequest::ExtensionRequest(const ExtensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  request_timestamp_ = from.request_timestamp_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ExtensionRequest)
}

void ExtensionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_timestamp_ = PROTOBUF_LONGLONG(0);
}

ExtensionRequest::~ExtensionRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ExtensionRequest)
  SharedDtor();
}

void ExtensionRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtensionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionRequest& ExtensionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ExtensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ExtensionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  request_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 request_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_timestamp(&has_bits);
          request_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ExtensionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_request_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ExtensionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ExtensionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ExtensionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 request_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->request_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ExtensionRequest)
}

size_t ExtensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ExtensionRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 request_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->request_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionRequest*>(
      &from));
}

void ExtensionRequest::MergeFrom(const ExtensionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ExtensionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      request_timestamp_ = from.request_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtensionRequest::CopyFrom(const ExtensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ExtensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionRequest::IsInitialized() const {
  return true;
}

void ExtensionRequest::InternalSwap(ExtensionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_timestamp_, other->request_timestamp_);
}

std::string ExtensionRequest::GetTypeName() const {
  return "enterprise_management.ExtensionRequest";
}


// ===================================================================

void Extension::InitAsDefaultInstance() {
}
class Extension::_Internal {
 public:
  using HasBits = decltype(std::declval<Extension>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_homepage_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_install_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_from_webstore(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Extension::Extension()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      permissions_(from.permissions_),
      host_permissions_(from.host_permissions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  homepage_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_homepage_url()) {
    homepage_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homepage_url_);
  }
  ::memcpy(&app_type_, &from.app_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_webstore_) -
    reinterpret_cast<char*>(&app_type_)) + sizeof(from_webstore_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.Extension)
}

void Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extension_device_5fmanagement_5fbackend_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homepage_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_webstore_) -
      reinterpret_cast<char*>(&app_type_)) + sizeof(from_webstore_));
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:enterprise_management.Extension)
  SharedDtor();
}

void Extension::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homepage_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extension& Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extension_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  host_permissions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      homepage_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&app_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&app_type_)) + sizeof(enabled_));
  }
  from_webstore_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Extension.ExtensionType app_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Extension_ExtensionType_IsValid(val))) {
            set_app_type(static_cast<::enterprise_management::Extension_ExtensionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string homepage_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_homepage_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Extension.InstallType install_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Extension_InstallType_IsValid(val))) {
            set_install_type(static_cast<::enterprise_management::Extension_InstallType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string permissions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_permissions(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated string host_permissions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_host_permissions(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // optional bool from_webstore = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_from_webstore(&has_bits);
          from_webstore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Extension::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.Extension)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Extension.ExtensionType app_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Extension_ExtensionType_IsValid(value)) {
            set_app_type(static_cast< ::enterprise_management::Extension_ExtensionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string homepage_url = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_homepage_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Extension.InstallType install_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Extension_InstallType_IsValid(value)) {
            set_install_type(static_cast< ::enterprise_management::Extension_InstallType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string permissions = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string host_permissions = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_host_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_webstore = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_from_webstore(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_webstore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.Extension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Extension::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional .enterprise_management.Extension.ExtensionType app_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->app_type(), output);
  }

  // optional string homepage_url = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->homepage_url(), output);
  }

  // optional .enterprise_management.Extension.InstallType install_type = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->install_type(), output);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->enabled(), output);
  }

  // repeated string permissions = 10;
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      10, this->permissions(i), output);
  }

  // repeated string host_permissions = 11;
  for (int i = 0, n = this->host_permissions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->host_permissions(i), output);
  }

  // optional bool from_webstore = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->from_webstore(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.Extension)
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.Extension)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string permissions = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->permissions_size());
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->permissions(i));
  }

  // repeated string host_permissions = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->host_permissions_size());
  for (int i = 0, n = this->host_permissions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->host_permissions(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string homepage_url = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->homepage_url());
    }

    // optional .enterprise_management.Extension.ExtensionType app_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->app_type());
    }

    // optional .enterprise_management.Extension.InstallType install_type = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->install_type());
    }

    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool from_webstore = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Extension*>(
      &from));
}

void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  host_permissions_.MergeFrom(from.host_permissions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      homepage_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homepage_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      app_type_ = from.app_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      install_type_ = from.install_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_from_webstore(from.from_webstore());
  }
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  permissions_.InternalSwap(CastToBase(&other->permissions_));
  host_permissions_.InternalSwap(CastToBase(&other->host_permissions_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  homepage_url_.Swap(&other->homepage_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_type_, other->app_type_);
  swap(install_type_, other->install_type_);
  swap(enabled_, other->enabled_);
  swap(from_webstore_, other->from_webstore_);
}

std::string Extension::GetTypeName() const {
  return "enterprise_management.Extension";
}


// ===================================================================

void Plugin::InitAsDefaultInstance() {
}
class Plugin::_Internal {
 public:
  using HasBits = decltype(std::declval<Plugin>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Plugin::Plugin()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.Plugin)
}
Plugin::Plugin(const Plugin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.Plugin)
}

void Plugin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plugin_device_5fmanagement_5fbackend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Plugin::~Plugin() {
  // @@protoc_insertion_point(destructor:enterprise_management.Plugin)
  SharedDtor();
}

void Plugin::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Plugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plugin& Plugin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plugin_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Plugin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_filename(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Plugin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.Plugin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.Plugin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Plugin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.Plugin)
}

size_t Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.Plugin)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plugin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Plugin*>(
      &from));
}

void Plugin::MergeFrom(const Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
}

void Plugin::CopyFrom(const Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin::IsInitialized() const {
  return true;
}

void Plugin::InternalSwap(Plugin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string Plugin::GetTypeName() const {
  return "enterprise_management.Plugin";
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
class Policy::_Internal {
 public:
  using HasBits = decltype(std::declval<Policy>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Policy::Policy()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.Policy)
}
Policy::Policy(const Policy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&level_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.Policy)
}

void Policy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Policy_device_5fmanagement_5fbackend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&level_)) + sizeof(source_));
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:enterprise_management.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Policy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Policy& Policy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Policy_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      error_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&level_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Policy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Policy.PolicyLevel level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Policy_PolicyLevel_IsValid(val))) {
            set_level(static_cast<::enterprise_management::Policy_PolicyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Policy.PolicyScope scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Policy_PolicyScope_IsValid(val))) {
            set_scope(static_cast<::enterprise_management::Policy_PolicyScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Policy.PolicySource source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Policy_PolicySource_IsValid(val))) {
            set_source(static_cast<::enterprise_management::Policy_PolicySource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Policy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.Policy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Policy.PolicyLevel level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Policy_PolicyLevel_IsValid(value)) {
            set_level(static_cast< ::enterprise_management::Policy_PolicyLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Policy.PolicyScope scope = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Policy_PolicyScope_IsValid(value)) {
            set_scope(static_cast< ::enterprise_management::Policy_PolicyScope >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Policy.PolicySource source = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Policy_PolicySource_IsValid(value)) {
            set_source(static_cast< ::enterprise_management::Policy_PolicySource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.Policy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Policy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .enterprise_management.Policy.PolicyLevel level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // optional .enterprise_management.Policy.PolicyScope scope = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->scope(), output);
  }

  // optional .enterprise_management.Policy.PolicySource source = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->source(), output);
  }

  // optional string value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  // optional string error = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.Policy)
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.Policy)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string error = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .enterprise_management.Policy.PolicyLevel level = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional .enterprise_management.Policy.PolicyScope scope = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->scope());
    }

    // optional .enterprise_management.Policy.PolicySource source = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Policy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Policy*>(
      &from));
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::InternalSwap(Policy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(scope_, other->scope_);
  swap(source_, other->source_);
}

std::string Policy::GetTypeName() const {
  return "enterprise_management.Policy";
}


// ===================================================================

void ExtensionPolicy::InitAsDefaultInstance() {
}
class ExtensionPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionPolicy>()._has_bits_);
  static void set_has_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExtensionPolicy::ExtensionPolicy()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ExtensionPolicy)
}
ExtensionPolicy::ExtensionPolicy(const ExtensionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ExtensionPolicy)
}

void ExtensionPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto.base);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExtensionPolicy::~ExtensionPolicy() {
  // @@protoc_insertion_point(destructor:enterprise_management.ExtensionPolicy)
  SharedDtor();
}

void ExtensionPolicy::SharedDtor() {
  extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtensionPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionPolicy& ExtensionPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionPolicy_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ExtensionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ExtensionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extension_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string extension_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.Policy policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionPolicy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ExtensionPolicy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.Policy policies = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ExtensionPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ExtensionPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionPolicy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ExtensionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_id(), output);
  }

  // repeated .enterprise_management.Policy policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->policies(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ExtensionPolicy)
}

size_t ExtensionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ExtensionPolicy)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.Policy policies = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->policies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->policies(static_cast<int>(i)));
    }
  }

  // optional string extension_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->extension_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionPolicy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionPolicy*>(
      &from));
}

void ExtensionPolicy::MergeFrom(const ExtensionPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ExtensionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  if (from.has_extension_id()) {
    _has_bits_[0] |= 0x00000001u;
    extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
}

void ExtensionPolicy::CopyFrom(const ExtensionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ExtensionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionPolicy::IsInitialized() const {
  return true;
}

void ExtensionPolicy::InternalSwap(ExtensionPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&policies_)->InternalSwap(CastToBase(&other->policies_));
  extension_id_.Swap(&other->extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ExtensionPolicy::GetTypeName() const {
  return "enterprise_management.ExtensionPolicy";
}


// ===================================================================

void PolicyFetchTimestamp::InitAsDefaultInstance() {
}
class PolicyFetchTimestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyFetchTimestamp>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PolicyFetchTimestamp::PolicyFetchTimestamp()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchTimestamp)
}
PolicyFetchTimestamp::PolicyFetchTimestamp(const PolicyFetchTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchTimestamp)
}

void PolicyFetchTimestamp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

PolicyFetchTimestamp::~PolicyFetchTimestamp() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchTimestamp)
  SharedDtor();
}

void PolicyFetchTimestamp::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyFetchTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyFetchTimestamp& PolicyFetchTimestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyFetchTimestamp_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyFetchTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmptyNoArena();
  }
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyFetchTimestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyFetchTimestamp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchTimestamp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchTimestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchTimestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyFetchTimestamp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchTimestamp)
}

size_t PolicyFetchTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchTimestamp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyFetchTimestamp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyFetchTimestamp*>(
      &from));
}

void PolicyFetchTimestamp::MergeFrom(const PolicyFetchTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyFetchTimestamp::CopyFrom(const PolicyFetchTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyFetchTimestamp::IsInitialized() const {
  return true;
}

void PolicyFetchTimestamp::InternalSwap(PolicyFetchTimestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

std::string PolicyFetchTimestamp::GetTypeName() const {
  return "enterprise_management.PolicyFetchTimestamp";
}


// ===================================================================

void ChromeUserProfileInfo::InitAsDefaultInstance() {
  ::enterprise_management::_ChromeUserProfileInfo_default_instance_._instance.get_mutable()->chrome_signed_in_user_ = const_cast< ::enterprise_management::ChromeSignedInUser*>(
      ::enterprise_management::ChromeSignedInUser::internal_default_instance());
}
class ChromeUserProfileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserProfileInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_full_report(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::ChromeSignedInUser& chrome_signed_in_user(const ChromeUserProfileInfo* msg);
  static void set_has_chrome_signed_in_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_management::ChromeSignedInUser&
ChromeUserProfileInfo::_Internal::chrome_signed_in_user(const ChromeUserProfileInfo* msg) {
  return *msg->chrome_signed_in_user_;
}
ChromeUserProfileInfo::ChromeUserProfileInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeUserProfileInfo)
}
ChromeUserProfileInfo::ChromeUserProfileInfo(const ChromeUserProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extensions_(from.extensions_),
      chrome_policies_(from.chrome_policies_),
      extension_policies_(from.extension_policies_),
      policy_fetched_timestamps_(from.policy_fetched_timestamps_),
      extension_requests_(from.extension_requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_chrome_signed_in_user()) {
    chrome_signed_in_user_ = new ::enterprise_management::ChromeSignedInUser(*from.chrome_signed_in_user_);
  } else {
    chrome_signed_in_user_ = nullptr;
  }
  is_full_report_ = from.is_full_report_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeUserProfileInfo)
}

void ChromeUserProfileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chrome_signed_in_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_report_) -
      reinterpret_cast<char*>(&chrome_signed_in_user_)) + sizeof(is_full_report_));
}

ChromeUserProfileInfo::~ChromeUserProfileInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeUserProfileInfo)
  SharedDtor();
}

void ChromeUserProfileInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chrome_signed_in_user_;
}

void ChromeUserProfileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeUserProfileInfo& ChromeUserProfileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeUserProfileInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeUserProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeUserProfileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  chrome_policies_.Clear();
  extension_policies_.Clear();
  policy_fetched_timestamps_.Clear();
  extension_requests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chrome_signed_in_user_ != nullptr);
      chrome_signed_in_user_->Clear();
    }
  }
  is_full_report_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeUserProfileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_full_report(&has_bits);
          is_full_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChromeSignedInUser chrome_signed_in_user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_chrome_signed_in_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.Extension extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.Policy chrome_policies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chrome_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ExtensionPolicy extension_policies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extension_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.PolicyFetchTimestamp policy_fetched_timestamps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_policy_fetched_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extension_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeUserProfileInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeUserProfileInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_full_report = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_full_report(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeSignedInUser chrome_signed_in_user = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_signed_in_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.Extension extensions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.Policy chrome_policies = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chrome_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ExtensionPolicy extension_policies = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extension_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.PolicyFetchTimestamp policy_fetched_timestamps = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_policy_fetched_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extension_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeUserProfileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeUserProfileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeUserProfileInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeUserProfileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool is_full_report = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_full_report(), output);
  }

  // optional .enterprise_management.ChromeSignedInUser chrome_signed_in_user = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::chrome_signed_in_user(this), output);
  }

  // repeated .enterprise_management.Extension extensions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->extensions(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.Policy chrome_policies = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chrome_policies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->chrome_policies(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.ExtensionPolicy extension_policies = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_policies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->extension_policies(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.PolicyFetchTimestamp policy_fetched_timestamps = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policy_fetched_timestamps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->policy_fetched_timestamps(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->extension_requests(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeUserProfileInfo)
}

size_t ChromeUserProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeUserProfileInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.Extension extensions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extensions(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.Policy chrome_policies = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->chrome_policies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chrome_policies(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.ExtensionPolicy extension_policies = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_policies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extension_policies(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.PolicyFetchTimestamp policy_fetched_timestamps = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->policy_fetched_timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->policy_fetched_timestamps(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.ExtensionRequest extension_requests = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extension_requests(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .enterprise_management.ChromeSignedInUser chrome_signed_in_user = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_signed_in_user_);
    }

    // optional bool is_full_report = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserProfileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeUserProfileInfo*>(
      &from));
}

void ChromeUserProfileInfo::MergeFrom(const ChromeUserProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeUserProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  chrome_policies_.MergeFrom(from.chrome_policies_);
  extension_policies_.MergeFrom(from.extension_policies_);
  policy_fetched_timestamps_.MergeFrom(from.policy_fetched_timestamps_);
  extension_requests_.MergeFrom(from.extension_requests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chrome_signed_in_user()->::enterprise_management::ChromeSignedInUser::MergeFrom(from.chrome_signed_in_user());
    }
    if (cached_has_bits & 0x00000008u) {
      is_full_report_ = from.is_full_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeUserProfileInfo::CopyFrom(const ChromeUserProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeUserProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserProfileInfo::IsInitialized() const {
  return true;
}

void ChromeUserProfileInfo::InternalSwap(ChromeUserProfileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&extensions_)->InternalSwap(CastToBase(&other->extensions_));
  CastToBase(&chrome_policies_)->InternalSwap(CastToBase(&other->chrome_policies_));
  CastToBase(&extension_policies_)->InternalSwap(CastToBase(&other->extension_policies_));
  CastToBase(&policy_fetched_timestamps_)->InternalSwap(CastToBase(&other->policy_fetched_timestamps_));
  CastToBase(&extension_requests_)->InternalSwap(CastToBase(&other->extension_requests_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chrome_signed_in_user_, other->chrome_signed_in_user_);
  swap(is_full_report_, other->is_full_report_);
}

std::string ChromeUserProfileInfo::GetTypeName() const {
  return "enterprise_management.ChromeUserProfileInfo";
}


// ===================================================================

void BrowserReport::InitAsDefaultInstance() {
}
class BrowserReport::_Internal {
 public:
  using HasBits = decltype(std::declval<BrowserReport>()._has_bits_);
  static void set_has_browser_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_executable_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BrowserReport::BrowserReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BrowserReport)
}
BrowserReport::BrowserReport(const BrowserReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chrome_user_profile_reports_(from.chrome_user_profile_reports_),
      chrome_user_profile_infos_(from.chrome_user_profile_infos_),
      plugins_(from.plugins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_version()) {
    browser_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
  }
  executable_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_executable_path()) {
    executable_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BrowserReport)
}

void BrowserReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto.base);
  browser_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executable_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

BrowserReport::~BrowserReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.BrowserReport)
  SharedDtor();
}

void BrowserReport::SharedDtor() {
  browser_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executable_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BrowserReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrowserReport& BrowserReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrowserReport_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void BrowserReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BrowserReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chrome_user_profile_reports_.Clear();
  chrome_user_profile_infos_.Clear();
  plugins_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      executable_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  channel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrowserReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string browser_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_browser_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.Channel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::Channel_IsValid(val))) {
            set_channel(static_cast<::enterprise_management::Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string executable_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_executable_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chrome_user_profile_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ChromeUserProfileInfo chrome_user_profile_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chrome_user_profile_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.Plugin plugins = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_plugins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrowserReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BrowserReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string browser_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.Channel channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::Channel_IsValid(value)) {
            set_channel(static_cast< ::enterprise_management::Channel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string executable_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_executable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chrome_user_profile_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ChromeUserProfileInfo chrome_user_profile_infos = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chrome_user_profile_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.Plugin plugins = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_plugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BrowserReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BrowserReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrowserReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BrowserReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string browser_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->browser_version(), output);
  }

  // optional .enterprise_management.Channel channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->channel(), output);
  }

  // optional string executable_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->executable_path(), output);
  }

  // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chrome_user_profile_reports_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->chrome_user_profile_reports(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.ChromeUserProfileInfo chrome_user_profile_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chrome_user_profile_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->chrome_user_profile_infos(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.Plugin plugins = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugins_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->plugins(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BrowserReport)
}

size_t BrowserReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BrowserReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->chrome_user_profile_reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chrome_user_profile_reports(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.ChromeUserProfileInfo chrome_user_profile_infos = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->chrome_user_profile_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chrome_user_profile_infos(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.Plugin plugins = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->plugins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->plugins(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string browser_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->browser_version());
    }

    // optional string executable_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->executable_path());
    }

    // optional .enterprise_management.Channel channel = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrowserReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BrowserReport*>(
      &from));
}

void BrowserReport::MergeFrom(const BrowserReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BrowserReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chrome_user_profile_reports_.MergeFrom(from.chrome_user_profile_reports_);
  chrome_user_profile_infos_.MergeFrom(from.chrome_user_profile_infos_);
  plugins_.MergeFrom(from.plugins_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      browser_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      executable_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrowserReport::CopyFrom(const BrowserReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BrowserReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserReport::IsInitialized() const {
  return true;
}

void BrowserReport::InternalSwap(BrowserReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&chrome_user_profile_reports_)->InternalSwap(CastToBase(&other->chrome_user_profile_reports_));
  CastToBase(&chrome_user_profile_infos_)->InternalSwap(CastToBase(&other->chrome_user_profile_infos_));
  CastToBase(&plugins_)->InternalSwap(CastToBase(&other->plugins_));
  browser_version_.Swap(&other->browser_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  executable_path_.Swap(&other->executable_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
}

std::string BrowserReport::GetTypeName() const {
  return "enterprise_management.BrowserReport";
}


// ===================================================================

void OSReport::InitAsDefaultInstance() {
}
class OSReport::_Internal {
 public:
  using HasBits = decltype(std::declval<OSReport>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OSReport::OSReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.OSReport)
}
OSReport::OSReport(const OSReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_arch()) {
    arch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OSReport)
}

void OSReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OSReport_device_5fmanagement_5fbackend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OSReport::~OSReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.OSReport)
  SharedDtor();
}

void OSReport::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OSReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OSReport& OSReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OSReport_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void OSReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OSReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      arch_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OSReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string arch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_arch(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OSReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.OSReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string arch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_arch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.OSReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.OSReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OSReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.OSReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string arch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arch(), output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.OSReport)
}

size_t OSReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OSReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string arch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->arch());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OSReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OSReport*>(
      &from));
}

void OSReport::MergeFrom(const OSReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OSReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      arch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arch_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
}

void OSReport::CopyFrom(const OSReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OSReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSReport::IsInitialized() const {
  return true;
}

void OSReport::InternalSwap(OSReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  arch_.Swap(&other->arch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string OSReport::GetTypeName() const {
  return "enterprise_management.OSReport";
}


// ===================================================================

void ChromeDesktopReportRequest::InitAsDefaultInstance() {
  ::enterprise_management::_ChromeDesktopReportRequest_default_instance_._instance.get_mutable()->browser_report_ = const_cast< ::enterprise_management::BrowserReport*>(
      ::enterprise_management::BrowserReport::internal_default_instance());
  ::enterprise_management::_ChromeDesktopReportRequest_default_instance_._instance.get_mutable()->os_report_ = const_cast< ::enterprise_management::OSReport*>(
      ::enterprise_management::OSReport::internal_default_instance());
}
class ChromeDesktopReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeDesktopReportRequest>()._has_bits_);
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_os_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::BrowserReport& browser_report(const ChromeDesktopReportRequest* msg);
  static void set_has_browser_report(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_computer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::OSReport& os_report(const ChromeDesktopReportRequest* msg);
  static void set_has_os_report(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_os_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::enterprise_management::BrowserReport&
ChromeDesktopReportRequest::_Internal::browser_report(const ChromeDesktopReportRequest* msg) {
  return *msg->browser_report_;
}
const ::enterprise_management::OSReport&
ChromeDesktopReportRequest::_Internal::os_report(const ChromeDesktopReportRequest* msg) {
  return *msg->os_report_;
}
ChromeDesktopReportRequest::ChromeDesktopReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeDesktopReportRequest)
}
ChromeDesktopReportRequest::ChromeDesktopReportRequest(const ChromeDesktopReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  os_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_info()) {
    os_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_info_);
  }
  os_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_user()) {
    os_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_user_);
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  computer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_computer_name()) {
    computer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  os_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_user_name()) {
    os_user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_user_name_);
  }
  if (from.has_browser_report()) {
    browser_report_ = new ::enterprise_management::BrowserReport(*from.browser_report_);
  } else {
    browser_report_ = nullptr;
  }
  if (from.has_os_report()) {
    os_report_ = new ::enterprise_management::OSReport(*from.os_report_);
  } else {
    os_report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeDesktopReportRequest)
}

void ChromeDesktopReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&os_report_) -
      reinterpret_cast<char*>(&browser_report_)) + sizeof(os_report_));
}

ChromeDesktopReportRequest::~ChromeDesktopReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeDesktopReportRequest)
  SharedDtor();
}

void ChromeDesktopReportRequest::SharedDtor() {
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete browser_report_;
  if (this != internal_default_instance()) delete os_report_;
}

void ChromeDesktopReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeDesktopReportRequest& ChromeDesktopReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeDesktopReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeDesktopReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeDesktopReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      os_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      computer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      os_user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(browser_report_ != nullptr);
      browser_report_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(os_report_ != nullptr);
      os_report_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeDesktopReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string machine_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BrowserReport browser_report = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_browser_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serial_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serial_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string computer_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_computer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OSReport os_report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_os_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_user_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_user_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeDesktopReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeDesktopReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string machine_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_user = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BrowserReport browser_report = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browser_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string computer_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_computer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.OSReport os_report = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_os_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_user_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_user_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeDesktopReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeDesktopReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeDesktopReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeDesktopReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_name(), output);
  }

  // optional string os_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_info(), output);
  }

  // optional string os_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os_user(), output);
  }

  // optional .enterprise_management.BrowserReport browser_report = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::browser_report(this), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional string computer_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->computer_name(), output);
  }

  // optional .enterprise_management.OSReport os_report = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::os_report(this), output);
  }

  // optional string os_user_name = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->os_user_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeDesktopReportRequest)
}

size_t ChromeDesktopReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeDesktopReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string machine_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string os_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_info());
    }

    // optional string os_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_user());
    }

    // optional string serial_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string computer_name = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->computer_name());
    }

    // optional string os_user_name = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_user_name());
    }

    // optional .enterprise_management.BrowserReport browser_report = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browser_report_);
    }

    // optional .enterprise_management.OSReport os_report = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *os_report_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeDesktopReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeDesktopReportRequest*>(
      &from));
}

void ChromeDesktopReportRequest::MergeFrom(const ChromeDesktopReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeDesktopReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      os_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      os_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_user_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      computer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      os_user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_user_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_browser_report()->::enterprise_management::BrowserReport::MergeFrom(from.browser_report());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_os_report()->::enterprise_management::OSReport::MergeFrom(from.os_report());
    }
  }
}

void ChromeDesktopReportRequest::CopyFrom(const ChromeDesktopReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeDesktopReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeDesktopReportRequest::IsInitialized() const {
  return true;
}

void ChromeDesktopReportRequest::InternalSwap(ChromeDesktopReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_info_.Swap(&other->os_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_user_.Swap(&other->os_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  computer_name_.Swap(&other->computer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_user_name_.Swap(&other->os_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_report_, other->browser_report_);
  swap(os_report_, other->os_report_);
}

std::string ChromeDesktopReportRequest::GetTypeName() const {
  return "enterprise_management.ChromeDesktopReportRequest";
}


// ===================================================================

void ChromeOsUserReportRequest::InitAsDefaultInstance() {
  ::enterprise_management::_ChromeOsUserReportRequest_default_instance_._instance.get_mutable()->browser_report_ = const_cast< ::enterprise_management::BrowserReport*>(
      ::enterprise_management::BrowserReport::internal_default_instance());
}
class ChromeOsUserReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOsUserReportRequest>()._has_bits_);
  static const ::enterprise_management::BrowserReport& browser_report(const ChromeOsUserReportRequest* msg);
  static void set_has_browser_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::BrowserReport&
ChromeOsUserReportRequest::_Internal::browser_report(const ChromeOsUserReportRequest* msg) {
  return *msg->browser_report_;
}
ChromeOsUserReportRequest::ChromeOsUserReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeOsUserReportRequest)
}
ChromeOsUserReportRequest::ChromeOsUserReportRequest(const ChromeOsUserReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      android_app_infos_(from.android_app_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_browser_report()) {
    browser_report_ = new ::enterprise_management::BrowserReport(*from.browser_report_);
  } else {
    browser_report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeOsUserReportRequest)
}

void ChromeOsUserReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  browser_report_ = nullptr;
}

ChromeOsUserReportRequest::~ChromeOsUserReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeOsUserReportRequest)
  SharedDtor();
}

void ChromeOsUserReportRequest::SharedDtor() {
  if (this != internal_default_instance()) delete browser_report_;
}

void ChromeOsUserReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeOsUserReportRequest& ChromeOsUserReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeOsUserReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeOsUserReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeOsUserReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  android_app_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(browser_report_ != nullptr);
    browser_report_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeOsUserReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.BrowserReport browser_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_browser_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AndroidAppInfo android_app_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_android_app_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeOsUserReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeOsUserReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.BrowserReport browser_report = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browser_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AndroidAppInfo android_app_infos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_android_app_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeOsUserReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeOsUserReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeOsUserReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeOsUserReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.BrowserReport browser_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::browser_report(this), output);
  }

  // repeated .enterprise_management.AndroidAppInfo android_app_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->android_app_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->android_app_infos(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeOsUserReportRequest)
}

size_t ChromeOsUserReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeOsUserReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AndroidAppInfo android_app_infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->android_app_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->android_app_infos(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.BrowserReport browser_report = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *browser_report_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOsUserReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeOsUserReportRequest*>(
      &from));
}

void ChromeOsUserReportRequest::MergeFrom(const ChromeOsUserReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeOsUserReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  android_app_infos_.MergeFrom(from.android_app_infos_);
  if (from.has_browser_report()) {
    mutable_browser_report()->::enterprise_management::BrowserReport::MergeFrom(from.browser_report());
  }
}

void ChromeOsUserReportRequest::CopyFrom(const ChromeOsUserReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeOsUserReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOsUserReportRequest::IsInitialized() const {
  return true;
}

void ChromeOsUserReportRequest::InternalSwap(ChromeOsUserReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&android_app_infos_)->InternalSwap(CastToBase(&other->android_app_infos_));
  swap(browser_report_, other->browser_report_);
}

std::string ChromeOsUserReportRequest::GetTypeName() const {
  return "enterprise_management.ChromeOsUserReportRequest";
}


// ===================================================================

void PolicyValueValidationIssue::InitAsDefaultInstance() {
}
class PolicyValueValidationIssue::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyValueValidationIssue>()._has_bits_);
  static void set_has_policy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_debug_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PolicyValueValidationIssue::PolicyValueValidationIssue()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValueValidationIssue)
}
PolicyValueValidationIssue::PolicyValueValidationIssue(const PolicyValueValidationIssue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_name()) {
    policy_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_name_);
  }
  debug_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug_message()) {
    debug_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValueValidationIssue)
}

void PolicyValueValidationIssue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto.base);
  policy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  severity_ = 0;
}

PolicyValueValidationIssue::~PolicyValueValidationIssue() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValueValidationIssue)
  SharedDtor();
}

void PolicyValueValidationIssue::SharedDtor() {
  policy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyValueValidationIssue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyValueValidationIssue& PolicyValueValidationIssue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyValueValidationIssue_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyValueValidationIssue::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValueValidationIssue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      policy_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      debug_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  severity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyValueValidationIssue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyValueValidationIssue.ValueValidationIssueSeverity severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyValueValidationIssue_ValueValidationIssueSeverity_IsValid(val))) {
            set_severity(static_cast<::enterprise_management::PolicyValueValidationIssue_ValueValidationIssueSeverity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string debug_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_debug_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyValueValidationIssue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValueValidationIssue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValueValidationIssue.ValueValidationIssueSeverity severity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyValueValidationIssue_ValueValidationIssueSeverity_IsValid(value)) {
            set_severity(static_cast< ::enterprise_management::PolicyValueValidationIssue_ValueValidationIssueSeverity >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug_message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValueValidationIssue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValueValidationIssue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyValueValidationIssue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValueValidationIssue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_name(), output);
  }

  // optional .enterprise_management.PolicyValueValidationIssue.ValueValidationIssueSeverity severity = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // optional string debug_message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValueValidationIssue)
}

size_t PolicyValueValidationIssue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValueValidationIssue)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string policy_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_name());
    }

    // optional string debug_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->debug_message());
    }

    // optional .enterprise_management.PolicyValueValidationIssue.ValueValidationIssueSeverity severity = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->severity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyValueValidationIssue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyValueValidationIssue*>(
      &from));
}

void PolicyValueValidationIssue::MergeFrom(const PolicyValueValidationIssue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValueValidationIssue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      policy_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      debug_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyValueValidationIssue::CopyFrom(const PolicyValueValidationIssue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValueValidationIssue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValueValidationIssue::IsInitialized() const {
  return true;
}

void PolicyValueValidationIssue::InternalSwap(PolicyValueValidationIssue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  policy_name_.Swap(&other->policy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  debug_message_.Swap(&other->debug_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
}

std::string PolicyValueValidationIssue::GetTypeName() const {
  return "enterprise_management.PolicyValueValidationIssue";
}


// ===================================================================

void PolicyValidationReportRequest::InitAsDefaultInstance() {
}
class PolicyValidationReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyValidationReportRequest>()._has_bits_);
  static void set_has_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_policy_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_validation_result_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PolicyValidationReportRequest::PolicyValidationReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValidationReportRequest)
}
PolicyValidationReportRequest::PolicyValidationReportRequest(const PolicyValidationReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      policy_value_validation_issues_(from.policy_value_validation_issues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  policy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_token()) {
    policy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
  }
  validation_result_type_ = from.validation_result_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValidationReportRequest)
}

void PolicyValidationReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validation_result_type_ = 0;
}

PolicyValidationReportRequest::~PolicyValidationReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValidationReportRequest)
  SharedDtor();
}

void PolicyValidationReportRequest::SharedDtor() {
  policy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyValidationReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyValidationReportRequest& PolicyValidationReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyValidationReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyValidationReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValidationReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_value_validation_issues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      policy_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      policy_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  validation_result_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyValidationReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_policy_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyValidationReportRequest_ValidationResultType_IsValid(val))) {
            set_validation_result_type(static_cast<::enterprise_management::PolicyValidationReportRequest_ValidationResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.PolicyValueValidationIssue policy_value_validation_issues = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_policy_value_validation_issues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyValidationReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValidationReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyValidationReportRequest_ValidationResultType_IsValid(value)) {
            set_validation_result_type(static_cast< ::enterprise_management::PolicyValidationReportRequest_ValidationResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.PolicyValueValidationIssue policy_value_validation_issues = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_policy_value_validation_issues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValidationReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValidationReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyValidationReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValidationReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional string policy_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->policy_token(), output);
  }

  // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->validation_result_type(), output);
  }

  // repeated .enterprise_management.PolicyValueValidationIssue policy_value_validation_issues = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policy_value_validation_issues_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->policy_value_validation_issues(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValidationReportRequest)
}

size_t PolicyValidationReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValidationReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyValueValidationIssue policy_value_validation_issues = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->policy_value_validation_issues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->policy_value_validation_issues(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string policy_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string policy_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy_token());
    }

    // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->validation_result_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyValidationReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyValidationReportRequest*>(
      &from));
}

void PolicyValidationReportRequest::MergeFrom(const PolicyValidationReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValidationReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policy_value_validation_issues_.MergeFrom(from.policy_value_validation_issues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      policy_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      policy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      validation_result_type_ = from.validation_result_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyValidationReportRequest::CopyFrom(const PolicyValidationReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValidationReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValidationReportRequest::IsInitialized() const {
  return true;
}

void PolicyValidationReportRequest::InternalSwap(PolicyValidationReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&policy_value_validation_issues_)->InternalSwap(CastToBase(&other->policy_value_validation_issues_));
  policy_type_.Swap(&other->policy_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_token_.Swap(&other->policy_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(validation_result_type_, other->validation_result_type_);
}

std::string PolicyValidationReportRequest::GetTypeName() const {
  return "enterprise_management.PolicyValidationReportRequest";
}


// ===================================================================

void PolicyValidationReportResponse::InitAsDefaultInstance() {
}
class PolicyValidationReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyValidationReportResponse>()._has_bits_);
};

PolicyValidationReportResponse::PolicyValidationReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValidationReportResponse)
}
PolicyValidationReportResponse::PolicyValidationReportResponse(const PolicyValidationReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValidationReportResponse)
}

void PolicyValidationReportResponse::SharedCtor() {
}

PolicyValidationReportResponse::~PolicyValidationReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValidationReportResponse)
  SharedDtor();
}

void PolicyValidationReportResponse::SharedDtor() {
}

void PolicyValidationReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyValidationReportResponse& PolicyValidationReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyValidationReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PolicyValidationReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValidationReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyValidationReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyValidationReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValidationReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValidationReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValidationReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyValidationReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValidationReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValidationReportResponse)
}

size_t PolicyValidationReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValidationReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyValidationReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyValidationReportResponse*>(
      &from));
}

void PolicyValidationReportResponse::MergeFrom(const PolicyValidationReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValidationReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PolicyValidationReportResponse::CopyFrom(const PolicyValidationReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValidationReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValidationReportResponse::IsInitialized() const {
  return true;
}

void PolicyValidationReportResponse::InternalSwap(PolicyValidationReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PolicyValidationReportResponse::GetTypeName() const {
  return "enterprise_management.PolicyValidationReportResponse";
}


// ===================================================================

void AndroidStatus::InitAsDefaultInstance() {
}
class AndroidStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidStatus>()._has_bits_);
  static void set_has_status_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_droid_guard_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidStatus::AndroidStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AndroidStatus)
}
AndroidStatus::AndroidStatus(const AndroidStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_status_payload()) {
    status_payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_payload_);
  }
  droid_guard_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_droid_guard_info()) {
    droid_guard_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.droid_guard_info_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidStatus)
}

void AndroidStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto.base);
  status_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  droid_guard_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AndroidStatus::~AndroidStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.AndroidStatus)
  SharedDtor();
}

void AndroidStatus::SharedDtor() {
  status_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  droid_guard_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AndroidStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidStatus& AndroidStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AndroidStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      status_payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      droid_guard_info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndroidStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string status_payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_status_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string droid_guard_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_droid_guard_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndroidStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AndroidStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status_payload = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_status_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string droid_guard_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_droid_guard_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AndroidStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AndroidStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndroidStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AndroidStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status_payload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status_payload(), output);
  }

  // optional string droid_guard_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->droid_guard_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AndroidStatus)
}

size_t AndroidStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string status_payload = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->status_payload());
    }

    // optional string droid_guard_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->droid_guard_info());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidStatus*>(
      &from));
}

void AndroidStatus::MergeFrom(const AndroidStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      status_payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      droid_guard_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.droid_guard_info_);
    }
  }
}

void AndroidStatus::CopyFrom(const AndroidStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidStatus::IsInitialized() const {
  return true;
}

void AndroidStatus::InternalSwap(AndroidStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_payload_.Swap(&other->status_payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  droid_guard_info_.Swap(&other->droid_guard_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string AndroidStatus::GetTypeName() const {
  return "enterprise_management.AndroidStatus";
}


// ===================================================================

void CrostiniApp::InitAsDefaultInstance() {
}
class CrostiniApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CrostiniApp>()._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_launch_time_window_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CrostiniApp::CrostiniApp()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CrostiniApp)
}
CrostiniApp::CrostiniApp(const CrostiniApp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  package_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_version()) {
    package_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_version_);
  }
  package_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_hash()) {
    package_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_hash_);
  }
  ::memcpy(&last_launch_time_window_start_timestamp_, &from.last_launch_time_window_start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_type_) -
    reinterpret_cast<char*>(&last_launch_time_window_start_timestamp_)) + sizeof(app_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CrostiniApp)
}

void CrostiniApp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto.base);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_launch_time_window_start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_type_) -
      reinterpret_cast<char*>(&last_launch_time_window_start_timestamp_)) + sizeof(app_type_));
}

CrostiniApp::~CrostiniApp() {
  // @@protoc_insertion_point(destructor:enterprise_management.CrostiniApp)
  SharedDtor();
}

void CrostiniApp::SharedDtor() {
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrostiniApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrostiniApp& CrostiniApp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrostiniApp_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CrostiniApp::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CrostiniApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      package_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      package_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&last_launch_time_window_start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_type_) -
        reinterpret_cast<char*>(&last_launch_time_window_start_timestamp_)) + sizeof(app_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrostiniApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CrostiniAppType app_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::CrostiniAppType_IsValid(val))) {
            set_app_type(static_cast<::enterprise_management::CrostiniAppType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 last_launch_time_window_start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_launch_time_window_start_timestamp(&has_bits);
          last_launch_time_window_start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrostiniApp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CrostiniApp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CrostiniAppType app_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CrostiniAppType_IsValid(value)) {
            set_app_type(static_cast< ::enterprise_management::CrostiniAppType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_launch_time_window_start_timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_launch_time_window_start_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_launch_time_window_start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_hash = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CrostiniApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CrostiniApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrostiniApp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CrostiniApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_name(), output);
  }

  // optional .enterprise_management.CrostiniAppType app_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->app_type(), output);
  }

  // optional int64 last_launch_time_window_start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_launch_time_window_start_timestamp(), output);
  }

  // optional string package_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->package_name(), output);
  }

  // optional string package_version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->package_version(), output);
  }

  // optional string package_hash = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->package_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CrostiniApp)
}

size_t CrostiniApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CrostiniApp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string app_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string package_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional string package_version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_version());
    }

    // optional string package_hash = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_hash());
    }

    // optional int64 last_launch_time_window_start_timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_launch_time_window_start_timestamp());
    }

    // optional .enterprise_management.CrostiniAppType app_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->app_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrostiniApp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CrostiniApp*>(
      &from));
}

void CrostiniApp::MergeFrom(const CrostiniApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CrostiniApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      package_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      package_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      last_launch_time_window_start_timestamp_ = from.last_launch_time_window_start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_type_ = from.app_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrostiniApp::CopyFrom(const CrostiniApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CrostiniApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrostiniApp::IsInitialized() const {
  return true;
}

void CrostiniApp::InternalSwap(CrostiniApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_version_.Swap(&other->package_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_hash_.Swap(&other->package_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_launch_time_window_start_timestamp_, other->last_launch_time_window_start_timestamp_);
  swap(app_type_, other->app_type_);
}

std::string CrostiniApp::GetTypeName() const {
  return "enterprise_management.CrostiniApp";
}


// ===================================================================

void CrostiniStatus::InitAsDefaultInstance() {
}
class CrostiniStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CrostiniStatus>()._has_bits_);
  static void set_has_last_launch_time_window_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_launch_vm_image_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_launch_vm_kernel_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CrostiniStatus::CrostiniStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CrostiniStatus)
}
CrostiniStatus::CrostiniStatus(const CrostiniStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      installed_apps_(from.installed_apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_launch_vm_image_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_launch_vm_image_version()) {
    last_launch_vm_image_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_launch_vm_image_version_);
  }
  last_launch_vm_kernel_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_launch_vm_kernel_version()) {
    last_launch_vm_kernel_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_launch_vm_kernel_version_);
  }
  last_launch_time_window_start_timestamp_ = from.last_launch_time_window_start_timestamp_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CrostiniStatus)
}

void CrostiniStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto.base);
  last_launch_vm_image_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_launch_vm_kernel_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_launch_time_window_start_timestamp_ = PROTOBUF_LONGLONG(0);
}

CrostiniStatus::~CrostiniStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.CrostiniStatus)
  SharedDtor();
}

void CrostiniStatus::SharedDtor() {
  last_launch_vm_image_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_launch_vm_kernel_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrostiniStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrostiniStatus& CrostiniStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrostiniStatus_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CrostiniStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CrostiniStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  installed_apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_launch_vm_image_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_launch_vm_kernel_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  last_launch_time_window_start_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrostiniStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 last_launch_time_window_start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_launch_time_window_start_timestamp(&has_bits);
          last_launch_time_window_start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_launch_vm_image_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_launch_vm_image_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_launch_vm_kernel_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_launch_vm_kernel_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.CrostiniApp installed_apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_installed_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrostiniStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CrostiniStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_launch_time_window_start_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_launch_time_window_start_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_launch_time_window_start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_launch_vm_image_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_launch_vm_image_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_launch_vm_kernel_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_launch_vm_kernel_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CrostiniApp installed_apps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_installed_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CrostiniStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CrostiniStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrostiniStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CrostiniStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_launch_time_window_start_timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_launch_time_window_start_timestamp(), output);
  }

  // optional string last_launch_vm_image_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_launch_vm_image_version(), output);
  }

  // optional string last_launch_vm_kernel_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_launch_vm_kernel_version(), output);
  }

  // repeated .enterprise_management.CrostiniApp installed_apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->installed_apps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->installed_apps(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CrostiniStatus)
}

size_t CrostiniStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CrostiniStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.CrostiniApp installed_apps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->installed_apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->installed_apps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string last_launch_vm_image_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_launch_vm_image_version());
    }

    // optional string last_launch_vm_kernel_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_launch_vm_kernel_version());
    }

    // optional int64 last_launch_time_window_start_timestamp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_launch_time_window_start_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrostiniStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CrostiniStatus*>(
      &from));
}

void CrostiniStatus::MergeFrom(const CrostiniStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CrostiniStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  installed_apps_.MergeFrom(from.installed_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      last_launch_vm_image_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_launch_vm_image_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      last_launch_vm_kernel_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_launch_vm_kernel_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      last_launch_time_window_start_timestamp_ = from.last_launch_time_window_start_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrostiniStatus::CopyFrom(const CrostiniStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CrostiniStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrostiniStatus::IsInitialized() const {
  return true;
}

void CrostiniStatus::InternalSwap(CrostiniStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&installed_apps_)->InternalSwap(CastToBase(&other->installed_apps_));
  last_launch_vm_image_version_.Swap(&other->last_launch_vm_image_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_launch_vm_kernel_version_.Swap(&other->last_launch_vm_kernel_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_launch_time_window_start_timestamp_, other->last_launch_time_window_start_timestamp_);
}

std::string CrostiniStatus::GetTypeName() const {
  return "enterprise_management.CrostiniStatus";
}


// ===================================================================

void SessionStatusReportRequest::InitAsDefaultInstance() {
  ::enterprise_management::_SessionStatusReportRequest_default_instance_._instance.get_mutable()->android_status_ = const_cast< ::enterprise_management::AndroidStatus*>(
      ::enterprise_management::AndroidStatus::internal_default_instance());
  ::enterprise_management::_SessionStatusReportRequest_default_instance_._instance.get_mutable()->crostini_status_ = const_cast< ::enterprise_management::CrostiniStatus*>(
      ::enterprise_management::CrostiniStatus::internal_default_instance());
}
class SessionStatusReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionStatusReportRequest>()._has_bits_);
  static void set_has_device_local_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::AndroidStatus& android_status(const SessionStatusReportRequest* msg);
  static void set_has_android_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::CrostiniStatus& crostini_status(const SessionStatusReportRequest* msg);
  static void set_has_crostini_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::enterprise_management::AndroidStatus&
SessionStatusReportRequest::_Internal::android_status(const SessionStatusReportRequest* msg) {
  return *msg->android_status_;
}
const ::enterprise_management::CrostiniStatus&
SessionStatusReportRequest::_Internal::crostini_status(const SessionStatusReportRequest* msg) {
  return *msg->crostini_status_;
}
SessionStatusReportRequest::SessionStatusReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportRequest)
}
SessionStatusReportRequest::SessionStatusReportRequest(const SessionStatusReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      installed_apps_(from.installed_apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_local_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_local_account_id()) {
    device_local_account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_local_account_id_);
  }
  user_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_dm_token()) {
    user_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_time_zone()) {
    time_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
  }
  if (from.has_android_status()) {
    android_status_ = new ::enterprise_management::AndroidStatus(*from.android_status_);
  } else {
    android_status_ = nullptr;
  }
  if (from.has_crostini_status()) {
    crostini_status_ = new ::enterprise_management::CrostiniStatus(*from.crostini_status_);
  } else {
    crostini_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportRequest)
}

void SessionStatusReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  device_local_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&android_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crostini_status_) -
      reinterpret_cast<char*>(&android_status_)) + sizeof(crostini_status_));
}

SessionStatusReportRequest::~SessionStatusReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportRequest)
  SharedDtor();
}

void SessionStatusReportRequest::SharedDtor() {
  device_local_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_dm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete android_status_;
  if (this != internal_default_instance()) delete crostini_status_;
}

void SessionStatusReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionStatusReportRequest& SessionStatusReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SessionStatusReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  installed_apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      device_local_account_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_dm_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      time_zone_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(android_status_ != nullptr);
      android_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(crostini_status_ != nullptr);
      crostini_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SessionStatusReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_local_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_local_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AppStatus installed_apps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_installed_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AndroidStatus android_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_android_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_dm_token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_dm_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string time_zone = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_time_zone(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CrostiniStatus crostini_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_crostini_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SessionStatusReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_local_account_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_local_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AppStatus installed_apps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_installed_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AndroidStatus android_status = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_dm_token = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string time_zone = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CrostiniStatus crostini_status = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crostini_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SessionStatusReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_local_account_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_local_account_id(), output);
  }

  // repeated .enterprise_management.AppStatus installed_apps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->installed_apps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->installed_apps(static_cast<int>(i)),
      output);
  }

  // optional .enterprise_management.AndroidStatus android_status = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::android_status(this), output);
  }

  // optional string user_dm_token = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_dm_token(), output);
  }

  // optional string time_zone = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->time_zone(), output);
  }

  // optional .enterprise_management.CrostiniStatus crostini_status = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::crostini_status(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportRequest)
}

size_t SessionStatusReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AppStatus installed_apps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->installed_apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->installed_apps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string device_local_account_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_local_account_id());
    }

    // optional string user_dm_token = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_dm_token());
    }

    // optional string time_zone = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->time_zone());
    }

    // optional .enterprise_management.AndroidStatus android_status = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_status_);
    }

    // optional .enterprise_management.CrostiniStatus crostini_status = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crostini_status_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStatusReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionStatusReportRequest*>(
      &from));
}

void SessionStatusReportRequest::MergeFrom(const SessionStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  installed_apps_.MergeFrom(from.installed_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_local_account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_local_account_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      user_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      time_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_android_status()->::enterprise_management::AndroidStatus::MergeFrom(from.android_status());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_crostini_status()->::enterprise_management::CrostiniStatus::MergeFrom(from.crostini_status());
    }
  }
}

void SessionStatusReportRequest::CopyFrom(const SessionStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusReportRequest::IsInitialized() const {
  return true;
}

void SessionStatusReportRequest::InternalSwap(SessionStatusReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&installed_apps_)->InternalSwap(CastToBase(&other->installed_apps_));
  device_local_account_id_.Swap(&other->device_local_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_dm_token_.Swap(&other->user_dm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_zone_.Swap(&other->time_zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(android_status_, other->android_status_);
  swap(crostini_status_, other->crostini_status_);
}

std::string SessionStatusReportRequest::GetTypeName() const {
  return "enterprise_management.SessionStatusReportRequest";
}


// ===================================================================

void DeviceStatusReportResponse::InitAsDefaultInstance() {
}
class DeviceStatusReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStatusReportResponse>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceStatusReportResponse::DeviceStatusReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportResponse)
}
DeviceStatusReportResponse::DeviceStatusReportResponse(const DeviceStatusReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportResponse)
}

void DeviceStatusReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

DeviceStatusReportResponse::~DeviceStatusReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportResponse)
  SharedDtor();
}

void DeviceStatusReportResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatusReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatusReportResponse& DeviceStatusReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatusReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceStatusReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceStatusReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_error_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceStatusReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportResponse)
}

size_t DeviceStatusReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatusReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStatusReportResponse*>(
      &from));
}

void DeviceStatusReportResponse::MergeFrom(const DeviceStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStatusReportResponse::CopyFrom(const DeviceStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusReportResponse::IsInitialized() const {
  return true;
}

void DeviceStatusReportResponse::InternalSwap(DeviceStatusReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

std::string DeviceStatusReportResponse::GetTypeName() const {
  return "enterprise_management.DeviceStatusReportResponse";
}


// ===================================================================

void ChromeDesktopReportResponse::InitAsDefaultInstance() {
}
class ChromeDesktopReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeDesktopReportResponse>()._has_bits_);
};

ChromeDesktopReportResponse::ChromeDesktopReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeDesktopReportResponse)
}
ChromeDesktopReportResponse::ChromeDesktopReportResponse(const ChromeDesktopReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeDesktopReportResponse)
}

void ChromeDesktopReportResponse::SharedCtor() {
}

ChromeDesktopReportResponse::~ChromeDesktopReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeDesktopReportResponse)
  SharedDtor();
}

void ChromeDesktopReportResponse::SharedDtor() {
}

void ChromeDesktopReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeDesktopReportResponse& ChromeDesktopReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeDesktopReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeDesktopReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeDesktopReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeDesktopReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeDesktopReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeDesktopReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeDesktopReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeDesktopReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeDesktopReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeDesktopReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeDesktopReportResponse)
}

size_t ChromeDesktopReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeDesktopReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeDesktopReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeDesktopReportResponse*>(
      &from));
}

void ChromeDesktopReportResponse::MergeFrom(const ChromeDesktopReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeDesktopReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChromeDesktopReportResponse::CopyFrom(const ChromeDesktopReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeDesktopReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeDesktopReportResponse::IsInitialized() const {
  return true;
}

void ChromeDesktopReportResponse::InternalSwap(ChromeDesktopReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ChromeDesktopReportResponse::GetTypeName() const {
  return "enterprise_management.ChromeDesktopReportResponse";
}


// ===================================================================

void ChromeOsUserReportResponse::InitAsDefaultInstance() {
}
class ChromeOsUserReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOsUserReportResponse>()._has_bits_);
};

ChromeOsUserReportResponse::ChromeOsUserReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeOsUserReportResponse)
}
ChromeOsUserReportResponse::ChromeOsUserReportResponse(const ChromeOsUserReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeOsUserReportResponse)
}

void ChromeOsUserReportResponse::SharedCtor() {
}

ChromeOsUserReportResponse::~ChromeOsUserReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeOsUserReportResponse)
  SharedDtor();
}

void ChromeOsUserReportResponse::SharedDtor() {
}

void ChromeOsUserReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeOsUserReportResponse& ChromeOsUserReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeOsUserReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChromeOsUserReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeOsUserReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeOsUserReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeOsUserReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeOsUserReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeOsUserReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeOsUserReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeOsUserReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeOsUserReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeOsUserReportResponse)
}

size_t ChromeOsUserReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeOsUserReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOsUserReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeOsUserReportResponse*>(
      &from));
}

void ChromeOsUserReportResponse::MergeFrom(const ChromeOsUserReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeOsUserReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChromeOsUserReportResponse::CopyFrom(const ChromeOsUserReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeOsUserReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOsUserReportResponse::IsInitialized() const {
  return true;
}

void ChromeOsUserReportResponse::InternalSwap(ChromeOsUserReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ChromeOsUserReportResponse::GetTypeName() const {
  return "enterprise_management.ChromeOsUserReportResponse";
}


// ===================================================================

void SessionStatusReportResponse::InitAsDefaultInstance() {
}
class SessionStatusReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionStatusReportResponse>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SessionStatusReportResponse::SessionStatusReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportResponse)
}
SessionStatusReportResponse::SessionStatusReportResponse(const SessionStatusReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportResponse)
}

void SessionStatusReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

SessionStatusReportResponse::~SessionStatusReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportResponse)
  SharedDtor();
}

void SessionStatusReportResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionStatusReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionStatusReportResponse& SessionStatusReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SessionStatusReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SessionStatusReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SessionStatusReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_error_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SessionStatusReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportResponse)
}

size_t SessionStatusReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStatusReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionStatusReportResponse*>(
      &from));
}

void SessionStatusReportResponse::MergeFrom(const SessionStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionStatusReportResponse::CopyFrom(const SessionStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusReportResponse::IsInitialized() const {
  return true;
}

void SessionStatusReportResponse::InternalSwap(SessionStatusReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

std::string SessionStatusReportResponse::GetTypeName() const {
  return "enterprise_management.SessionStatusReportResponse";
}


// ===================================================================

void DeviceAutoEnrollmentRequest::InitAsDefaultInstance() {
}
class DeviceAutoEnrollmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAutoEnrollmentRequest>()._has_bits_);
  static void set_has_remainder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enrollment_check_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}
DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest(const DeviceAutoEnrollmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remainder_, &from.remainder_,
    static_cast<size_t>(reinterpret_cast<char*>(&enrollment_check_type_) -
    reinterpret_cast<char*>(&remainder_)) + sizeof(enrollment_check_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}

void DeviceAutoEnrollmentRequest::SharedCtor() {
  ::memset(&remainder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modulus_) -
      reinterpret_cast<char*>(&remainder_)) + sizeof(modulus_));
  enrollment_check_type_ = 1;
}

DeviceAutoEnrollmentRequest::~DeviceAutoEnrollmentRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentRequest)
  SharedDtor();
}

void DeviceAutoEnrollmentRequest::SharedDtor() {
}

void DeviceAutoEnrollmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAutoEnrollmentRequest& DeviceAutoEnrollmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAutoEnrollmentRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAutoEnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&remainder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modulus_) -
        reinterpret_cast<char*>(&remainder_)) + sizeof(modulus_));
    enrollment_check_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAutoEnrollmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 remainder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remainder(&has_bits);
          remainder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 modulus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_modulus(&has_bits);
          modulus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(val))) {
            set_enrollment_check_type(static_cast<::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAutoEnrollmentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 remainder = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_remainder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remainder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 modulus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_modulus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(value)) {
            set_enrollment_check_type(static_cast< ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAutoEnrollmentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 remainder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->remainder(), output);
  }

  // optional int64 modulus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->modulus(), output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->enrollment_check_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentRequest)
}

size_t DeviceAutoEnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 remainder = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->remainder());
    }

    // optional int64 modulus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->modulus());
    }

    // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->enrollment_check_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAutoEnrollmentRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAutoEnrollmentRequest*>(
      &from));
}

void DeviceAutoEnrollmentRequest::MergeFrom(const DeviceAutoEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      remainder_ = from.remainder_;
    }
    if (cached_has_bits & 0x00000002u) {
      modulus_ = from.modulus_;
    }
    if (cached_has_bits & 0x00000004u) {
      enrollment_check_type_ = from.enrollment_check_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceAutoEnrollmentRequest::CopyFrom(const DeviceAutoEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAutoEnrollmentRequest::IsInitialized() const {
  return true;
}

void DeviceAutoEnrollmentRequest::InternalSwap(DeviceAutoEnrollmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remainder_, other->remainder_);
  swap(modulus_, other->modulus_);
  swap(enrollment_check_type_, other->enrollment_check_type_);
}

std::string DeviceAutoEnrollmentRequest::GetTypeName() const {
  return "enterprise_management.DeviceAutoEnrollmentRequest";
}


// ===================================================================

void DeviceAutoEnrollmentResponse::InitAsDefaultInstance() {
}
class DeviceAutoEnrollmentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAutoEnrollmentResponse>()._has_bits_);
  static void set_has_expected_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}
DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse(const DeviceAutoEnrollmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expected_modulus_ = from.expected_modulus_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}

void DeviceAutoEnrollmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto.base);
  expected_modulus_ = PROTOBUF_LONGLONG(0);
}

DeviceAutoEnrollmentResponse::~DeviceAutoEnrollmentResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentResponse)
  SharedDtor();
}

void DeviceAutoEnrollmentResponse::SharedDtor() {
}

void DeviceAutoEnrollmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAutoEnrollmentResponse& DeviceAutoEnrollmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAutoEnrollmentResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAutoEnrollmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  expected_modulus_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAutoEnrollmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 expected_modulus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_expected_modulus(&has_bits);
          expected_modulus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_hashes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAutoEnrollmentResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expected_modulus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_expected_modulus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes hashes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAutoEnrollmentResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 expected_modulus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->expected_modulus(), output);
  }

  // repeated bytes hashes = 2;
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->hashes(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentResponse)
}

size_t DeviceAutoEnrollmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->hashes_size());
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->hashes(i));
  }

  // optional int64 expected_modulus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_modulus());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAutoEnrollmentResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAutoEnrollmentResponse*>(
      &from));
}

void DeviceAutoEnrollmentResponse::MergeFrom(const DeviceAutoEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  if (from.has_expected_modulus()) {
    set_expected_modulus(from.expected_modulus());
  }
}

void DeviceAutoEnrollmentResponse::CopyFrom(const DeviceAutoEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAutoEnrollmentResponse::IsInitialized() const {
  return true;
}

void DeviceAutoEnrollmentResponse::InternalSwap(DeviceAutoEnrollmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hashes_.InternalSwap(CastToBase(&other->hashes_));
  swap(expected_modulus_, other->expected_modulus_);
}

std::string DeviceAutoEnrollmentResponse::GetTypeName() const {
  return "enterprise_management.DeviceAutoEnrollmentResponse";
}


// ===================================================================

void DeviceStateRetrievalRequest::InitAsDefaultInstance() {
}
class DeviceStateRetrievalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStateRetrievalRequest>()._has_bits_);
  static void set_has_server_backed_state_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceStateRetrievalRequest::DeviceStateRetrievalRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalRequest)
}
DeviceStateRetrievalRequest::DeviceStateRetrievalRequest(const DeviceStateRetrievalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_backed_state_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_backed_state_key()) {
    server_backed_state_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalRequest)
}

void DeviceStateRetrievalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto.base);
  server_backed_state_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceStateRetrievalRequest::~DeviceStateRetrievalRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalRequest)
  SharedDtor();
}

void DeviceStateRetrievalRequest::SharedDtor() {
  server_backed_state_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStateRetrievalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStateRetrievalRequest& DeviceStateRetrievalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStateRetrievalRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceStateRetrievalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_backed_state_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceStateRetrievalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes server_backed_state_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_backed_state_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceStateRetrievalRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_backed_state_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_backed_state_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceStateRetrievalRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_backed_state_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->server_backed_state_key(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalRequest)
}

size_t DeviceStateRetrievalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes server_backed_state_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->server_backed_state_key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStateRetrievalRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStateRetrievalRequest*>(
      &from));
}

void DeviceStateRetrievalRequest::MergeFrom(const DeviceStateRetrievalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_backed_state_key()) {
    _has_bits_[0] |= 0x00000001u;
    server_backed_state_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
}

void DeviceStateRetrievalRequest::CopyFrom(const DeviceStateRetrievalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateRetrievalRequest::IsInitialized() const {
  return true;
}

void DeviceStateRetrievalRequest::InternalSwap(DeviceStateRetrievalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_backed_state_key_.Swap(&other->server_backed_state_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DeviceStateRetrievalRequest::GetTypeName() const {
  return "enterprise_management.DeviceStateRetrievalRequest";
}


// ===================================================================

void DeviceStateKeyUpdateRequest::InitAsDefaultInstance() {
}
class DeviceStateKeyUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStateKeyUpdateRequest>()._has_bits_);
};

DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}
DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest(const DeviceStateKeyUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      server_backed_state_keys_(from.server_backed_state_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}

void DeviceStateKeyUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
}

DeviceStateKeyUpdateRequest::~DeviceStateKeyUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateKeyUpdateRequest)
  SharedDtor();
}

void DeviceStateKeyUpdateRequest::SharedDtor() {
}

void DeviceStateKeyUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStateKeyUpdateRequest& DeviceStateKeyUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStateKeyUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceStateKeyUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateKeyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_backed_state_keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceStateKeyUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes server_backed_state_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_server_backed_state_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceStateKeyUpdateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateKeyUpdateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes server_backed_state_keys = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_server_backed_state_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateKeyUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateKeyUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceStateKeyUpdateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateKeyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes server_backed_state_keys = 1;
  for (int i = 0, n = this->server_backed_state_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->server_backed_state_keys(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateKeyUpdateRequest)
}

size_t DeviceStateKeyUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateKeyUpdateRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes server_backed_state_keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->server_backed_state_keys_size());
  for (int i = 0, n = this->server_backed_state_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->server_backed_state_keys(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStateKeyUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStateKeyUpdateRequest*>(
      &from));
}

void DeviceStateKeyUpdateRequest::MergeFrom(const DeviceStateKeyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_backed_state_keys_.MergeFrom(from.server_backed_state_keys_);
}

void DeviceStateKeyUpdateRequest::CopyFrom(const DeviceStateKeyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateKeyUpdateRequest::IsInitialized() const {
  return true;
}

void DeviceStateKeyUpdateRequest::InternalSwap(DeviceStateKeyUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_backed_state_keys_.InternalSwap(CastToBase(&other->server_backed_state_keys_));
}

std::string DeviceStateKeyUpdateRequest::GetTypeName() const {
  return "enterprise_management.DeviceStateKeyUpdateRequest";
}


// ===================================================================

void DeviceStateRetrievalResponse::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceStateRetrievalResponse_default_instance_._instance.get_mutable()->disabled_state_ = const_cast< ::enterprise_management::DisabledState*>(
      ::enterprise_management::DisabledState::internal_default_instance());
}
class DeviceStateRetrievalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStateRetrievalResponse>()._has_bits_);
  static void set_has_restore_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_management_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::DisabledState& disabled_state(const DeviceStateRetrievalResponse* msg);
  static void set_has_disabled_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::DisabledState&
DeviceStateRetrievalResponse::_Internal::disabled_state(const DeviceStateRetrievalResponse* msg) {
  return *msg->disabled_state_;
}
DeviceStateRetrievalResponse::DeviceStateRetrievalResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalResponse)
}
DeviceStateRetrievalResponse::DeviceStateRetrievalResponse(const DeviceStateRetrievalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  management_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_management_domain()) {
    management_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
  }
  if (from.has_disabled_state()) {
    disabled_state_ = new ::enterprise_management::DisabledState(*from.disabled_state_);
  } else {
    disabled_state_ = nullptr;
  }
  restore_mode_ = from.restore_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalResponse)
}

void DeviceStateRetrievalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto.base);
  management_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&disabled_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restore_mode_) -
      reinterpret_cast<char*>(&disabled_state_)) + sizeof(restore_mode_));
}

DeviceStateRetrievalResponse::~DeviceStateRetrievalResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalResponse)
  SharedDtor();
}

void DeviceStateRetrievalResponse::SharedDtor() {
  management_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete disabled_state_;
}

void DeviceStateRetrievalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStateRetrievalResponse& DeviceStateRetrievalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStateRetrievalResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceStateRetrievalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      management_domain_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disabled_state_ != nullptr);
      disabled_state_->Clear();
    }
  }
  restore_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceStateRetrievalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(val))) {
            set_restore_mode(static_cast<::enterprise_management::DeviceStateRetrievalResponse_RestoreMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string management_domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_management_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DisabledState disabled_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_disabled_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceStateRetrievalResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value)) {
            set_restore_mode(static_cast< ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string management_domain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_management_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DisabledState disabled_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceStateRetrievalResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->restore_mode(), output);
  }

  // optional string management_domain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->management_domain(), output);
  }

  // optional .enterprise_management.DisabledState disabled_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::disabled_state(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalResponse)
}

size_t DeviceStateRetrievalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string management_domain = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->management_domain());
    }

    // optional .enterprise_management.DisabledState disabled_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_state_);
    }

    // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->restore_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStateRetrievalResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStateRetrievalResponse*>(
      &from));
}

void DeviceStateRetrievalResponse::MergeFrom(const DeviceStateRetrievalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      management_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
    }
    if (cached_has_bits & 0x00000004u) {
      restore_mode_ = from.restore_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStateRetrievalResponse::CopyFrom(const DeviceStateRetrievalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateRetrievalResponse::IsInitialized() const {
  return true;
}

void DeviceStateRetrievalResponse::InternalSwap(DeviceStateRetrievalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  management_domain_.Swap(&other->management_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(disabled_state_, other->disabled_state_);
  swap(restore_mode_, other->restore_mode_);
}

std::string DeviceStateRetrievalResponse::GetTypeName() const {
  return "enterprise_management.DeviceStateRetrievalResponse";
}


// ===================================================================

void DeviceInitialEnrollmentStateRequest::InitAsDefaultInstance() {
}
class DeviceInitialEnrollmentStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInitialEnrollmentStateRequest>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brand_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceInitialEnrollmentStateRequest::DeviceInitialEnrollmentStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
}
DeviceInitialEnrollmentStateRequest::DeviceInitialEnrollmentStateRequest(const DeviceInitialEnrollmentStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  brand_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand_code()) {
    brand_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
}

void DeviceInitialEnrollmentStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto.base);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceInitialEnrollmentStateRequest::~DeviceInitialEnrollmentStateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
  SharedDtor();
}

void DeviceInitialEnrollmentStateRequest::SharedDtor() {
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInitialEnrollmentStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInitialEnrollmentStateRequest& DeviceInitialEnrollmentStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInitialEnrollmentStateRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceInitialEnrollmentStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      brand_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInitialEnrollmentStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serial_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string brand_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_brand_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInitialEnrollmentStateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceInitialEnrollmentStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceInitialEnrollmentStateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInitialEnrollmentStateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string brand_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceInitialEnrollmentStateRequest)
}

size_t DeviceInitialEnrollmentStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string brand_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->brand_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInitialEnrollmentStateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceInitialEnrollmentStateRequest*>(
      &from));
}

void DeviceInitialEnrollmentStateRequest::MergeFrom(const DeviceInitialEnrollmentStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      brand_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
    }
  }
}

void DeviceInitialEnrollmentStateRequest::CopyFrom(const DeviceInitialEnrollmentStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInitialEnrollmentStateRequest::IsInitialized() const {
  return true;
}

void DeviceInitialEnrollmentStateRequest::InternalSwap(DeviceInitialEnrollmentStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_code_.Swap(&other->brand_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DeviceInitialEnrollmentStateRequest::GetTypeName() const {
  return "enterprise_management.DeviceInitialEnrollmentStateRequest";
}


// ===================================================================

void DeviceInitialEnrollmentStateResponse::InitAsDefaultInstance() {
}
class DeviceInitialEnrollmentStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInitialEnrollmentStateResponse>()._has_bits_);
  static void set_has_initial_enrollment_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_management_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_license_packaged_with_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeviceInitialEnrollmentStateResponse::DeviceInitialEnrollmentStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
}
DeviceInitialEnrollmentStateResponse::DeviceInitialEnrollmentStateResponse(const DeviceInitialEnrollmentStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  management_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_management_domain()) {
    management_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
  }
  ::memcpy(&initial_enrollment_mode_, &from.initial_enrollment_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_license_packaged_with_device_) -
    reinterpret_cast<char*>(&initial_enrollment_mode_)) + sizeof(is_license_packaged_with_device_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
}

void DeviceInitialEnrollmentStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto.base);
  management_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initial_enrollment_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_license_packaged_with_device_) -
      reinterpret_cast<char*>(&initial_enrollment_mode_)) + sizeof(is_license_packaged_with_device_));
}

DeviceInitialEnrollmentStateResponse::~DeviceInitialEnrollmentStateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
  SharedDtor();
}

void DeviceInitialEnrollmentStateResponse::SharedDtor() {
  management_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInitialEnrollmentStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInitialEnrollmentStateResponse& DeviceInitialEnrollmentStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInitialEnrollmentStateResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceInitialEnrollmentStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    management_domain_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&initial_enrollment_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_license_packaged_with_device_) -
        reinterpret_cast<char*>(&initial_enrollment_mode_)) + sizeof(is_license_packaged_with_device_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInitialEnrollmentStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(val))) {
            set_initial_enrollment_mode(static_cast<::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string management_domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_management_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_license_packaged_with_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_license_packaged_with_device(&has_bits);
          is_license_packaged_with_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInitialEnrollmentStateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(value)) {
            set_initial_enrollment_mode(static_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string management_domain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_management_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_license_packaged_with_device = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_license_packaged_with_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_license_packaged_with_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceInitialEnrollmentStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceInitialEnrollmentStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInitialEnrollmentStateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->initial_enrollment_mode(), output);
  }

  // optional string management_domain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->management_domain(), output);
  }

  // optional bool is_license_packaged_with_device = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_license_packaged_with_device(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceInitialEnrollmentStateResponse)
}

size_t DeviceInitialEnrollmentStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string management_domain = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->management_domain());
    }

    // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->initial_enrollment_mode());
    }

    // optional bool is_license_packaged_with_device = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInitialEnrollmentStateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceInitialEnrollmentStateResponse*>(
      &from));
}

void DeviceInitialEnrollmentStateResponse::MergeFrom(const DeviceInitialEnrollmentStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      management_domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      initial_enrollment_mode_ = from.initial_enrollment_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_license_packaged_with_device_ = from.is_license_packaged_with_device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInitialEnrollmentStateResponse::CopyFrom(const DeviceInitialEnrollmentStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInitialEnrollmentStateResponse::IsInitialized() const {
  return true;
}

void DeviceInitialEnrollmentStateResponse::InternalSwap(DeviceInitialEnrollmentStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  management_domain_.Swap(&other->management_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initial_enrollment_mode_, other->initial_enrollment_mode_);
  swap(is_license_packaged_with_device_, other->is_license_packaged_with_device_);
}

std::string DeviceInitialEnrollmentStateResponse::GetTypeName() const {
  return "enterprise_management.DeviceInitialEnrollmentStateResponse";
}


// ===================================================================

void DevicePairingRequest::InitAsDefaultInstance() {
}
class DevicePairingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePairingRequest>()._has_bits_);
  static void set_has_host_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DevicePairingRequest::DevicePairingRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingRequest)
}
DevicePairingRequest::DevicePairingRequest(const DevicePairingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_device_id()) {
    host_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
  }
  controller_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_device_id()) {
    controller_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingRequest)
}

void DevicePairingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base);
  host_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DevicePairingRequest::~DevicePairingRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingRequest)
  SharedDtor();
}

void DevicePairingRequest::SharedDtor() {
  host_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DevicePairingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePairingRequest& DevicePairingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DevicePairingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      host_device_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_device_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DevicePairingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string host_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_host_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_controller_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DevicePairingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_device_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_device_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DevicePairingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_device_id(), output);
  }

  // optional string controller_device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_device_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingRequest)
}

size_t DevicePairingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string host_device_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->host_device_id());
    }

    // optional string controller_device_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->controller_device_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePairingRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePairingRequest*>(
      &from));
}

void DevicePairingRequest::MergeFrom(const DevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      controller_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
    }
  }
}

void DevicePairingRequest::CopyFrom(const DevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePairingRequest::IsInitialized() const {
  return true;
}

void DevicePairingRequest::InternalSwap(DevicePairingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_device_id_.Swap(&other->host_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_device_id_.Swap(&other->controller_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DevicePairingRequest::GetTypeName() const {
  return "enterprise_management.DevicePairingRequest";
}


// ===================================================================

void DevicePairingResponse::InitAsDefaultInstance() {
}
class DevicePairingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePairingResponse>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DevicePairingResponse::DevicePairingResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingResponse)
}
DevicePairingResponse::DevicePairingResponse(const DevicePairingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingResponse)
}

void DevicePairingResponse::SharedCtor() {
  status_code_ = 1;
}

DevicePairingResponse::~DevicePairingResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingResponse)
  SharedDtor();
}

void DevicePairingResponse::SharedDtor() {
}

void DevicePairingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePairingResponse& DevicePairingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePairingResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DevicePairingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DevicePairingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DevicePairingResponse_StatusCode_IsValid(val))) {
            set_status_code(static_cast<::enterprise_management::DevicePairingResponse_StatusCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DevicePairingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::enterprise_management::DevicePairingResponse_StatusCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DevicePairingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingResponse)
}

size_t DevicePairingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePairingResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePairingResponse*>(
      &from));
}

void DevicePairingResponse::MergeFrom(const DevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_code()) {
    set_status_code(from.status_code());
  }
}

void DevicePairingResponse::CopyFrom(const DevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePairingResponse::IsInitialized() const {
  return true;
}

void DevicePairingResponse::InternalSwap(DevicePairingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_code_, other->status_code_);
}

std::string DevicePairingResponse::GetTypeName() const {
  return "enterprise_management.DevicePairingResponse";
}


// ===================================================================

void CheckDevicePairingRequest::InitAsDefaultInstance() {
}
class CheckDevicePairingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckDevicePairingRequest>()._has_bits_);
  static void set_has_host_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CheckDevicePairingRequest::CheckDevicePairingRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingRequest)
}
CheckDevicePairingRequest::CheckDevicePairingRequest(const CheckDevicePairingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_device_id()) {
    host_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
  }
  controller_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_device_id()) {
    controller_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingRequest)
}

void CheckDevicePairingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base);
  host_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckDevicePairingRequest::~CheckDevicePairingRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingRequest)
  SharedDtor();
}

void CheckDevicePairingRequest::SharedDtor() {
  host_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckDevicePairingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDevicePairingRequest& CheckDevicePairingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDevicePairingRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckDevicePairingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      host_device_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_device_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckDevicePairingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string host_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_host_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_controller_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckDevicePairingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_device_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_device_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckDevicePairingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_device_id(), output);
  }

  // optional string controller_device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_device_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingRequest)
}

size_t CheckDevicePairingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string host_device_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->host_device_id());
    }

    // optional string controller_device_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->controller_device_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDevicePairingRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckDevicePairingRequest*>(
      &from));
}

void CheckDevicePairingRequest::MergeFrom(const CheckDevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      controller_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
    }
  }
}

void CheckDevicePairingRequest::CopyFrom(const CheckDevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDevicePairingRequest::IsInitialized() const {
  return true;
}

void CheckDevicePairingRequest::InternalSwap(CheckDevicePairingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_device_id_.Swap(&other->host_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controller_device_id_.Swap(&other->controller_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CheckDevicePairingRequest::GetTypeName() const {
  return "enterprise_management.CheckDevicePairingRequest";
}


// ===================================================================

void CheckDevicePairingResponse::InitAsDefaultInstance() {
}
class CheckDevicePairingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckDevicePairingResponse>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CheckDevicePairingResponse::CheckDevicePairingResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingResponse)
}
CheckDevicePairingResponse::CheckDevicePairingResponse(const CheckDevicePairingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingResponse)
}

void CheckDevicePairingResponse::SharedCtor() {
  status_code_ = 1;
}

CheckDevicePairingResponse::~CheckDevicePairingResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingResponse)
  SharedDtor();
}

void CheckDevicePairingResponse::SharedDtor() {
}

void CheckDevicePairingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDevicePairingResponse& CheckDevicePairingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDevicePairingResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckDevicePairingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckDevicePairingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(val))) {
            set_status_code(static_cast<::enterprise_management::CheckDevicePairingResponse_StatusCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckDevicePairingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::enterprise_management::CheckDevicePairingResponse_StatusCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckDevicePairingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingResponse)
}

size_t CheckDevicePairingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDevicePairingResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckDevicePairingResponse*>(
      &from));
}

void CheckDevicePairingResponse::MergeFrom(const CheckDevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_code()) {
    set_status_code(from.status_code());
  }
}

void CheckDevicePairingResponse::CopyFrom(const CheckDevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDevicePairingResponse::IsInitialized() const {
  return true;
}

void CheckDevicePairingResponse::InternalSwap(CheckDevicePairingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_code_, other->status_code_);
}

std::string CheckDevicePairingResponse::GetTypeName() const {
  return "enterprise_management.CheckDevicePairingResponse";
}


// ===================================================================

void RemoteCommand::InitAsDefaultInstance() {
}
class RemoteCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCommand>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_age_of_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RemoteCommand::RemoteCommand()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommand)
}
RemoteCommand::RemoteCommand(const RemoteCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  target_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_device_id()) {
    target_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_device_id_);
  }
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommand)
}

void RemoteCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_of_command_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(age_of_command_));
  type_ = -1;
}

RemoteCommand::~RemoteCommand() {
  // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommand)
  SharedDtor();
}

void RemoteCommand::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteCommand& RemoteCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteCommand_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RemoteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_device_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&command_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_of_command_) -
        reinterpret_cast<char*>(&command_id_)) + sizeof(age_of_command_));
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.RemoteCommand.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::RemoteCommand_Type_IsValid(val))) {
            set_type(static_cast<::enterprise_management::RemoteCommand_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 age_of_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_age_of_command(&has_bits);
          age_of_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_target_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteCommand::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommand)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.RemoteCommand.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::RemoteCommand_Type_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::RemoteCommand_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 command_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_command_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 age_of_command = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_age_of_command(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_of_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_device_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteCommand::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.RemoteCommand.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 command_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
  }

  // optional int64 age_of_command = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->age_of_command(), output);
  }

  // optional string payload = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->payload(), output);
  }

  // optional string target_device_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_device_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommand)
}

size_t RemoteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string payload = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // optional string target_device_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->target_device_id());
    }

    // optional int64 command_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->command_id());
    }

    // optional int64 age_of_command = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->age_of_command());
    }

    // optional .enterprise_management.RemoteCommand.Type type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoteCommand*>(
      &from));
}

void RemoteCommand::MergeFrom(const RemoteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      target_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_device_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      command_id_ = from.command_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      age_of_command_ = from.age_of_command_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteCommand::CopyFrom(const RemoteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCommand::IsInitialized() const {
  return true;
}

void RemoteCommand::InternalSwap(RemoteCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_device_id_.Swap(&other->target_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_id_, other->command_id_);
  swap(age_of_command_, other->age_of_command_);
  swap(type_, other->type_);
}

std::string RemoteCommand::GetTypeName() const {
  return "enterprise_management.RemoteCommand";
}


// ===================================================================

void RemoteCommandResult::InitAsDefaultInstance() {
}
class RemoteCommandResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCommandResult>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RemoteCommandResult::RemoteCommandResult()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommandResult)
}
RemoteCommandResult::RemoteCommandResult(const RemoteCommandResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommandResult)
}

void RemoteCommandResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
}

RemoteCommandResult::~RemoteCommandResult() {
  // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommandResult)
  SharedDtor();
}

void RemoteCommandResult::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteCommandResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteCommandResult& RemoteCommandResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteCommandResult_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RemoteCommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&command_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteCommandResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::RemoteCommandResult_ResultType_IsValid(val))) {
            set_result(static_cast<::enterprise_management::RemoteCommandResult_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteCommandResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommandResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::RemoteCommandResult_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::RemoteCommandResult_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 command_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_command_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommandResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteCommandResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int64 command_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string payload = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->payload(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommandResult)
}

size_t RemoteCommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommandResult)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string payload = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // optional int64 command_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->command_id());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCommandResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoteCommandResult*>(
      &from));
}

void RemoteCommandResult::MergeFrom(const RemoteCommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteCommandResult::CopyFrom(const RemoteCommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCommandResult::IsInitialized() const {
  return true;
}

void RemoteCommandResult::InternalSwap(RemoteCommandResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_id_, other->command_id_);
  swap(timestamp_, other->timestamp_);
  swap(result_, other->result_);
}

std::string RemoteCommandResult::GetTypeName() const {
  return "enterprise_management.RemoteCommandResult";
}


// ===================================================================

void DeviceRemoteCommandRequest::InitAsDefaultInstance() {
}
class DeviceRemoteCommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRemoteCommandRequest>()._has_bits_);
  static void set_has_last_command_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_secure_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceRemoteCommandRequest::DeviceRemoteCommandRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandRequest)
}
DeviceRemoteCommandRequest::DeviceRemoteCommandRequest(const DeviceRemoteCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      command_results_(from.command_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_command_unique_id_, &from.last_command_unique_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_secure_commands_) -
    reinterpret_cast<char*>(&last_command_unique_id_)) + sizeof(send_secure_commands_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandRequest)
}

void DeviceRemoteCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&last_command_unique_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_secure_commands_) -
      reinterpret_cast<char*>(&last_command_unique_id_)) + sizeof(send_secure_commands_));
}

DeviceRemoteCommandRequest::~DeviceRemoteCommandRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandRequest)
  SharedDtor();
}

void DeviceRemoteCommandRequest::SharedDtor() {
}

void DeviceRemoteCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRemoteCommandRequest& DeviceRemoteCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRemoteCommandRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceRemoteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_command_unique_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_secure_commands_) -
        reinterpret_cast<char*>(&last_command_unique_id_)) + sizeof(send_secure_commands_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceRemoteCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 last_command_unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_command_unique_id(&has_bits);
          last_command_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.RemoteCommandResult command_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_command_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bool send_secure_commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_send_secure_commands(&has_bits);
          send_secure_commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceRemoteCommandRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_command_unique_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_command_unique_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_command_unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.RemoteCommandResult command_results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_command_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_secure_commands = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_send_secure_commands(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_secure_commands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceRemoteCommandRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_command_unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_command_unique_id(), output);
  }

  // repeated .enterprise_management.RemoteCommandResult command_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->command_results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->command_results(static_cast<int>(i)),
      output);
  }

  // optional bool send_secure_commands = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->send_secure_commands(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandRequest)
}

size_t DeviceRemoteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.RemoteCommandResult command_results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->command_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->command_results(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 last_command_unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_command_unique_id());
    }

    // optional bool send_secure_commands = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRemoteCommandRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRemoteCommandRequest*>(
      &from));
}

void DeviceRemoteCommandRequest::MergeFrom(const DeviceRemoteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_results_.MergeFrom(from.command_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_command_unique_id_ = from.last_command_unique_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_secure_commands_ = from.send_secure_commands_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceRemoteCommandRequest::CopyFrom(const DeviceRemoteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRemoteCommandRequest::IsInitialized() const {
  return true;
}

void DeviceRemoteCommandRequest::InternalSwap(DeviceRemoteCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&command_results_)->InternalSwap(CastToBase(&other->command_results_));
  swap(last_command_unique_id_, other->last_command_unique_id_);
  swap(send_secure_commands_, other->send_secure_commands_);
}

std::string DeviceRemoteCommandRequest::GetTypeName() const {
  return "enterprise_management.DeviceRemoteCommandRequest";
}


// ===================================================================

void DeviceRemoteCommandResponse::InitAsDefaultInstance() {
}
class DeviceRemoteCommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRemoteCommandResponse>()._has_bits_);
};

DeviceRemoteCommandResponse::DeviceRemoteCommandResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandResponse)
}
DeviceRemoteCommandResponse::DeviceRemoteCommandResponse(const DeviceRemoteCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      commands_(from.commands_),
      secure_commands_(from.secure_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandResponse)
}

void DeviceRemoteCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto.base);
}

DeviceRemoteCommandResponse::~DeviceRemoteCommandResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandResponse)
  SharedDtor();
}

void DeviceRemoteCommandResponse::SharedDtor() {
}

void DeviceRemoteCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRemoteCommandResponse& DeviceRemoteCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRemoteCommandResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceRemoteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  secure_commands_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceRemoteCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.RemoteCommand commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.SignedData secure_commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_secure_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceRemoteCommandResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.RemoteCommand commands = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.SignedData secure_commands = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_secure_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceRemoteCommandResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.RemoteCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->commands(static_cast<int>(i)),
      output);
  }

  // repeated .enterprise_management.SignedData secure_commands = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secure_commands_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->secure_commands(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandResponse)
}

size_t DeviceRemoteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.RemoteCommand commands = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->commands(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.SignedData secure_commands = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->secure_commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->secure_commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRemoteCommandResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRemoteCommandResponse*>(
      &from));
}

void DeviceRemoteCommandResponse::MergeFrom(const DeviceRemoteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  secure_commands_.MergeFrom(from.secure_commands_);
}

void DeviceRemoteCommandResponse::CopyFrom(const DeviceRemoteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRemoteCommandResponse::IsInitialized() const {
  return true;
}

void DeviceRemoteCommandResponse::InternalSwap(DeviceRemoteCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&commands_)->InternalSwap(CastToBase(&other->commands_));
  CastToBase(&secure_commands_)->InternalSwap(CastToBase(&other->secure_commands_));
}

std::string DeviceRemoteCommandResponse::GetTypeName() const {
  return "enterprise_management.DeviceRemoteCommandResponse";
}


// ===================================================================

void DeviceAttributeUpdatePermissionRequest::InitAsDefaultInstance() {
}
class DeviceAttributeUpdatePermissionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttributeUpdatePermissionRequest>()._has_bits_);
};

DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}
DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest(const DeviceAttributeUpdatePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

void DeviceAttributeUpdatePermissionRequest::SharedCtor() {
}

DeviceAttributeUpdatePermissionRequest::~DeviceAttributeUpdatePermissionRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  SharedDtor();
}

void DeviceAttributeUpdatePermissionRequest::SharedDtor() {
}

void DeviceAttributeUpdatePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributeUpdatePermissionRequest& DeviceAttributeUpdatePermissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributeUpdatePermissionRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributeUpdatePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAttributeUpdatePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAttributeUpdatePermissionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAttributeUpdatePermissionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

size_t DeviceAttributeUpdatePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributeUpdatePermissionRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAttributeUpdatePermissionRequest*>(
      &from));
}

void DeviceAttributeUpdatePermissionRequest::MergeFrom(const DeviceAttributeUpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceAttributeUpdatePermissionRequest::CopyFrom(const DeviceAttributeUpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionRequest::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdatePermissionRequest::InternalSwap(DeviceAttributeUpdatePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DeviceAttributeUpdatePermissionRequest::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdatePermissionRequest";
}


// ===================================================================

void DeviceAttributeUpdatePermissionResponse::InitAsDefaultInstance() {
}
class DeviceAttributeUpdatePermissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttributeUpdatePermissionResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}
DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse(const DeviceAttributeUpdatePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

void DeviceAttributeUpdatePermissionResponse::SharedCtor() {
  result_ = 0;
}

DeviceAttributeUpdatePermissionResponse::~DeviceAttributeUpdatePermissionResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  SharedDtor();
}

void DeviceAttributeUpdatePermissionResponse::SharedDtor() {
}

void DeviceAttributeUpdatePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributeUpdatePermissionResponse& DeviceAttributeUpdatePermissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributeUpdatePermissionResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributeUpdatePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAttributeUpdatePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(val))) {
            set_result(static_cast<::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAttributeUpdatePermissionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAttributeUpdatePermissionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

size_t DeviceAttributeUpdatePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributeUpdatePermissionResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAttributeUpdatePermissionResponse*>(
      &from));
}

void DeviceAttributeUpdatePermissionResponse::MergeFrom(const DeviceAttributeUpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DeviceAttributeUpdatePermissionResponse::CopyFrom(const DeviceAttributeUpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionResponse::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdatePermissionResponse::InternalSwap(DeviceAttributeUpdatePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

std::string DeviceAttributeUpdatePermissionResponse::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdatePermissionResponse";
}


// ===================================================================

void DeviceAttributeUpdateRequest::InitAsDefaultInstance() {
}
class DeviceAttributeUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttributeUpdateRequest>()._has_bits_);
  static void set_has_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateRequest)
}
DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest(const DeviceAttributeUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_id()) {
    asset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_id_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateRequest)
}

void DeviceAttributeUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceAttributeUpdateRequest::~DeviceAttributeUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateRequest)
  SharedDtor();
}

void DeviceAttributeUpdateRequest::SharedDtor() {
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceAttributeUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributeUpdateRequest& DeviceAttributeUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributeUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributeUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      asset_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAttributeUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_asset_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_location(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAttributeUpdateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string asset_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string location = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAttributeUpdateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string asset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->asset_id(), output);
  }

  // optional string location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateRequest)
}

size_t DeviceAttributeUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string asset_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->asset_id());
    }

    // optional string location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributeUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAttributeUpdateRequest*>(
      &from));
}

void DeviceAttributeUpdateRequest::MergeFrom(const DeviceAttributeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      asset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
  }
}

void DeviceAttributeUpdateRequest::CopyFrom(const DeviceAttributeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdateRequest::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdateRequest::InternalSwap(DeviceAttributeUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DeviceAttributeUpdateRequest::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdateRequest";
}


// ===================================================================

void DeviceAttributeUpdateResponse::InitAsDefaultInstance() {
}
class DeviceAttributeUpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttributeUpdateResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateResponse)
}
DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse(const DeviceAttributeUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateResponse)
}

void DeviceAttributeUpdateResponse::SharedCtor() {
  result_ = 0;
}

DeviceAttributeUpdateResponse::~DeviceAttributeUpdateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateResponse)
  SharedDtor();
}

void DeviceAttributeUpdateResponse::SharedDtor() {
}

void DeviceAttributeUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributeUpdateResponse& DeviceAttributeUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributeUpdateResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributeUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceAttributeUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(val))) {
            set_result(static_cast<::enterprise_management::DeviceAttributeUpdateResponse_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceAttributeUpdateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::DeviceAttributeUpdateResponse_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceAttributeUpdateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateResponse)
}

size_t DeviceAttributeUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributeUpdateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAttributeUpdateResponse*>(
      &from));
}

void DeviceAttributeUpdateResponse::MergeFrom(const DeviceAttributeUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DeviceAttributeUpdateResponse::CopyFrom(const DeviceAttributeUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdateResponse::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdateResponse::InternalSwap(DeviceAttributeUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

std::string DeviceAttributeUpdateResponse::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdateResponse";
}


// ===================================================================

void GcmIdUpdateRequest::InitAsDefaultInstance() {
}
class GcmIdUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmIdUpdateRequest>()._has_bits_);
  static void set_has_gcm_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcmIdUpdateRequest::GcmIdUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateRequest)
}
GcmIdUpdateRequest::GcmIdUpdateRequest(const GcmIdUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gcm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_gcm_id()) {
    gcm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gcm_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateRequest)
}

void GcmIdUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
  gcm_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GcmIdUpdateRequest::~GcmIdUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateRequest)
  SharedDtor();
}

void GcmIdUpdateRequest::SharedDtor() {
  gcm_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GcmIdUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcmIdUpdateRequest& GcmIdUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcmIdUpdateRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void GcmIdUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gcm_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GcmIdUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gcm_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_gcm_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GcmIdUpdateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gcm_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gcm_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GcmIdUpdateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gcm_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gcm_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateRequest)
}

size_t GcmIdUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string gcm_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gcm_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmIdUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmIdUpdateRequest*>(
      &from));
}

void GcmIdUpdateRequest::MergeFrom(const GcmIdUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gcm_id()) {
    _has_bits_[0] |= 0x00000001u;
    gcm_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gcm_id_);
  }
}

void GcmIdUpdateRequest::CopyFrom(const GcmIdUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmIdUpdateRequest::IsInitialized() const {
  return true;
}

void GcmIdUpdateRequest::InternalSwap(GcmIdUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gcm_id_.Swap(&other->gcm_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string GcmIdUpdateRequest::GetTypeName() const {
  return "enterprise_management.GcmIdUpdateRequest";
}


// ===================================================================

void GcmIdUpdateResponse::InitAsDefaultInstance() {
}
class GcmIdUpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmIdUpdateResponse>()._has_bits_);
};

GcmIdUpdateResponse::GcmIdUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateResponse)
}
GcmIdUpdateResponse::GcmIdUpdateResponse(const GcmIdUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateResponse)
}

void GcmIdUpdateResponse::SharedCtor() {
}

GcmIdUpdateResponse::~GcmIdUpdateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateResponse)
  SharedDtor();
}

void GcmIdUpdateResponse::SharedDtor() {
}

void GcmIdUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcmIdUpdateResponse& GcmIdUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcmIdUpdateResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void GcmIdUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GcmIdUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GcmIdUpdateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GcmIdUpdateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateResponse)
}

size_t GcmIdUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmIdUpdateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmIdUpdateResponse*>(
      &from));
}

void GcmIdUpdateResponse::MergeFrom(const GcmIdUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GcmIdUpdateResponse::CopyFrom(const GcmIdUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmIdUpdateResponse::IsInitialized() const {
  return true;
}

void GcmIdUpdateResponse::InternalSwap(GcmIdUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string GcmIdUpdateResponse::GetTypeName() const {
  return "enterprise_management.GcmIdUpdateResponse";
}


// ===================================================================

void CheckAndroidManagementRequest::InitAsDefaultInstance() {
}
class CheckAndroidManagementRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckAndroidManagementRequest>()._has_bits_);
};

CheckAndroidManagementRequest::CheckAndroidManagementRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementRequest)
}
CheckAndroidManagementRequest::CheckAndroidManagementRequest(const CheckAndroidManagementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementRequest)
}

void CheckAndroidManagementRequest::SharedCtor() {
}

CheckAndroidManagementRequest::~CheckAndroidManagementRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementRequest)
  SharedDtor();
}

void CheckAndroidManagementRequest::SharedDtor() {
}

void CheckAndroidManagementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAndroidManagementRequest& CheckAndroidManagementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAndroidManagementRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckAndroidManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAndroidManagementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAndroidManagementRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAndroidManagementRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementRequest)
}

size_t CheckAndroidManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAndroidManagementRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckAndroidManagementRequest*>(
      &from));
}

void CheckAndroidManagementRequest::MergeFrom(const CheckAndroidManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckAndroidManagementRequest::CopyFrom(const CheckAndroidManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndroidManagementRequest::IsInitialized() const {
  return true;
}

void CheckAndroidManagementRequest::InternalSwap(CheckAndroidManagementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string CheckAndroidManagementRequest::GetTypeName() const {
  return "enterprise_management.CheckAndroidManagementRequest";
}


// ===================================================================

void CheckAndroidManagementResponse::InitAsDefaultInstance() {
}
class CheckAndroidManagementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckAndroidManagementResponse>()._has_bits_);
};

CheckAndroidManagementResponse::CheckAndroidManagementResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementResponse)
}
CheckAndroidManagementResponse::CheckAndroidManagementResponse(const CheckAndroidManagementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementResponse)
}

void CheckAndroidManagementResponse::SharedCtor() {
}

CheckAndroidManagementResponse::~CheckAndroidManagementResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementResponse)
  SharedDtor();
}

void CheckAndroidManagementResponse::SharedDtor() {
}

void CheckAndroidManagementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAndroidManagementResponse& CheckAndroidManagementResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAndroidManagementResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckAndroidManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAndroidManagementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAndroidManagementResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAndroidManagementResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementResponse)
}

size_t CheckAndroidManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAndroidManagementResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckAndroidManagementResponse*>(
      &from));
}

void CheckAndroidManagementResponse::MergeFrom(const CheckAndroidManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckAndroidManagementResponse::CopyFrom(const CheckAndroidManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndroidManagementResponse::IsInitialized() const {
  return true;
}

void CheckAndroidManagementResponse::InternalSwap(CheckAndroidManagementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string CheckAndroidManagementResponse::GetTypeName() const {
  return "enterprise_management.CheckAndroidManagementResponse";
}


// ===================================================================

void CertificateBasedDeviceRegisterRequest::InitAsDefaultInstance() {
  ::enterprise_management::_CertificateBasedDeviceRegisterRequest_default_instance_._instance.get_mutable()->signed_request_ = const_cast< ::enterprise_management::SignedData*>(
      ::enterprise_management::SignedData::internal_default_instance());
}
class CertificateBasedDeviceRegisterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CertificateBasedDeviceRegisterRequest>()._has_bits_);
  static const ::enterprise_management::SignedData& signed_request(const CertificateBasedDeviceRegisterRequest* msg);
  static void set_has_signed_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::SignedData&
CertificateBasedDeviceRegisterRequest::_Internal::signed_request(const CertificateBasedDeviceRegisterRequest* msg) {
  return *msg->signed_request_;
}
CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}
CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest(const CertificateBasedDeviceRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signed_request()) {
    signed_request_ = new ::enterprise_management::SignedData(*from.signed_request_);
  } else {
    signed_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

void CertificateBasedDeviceRegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base);
  signed_request_ = nullptr;
}

CertificateBasedDeviceRegisterRequest::~CertificateBasedDeviceRegisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
  SharedDtor();
}

void CertificateBasedDeviceRegisterRequest::SharedDtor() {
  if (this != internal_default_instance()) delete signed_request_;
}

void CertificateBasedDeviceRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CertificateBasedDeviceRegisterRequest& CertificateBasedDeviceRegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CertificateBasedDeviceRegisterRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CertificateBasedDeviceRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signed_request_ != nullptr);
    signed_request_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CertificateBasedDeviceRegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.SignedData signed_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_signed_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CertificateBasedDeviceRegisterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.SignedData signed_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signed_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CertificateBasedDeviceRegisterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.SignedData signed_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::signed_request(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

size_t CertificateBasedDeviceRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.SignedData signed_request = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CertificateBasedDeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CertificateBasedDeviceRegisterRequest*>(
      &from));
}

void CertificateBasedDeviceRegisterRequest::MergeFrom(const CertificateBasedDeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signed_request()) {
    mutable_signed_request()->::enterprise_management::SignedData::MergeFrom(from.signed_request());
  }
}

void CertificateBasedDeviceRegisterRequest::CopyFrom(const CertificateBasedDeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateBasedDeviceRegisterRequest::IsInitialized() const {
  return true;
}

void CertificateBasedDeviceRegisterRequest::InternalSwap(CertificateBasedDeviceRegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(signed_request_, other->signed_request_);
}

std::string CertificateBasedDeviceRegisterRequest::GetTypeName() const {
  return "enterprise_management.CertificateBasedDeviceRegisterRequest";
}


// ===================================================================

void DeviceRegisterConfiguration::InitAsDefaultInstance() {
}
class DeviceRegisterConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRegisterConfiguration>()._has_bits_);
  static void set_has_device_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceRegisterConfiguration::DeviceRegisterConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterConfiguration)
}
DeviceRegisterConfiguration::DeviceRegisterConfiguration(const DeviceRegisterConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_owner()) {
    device_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_owner_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterConfiguration)
}

void DeviceRegisterConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto.base);
  device_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceRegisterConfiguration::~DeviceRegisterConfiguration() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterConfiguration)
  SharedDtor();
}

void DeviceRegisterConfiguration::SharedDtor() {
  device_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceRegisterConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRegisterConfiguration& DeviceRegisterConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRegisterConfiguration_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceRegisterConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_owner_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceRegisterConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_owner(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceRegisterConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_owner = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceRegisterConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_owner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_owner(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterConfiguration)
}

size_t DeviceRegisterConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_owner = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_owner());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRegisterConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRegisterConfiguration*>(
      &from));
}

void DeviceRegisterConfiguration::MergeFrom(const DeviceRegisterConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_owner()) {
    _has_bits_[0] |= 0x00000001u;
    device_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_owner_);
  }
}

void DeviceRegisterConfiguration::CopyFrom(const DeviceRegisterConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRegisterConfiguration::IsInitialized() const {
  return true;
}

void DeviceRegisterConfiguration::InternalSwap(DeviceRegisterConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_owner_.Swap(&other->device_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DeviceRegisterConfiguration::GetTypeName() const {
  return "enterprise_management.DeviceRegisterConfiguration";
}


// ===================================================================

void CertificateBasedDeviceRegistrationData::InitAsDefaultInstance() {
  ::enterprise_management::_CertificateBasedDeviceRegistrationData_default_instance_._instance.get_mutable()->device_register_request_ = const_cast< ::enterprise_management::DeviceRegisterRequest*>(
      ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
  ::enterprise_management::_CertificateBasedDeviceRegistrationData_default_instance_._instance.get_mutable()->device_register_configuration_ = const_cast< ::enterprise_management::DeviceRegisterConfiguration*>(
      ::enterprise_management::DeviceRegisterConfiguration::internal_default_instance());
}
class CertificateBasedDeviceRegistrationData::_Internal {
 public:
  using HasBits = decltype(std::declval<CertificateBasedDeviceRegistrationData>()._has_bits_);
  static void set_has_certificate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::DeviceRegisterRequest& device_register_request(const CertificateBasedDeviceRegistrationData* msg);
  static void set_has_device_register_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::DeviceRegisterConfiguration& device_register_configuration(const CertificateBasedDeviceRegistrationData* msg);
  static void set_has_device_register_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_management::DeviceRegisterRequest&
CertificateBasedDeviceRegistrationData::_Internal::device_register_request(const CertificateBasedDeviceRegistrationData* msg) {
  return *msg->device_register_request_;
}
const ::enterprise_management::DeviceRegisterConfiguration&
CertificateBasedDeviceRegistrationData::_Internal::device_register_configuration(const CertificateBasedDeviceRegistrationData* msg) {
  return *msg->device_register_configuration_;
}
CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}
CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData(const CertificateBasedDeviceRegistrationData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_certificate()) {
    device_certificate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
  }
  if (from.has_device_register_request()) {
    device_register_request_ = new ::enterprise_management::DeviceRegisterRequest(*from.device_register_request_);
  } else {
    device_register_request_ = nullptr;
  }
  if (from.has_device_register_configuration()) {
    device_register_configuration_ = new ::enterprise_management::DeviceRegisterConfiguration(*from.device_register_configuration_);
  } else {
    device_register_configuration_ = nullptr;
  }
  certificate_type_ = from.certificate_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}

void CertificateBasedDeviceRegistrationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CertificateBasedDeviceRegistrationData_device_5fmanagement_5fbackend_2eproto.base);
  device_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_register_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&certificate_type_) -
      reinterpret_cast<char*>(&device_register_request_)) + sizeof(certificate_type_));
}

CertificateBasedDeviceRegistrationData::~CertificateBasedDeviceRegistrationData() {
  // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegistrationData)
  SharedDtor();
}

void CertificateBasedDeviceRegistrationData::SharedDtor() {
  device_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_register_request_;
  if (this != internal_default_instance()) delete device_register_configuration_;
}

void CertificateBasedDeviceRegistrationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CertificateBasedDeviceRegistrationData& CertificateBasedDeviceRegistrationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CertificateBasedDeviceRegistrationData_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CertificateBasedDeviceRegistrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_certificate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_register_request_ != nullptr);
      device_register_request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(device_register_configuration_ != nullptr);
      device_register_configuration_->Clear();
    }
  }
  certificate_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CertificateBasedDeviceRegistrationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(val))) {
            set_certificate_type(static_cast<::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes device_certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_certificate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_device_register_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterConfiguration device_register_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_device_register_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CertificateBasedDeviceRegistrationData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value)) {
            set_certificate_type(static_cast< ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes device_certificate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterConfiguration device_register_configuration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_register_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegistrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegistrationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CertificateBasedDeviceRegistrationData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->certificate_type(), output);
  }

  // optional bytes device_certificate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->device_certificate(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::device_register_request(this), output);
  }

  // optional .enterprise_management.DeviceRegisterConfiguration device_register_configuration = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::device_register_configuration(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegistrationData)
}

size_t CertificateBasedDeviceRegistrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes device_certificate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->device_certificate());
    }

    // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_register_request_);
    }

    // optional .enterprise_management.DeviceRegisterConfiguration device_register_configuration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_register_configuration_);
    }

    // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->certificate_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CertificateBasedDeviceRegistrationData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CertificateBasedDeviceRegistrationData*>(
      &from));
}

void CertificateBasedDeviceRegistrationData::MergeFrom(const CertificateBasedDeviceRegistrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_certificate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.device_register_request());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_device_register_configuration()->::enterprise_management::DeviceRegisterConfiguration::MergeFrom(from.device_register_configuration());
    }
    if (cached_has_bits & 0x00000008u) {
      certificate_type_ = from.certificate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertificateBasedDeviceRegistrationData::CopyFrom(const CertificateBasedDeviceRegistrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateBasedDeviceRegistrationData::IsInitialized() const {
  return true;
}

void CertificateBasedDeviceRegistrationData::InternalSwap(CertificateBasedDeviceRegistrationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_certificate_.Swap(&other->device_certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_register_request_, other->device_register_request_);
  swap(device_register_configuration_, other->device_register_configuration_);
  swap(certificate_type_, other->certificate_type_);
}

std::string CertificateBasedDeviceRegistrationData::GetTypeName() const {
  return "enterprise_management.CertificateBasedDeviceRegistrationData";
}


// ===================================================================

void RegisterBrowserRequest::InitAsDefaultInstance() {
}
class RegisterBrowserRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterBrowserRequest>()._has_bits_);
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RegisterBrowserRequest::RegisterBrowserRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RegisterBrowserRequest)
}
RegisterBrowserRequest::RegisterBrowserRequest(const RegisterBrowserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  os_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_platform()) {
    os_platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_platform_);
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RegisterBrowserRequest)
}

void RegisterBrowserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto.base);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterBrowserRequest::~RegisterBrowserRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.RegisterBrowserRequest)
  SharedDtor();
}

void RegisterBrowserRequest::SharedDtor() {
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterBrowserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterBrowserRequest& RegisterBrowserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterBrowserRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RegisterBrowserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RegisterBrowserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      os_platform_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterBrowserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string machine_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_machine_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_platform(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterBrowserRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RegisterBrowserRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string machine_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_platform = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_platform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RegisterBrowserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RegisterBrowserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterBrowserRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RegisterBrowserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_name(), output);
  }

  // optional string os_platform = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_platform(), output);
  }

  // optional string os_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RegisterBrowserRequest)
}

size_t RegisterBrowserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RegisterBrowserRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string machine_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string os_platform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_platform());
    }

    // optional string os_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterBrowserRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisterBrowserRequest*>(
      &from));
}

void RegisterBrowserRequest::MergeFrom(const RegisterBrowserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RegisterBrowserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      os_platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_platform_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
  }
}

void RegisterBrowserRequest::CopyFrom(const RegisterBrowserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RegisterBrowserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBrowserRequest::IsInitialized() const {
  return true;
}

void RegisterBrowserRequest::InternalSwap(RegisterBrowserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_platform_.Swap(&other->os_platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string RegisterBrowserRequest::GetTypeName() const {
  return "enterprise_management.RegisterBrowserRequest";
}


// ===================================================================

void ActiveDirectoryEnrollPlayUserRequest::InitAsDefaultInstance() {
}
class ActiveDirectoryEnrollPlayUserRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryEnrollPlayUserRequest>()._has_bits_);
  static void set_has_auth_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActiveDirectoryEnrollPlayUserRequest::ActiveDirectoryEnrollPlayUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}
ActiveDirectoryEnrollPlayUserRequest::ActiveDirectoryEnrollPlayUserRequest(const ActiveDirectoryEnrollPlayUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_session_id()) {
    auth_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}

void ActiveDirectoryEnrollPlayUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto.base);
  auth_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryEnrollPlayUserRequest::~ActiveDirectoryEnrollPlayUserRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  SharedDtor();
}

void ActiveDirectoryEnrollPlayUserRequest::SharedDtor() {
  auth_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryEnrollPlayUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryEnrollPlayUserRequest& ActiveDirectoryEnrollPlayUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryEnrollPlayUserRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryEnrollPlayUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auth_session_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryEnrollPlayUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auth_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryEnrollPlayUserRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryEnrollPlayUserRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_session_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}

size_t ActiveDirectoryEnrollPlayUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auth_session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->auth_session_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryEnrollPlayUserRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryEnrollPlayUserRequest*>(
      &from));
}

void ActiveDirectoryEnrollPlayUserRequest::MergeFrom(const ActiveDirectoryEnrollPlayUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_session_id()) {
    _has_bits_[0] |= 0x00000001u;
    auth_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
}

void ActiveDirectoryEnrollPlayUserRequest::CopyFrom(const ActiveDirectoryEnrollPlayUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryEnrollPlayUserRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryEnrollPlayUserRequest::InternalSwap(ActiveDirectoryEnrollPlayUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_session_id_.Swap(&other->auth_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ActiveDirectoryEnrollPlayUserRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryEnrollPlayUserRequest";
}


// ===================================================================

void ActiveDirectoryEnrollPlayUserResponse::InitAsDefaultInstance() {
  ::enterprise_management::_ActiveDirectoryEnrollPlayUserResponse_default_instance_._instance.get_mutable()->saml_parameters_ = const_cast< ::enterprise_management::SamlParametersProto*>(
      ::enterprise_management::SamlParametersProto::internal_default_instance());
}
class ActiveDirectoryEnrollPlayUserResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryEnrollPlayUserResponse>()._has_bits_);
  static void set_has_enrollment_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::SamlParametersProto& saml_parameters(const ActiveDirectoryEnrollPlayUserResponse* msg);
  static void set_has_saml_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_management::SamlParametersProto&
ActiveDirectoryEnrollPlayUserResponse::_Internal::saml_parameters(const ActiveDirectoryEnrollPlayUserResponse* msg) {
  return *msg->saml_parameters_;
}
ActiveDirectoryEnrollPlayUserResponse::ActiveDirectoryEnrollPlayUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}
ActiveDirectoryEnrollPlayUserResponse::ActiveDirectoryEnrollPlayUserResponse(const ActiveDirectoryEnrollPlayUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enrollment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_enrollment_token()) {
    enrollment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enrollment_token_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.has_saml_parameters()) {
    saml_parameters_ = new ::enterprise_management::SamlParametersProto(*from.saml_parameters_);
  } else {
    saml_parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}

void ActiveDirectoryEnrollPlayUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto.base);
  enrollment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saml_parameters_ = nullptr;
}

ActiveDirectoryEnrollPlayUserResponse::~ActiveDirectoryEnrollPlayUserResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  SharedDtor();
}

void ActiveDirectoryEnrollPlayUserResponse::SharedDtor() {
  enrollment_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete saml_parameters_;
}

void ActiveDirectoryEnrollPlayUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryEnrollPlayUserResponse& ActiveDirectoryEnrollPlayUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryEnrollPlayUserResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryEnrollPlayUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      enrollment_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(saml_parameters_ != nullptr);
      saml_parameters_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryEnrollPlayUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enrollment_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_enrollment_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_saml_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryEnrollPlayUserResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string enrollment_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_enrollment_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saml_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryEnrollPlayUserResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enrollment_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->enrollment_token(), output);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::saml_parameters(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}

size_t ActiveDirectoryEnrollPlayUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enrollment_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->enrollment_token());
    }

    // optional string user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saml_parameters_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryEnrollPlayUserResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryEnrollPlayUserResponse*>(
      &from));
}

void ActiveDirectoryEnrollPlayUserResponse::MergeFrom(const ActiveDirectoryEnrollPlayUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      enrollment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enrollment_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_saml_parameters()->::enterprise_management::SamlParametersProto::MergeFrom(from.saml_parameters());
    }
  }
}

void ActiveDirectoryEnrollPlayUserResponse::CopyFrom(const ActiveDirectoryEnrollPlayUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryEnrollPlayUserResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryEnrollPlayUserResponse::InternalSwap(ActiveDirectoryEnrollPlayUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enrollment_token_.Swap(&other->enrollment_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(saml_parameters_, other->saml_parameters_);
}

std::string ActiveDirectoryEnrollPlayUserResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryEnrollPlayUserResponse";
}


// ===================================================================

void SamlParametersProto::InitAsDefaultInstance() {
}
class SamlParametersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SamlParametersProto>()._has_bits_);
  static void set_has_auth_redirect_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SamlParametersProto::SamlParametersProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SamlParametersProto)
}
SamlParametersProto::SamlParametersProto(const SamlParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_redirect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_redirect_url()) {
    auth_redirect_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
  auth_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_session_id()) {
    auth_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SamlParametersProto)
}

void SamlParametersProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto.base);
  auth_redirect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SamlParametersProto::~SamlParametersProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SamlParametersProto)
  SharedDtor();
}

void SamlParametersProto::SharedDtor() {
  auth_redirect_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SamlParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamlParametersProto& SamlParametersProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamlParametersProto_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SamlParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SamlParametersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      auth_redirect_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      auth_session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SamlParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auth_redirect_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_redirect_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string auth_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SamlParametersProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SamlParametersProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_redirect_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SamlParametersProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SamlParametersProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SamlParametersProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SamlParametersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_redirect_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_redirect_url(), output);
  }

  // optional string auth_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->auth_session_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SamlParametersProto)
}

size_t SamlParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SamlParametersProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string auth_redirect_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->auth_redirect_url());
    }

    // optional string auth_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->auth_session_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamlParametersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SamlParametersProto*>(
      &from));
}

void SamlParametersProto::MergeFrom(const SamlParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SamlParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      auth_redirect_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      auth_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
    }
  }
}

void SamlParametersProto::CopyFrom(const SamlParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SamlParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamlParametersProto::IsInitialized() const {
  return true;
}

void SamlParametersProto::InternalSwap(SamlParametersProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_redirect_url_.Swap(&other->auth_redirect_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_session_id_.Swap(&other->auth_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SamlParametersProto::GetTypeName() const {
  return "enterprise_management.SamlParametersProto";
}


// ===================================================================

void PublicSamlUserRequest::InitAsDefaultInstance() {
}
class PublicSamlUserRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicSamlUserRequest>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PublicSamlUserRequest::PublicSamlUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PublicSamlUserRequest)
}
PublicSamlUserRequest::PublicSamlUserRequest(const PublicSamlUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_id()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PublicSamlUserRequest)
}

void PublicSamlUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PublicSamlUserRequest::~PublicSamlUserRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.PublicSamlUserRequest)
  SharedDtor();
}

void PublicSamlUserRequest::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicSamlUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicSamlUserRequest& PublicSamlUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicSamlUserRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PublicSamlUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PublicSamlUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublicSamlUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublicSamlUserRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PublicSamlUserRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PublicSamlUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PublicSamlUserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublicSamlUserRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PublicSamlUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PublicSamlUserRequest)
}

size_t PublicSamlUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PublicSamlUserRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicSamlUserRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PublicSamlUserRequest*>(
      &from));
}

void PublicSamlUserRequest::MergeFrom(const PublicSamlUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PublicSamlUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    _has_bits_[0] |= 0x00000001u;
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
}

void PublicSamlUserRequest::CopyFrom(const PublicSamlUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PublicSamlUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicSamlUserRequest::IsInitialized() const {
  return true;
}

void PublicSamlUserRequest::InternalSwap(PublicSamlUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PublicSamlUserRequest::GetTypeName() const {
  return "enterprise_management.PublicSamlUserRequest";
}


// ===================================================================

void PublicSamlUserResponse::InitAsDefaultInstance() {
  ::enterprise_management::_PublicSamlUserResponse_default_instance_._instance.get_mutable()->saml_parameters_ = const_cast< ::enterprise_management::SamlParametersProto*>(
      ::enterprise_management::SamlParametersProto::internal_default_instance());
}
class PublicSamlUserResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicSamlUserResponse>()._has_bits_);
  static const ::enterprise_management::SamlParametersProto& saml_parameters(const PublicSamlUserResponse* msg);
  static void set_has_saml_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::SamlParametersProto&
PublicSamlUserResponse::_Internal::saml_parameters(const PublicSamlUserResponse* msg) {
  return *msg->saml_parameters_;
}
PublicSamlUserResponse::PublicSamlUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PublicSamlUserResponse)
}
PublicSamlUserResponse::PublicSamlUserResponse(const PublicSamlUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_saml_parameters()) {
    saml_parameters_ = new ::enterprise_management::SamlParametersProto(*from.saml_parameters_);
  } else {
    saml_parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PublicSamlUserResponse)
}

void PublicSamlUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto.base);
  saml_parameters_ = nullptr;
}

PublicSamlUserResponse::~PublicSamlUserResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.PublicSamlUserResponse)
  SharedDtor();
}

void PublicSamlUserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete saml_parameters_;
}

void PublicSamlUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicSamlUserResponse& PublicSamlUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicSamlUserResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void PublicSamlUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PublicSamlUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(saml_parameters_ != nullptr);
    saml_parameters_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublicSamlUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.SamlParametersProto saml_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_saml_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublicSamlUserResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PublicSamlUserResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.SamlParametersProto saml_parameters = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saml_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PublicSamlUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PublicSamlUserResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublicSamlUserResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PublicSamlUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.SamlParametersProto saml_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::saml_parameters(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PublicSamlUserResponse)
}

size_t PublicSamlUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PublicSamlUserResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.SamlParametersProto saml_parameters = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saml_parameters_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicSamlUserResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PublicSamlUserResponse*>(
      &from));
}

void PublicSamlUserResponse::MergeFrom(const PublicSamlUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PublicSamlUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_saml_parameters()) {
    mutable_saml_parameters()->::enterprise_management::SamlParametersProto::MergeFrom(from.saml_parameters());
  }
}

void PublicSamlUserResponse::CopyFrom(const PublicSamlUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PublicSamlUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicSamlUserResponse::IsInitialized() const {
  return true;
}

void PublicSamlUserResponse::InternalSwap(PublicSamlUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(saml_parameters_, other->saml_parameters_);
}

std::string PublicSamlUserResponse::GetTypeName() const {
  return "enterprise_management.PublicSamlUserResponse";
}


// ===================================================================

void ActiveDirectoryPlayActivityRequest::InitAsDefaultInstance() {
}
class ActiveDirectoryPlayActivityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryPlayActivityRequest>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActiveDirectoryPlayActivityRequest::ActiveDirectoryPlayActivityRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
}
ActiveDirectoryPlayActivityRequest::ActiveDirectoryPlayActivityRequest(const ActiveDirectoryPlayActivityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
}

void ActiveDirectoryPlayActivityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryPlayActivityRequest::~ActiveDirectoryPlayActivityRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
  SharedDtor();
}

void ActiveDirectoryPlayActivityRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryPlayActivityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryPlayActivityRequest& ActiveDirectoryPlayActivityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryPlayActivityRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryPlayActivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryPlayActivityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryPlayActivityRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryPlayActivityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryPlayActivityRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryPlayActivityRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryPlayActivityRequest)
}

size_t ActiveDirectoryPlayActivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string user_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryPlayActivityRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryPlayActivityRequest*>(
      &from));
}

void ActiveDirectoryPlayActivityRequest::MergeFrom(const ActiveDirectoryPlayActivityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    _has_bits_[0] |= 0x00000001u;
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void ActiveDirectoryPlayActivityRequest::CopyFrom(const ActiveDirectoryPlayActivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryPlayActivityRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryPlayActivityRequest::InternalSwap(ActiveDirectoryPlayActivityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ActiveDirectoryPlayActivityRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryPlayActivityRequest";
}


// ===================================================================

void ActiveDirectoryPlayActivityResponse::InitAsDefaultInstance() {
}
class ActiveDirectoryPlayActivityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryPlayActivityResponse>()._has_bits_);
};

ActiveDirectoryPlayActivityResponse::ActiveDirectoryPlayActivityResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
}
ActiveDirectoryPlayActivityResponse::ActiveDirectoryPlayActivityResponse(const ActiveDirectoryPlayActivityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
}

void ActiveDirectoryPlayActivityResponse::SharedCtor() {
}

ActiveDirectoryPlayActivityResponse::~ActiveDirectoryPlayActivityResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
  SharedDtor();
}

void ActiveDirectoryPlayActivityResponse::SharedDtor() {
}

void ActiveDirectoryPlayActivityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryPlayActivityResponse& ActiveDirectoryPlayActivityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryPlayActivityResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryPlayActivityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryPlayActivityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryPlayActivityResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryPlayActivityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryPlayActivityResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryPlayActivityResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryPlayActivityResponse)
}

size_t ActiveDirectoryPlayActivityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryPlayActivityResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryPlayActivityResponse*>(
      &from));
}

void ActiveDirectoryPlayActivityResponse::MergeFrom(const ActiveDirectoryPlayActivityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActiveDirectoryPlayActivityResponse::CopyFrom(const ActiveDirectoryPlayActivityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryPlayActivityResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryPlayActivityResponse::InternalSwap(ActiveDirectoryPlayActivityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ActiveDirectoryPlayActivityResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryPlayActivityResponse";
}


// ===================================================================

void CheckDeviceLicenseRequest::InitAsDefaultInstance() {
}
class CheckDeviceLicenseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckDeviceLicenseRequest>()._has_bits_);
};

CheckDeviceLicenseRequest::CheckDeviceLicenseRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDeviceLicenseRequest)
}
CheckDeviceLicenseRequest::CheckDeviceLicenseRequest(const CheckDeviceLicenseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDeviceLicenseRequest)
}

void CheckDeviceLicenseRequest::SharedCtor() {
}

CheckDeviceLicenseRequest::~CheckDeviceLicenseRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDeviceLicenseRequest)
  SharedDtor();
}

void CheckDeviceLicenseRequest::SharedDtor() {
}

void CheckDeviceLicenseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDeviceLicenseRequest& CheckDeviceLicenseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDeviceLicenseRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckDeviceLicenseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDeviceLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckDeviceLicenseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckDeviceLicenseRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDeviceLicenseRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDeviceLicenseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDeviceLicenseRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckDeviceLicenseRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDeviceLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDeviceLicenseRequest)
}

size_t CheckDeviceLicenseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDeviceLicenseRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDeviceLicenseRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckDeviceLicenseRequest*>(
      &from));
}

void CheckDeviceLicenseRequest::MergeFrom(const CheckDeviceLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDeviceLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckDeviceLicenseRequest::CopyFrom(const CheckDeviceLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDeviceLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceLicenseRequest::IsInitialized() const {
  return true;
}

void CheckDeviceLicenseRequest::InternalSwap(CheckDeviceLicenseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string CheckDeviceLicenseRequest::GetTypeName() const {
  return "enterprise_management.CheckDeviceLicenseRequest";
}


// ===================================================================

void LicenseAvailability::InitAsDefaultInstance() {
  ::enterprise_management::_LicenseAvailability_default_instance_._instance.get_mutable()->license_type_deprecated_ = const_cast< ::enterprise_management::LicenseType*>(
      ::enterprise_management::LicenseType::internal_default_instance());
}
class LicenseAvailability::_Internal {
 public:
  using HasBits = decltype(std::declval<LicenseAvailability>()._has_bits_);
  static const ::enterprise_management::LicenseType& license_type_deprecated(const LicenseAvailability* msg);
  static void set_has_license_type_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_available_licenses_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::LicenseType&
LicenseAvailability::_Internal::license_type_deprecated(const LicenseAvailability* msg) {
  return *msg->license_type_deprecated_;
}
LicenseAvailability::LicenseAvailability()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.LicenseAvailability)
}
LicenseAvailability::LicenseAvailability(const LicenseAvailability& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_license_type_deprecated()) {
    license_type_deprecated_ = new ::enterprise_management::LicenseType(*from.license_type_deprecated_);
  } else {
    license_type_deprecated_ = nullptr;
  }
  available_licenses_deprecated_ = from.available_licenses_deprecated_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LicenseAvailability)
}

void LicenseAvailability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&license_type_deprecated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_licenses_deprecated_) -
      reinterpret_cast<char*>(&license_type_deprecated_)) + sizeof(available_licenses_deprecated_));
}

LicenseAvailability::~LicenseAvailability() {
  // @@protoc_insertion_point(destructor:enterprise_management.LicenseAvailability)
  SharedDtor();
}

void LicenseAvailability::SharedDtor() {
  if (this != internal_default_instance()) delete license_type_deprecated_;
}

void LicenseAvailability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseAvailability& LicenseAvailability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseAvailability_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void LicenseAvailability::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LicenseAvailability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(license_type_deprecated_ != nullptr);
    license_type_deprecated_->Clear();
  }
  available_licenses_deprecated_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseAvailability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.LicenseType license_type_deprecated = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_license_type_deprecated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 available_licenses_deprecated = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_available_licenses_deprecated(&has_bits);
          available_licenses_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseAvailability::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.LicenseAvailability)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.LicenseType license_type_deprecated = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_license_type_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 available_licenses_deprecated = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_available_licenses_deprecated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_licenses_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.LicenseAvailability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.LicenseAvailability)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseAvailability::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.LicenseAvailability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.LicenseType license_type_deprecated = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::license_type_deprecated(this), output);
  }

  // optional int32 available_licenses_deprecated = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->available_licenses_deprecated(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.LicenseAvailability)
}

size_t LicenseAvailability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LicenseAvailability)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.LicenseType license_type_deprecated = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_type_deprecated_);
    }

    // optional int32 available_licenses_deprecated = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->available_licenses_deprecated());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseAvailability::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LicenseAvailability*>(
      &from));
}

void LicenseAvailability::MergeFrom(const LicenseAvailability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LicenseAvailability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_license_type_deprecated()->::enterprise_management::LicenseType::MergeFrom(from.license_type_deprecated());
    }
    if (cached_has_bits & 0x00000002u) {
      available_licenses_deprecated_ = from.available_licenses_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LicenseAvailability::CopyFrom(const LicenseAvailability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LicenseAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseAvailability::IsInitialized() const {
  return true;
}

void LicenseAvailability::InternalSwap(LicenseAvailability* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(license_type_deprecated_, other->license_type_deprecated_);
  swap(available_licenses_deprecated_, other->available_licenses_deprecated_);
}

std::string LicenseAvailability::GetTypeName() const {
  return "enterprise_management.LicenseAvailability";
}


// ===================================================================

void CheckDeviceLicenseResponse::InitAsDefaultInstance() {
}
class CheckDeviceLicenseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckDeviceLicenseResponse>()._has_bits_);
  static void set_has_license_selection_mode_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CheckDeviceLicenseResponse::CheckDeviceLicenseResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDeviceLicenseResponse)
}
CheckDeviceLicenseResponse::CheckDeviceLicenseResponse(const CheckDeviceLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      license_availabilities_deprecated_(from.license_availabilities_deprecated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_selection_mode_deprecated_ = from.license_selection_mode_deprecated_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDeviceLicenseResponse)
}

void CheckDeviceLicenseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto.base);
  license_selection_mode_deprecated_ = 0;
}

CheckDeviceLicenseResponse::~CheckDeviceLicenseResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDeviceLicenseResponse)
  SharedDtor();
}

void CheckDeviceLicenseResponse::SharedDtor() {
}

void CheckDeviceLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDeviceLicenseResponse& CheckDeviceLicenseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDeviceLicenseResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void CheckDeviceLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDeviceLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_availabilities_deprecated_.Clear();
  license_selection_mode_deprecated_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckDeviceLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode_deprecated = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(val))) {
            set_license_selection_mode_deprecated(static_cast<::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.LicenseAvailability license_availabilities_deprecated = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_license_availabilities_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckDeviceLicenseResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDeviceLicenseResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode_deprecated = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(value)) {
            set_license_selection_mode_deprecated(static_cast< ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.LicenseAvailability license_availabilities_deprecated = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_license_availabilities_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDeviceLicenseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDeviceLicenseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckDeviceLicenseResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDeviceLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode_deprecated = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->license_selection_mode_deprecated(), output);
  }

  // repeated .enterprise_management.LicenseAvailability license_availabilities_deprecated = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->license_availabilities_deprecated_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->license_availabilities_deprecated(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDeviceLicenseResponse)
}

size_t CheckDeviceLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDeviceLicenseResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.LicenseAvailability license_availabilities_deprecated = 2 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->license_availabilities_deprecated_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->license_availabilities_deprecated(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode_deprecated = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->license_selection_mode_deprecated());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDeviceLicenseResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckDeviceLicenseResponse*>(
      &from));
}

void CheckDeviceLicenseResponse::MergeFrom(const CheckDeviceLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDeviceLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  license_availabilities_deprecated_.MergeFrom(from.license_availabilities_deprecated_);
  if (from.has_license_selection_mode_deprecated()) {
    set_license_selection_mode_deprecated(from.license_selection_mode_deprecated());
  }
}

void CheckDeviceLicenseResponse::CopyFrom(const CheckDeviceLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDeviceLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceLicenseResponse::IsInitialized() const {
  return true;
}

void CheckDeviceLicenseResponse::InternalSwap(CheckDeviceLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&license_availabilities_deprecated_)->InternalSwap(CastToBase(&other->license_availabilities_deprecated_));
  swap(license_selection_mode_deprecated_, other->license_selection_mode_deprecated_);
}

std::string CheckDeviceLicenseResponse::GetTypeName() const {
  return "enterprise_management.CheckDeviceLicenseResponse";
}


// ===================================================================

void ActiveDirectoryUserSigninRequest::InitAsDefaultInstance() {
}
class ActiveDirectoryUserSigninRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryUserSigninRequest>()._has_bits_);
};

ActiveDirectoryUserSigninRequest::ActiveDirectoryUserSigninRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryUserSigninRequest)
}
ActiveDirectoryUserSigninRequest::ActiveDirectoryUserSigninRequest(const ActiveDirectoryUserSigninRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryUserSigninRequest)
}

void ActiveDirectoryUserSigninRequest::SharedCtor() {
}

ActiveDirectoryUserSigninRequest::~ActiveDirectoryUserSigninRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryUserSigninRequest)
  SharedDtor();
}

void ActiveDirectoryUserSigninRequest::SharedDtor() {
}

void ActiveDirectoryUserSigninRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryUserSigninRequest& ActiveDirectoryUserSigninRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryUserSigninRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryUserSigninRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryUserSigninRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryUserSigninRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryUserSigninRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryUserSigninRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryUserSigninRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryUserSigninRequest)
}

size_t ActiveDirectoryUserSigninRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryUserSigninRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryUserSigninRequest*>(
      &from));
}

void ActiveDirectoryUserSigninRequest::MergeFrom(const ActiveDirectoryUserSigninRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActiveDirectoryUserSigninRequest::CopyFrom(const ActiveDirectoryUserSigninRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryUserSigninRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryUserSigninRequest::InternalSwap(ActiveDirectoryUserSigninRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ActiveDirectoryUserSigninRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryUserSigninRequest";
}


// ===================================================================

void ActiveDirectoryUserSigninResponse::InitAsDefaultInstance() {
}
class ActiveDirectoryUserSigninResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveDirectoryUserSigninResponse>()._has_bits_);
  static void set_has_auth_redirect_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActiveDirectoryUserSigninResponse::ActiveDirectoryUserSigninResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryUserSigninResponse)
}
ActiveDirectoryUserSigninResponse::ActiveDirectoryUserSigninResponse(const ActiveDirectoryUserSigninResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_redirect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_redirect_url()) {
    auth_redirect_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryUserSigninResponse)
}

void ActiveDirectoryUserSigninResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto.base);
  auth_redirect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryUserSigninResponse::~ActiveDirectoryUserSigninResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryUserSigninResponse)
  SharedDtor();
}

void ActiveDirectoryUserSigninResponse::SharedDtor() {
  auth_redirect_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryUserSigninResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveDirectoryUserSigninResponse& ActiveDirectoryUserSigninResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveDirectoryUserSigninResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ActiveDirectoryUserSigninResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auth_redirect_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveDirectoryUserSigninResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auth_redirect_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_redirect_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveDirectoryUserSigninResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_redirect_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryUserSigninResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryUserSigninResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveDirectoryUserSigninResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_redirect_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_redirect_url(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryUserSigninResponse)
}

size_t ActiveDirectoryUserSigninResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auth_redirect_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->auth_redirect_url());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveDirectoryUserSigninResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveDirectoryUserSigninResponse*>(
      &from));
}

void ActiveDirectoryUserSigninResponse::MergeFrom(const ActiveDirectoryUserSigninResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_redirect_url()) {
    _has_bits_[0] |= 0x00000001u;
    auth_redirect_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
}

void ActiveDirectoryUserSigninResponse::CopyFrom(const ActiveDirectoryUserSigninResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryUserSigninResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryUserSigninResponse::InternalSwap(ActiveDirectoryUserSigninResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_redirect_url_.Swap(&other->auth_redirect_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ActiveDirectoryUserSigninResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryUserSigninResponse";
}


// ===================================================================

void TpmVersionInfo::InitAsDefaultInstance() {
}
class TpmVersionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TpmVersionInfo>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spec_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tpm_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_firmware_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vendor_specific(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TpmVersionInfo::TpmVersionInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.TpmVersionInfo)
}
TpmVersionInfo::TpmVersionInfo(const TpmVersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_specific_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor_specific()) {
    vendor_specific_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_specific_);
  }
  ::memcpy(&spec_level_, &from.spec_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpm_model_) -
    reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TpmVersionInfo)
}

void TpmVersionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto.base);
  vendor_specific_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpm_model_) -
      reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
}

TpmVersionInfo::~TpmVersionInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.TpmVersionInfo)
  SharedDtor();
}

void TpmVersionInfo::SharedDtor() {
  vendor_specific_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TpmVersionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TpmVersionInfo& TpmVersionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TpmVersionInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void TpmVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TpmVersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vendor_specific_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&spec_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpm_model_) -
        reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TpmVersionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_family(&has_bits);
          family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 spec_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spec_level(&has_bits);
          spec_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 manufacturer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_manufacturer(&has_bits);
          manufacturer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tpm_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tpm_model(&has_bits);
          tpm_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 firmware_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_firmware_version(&has_bits);
          firmware_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vendor_specific = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vendor_specific(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TpmVersionInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.TpmVersionInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_family(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 spec_level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_spec_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spec_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 manufacturer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_manufacturer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manufacturer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tpm_model = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_tpm_model(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpm_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 firmware_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_firmware_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firmware_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vendor_specific = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_specific()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.TpmVersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.TpmVersionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TpmVersionInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.TpmVersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 family = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  // optional uint64 spec_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->spec_level(), output);
  }

  // optional uint32 manufacturer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->manufacturer(), output);
  }

  // optional uint32 tpm_model = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->tpm_model(), output);
  }

  // optional uint64 firmware_version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->firmware_version(), output);
  }

  // optional string vendor_specific = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vendor_specific(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.TpmVersionInfo)
}

size_t TpmVersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TpmVersionInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string vendor_specific = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->vendor_specific());
    }

    // optional uint64 spec_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->spec_level());
    }

    // optional uint32 family = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->family());
    }

    // optional uint32 manufacturer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->manufacturer());
    }

    // optional uint64 firmware_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->firmware_version());
    }

    // optional uint32 tpm_model = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tpm_model());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TpmVersionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TpmVersionInfo*>(
      &from));
}

void TpmVersionInfo::MergeFrom(const TpmVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TpmVersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vendor_specific_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_specific_);
    }
    if (cached_has_bits & 0x00000002u) {
      spec_level_ = from.spec_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      family_ = from.family_;
    }
    if (cached_has_bits & 0x00000008u) {
      manufacturer_ = from.manufacturer_;
    }
    if (cached_has_bits & 0x00000010u) {
      firmware_version_ = from.firmware_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      tpm_model_ = from.tpm_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TpmVersionInfo::CopyFrom(const TpmVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TpmVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpmVersionInfo::IsInitialized() const {
  return true;
}

void TpmVersionInfo::InternalSwap(TpmVersionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vendor_specific_.Swap(&other->vendor_specific_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(spec_level_, other->spec_level_);
  swap(family_, other->family_);
  swap(manufacturer_, other->manufacturer_);
  swap(firmware_version_, other->firmware_version_);
  swap(tpm_model_, other->tpm_model_);
}

std::string TpmVersionInfo::GetTypeName() const {
  return "enterprise_management.TpmVersionInfo";
}


// ===================================================================

void TpmStatusInfo::InitAsDefaultInstance() {
}
class TpmStatusInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TpmStatusInfo>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tpm_initialized(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attestation_prepared(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attestation_enrolled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dictionary_attack_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dictionary_attack_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dictionary_attack_lockout_in_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dictionary_attack_lockout_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_boot_lockbox_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TpmStatusInfo::TpmStatusInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.TpmStatusInfo)
}
TpmStatusInfo::TpmStatusInfo(const TpmStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&dictionary_attack_lockout_seconds_remaining_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(dictionary_attack_lockout_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TpmStatusInfo)
}

void TpmStatusInfo::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dictionary_attack_lockout_seconds_remaining_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(dictionary_attack_lockout_seconds_remaining_));
}

TpmStatusInfo::~TpmStatusInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.TpmStatusInfo)
  SharedDtor();
}

void TpmStatusInfo::SharedDtor() {
}

void TpmStatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TpmStatusInfo& TpmStatusInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TpmStatusInfo_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void TpmStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TpmStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dictionary_attack_lockout_in_effect_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(dictionary_attack_lockout_in_effect_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&boot_lockbox_finalized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dictionary_attack_lockout_seconds_remaining_) -
        reinterpret_cast<char*>(&boot_lockbox_finalized_)) + sizeof(dictionary_attack_lockout_seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TpmStatusInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tpm_initialized = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tpm_initialized(&has_bits);
          tpm_initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool attestation_prepared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_attestation_prepared(&has_bits);
          attestation_prepared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool attestation_enrolled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attestation_enrolled(&has_bits);
          attestation_enrolled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dictionary_attack_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dictionary_attack_counter(&has_bits);
          dictionary_attack_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dictionary_attack_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dictionary_attack_threshold(&has_bits);
          dictionary_attack_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dictionary_attack_lockout_in_effect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dictionary_attack_lockout_in_effect(&has_bits);
          dictionary_attack_lockout_in_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dictionary_attack_lockout_seconds_remaining = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_dictionary_attack_lockout_seconds_remaining(&has_bits);
          dictionary_attack_lockout_seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boot_lockbox_finalized = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_boot_lockbox_finalized(&has_bits);
          boot_lockbox_finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TpmStatusInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.TpmStatusInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool owned = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_owned(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tpm_initialized = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_tpm_initialized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tpm_initialized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool attestation_prepared = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_attestation_prepared(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attestation_prepared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool attestation_enrolled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_attestation_enrolled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attestation_enrolled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dictionary_attack_counter = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_dictionary_attack_counter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dictionary_attack_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dictionary_attack_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_dictionary_attack_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dictionary_attack_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dictionary_attack_lockout_in_effect = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_dictionary_attack_lockout_in_effect(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dictionary_attack_lockout_in_effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dictionary_attack_lockout_seconds_remaining = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_dictionary_attack_lockout_seconds_remaining(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dictionary_attack_lockout_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boot_lockbox_finalized = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_boot_lockbox_finalized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_lockbox_finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.TpmStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.TpmStatusInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TpmStatusInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.TpmStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional bool owned = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->owned(), output);
  }

  // optional bool tpm_initialized = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->tpm_initialized(), output);
  }

  // optional bool attestation_prepared = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->attestation_prepared(), output);
  }

  // optional bool attestation_enrolled = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->attestation_enrolled(), output);
  }

  // optional int32 dictionary_attack_counter = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->dictionary_attack_counter(), output);
  }

  // optional int32 dictionary_attack_threshold = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->dictionary_attack_threshold(), output);
  }

  // optional bool dictionary_attack_lockout_in_effect = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->dictionary_attack_lockout_in_effect(), output);
  }

  // optional int32 dictionary_attack_lockout_seconds_remaining = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->dictionary_attack_lockout_seconds_remaining(), output);
  }

  // optional bool boot_lockbox_finalized = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->boot_lockbox_finalized(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.TpmStatusInfo)
}

size_t TpmStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TpmStatusInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool owned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool tpm_initialized = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool attestation_prepared = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 dictionary_attack_counter = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dictionary_attack_counter());
    }

    // optional int32 dictionary_attack_threshold = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dictionary_attack_threshold());
    }

    // optional bool attestation_enrolled = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool dictionary_attack_lockout_in_effect = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool boot_lockbox_finalized = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 dictionary_attack_lockout_seconds_remaining = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dictionary_attack_lockout_seconds_remaining());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TpmStatusInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TpmStatusInfo*>(
      &from));
}

void TpmStatusInfo::MergeFrom(const TpmStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TpmStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      owned_ = from.owned_;
    }
    if (cached_has_bits & 0x00000004u) {
      tpm_initialized_ = from.tpm_initialized_;
    }
    if (cached_has_bits & 0x00000008u) {
      attestation_prepared_ = from.attestation_prepared_;
    }
    if (cached_has_bits & 0x00000010u) {
      dictionary_attack_counter_ = from.dictionary_attack_counter_;
    }
    if (cached_has_bits & 0x00000020u) {
      dictionary_attack_threshold_ = from.dictionary_attack_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      attestation_enrolled_ = from.attestation_enrolled_;
    }
    if (cached_has_bits & 0x00000080u) {
      dictionary_attack_lockout_in_effect_ = from.dictionary_attack_lockout_in_effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      boot_lockbox_finalized_ = from.boot_lockbox_finalized_;
    }
    if (cached_has_bits & 0x00000200u) {
      dictionary_attack_lockout_seconds_remaining_ = from.dictionary_attack_lockout_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TpmStatusInfo::CopyFrom(const TpmStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TpmStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpmStatusInfo::IsInitialized() const {
  return true;
}

void TpmStatusInfo::InternalSwap(TpmStatusInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(owned_, other->owned_);
  swap(tpm_initialized_, other->tpm_initialized_);
  swap(attestation_prepared_, other->attestation_prepared_);
  swap(dictionary_attack_counter_, other->dictionary_attack_counter_);
  swap(dictionary_attack_threshold_, other->dictionary_attack_threshold_);
  swap(attestation_enrolled_, other->attestation_enrolled_);
  swap(dictionary_attack_lockout_in_effect_, other->dictionary_attack_lockout_in_effect_);
  swap(boot_lockbox_finalized_, other->boot_lockbox_finalized_);
  swap(dictionary_attack_lockout_seconds_remaining_, other->dictionary_attack_lockout_seconds_remaining_);
}

std::string TpmStatusInfo::GetTypeName() const {
  return "enterprise_management.TpmStatusInfo";
}


// ===================================================================

void SystemState::InitAsDefaultInstance() {
}
class SystemState::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemState>()._has_bits_);
};

SystemState::SystemState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SystemState)
}
SystemState::SystemState(const SystemState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      volume_infos_(from.volume_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemState)
}

void SystemState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemState_device_5fmanagement_5fbackend_2eproto.base);
}

SystemState::~SystemState() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemState)
  SharedDtor();
}

void SystemState::SharedDtor() {
}

void SystemState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemState& SystemState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemState_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void SystemState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.VolumeInfo volume_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_volume_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SystemState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.VolumeInfo volume_infos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_volume_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SystemState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SystemState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SystemState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.VolumeInfo volume_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->volume_infos(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SystemState)
}

size_t SystemState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.VolumeInfo volume_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->volume_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemState*>(
      &from));
}

void SystemState::MergeFrom(const SystemState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_infos_.MergeFrom(from.volume_infos_);
}

void SystemState::CopyFrom(const SystemState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemState::IsInitialized() const {
  return true;
}

void SystemState::InternalSwap(SystemState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&volume_infos_)->InternalSwap(CastToBase(&other->volume_infos_));
}

std::string SystemState::GetTypeName() const {
  return "enterprise_management.SystemState";
}


// ===================================================================

void AppInstallReportLogEvent::InitAsDefaultInstance() {
}
class AppInstallReportLogEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInstallReportLogEvent>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stateful_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stateful_free(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clouddps_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_phonesky_log(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_session_state_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_android_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AppInstallReportLogEvent::AppInstallReportLogEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportLogEvent)
}
AppInstallReportLogEvent::AppInstallReportLogEvent(const AppInstallReportLogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phonesky_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_phonesky_log()) {
    phonesky_log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phonesky_log_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&android_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(android_id_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportLogEvent)
}

void AppInstallReportLogEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto.base);
  phonesky_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&android_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(android_id_));
}

AppInstallReportLogEvent::~AppInstallReportLogEvent() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportLogEvent)
  SharedDtor();
}

void AppInstallReportLogEvent::SharedDtor() {
  phonesky_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInstallReportLogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInstallReportLogEvent& AppInstallReportLogEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInstallReportLogEvent_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppInstallReportLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phonesky_log_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_state_change_type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(session_state_change_type_));
  }
  android_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInstallReportLogEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AppInstallReportLogEvent_EventType_IsValid(val))) {
            set_event_type(static_cast<::enterprise_management::AppInstallReportLogEvent_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 stateful_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stateful_total(&has_bits);
          stateful_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stateful_free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stateful_free(&has_bits);
          stateful_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clouddps_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clouddps_response(&has_bits);
          clouddps_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phonesky_log = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_phonesky_log(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool online = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType_IsValid(val))) {
            set_session_state_change_type(static_cast<::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 android_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_android_id(&has_bits);
          android_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInstallReportLogEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportLogEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AppInstallReportLogEvent_EventType_IsValid(value)) {
            set_event_type(static_cast< ::enterprise_management::AppInstallReportLogEvent_EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stateful_total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stateful_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stateful_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stateful_free = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stateful_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stateful_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clouddps_response = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_clouddps_response(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &clouddps_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phonesky_log = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phonesky_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_online(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType_IsValid(value)) {
            set_session_state_change_type(static_cast< ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 android_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_android_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &android_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportLogEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInstallReportLogEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional int64 stateful_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->stateful_total(), output);
  }

  // optional int64 stateful_free = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->stateful_free(), output);
  }

  // optional int32 clouddps_response = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->clouddps_response(), output);
  }

  // optional string phonesky_log = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonesky_log(), output);
  }

  // optional bool online = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->online(), output);
  }

  // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->session_state_change_type(), output);
  }

  // optional int64 android_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->android_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportLogEvent)
}

size_t AppInstallReportLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportLogEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string phonesky_log = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->phonesky_log());
    }

    // optional int64 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 stateful_total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stateful_total());
    }

    // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 clouddps_response = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->clouddps_response());
    }

    // optional int64 stateful_free = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stateful_free());
    }

    // optional bool online = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->session_state_change_type());
    }

  }
  // optional int64 android_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->android_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInstallReportLogEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppInstallReportLogEvent*>(
      &from));
}

void AppInstallReportLogEvent::MergeFrom(const AppInstallReportLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      phonesky_log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phonesky_log_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      stateful_total_ = from.stateful_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      clouddps_response_ = from.clouddps_response_;
    }
    if (cached_has_bits & 0x00000020u) {
      stateful_free_ = from.stateful_free_;
    }
    if (cached_has_bits & 0x00000040u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000080u) {
      session_state_change_type_ = from.session_state_change_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_android_id(from.android_id());
  }
}

void AppInstallReportLogEvent::CopyFrom(const AppInstallReportLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportLogEvent::IsInitialized() const {
  return true;
}

void AppInstallReportLogEvent::InternalSwap(AppInstallReportLogEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phonesky_log_.Swap(&other->phonesky_log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(stateful_total_, other->stateful_total_);
  swap(event_type_, other->event_type_);
  swap(clouddps_response_, other->clouddps_response_);
  swap(stateful_free_, other->stateful_free_);
  swap(online_, other->online_);
  swap(session_state_change_type_, other->session_state_change_type_);
  swap(android_id_, other->android_id_);
}

std::string AppInstallReportLogEvent::GetTypeName() const {
  return "enterprise_management.AppInstallReportLogEvent";
}


// ===================================================================

void AppInstallReport::InitAsDefaultInstance() {
}
class AppInstallReport::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInstallReport>()._has_bits_);
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_incomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppInstallReport::AppInstallReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReport)
}
AppInstallReport::AppInstallReport(const AppInstallReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  incomplete_ = from.incomplete_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReport)
}

void AppInstallReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  incomplete_ = false;
}

AppInstallReport::~AppInstallReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReport)
  SharedDtor();
}

void AppInstallReport::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInstallReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInstallReport& AppInstallReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInstallReport_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppInstallReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_.ClearNonDefaultToEmptyNoArena();
  }
  incomplete_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInstallReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool incomplete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_incomplete(&has_bits);
          incomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AppInstallReportLogEvent logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInstallReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incomplete = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_incomplete(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incomplete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AppInstallReportLogEvent logs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInstallReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional bool incomplete = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->incomplete(), output);
  }

  // repeated .enterprise_management.AppInstallReportLogEvent logs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->logs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReport)
}

size_t AppInstallReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AppInstallReportLogEvent logs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional bool incomplete = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInstallReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppInstallReport*>(
      &from));
}

void AppInstallReport::MergeFrom(const AppInstallReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      incomplete_ = from.incomplete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppInstallReport::CopyFrom(const AppInstallReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReport::IsInitialized() const {
  return true;
}

void AppInstallReport::InternalSwap(AppInstallReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&logs_)->InternalSwap(CastToBase(&other->logs_));
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(incomplete_, other->incomplete_);
}

std::string AppInstallReport::GetTypeName() const {
  return "enterprise_management.AppInstallReport";
}


// ===================================================================

void AppInstallReportRequest::InitAsDefaultInstance() {
}
class AppInstallReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInstallReportRequest>()._has_bits_);
};

AppInstallReportRequest::AppInstallReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportRequest)
}
AppInstallReportRequest::AppInstallReportRequest(const AppInstallReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      app_install_reports_(from.app_install_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportRequest)
}

void AppInstallReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto.base);
}

AppInstallReportRequest::~AppInstallReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportRequest)
  SharedDtor();
}

void AppInstallReportRequest::SharedDtor() {
}

void AppInstallReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInstallReportRequest& AppInstallReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInstallReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppInstallReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_install_reports_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInstallReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.AppInstallReport app_install_reports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_app_install_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInstallReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.AppInstallReport app_install_reports = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_app_install_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInstallReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.AppInstallReport app_install_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_install_reports_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->app_install_reports(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportRequest)
}

size_t AppInstallReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AppInstallReport app_install_reports = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->app_install_reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->app_install_reports(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInstallReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppInstallReportRequest*>(
      &from));
}

void AppInstallReportRequest::MergeFrom(const AppInstallReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_install_reports_.MergeFrom(from.app_install_reports_);
}

void AppInstallReportRequest::CopyFrom(const AppInstallReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportRequest::IsInitialized() const {
  return true;
}

void AppInstallReportRequest::InternalSwap(AppInstallReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&app_install_reports_)->InternalSwap(CastToBase(&other->app_install_reports_));
}

std::string AppInstallReportRequest::GetTypeName() const {
  return "enterprise_management.AppInstallReportRequest";
}


// ===================================================================

void AppInstallReportResponse::InitAsDefaultInstance() {
}
class AppInstallReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInstallReportResponse>()._has_bits_);
};

AppInstallReportResponse::AppInstallReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportResponse)
}
AppInstallReportResponse::AppInstallReportResponse(const AppInstallReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportResponse)
}

void AppInstallReportResponse::SharedCtor() {
}

AppInstallReportResponse::~AppInstallReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportResponse)
  SharedDtor();
}

void AppInstallReportResponse::SharedDtor() {
}

void AppInstallReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInstallReportResponse& AppInstallReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInstallReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppInstallReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInstallReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInstallReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInstallReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportResponse)
}

size_t AppInstallReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInstallReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppInstallReportResponse*>(
      &from));
}

void AppInstallReportResponse::MergeFrom(const AppInstallReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppInstallReportResponse::CopyFrom(const AppInstallReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportResponse::IsInitialized() const {
  return true;
}

void AppInstallReportResponse::InternalSwap(AppInstallReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string AppInstallReportResponse::GetTypeName() const {
  return "enterprise_management.AppInstallReportResponse";
}


// ===================================================================

void RefreshAccountRequest::InitAsDefaultInstance() {
}
class RefreshAccountRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RefreshAccountRequest>()._has_bits_);
  static void set_has_account_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RefreshAccountRequest::RefreshAccountRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RefreshAccountRequest)
}
RefreshAccountRequest::RefreshAccountRequest(const RefreshAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_type_ = from.account_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RefreshAccountRequest)
}

void RefreshAccountRequest::SharedCtor() {
  account_type_ = 0;
}

RefreshAccountRequest::~RefreshAccountRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.RefreshAccountRequest)
  SharedDtor();
}

void RefreshAccountRequest::SharedDtor() {
}

void RefreshAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshAccountRequest& RefreshAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshAccountRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RefreshAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RefreshAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefreshAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.RefreshAccountRequest.AccountType account_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::RefreshAccountRequest_AccountType_IsValid(val))) {
            set_account_type(static_cast<::enterprise_management::RefreshAccountRequest_AccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefreshAccountRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RefreshAccountRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.RefreshAccountRequest.AccountType account_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::RefreshAccountRequest_AccountType_IsValid(value)) {
            set_account_type(static_cast< ::enterprise_management::RefreshAccountRequest_AccountType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RefreshAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RefreshAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefreshAccountRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RefreshAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.RefreshAccountRequest.AccountType account_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->account_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RefreshAccountRequest)
}

size_t RefreshAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RefreshAccountRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.RefreshAccountRequest.AccountType account_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->account_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshAccountRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RefreshAccountRequest*>(
      &from));
}

void RefreshAccountRequest::MergeFrom(const RefreshAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RefreshAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_type()) {
    set_account_type(from.account_type());
  }
}

void RefreshAccountRequest::CopyFrom(const RefreshAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RefreshAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshAccountRequest::IsInitialized() const {
  return true;
}

void RefreshAccountRequest::InternalSwap(RefreshAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_type_, other->account_type_);
}

std::string RefreshAccountRequest::GetTypeName() const {
  return "enterprise_management.RefreshAccountRequest";
}


// ===================================================================

void RefreshAccountResponse::InitAsDefaultInstance() {
}
class RefreshAccountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RefreshAccountResponse>()._has_bits_);
};

RefreshAccountResponse::RefreshAccountResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RefreshAccountResponse)
}
RefreshAccountResponse::RefreshAccountResponse(const RefreshAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RefreshAccountResponse)
}

void RefreshAccountResponse::SharedCtor() {
}

RefreshAccountResponse::~RefreshAccountResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.RefreshAccountResponse)
  SharedDtor();
}

void RefreshAccountResponse::SharedDtor() {
}

void RefreshAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshAccountResponse& RefreshAccountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshAccountResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RefreshAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RefreshAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefreshAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefreshAccountResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RefreshAccountResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RefreshAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RefreshAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefreshAccountResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RefreshAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RefreshAccountResponse)
}

size_t RefreshAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RefreshAccountResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshAccountResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RefreshAccountResponse*>(
      &from));
}

void RefreshAccountResponse::MergeFrom(const RefreshAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RefreshAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RefreshAccountResponse::CopyFrom(const RefreshAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RefreshAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshAccountResponse::IsInitialized() const {
  return true;
}

void RefreshAccountResponse::InternalSwap(RefreshAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string RefreshAccountResponse::GetTypeName() const {
  return "enterprise_management.RefreshAccountResponse";
}


// ===================================================================

void RsuLookupKeyUploadRequest::InitAsDefaultInstance() {
}
class RsuLookupKeyUploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RsuLookupKeyUploadRequest>()._has_bits_);
  static void set_has_board_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cr50_hashed_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RsuLookupKeyUploadRequest::RsuLookupKeyUploadRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RsuLookupKeyUploadRequest)
}
RsuLookupKeyUploadRequest::RsuLookupKeyUploadRequest(const RsuLookupKeyUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  board_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_board_id()) {
    board_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.board_id_);
  }
  cr50_hashed_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cr50_hashed_device_id()) {
    cr50_hashed_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cr50_hashed_device_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RsuLookupKeyUploadRequest)
}

void RsuLookupKeyUploadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto.base);
  board_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cr50_hashed_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RsuLookupKeyUploadRequest::~RsuLookupKeyUploadRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.RsuLookupKeyUploadRequest)
  SharedDtor();
}

void RsuLookupKeyUploadRequest::SharedDtor() {
  board_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cr50_hashed_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RsuLookupKeyUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RsuLookupKeyUploadRequest& RsuLookupKeyUploadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RsuLookupKeyUploadRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RsuLookupKeyUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RsuLookupKeyUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      board_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cr50_hashed_device_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RsuLookupKeyUploadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes board_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_board_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cr50_hashed_device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cr50_hashed_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RsuLookupKeyUploadRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RsuLookupKeyUploadRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes board_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_board_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes cr50_hashed_device_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cr50_hashed_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RsuLookupKeyUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RsuLookupKeyUploadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RsuLookupKeyUploadRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RsuLookupKeyUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes board_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->board_id(), output);
  }

  // optional bytes cr50_hashed_device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cr50_hashed_device_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RsuLookupKeyUploadRequest)
}

size_t RsuLookupKeyUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RsuLookupKeyUploadRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes board_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->board_id());
    }

    // optional bytes cr50_hashed_device_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->cr50_hashed_device_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RsuLookupKeyUploadRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RsuLookupKeyUploadRequest*>(
      &from));
}

void RsuLookupKeyUploadRequest::MergeFrom(const RsuLookupKeyUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RsuLookupKeyUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      board_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.board_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cr50_hashed_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cr50_hashed_device_id_);
    }
  }
}

void RsuLookupKeyUploadRequest::CopyFrom(const RsuLookupKeyUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RsuLookupKeyUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsuLookupKeyUploadRequest::IsInitialized() const {
  return true;
}

void RsuLookupKeyUploadRequest::InternalSwap(RsuLookupKeyUploadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  board_id_.Swap(&other->board_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cr50_hashed_device_id_.Swap(&other->cr50_hashed_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string RsuLookupKeyUploadRequest::GetTypeName() const {
  return "enterprise_management.RsuLookupKeyUploadRequest";
}


// ===================================================================

void RsuLookupKeyUploadResponse::InitAsDefaultInstance() {
}
class RsuLookupKeyUploadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RsuLookupKeyUploadResponse>()._has_bits_);
  static void set_has_rsu_lookup_key_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RsuLookupKeyUploadResponse::RsuLookupKeyUploadResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RsuLookupKeyUploadResponse)
}
RsuLookupKeyUploadResponse::RsuLookupKeyUploadResponse(const RsuLookupKeyUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsu_lookup_key_updated_ = from.rsu_lookup_key_updated_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RsuLookupKeyUploadResponse)
}

void RsuLookupKeyUploadResponse::SharedCtor() {
  rsu_lookup_key_updated_ = false;
}

RsuLookupKeyUploadResponse::~RsuLookupKeyUploadResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.RsuLookupKeyUploadResponse)
  SharedDtor();
}

void RsuLookupKeyUploadResponse::SharedDtor() {
}

void RsuLookupKeyUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RsuLookupKeyUploadResponse& RsuLookupKeyUploadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RsuLookupKeyUploadResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void RsuLookupKeyUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RsuLookupKeyUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rsu_lookup_key_updated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RsuLookupKeyUploadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool rsu_lookup_key_updated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rsu_lookup_key_updated(&has_bits);
          rsu_lookup_key_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RsuLookupKeyUploadResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RsuLookupKeyUploadResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rsu_lookup_key_updated = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_rsu_lookup_key_updated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rsu_lookup_key_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RsuLookupKeyUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RsuLookupKeyUploadResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RsuLookupKeyUploadResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RsuLookupKeyUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool rsu_lookup_key_updated = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->rsu_lookup_key_updated(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RsuLookupKeyUploadResponse)
}

size_t RsuLookupKeyUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RsuLookupKeyUploadResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool rsu_lookup_key_updated = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RsuLookupKeyUploadResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RsuLookupKeyUploadResponse*>(
      &from));
}

void RsuLookupKeyUploadResponse::MergeFrom(const RsuLookupKeyUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RsuLookupKeyUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rsu_lookup_key_updated()) {
    set_rsu_lookup_key_updated(from.rsu_lookup_key_updated());
  }
}

void RsuLookupKeyUploadResponse::CopyFrom(const RsuLookupKeyUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RsuLookupKeyUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsuLookupKeyUploadResponse::IsInitialized() const {
  return true;
}

void RsuLookupKeyUploadResponse::InternalSwap(RsuLookupKeyUploadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rsu_lookup_key_updated_, other->rsu_lookup_key_updated_);
}

std::string RsuLookupKeyUploadResponse::GetTypeName() const {
  return "enterprise_management.RsuLookupKeyUploadResponse";
}


// ===================================================================

void App::InitAsDefaultInstance() {
}
class App::_Internal {
 public:
  using HasBits = decltype(std::declval<App>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

App::App()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      additional_app_id_(from.additional_app_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  app_type_ = from.app_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.App)
}

void App::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_App_device_5fmanagement_5fbackend_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_type_ = 0;
}

App::~App() {
  // @@protoc_insertion_point(destructor:enterprise_management.App)
  SharedDtor();
}

void App::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const App& App::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_App_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void App::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_app_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_id_.ClearNonDefaultToEmptyNoArena();
  }
  app_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.App.AppType app_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::App_AppType_IsValid(val))) {
            set_app_type(static_cast<::enterprise_management::App_AppType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string additional_app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_additional_app_id(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool App::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.App)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.App.AppType app_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::App_AppType_IsValid(value)) {
            set_app_type(static_cast< ::enterprise_management::App_AppType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string additional_app_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_additional_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void App::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional .enterprise_management.App.AppType app_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->app_type(), output);
  }

  // repeated string additional_app_id = 3;
  for (int i = 0, n = this->additional_app_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->additional_app_id(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.App)
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.App)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_app_id = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->additional_app_id_size());
  for (int i = 0, n = this->additional_app_id_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->additional_app_id(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional .enterprise_management.App.AppType app_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->app_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void App::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const App*>(
      &from));
}

void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_app_id_.MergeFrom(from.additional_app_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_type_ = from.app_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_app_id_.InternalSwap(CastToBase(&other->additional_app_id_));
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_type_, other->app_type_);
}

std::string App::GetTypeName() const {
  return "enterprise_management.App";
}


// ===================================================================

void AppActivity::InitAsDefaultInstance() {
  ::enterprise_management::_AppActivity_default_instance_._instance.get_mutable()->app_info_ = const_cast< ::enterprise_management::App*>(
      ::enterprise_management::App::internal_default_instance());
}
class AppActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<AppActivity>()._has_bits_);
  static const ::enterprise_management::App& app_info(const AppActivity* msg);
  static void set_has_app_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_populated_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_management::App&
AppActivity::_Internal::app_info(const AppActivity* msg) {
  return *msg->app_info_;
}
AppActivity::AppActivity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppActivity)
}
AppActivity::AppActivity(const AppActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_time_periods_(from.active_time_periods_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app_info()) {
    app_info_ = new ::enterprise_management::App(*from.app_info_);
  } else {
    app_info_ = nullptr;
  }
  ::memcpy(&populated_at_, &from.populated_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_state_) -
    reinterpret_cast<char*>(&populated_at_)) + sizeof(app_state_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppActivity)
}

void AppActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppActivity_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&app_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_state_) -
      reinterpret_cast<char*>(&app_info_)) + sizeof(app_state_));
}

AppActivity::~AppActivity() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppActivity)
  SharedDtor();
}

void AppActivity::SharedDtor() {
  if (this != internal_default_instance()) delete app_info_;
}

void AppActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppActivity& AppActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppActivity_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void AppActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_time_periods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(app_info_ != nullptr);
    app_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&populated_at_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_state_) -
        reinterpret_cast<char*>(&populated_at_)) + sizeof(app_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.App app_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.TimePeriod active_time_periods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_time_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int64 populated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_populated_at(&has_bits);
          populated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppActivity.AppState app_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AppActivity_AppState_IsValid(val))) {
            set_app_state(static_cast<::enterprise_management::AppActivity_AppState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppActivity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppActivity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.App app_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.TimePeriod active_time_periods = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_time_periods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 populated_at = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_populated_at(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &populated_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppActivity.AppState app_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AppActivity_AppState_IsValid(value)) {
            set_app_state(static_cast< ::enterprise_management::AppActivity_AppState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppActivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppActivity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.App app_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::app_info(this), output);
  }

  // repeated .enterprise_management.TimePeriod active_time_periods = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_time_periods_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->active_time_periods(static_cast<int>(i)),
      output);
  }

  // optional int64 populated_at = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->populated_at(), output);
  }

  // optional .enterprise_management.AppActivity.AppState app_state = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->app_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppActivity)
}

size_t AppActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppActivity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.TimePeriod active_time_periods = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->active_time_periods_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_time_periods(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .enterprise_management.App app_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_info_);
    }

    // optional int64 populated_at = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->populated_at());
    }

    // optional .enterprise_management.AppActivity.AppState app_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->app_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppActivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppActivity*>(
      &from));
}

void AppActivity::MergeFrom(const AppActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_time_periods_.MergeFrom(from.active_time_periods_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_app_info()->::enterprise_management::App::MergeFrom(from.app_info());
    }
    if (cached_has_bits & 0x00000002u) {
      populated_at_ = from.populated_at_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_state_ = from.app_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppActivity::CopyFrom(const AppActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppActivity::IsInitialized() const {
  return true;
}

void AppActivity::InternalSwap(AppActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&active_time_periods_)->InternalSwap(CastToBase(&other->active_time_periods_));
  swap(app_info_, other->app_info_);
  swap(populated_at_, other->populated_at_);
  swap(app_state_, other->app_state_);
}

std::string AppActivity::GetTypeName() const {
  return "enterprise_management.AppActivity";
}


// ===================================================================

void ScreenTimeSpan::InitAsDefaultInstance() {
  ::enterprise_management::_ScreenTimeSpan_default_instance_._instance.get_mutable()->time_period_ = const_cast< ::enterprise_management::TimePeriod*>(
      ::enterprise_management::TimePeriod::internal_default_instance());
}
class ScreenTimeSpan::_Internal {
 public:
  using HasBits = decltype(std::declval<ScreenTimeSpan>()._has_bits_);
  static const ::enterprise_management::TimePeriod& time_period(const ScreenTimeSpan* msg);
  static void set_has_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::TimePeriod&
ScreenTimeSpan::_Internal::time_period(const ScreenTimeSpan* msg) {
  return *msg->time_period_;
}
ScreenTimeSpan::ScreenTimeSpan()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ScreenTimeSpan)
}
ScreenTimeSpan::ScreenTimeSpan(const ScreenTimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_period()) {
    time_period_ = new ::enterprise_management::TimePeriod(*from.time_period_);
  } else {
    time_period_ = nullptr;
  }
  active_duration_ms_ = from.active_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ScreenTimeSpan)
}

void ScreenTimeSpan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&time_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_duration_ms_) -
      reinterpret_cast<char*>(&time_period_)) + sizeof(active_duration_ms_));
}

ScreenTimeSpan::~ScreenTimeSpan() {
  // @@protoc_insertion_point(destructor:enterprise_management.ScreenTimeSpan)
  SharedDtor();
}

void ScreenTimeSpan::SharedDtor() {
  if (this != internal_default_instance()) delete time_period_;
}

void ScreenTimeSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScreenTimeSpan& ScreenTimeSpan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScreenTimeSpan_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ScreenTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ScreenTimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_period_ != nullptr);
    time_period_->Clear();
  }
  active_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScreenTimeSpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.TimePeriod time_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_time_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 active_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active_duration_ms(&has_bits);
          active_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScreenTimeSpan::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ScreenTimeSpan)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.TimePeriod time_period = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_active_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ScreenTimeSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ScreenTimeSpan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScreenTimeSpan::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ScreenTimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.TimePeriod time_period = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::time_period(this), output);
  }

  // optional int64 active_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->active_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ScreenTimeSpan)
}

size_t ScreenTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ScreenTimeSpan)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.TimePeriod time_period = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_period_);
    }

    // optional int64 active_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->active_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScreenTimeSpan::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScreenTimeSpan*>(
      &from));
}

void ScreenTimeSpan::MergeFrom(const ScreenTimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ScreenTimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time_period()->::enterprise_management::TimePeriod::MergeFrom(from.time_period());
    }
    if (cached_has_bits & 0x00000002u) {
      active_duration_ms_ = from.active_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScreenTimeSpan::CopyFrom(const ScreenTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ScreenTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenTimeSpan::IsInitialized() const {
  return true;
}

void ScreenTimeSpan::InternalSwap(ScreenTimeSpan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_period_, other->time_period_);
  swap(active_duration_ms_, other->active_duration_ms_);
}

std::string ScreenTimeSpan::GetTypeName() const {
  return "enterprise_management.ScreenTimeSpan";
}


// ===================================================================

void ChildStatusReportRequest::InitAsDefaultInstance() {
  ::enterprise_management::_ChildStatusReportRequest_default_instance_._instance.get_mutable()->android_status_ = const_cast< ::enterprise_management::AndroidStatus*>(
      ::enterprise_management::AndroidStatus::internal_default_instance());
}
class ChildStatusReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChildStatusReportRequest>()._has_bits_);
  static void set_has_user_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::AndroidStatus& android_status(const ChildStatusReportRequest* msg);
  static void set_has_android_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boot_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::enterprise_management::AndroidStatus&
ChildStatusReportRequest::_Internal::android_status(const ChildStatusReportRequest* msg) {
  return *msg->android_status_;
}
ChildStatusReportRequest::ChildStatusReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChildStatusReportRequest)
}
ChildStatusReportRequest::ChildStatusReportRequest(const ChildStatusReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      screen_time_span_(from.screen_time_span_),
      app_activity_(from.app_activity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_dm_token()) {
    user_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_time_zone()) {
    time_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  boot_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_boot_mode()) {
    boot_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
  }
  if (from.has_android_status()) {
    android_status_ = new ::enterprise_management::AndroidStatus(*from.android_status_);
  } else {
    android_status_ = nullptr;
  }
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChildStatusReportRequest)
}

void ChildStatusReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  user_dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&android_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_ms_) -
      reinterpret_cast<char*>(&android_status_)) + sizeof(timestamp_ms_));
}

ChildStatusReportRequest::~ChildStatusReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChildStatusReportRequest)
  SharedDtor();
}

void ChildStatusReportRequest::SharedDtor() {
  user_dm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete android_status_;
}

void ChildStatusReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChildStatusReportRequest& ChildStatusReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChildStatusReportRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChildStatusReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChildStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_time_span_.Clear();
  app_activity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      user_dm_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      time_zone_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      boot_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(android_status_ != nullptr);
      android_status_->Clear();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChildStatusReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_dm_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_dm_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string time_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_time_zone(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.ScreenTimeSpan screen_time_span = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_screen_time_span(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AndroidStatus android_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_android_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string boot_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_boot_mode(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AppActivity app_activity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_app_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChildStatusReportRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChildStatusReportRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_dm_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string time_zone = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ScreenTimeSpan screen_time_span = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_screen_time_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AndroidStatus android_status = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string boot_mode = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_boot_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AppActivity app_activity = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_app_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChildStatusReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChildStatusReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChildStatusReportRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChildStatusReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_dm_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_dm_token(), output);
  }

  // optional int64 timestamp_ms = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->timestamp_ms(), output);
  }

  // optional string time_zone = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time_zone(), output);
  }

  // repeated .enterprise_management.ScreenTimeSpan screen_time_span = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->screen_time_span_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->screen_time_span(static_cast<int>(i)),
      output);
  }

  // optional .enterprise_management.AndroidStatus android_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::android_status(this), output);
  }

  // optional string os_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->os_version(), output);
  }

  // optional string boot_mode = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->boot_mode(), output);
  }

  // repeated .enterprise_management.AppActivity app_activity = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_activity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->app_activity(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChildStatusReportRequest)
}

size_t ChildStatusReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChildStatusReportRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.ScreenTimeSpan screen_time_span = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->screen_time_span_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->screen_time_span(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.AppActivity app_activity = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->app_activity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->app_activity(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string user_dm_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_dm_token());
    }

    // optional string time_zone = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->time_zone());
    }

    // optional string os_version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string boot_mode = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->boot_mode());
    }

    // optional .enterprise_management.AndroidStatus android_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_status_);
    }

    // optional int64 timestamp_ms = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChildStatusReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChildStatusReportRequest*>(
      &from));
}

void ChildStatusReportRequest::MergeFrom(const ChildStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChildStatusReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_time_span_.MergeFrom(from.screen_time_span_);
  app_activity_.MergeFrom(from.app_activity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      user_dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      time_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      boot_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_android_status()->::enterprise_management::AndroidStatus::MergeFrom(from.android_status());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChildStatusReportRequest::CopyFrom(const ChildStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChildStatusReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChildStatusReportRequest::IsInitialized() const {
  return true;
}

void ChildStatusReportRequest::InternalSwap(ChildStatusReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&screen_time_span_)->InternalSwap(CastToBase(&other->screen_time_span_));
  CastToBase(&app_activity_)->InternalSwap(CastToBase(&other->app_activity_));
  user_dm_token_.Swap(&other->user_dm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_zone_.Swap(&other->time_zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  boot_mode_.Swap(&other->boot_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(android_status_, other->android_status_);
  swap(timestamp_ms_, other->timestamp_ms_);
}

std::string ChildStatusReportRequest::GetTypeName() const {
  return "enterprise_management.ChildStatusReportRequest";
}


// ===================================================================

void ChildStatusReportResponse::InitAsDefaultInstance() {
}
class ChildStatusReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChildStatusReportResponse>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChildStatusReportResponse::ChildStatusReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChildStatusReportResponse)
}
ChildStatusReportResponse::ChildStatusReportResponse(const ChildStatusReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChildStatusReportResponse)
}

void ChildStatusReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

ChildStatusReportResponse::~ChildStatusReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChildStatusReportResponse)
  SharedDtor();
}

void ChildStatusReportResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChildStatusReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChildStatusReportResponse& ChildStatusReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChildStatusReportResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void ChildStatusReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChildStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChildStatusReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChildStatusReportResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChildStatusReportResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_error_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChildStatusReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChildStatusReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChildStatusReportResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChildStatusReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChildStatusReportResponse)
}

size_t ChildStatusReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChildStatusReportResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChildStatusReportResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChildStatusReportResponse*>(
      &from));
}

void ChildStatusReportResponse::MergeFrom(const ChildStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChildStatusReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChildStatusReportResponse::CopyFrom(const ChildStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChildStatusReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChildStatusReportResponse::IsInitialized() const {
  return true;
}

void ChildStatusReportResponse::InternalSwap(ChildStatusReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

std::string ChildStatusReportResponse::GetTypeName() const {
  return "enterprise_management.ChildStatusReportResponse";
}


// ===================================================================

void DeviceManagementRequest::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->register_request_ = const_cast< ::enterprise_management::DeviceRegisterRequest*>(
      ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->unregister_request_ = const_cast< ::enterprise_management::DeviceUnregisterRequest*>(
      ::enterprise_management::DeviceUnregisterRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->policy_request_ = const_cast< ::enterprise_management::DevicePolicyRequest*>(
      ::enterprise_management::DevicePolicyRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_status_report_request_ = const_cast< ::enterprise_management::DeviceStatusReportRequest*>(
      ::enterprise_management::DeviceStatusReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->session_status_report_request_ = const_cast< ::enterprise_management::SessionStatusReportRequest*>(
      ::enterprise_management::SessionStatusReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->child_status_report_request_ = const_cast< ::enterprise_management::ChildStatusReportRequest*>(
      ::enterprise_management::ChildStatusReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->auto_enrollment_request_ = const_cast< ::enterprise_management::DeviceAutoEnrollmentRequest*>(
      ::enterprise_management::DeviceAutoEnrollmentRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->cert_upload_request_ = const_cast< ::enterprise_management::DeviceCertUploadRequest*>(
      ::enterprise_management::DeviceCertUploadRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->service_api_access_request_ = const_cast< ::enterprise_management::DeviceServiceApiAccessRequest*>(
      ::enterprise_management::DeviceServiceApiAccessRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_state_retrieval_request_ = const_cast< ::enterprise_management::DeviceStateRetrievalRequest*>(
      ::enterprise_management::DeviceStateRetrievalRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_state_key_update_request_ = const_cast< ::enterprise_management::DeviceStateKeyUpdateRequest*>(
      ::enterprise_management::DeviceStateKeyUpdateRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_pairing_request_ = const_cast< ::enterprise_management::DevicePairingRequest*>(
      ::enterprise_management::DevicePairingRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->check_device_pairing_request_ = const_cast< ::enterprise_management::CheckDevicePairingRequest*>(
      ::enterprise_management::CheckDevicePairingRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->remote_command_request_ = const_cast< ::enterprise_management::DeviceRemoteCommandRequest*>(
      ::enterprise_management::DeviceRemoteCommandRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_attribute_update_permission_request_ = const_cast< ::enterprise_management::DeviceAttributeUpdatePermissionRequest*>(
      ::enterprise_management::DeviceAttributeUpdatePermissionRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_attribute_update_request_ = const_cast< ::enterprise_management::DeviceAttributeUpdateRequest*>(
      ::enterprise_management::DeviceAttributeUpdateRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->gcm_id_update_request_ = const_cast< ::enterprise_management::GcmIdUpdateRequest*>(
      ::enterprise_management::GcmIdUpdateRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->check_android_management_request_ = const_cast< ::enterprise_management::CheckAndroidManagementRequest*>(
      ::enterprise_management::CheckAndroidManagementRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->certificate_based_register_request_ = const_cast< ::enterprise_management::CertificateBasedDeviceRegisterRequest*>(
      ::enterprise_management::CertificateBasedDeviceRegisterRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->active_directory_enroll_play_user_request_ = const_cast< ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest*>(
      ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->active_directory_play_activity_request_ = const_cast< ::enterprise_management::ActiveDirectoryPlayActivityRequest*>(
      ::enterprise_management::ActiveDirectoryPlayActivityRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->check_device_license_request_deprecated_ = const_cast< ::enterprise_management::CheckDeviceLicenseRequest*>(
      ::enterprise_management::CheckDeviceLicenseRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->active_directory_user_signin_request_ = const_cast< ::enterprise_management::ActiveDirectoryUserSigninRequest*>(
      ::enterprise_management::ActiveDirectoryUserSigninRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->register_browser_request_ = const_cast< ::enterprise_management::RegisterBrowserRequest*>(
      ::enterprise_management::RegisterBrowserRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->app_install_report_request_ = const_cast< ::enterprise_management::AppInstallReportRequest*>(
      ::enterprise_management::AppInstallReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->chrome_desktop_report_request_ = const_cast< ::enterprise_management::ChromeDesktopReportRequest*>(
      ::enterprise_management::ChromeDesktopReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->policy_validation_report_request_ = const_cast< ::enterprise_management::PolicyValidationReportRequest*>(
      ::enterprise_management::PolicyValidationReportRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->device_initial_enrollment_state_request_ = const_cast< ::enterprise_management::DeviceInitialEnrollmentStateRequest*>(
      ::enterprise_management::DeviceInitialEnrollmentStateRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->refresh_account_request_ = const_cast< ::enterprise_management::RefreshAccountRequest*>(
      ::enterprise_management::RefreshAccountRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->rsu_lookup_key_upload_request_ = const_cast< ::enterprise_management::RsuLookupKeyUploadRequest*>(
      ::enterprise_management::RsuLookupKeyUploadRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->public_saml_user_request_ = const_cast< ::enterprise_management::PublicSamlUserRequest*>(
      ::enterprise_management::PublicSamlUserRequest::internal_default_instance());
  ::enterprise_management::_DeviceManagementRequest_default_instance_._instance.get_mutable()->chrome_os_user_report_request_ = const_cast< ::enterprise_management::ChromeOsUserReportRequest*>(
      ::enterprise_management::ChromeOsUserReportRequest::internal_default_instance());
}
class DeviceManagementRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceManagementRequest>()._has_bits_);
  static const ::enterprise_management::DeviceRegisterRequest& register_request(const DeviceManagementRequest* msg);
  static void set_has_register_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::DeviceUnregisterRequest& unregister_request(const DeviceManagementRequest* msg);
  static void set_has_unregister_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::DevicePolicyRequest& policy_request(const DeviceManagementRequest* msg);
  static void set_has_policy_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::DeviceStatusReportRequest& device_status_report_request(const DeviceManagementRequest* msg);
  static void set_has_device_status_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::SessionStatusReportRequest& session_status_report_request(const DeviceManagementRequest* msg);
  static void set_has_session_status_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::ChildStatusReportRequest& child_status_report_request(const DeviceManagementRequest* msg);
  static void set_has_child_status_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::DeviceAutoEnrollmentRequest& auto_enrollment_request(const DeviceManagementRequest* msg);
  static void set_has_auto_enrollment_request(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::DeviceCertUploadRequest& cert_upload_request(const DeviceManagementRequest* msg);
  static void set_has_cert_upload_request(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::enterprise_management::DeviceServiceApiAccessRequest& service_api_access_request(const DeviceManagementRequest* msg);
  static void set_has_service_api_access_request(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::enterprise_management::DeviceStateRetrievalRequest& device_state_retrieval_request(const DeviceManagementRequest* msg);
  static void set_has_device_state_retrieval_request(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::DeviceStateKeyUpdateRequest& device_state_key_update_request(const DeviceManagementRequest* msg);
  static void set_has_device_state_key_update_request(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::DevicePairingRequest& device_pairing_request(const DeviceManagementRequest* msg);
  static void set_has_device_pairing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::CheckDevicePairingRequest& check_device_pairing_request(const DeviceManagementRequest* msg);
  static void set_has_check_device_pairing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::DeviceRemoteCommandRequest& remote_command_request(const DeviceManagementRequest* msg);
  static void set_has_remote_command_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::DeviceAttributeUpdatePermissionRequest& device_attribute_update_permission_request(const DeviceManagementRequest* msg);
  static void set_has_device_attribute_update_permission_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::DeviceAttributeUpdateRequest& device_attribute_update_request(const DeviceManagementRequest* msg);
  static void set_has_device_attribute_update_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::GcmIdUpdateRequest& gcm_id_update_request(const DeviceManagementRequest* msg);
  static void set_has_gcm_id_update_request(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::CheckAndroidManagementRequest& check_android_management_request(const DeviceManagementRequest* msg);
  static void set_has_check_android_management_request(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::CertificateBasedDeviceRegisterRequest& certificate_based_register_request(const DeviceManagementRequest* msg);
  static void set_has_certificate_based_register_request(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest& active_directory_enroll_play_user_request(const DeviceManagementRequest* msg);
  static void set_has_active_directory_enroll_play_user_request(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::ActiveDirectoryPlayActivityRequest& active_directory_play_activity_request(const DeviceManagementRequest* msg);
  static void set_has_active_directory_play_activity_request(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::enterprise_management::CheckDeviceLicenseRequest& check_device_license_request_deprecated(const DeviceManagementRequest* msg);
  static void set_has_check_device_license_request_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::ActiveDirectoryUserSigninRequest& active_directory_user_signin_request(const DeviceManagementRequest* msg);
  static void set_has_active_directory_user_signin_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::RegisterBrowserRequest& register_browser_request(const DeviceManagementRequest* msg);
  static void set_has_register_browser_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::AppInstallReportRequest& app_install_report_request(const DeviceManagementRequest* msg);
  static void set_has_app_install_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::ChromeDesktopReportRequest& chrome_desktop_report_request(const DeviceManagementRequest* msg);
  static void set_has_chrome_desktop_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::PolicyValidationReportRequest& policy_validation_report_request(const DeviceManagementRequest* msg);
  static void set_has_policy_validation_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::DeviceInitialEnrollmentStateRequest& device_initial_enrollment_state_request(const DeviceManagementRequest* msg);
  static void set_has_device_initial_enrollment_state_request(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::RefreshAccountRequest& refresh_account_request(const DeviceManagementRequest* msg);
  static void set_has_refresh_account_request(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::RsuLookupKeyUploadRequest& rsu_lookup_key_upload_request(const DeviceManagementRequest* msg);
  static void set_has_rsu_lookup_key_upload_request(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::PublicSamlUserRequest& public_saml_user_request(const DeviceManagementRequest* msg);
  static void set_has_public_saml_user_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::enterprise_management::ChromeOsUserReportRequest& chrome_os_user_report_request(const DeviceManagementRequest* msg);
  static void set_has_chrome_os_user_report_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

const ::enterprise_management::DeviceRegisterRequest&
DeviceManagementRequest::_Internal::register_request(const DeviceManagementRequest* msg) {
  return *msg->register_request_;
}
const ::enterprise_management::DeviceUnregisterRequest&
DeviceManagementRequest::_Internal::unregister_request(const DeviceManagementRequest* msg) {
  return *msg->unregister_request_;
}
const ::enterprise_management::DevicePolicyRequest&
DeviceManagementRequest::_Internal::policy_request(const DeviceManagementRequest* msg) {
  return *msg->policy_request_;
}
const ::enterprise_management::DeviceStatusReportRequest&
DeviceManagementRequest::_Internal::device_status_report_request(const DeviceManagementRequest* msg) {
  return *msg->device_status_report_request_;
}
const ::enterprise_management::SessionStatusReportRequest&
DeviceManagementRequest::_Internal::session_status_report_request(const DeviceManagementRequest* msg) {
  return *msg->session_status_report_request_;
}
const ::enterprise_management::ChildStatusReportRequest&
DeviceManagementRequest::_Internal::child_status_report_request(const DeviceManagementRequest* msg) {
  return *msg->child_status_report_request_;
}
const ::enterprise_management::DeviceAutoEnrollmentRequest&
DeviceManagementRequest::_Internal::auto_enrollment_request(const DeviceManagementRequest* msg) {
  return *msg->auto_enrollment_request_;
}
const ::enterprise_management::DeviceCertUploadRequest&
DeviceManagementRequest::_Internal::cert_upload_request(const DeviceManagementRequest* msg) {
  return *msg->cert_upload_request_;
}
const ::enterprise_management::DeviceServiceApiAccessRequest&
DeviceManagementRequest::_Internal::service_api_access_request(const DeviceManagementRequest* msg) {
  return *msg->service_api_access_request_;
}
const ::enterprise_management::DeviceStateRetrievalRequest&
DeviceManagementRequest::_Internal::device_state_retrieval_request(const DeviceManagementRequest* msg) {
  return *msg->device_state_retrieval_request_;
}
const ::enterprise_management::DeviceStateKeyUpdateRequest&
DeviceManagementRequest::_Internal::device_state_key_update_request(const DeviceManagementRequest* msg) {
  return *msg->device_state_key_update_request_;
}
const ::enterprise_management::DevicePairingRequest&
DeviceManagementRequest::_Internal::device_pairing_request(const DeviceManagementRequest* msg) {
  return *msg->device_pairing_request_;
}
const ::enterprise_management::CheckDevicePairingRequest&
DeviceManagementRequest::_Internal::check_device_pairing_request(const DeviceManagementRequest* msg) {
  return *msg->check_device_pairing_request_;
}
const ::enterprise_management::DeviceRemoteCommandRequest&
DeviceManagementRequest::_Internal::remote_command_request(const DeviceManagementRequest* msg) {
  return *msg->remote_command_request_;
}
const ::enterprise_management::DeviceAttributeUpdatePermissionRequest&
DeviceManagementRequest::_Internal::device_attribute_update_permission_request(const DeviceManagementRequest* msg) {
  return *msg->device_attribute_update_permission_request_;
}
const ::enterprise_management::DeviceAttributeUpdateRequest&
DeviceManagementRequest::_Internal::device_attribute_update_request(const DeviceManagementRequest* msg) {
  return *msg->device_attribute_update_request_;
}
const ::enterprise_management::GcmIdUpdateRequest&
DeviceManagementRequest::_Internal::gcm_id_update_request(const DeviceManagementRequest* msg) {
  return *msg->gcm_id_update_request_;
}
const ::enterprise_management::CheckAndroidManagementRequest&
DeviceManagementRequest::_Internal::check_android_management_request(const DeviceManagementRequest* msg) {
  return *msg->check_android_management_request_;
}
const ::enterprise_management::CertificateBasedDeviceRegisterRequest&
DeviceManagementRequest::_Internal::certificate_based_register_request(const DeviceManagementRequest* msg) {
  return *msg->certificate_based_register_request_;
}
const ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest&
DeviceManagementRequest::_Internal::active_directory_enroll_play_user_request(const DeviceManagementRequest* msg) {
  return *msg->active_directory_enroll_play_user_request_;
}
const ::enterprise_management::ActiveDirectoryPlayActivityRequest&
DeviceManagementRequest::_Internal::active_directory_play_activity_request(const DeviceManagementRequest* msg) {
  return *msg->active_directory_play_activity_request_;
}
const ::enterprise_management::CheckDeviceLicenseRequest&
DeviceManagementRequest::_Internal::check_device_license_request_deprecated(const DeviceManagementRequest* msg) {
  return *msg->check_device_license_request_deprecated_;
}
const ::enterprise_management::ActiveDirectoryUserSigninRequest&
DeviceManagementRequest::_Internal::active_directory_user_signin_request(const DeviceManagementRequest* msg) {
  return *msg->active_directory_user_signin_request_;
}
const ::enterprise_management::RegisterBrowserRequest&
DeviceManagementRequest::_Internal::register_browser_request(const DeviceManagementRequest* msg) {
  return *msg->register_browser_request_;
}
const ::enterprise_management::AppInstallReportRequest&
DeviceManagementRequest::_Internal::app_install_report_request(const DeviceManagementRequest* msg) {
  return *msg->app_install_report_request_;
}
const ::enterprise_management::ChromeDesktopReportRequest&
DeviceManagementRequest::_Internal::chrome_desktop_report_request(const DeviceManagementRequest* msg) {
  return *msg->chrome_desktop_report_request_;
}
const ::enterprise_management::PolicyValidationReportRequest&
DeviceManagementRequest::_Internal::policy_validation_report_request(const DeviceManagementRequest* msg) {
  return *msg->policy_validation_report_request_;
}
const ::enterprise_management::DeviceInitialEnrollmentStateRequest&
DeviceManagementRequest::_Internal::device_initial_enrollment_state_request(const DeviceManagementRequest* msg) {
  return *msg->device_initial_enrollment_state_request_;
}
const ::enterprise_management::RefreshAccountRequest&
DeviceManagementRequest::_Internal::refresh_account_request(const DeviceManagementRequest* msg) {
  return *msg->refresh_account_request_;
}
const ::enterprise_management::RsuLookupKeyUploadRequest&
DeviceManagementRequest::_Internal::rsu_lookup_key_upload_request(const DeviceManagementRequest* msg) {
  return *msg->rsu_lookup_key_upload_request_;
}
const ::enterprise_management::PublicSamlUserRequest&
DeviceManagementRequest::_Internal::public_saml_user_request(const DeviceManagementRequest* msg) {
  return *msg->public_saml_user_request_;
}
const ::enterprise_management::ChromeOsUserReportRequest&
DeviceManagementRequest::_Internal::chrome_os_user_report_request(const DeviceManagementRequest* msg) {
  return *msg->chrome_os_user_report_request_;
}
DeviceManagementRequest::DeviceManagementRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementRequest)
}
DeviceManagementRequest::DeviceManagementRequest(const DeviceManagementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_register_request()) {
    register_request_ = new ::enterprise_management::DeviceRegisterRequest(*from.register_request_);
  } else {
    register_request_ = nullptr;
  }
  if (from.has_unregister_request()) {
    unregister_request_ = new ::enterprise_management::DeviceUnregisterRequest(*from.unregister_request_);
  } else {
    unregister_request_ = nullptr;
  }
  if (from.has_policy_request()) {
    policy_request_ = new ::enterprise_management::DevicePolicyRequest(*from.policy_request_);
  } else {
    policy_request_ = nullptr;
  }
  if (from.has_device_status_report_request()) {
    device_status_report_request_ = new ::enterprise_management::DeviceStatusReportRequest(*from.device_status_report_request_);
  } else {
    device_status_report_request_ = nullptr;
  }
  if (from.has_session_status_report_request()) {
    session_status_report_request_ = new ::enterprise_management::SessionStatusReportRequest(*from.session_status_report_request_);
  } else {
    session_status_report_request_ = nullptr;
  }
  if (from.has_auto_enrollment_request()) {
    auto_enrollment_request_ = new ::enterprise_management::DeviceAutoEnrollmentRequest(*from.auto_enrollment_request_);
  } else {
    auto_enrollment_request_ = nullptr;
  }
  if (from.has_cert_upload_request()) {
    cert_upload_request_ = new ::enterprise_management::DeviceCertUploadRequest(*from.cert_upload_request_);
  } else {
    cert_upload_request_ = nullptr;
  }
  if (from.has_service_api_access_request()) {
    service_api_access_request_ = new ::enterprise_management::DeviceServiceApiAccessRequest(*from.service_api_access_request_);
  } else {
    service_api_access_request_ = nullptr;
  }
  if (from.has_device_state_retrieval_request()) {
    device_state_retrieval_request_ = new ::enterprise_management::DeviceStateRetrievalRequest(*from.device_state_retrieval_request_);
  } else {
    device_state_retrieval_request_ = nullptr;
  }
  if (from.has_device_state_key_update_request()) {
    device_state_key_update_request_ = new ::enterprise_management::DeviceStateKeyUpdateRequest(*from.device_state_key_update_request_);
  } else {
    device_state_key_update_request_ = nullptr;
  }
  if (from.has_device_pairing_request()) {
    device_pairing_request_ = new ::enterprise_management::DevicePairingRequest(*from.device_pairing_request_);
  } else {
    device_pairing_request_ = nullptr;
  }
  if (from.has_check_device_pairing_request()) {
    check_device_pairing_request_ = new ::enterprise_management::CheckDevicePairingRequest(*from.check_device_pairing_request_);
  } else {
    check_device_pairing_request_ = nullptr;
  }
  if (from.has_remote_command_request()) {
    remote_command_request_ = new ::enterprise_management::DeviceRemoteCommandRequest(*from.remote_command_request_);
  } else {
    remote_command_request_ = nullptr;
  }
  if (from.has_device_attribute_update_permission_request()) {
    device_attribute_update_permission_request_ = new ::enterprise_management::DeviceAttributeUpdatePermissionRequest(*from.device_attribute_update_permission_request_);
  } else {
    device_attribute_update_permission_request_ = nullptr;
  }
  if (from.has_device_attribute_update_request()) {
    device_attribute_update_request_ = new ::enterprise_management::DeviceAttributeUpdateRequest(*from.device_attribute_update_request_);
  } else {
    device_attribute_update_request_ = nullptr;
  }
  if (from.has_gcm_id_update_request()) {
    gcm_id_update_request_ = new ::enterprise_management::GcmIdUpdateRequest(*from.gcm_id_update_request_);
  } else {
    gcm_id_update_request_ = nullptr;
  }
  if (from.has_check_android_management_request()) {
    check_android_management_request_ = new ::enterprise_management::CheckAndroidManagementRequest(*from.check_android_management_request_);
  } else {
    check_android_management_request_ = nullptr;
  }
  if (from.has_certificate_based_register_request()) {
    certificate_based_register_request_ = new ::enterprise_management::CertificateBasedDeviceRegisterRequest(*from.certificate_based_register_request_);
  } else {
    certificate_based_register_request_ = nullptr;
  }
  if (from.has_active_directory_enroll_play_user_request()) {
    active_directory_enroll_play_user_request_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest(*from.active_directory_enroll_play_user_request_);
  } else {
    active_directory_enroll_play_user_request_ = nullptr;
  }
  if (from.has_active_directory_play_activity_request()) {
    active_directory_play_activity_request_ = new ::enterprise_management::ActiveDirectoryPlayActivityRequest(*from.active_directory_play_activity_request_);
  } else {
    active_directory_play_activity_request_ = nullptr;
  }
  if (from.has_check_device_license_request_deprecated()) {
    check_device_license_request_deprecated_ = new ::enterprise_management::CheckDeviceLicenseRequest(*from.check_device_license_request_deprecated_);
  } else {
    check_device_license_request_deprecated_ = nullptr;
  }
  if (from.has_active_directory_user_signin_request()) {
    active_directory_user_signin_request_ = new ::enterprise_management::ActiveDirectoryUserSigninRequest(*from.active_directory_user_signin_request_);
  } else {
    active_directory_user_signin_request_ = nullptr;
  }
  if (from.has_register_browser_request()) {
    register_browser_request_ = new ::enterprise_management::RegisterBrowserRequest(*from.register_browser_request_);
  } else {
    register_browser_request_ = nullptr;
  }
  if (from.has_app_install_report_request()) {
    app_install_report_request_ = new ::enterprise_management::AppInstallReportRequest(*from.app_install_report_request_);
  } else {
    app_install_report_request_ = nullptr;
  }
  if (from.has_chrome_desktop_report_request()) {
    chrome_desktop_report_request_ = new ::enterprise_management::ChromeDesktopReportRequest(*from.chrome_desktop_report_request_);
  } else {
    chrome_desktop_report_request_ = nullptr;
  }
  if (from.has_policy_validation_report_request()) {
    policy_validation_report_request_ = new ::enterprise_management::PolicyValidationReportRequest(*from.policy_validation_report_request_);
  } else {
    policy_validation_report_request_ = nullptr;
  }
  if (from.has_device_initial_enrollment_state_request()) {
    device_initial_enrollment_state_request_ = new ::enterprise_management::DeviceInitialEnrollmentStateRequest(*from.device_initial_enrollment_state_request_);
  } else {
    device_initial_enrollment_state_request_ = nullptr;
  }
  if (from.has_refresh_account_request()) {
    refresh_account_request_ = new ::enterprise_management::RefreshAccountRequest(*from.refresh_account_request_);
  } else {
    refresh_account_request_ = nullptr;
  }
  if (from.has_child_status_report_request()) {
    child_status_report_request_ = new ::enterprise_management::ChildStatusReportRequest(*from.child_status_report_request_);
  } else {
    child_status_report_request_ = nullptr;
  }
  if (from.has_rsu_lookup_key_upload_request()) {
    rsu_lookup_key_upload_request_ = new ::enterprise_management::RsuLookupKeyUploadRequest(*from.rsu_lookup_key_upload_request_);
  } else {
    rsu_lookup_key_upload_request_ = nullptr;
  }
  if (from.has_public_saml_user_request()) {
    public_saml_user_request_ = new ::enterprise_management::PublicSamlUserRequest(*from.public_saml_user_request_);
  } else {
    public_saml_user_request_ = nullptr;
  }
  if (from.has_chrome_os_user_report_request()) {
    chrome_os_user_report_request_ = new ::enterprise_management::ChromeOsUserReportRequest(*from.chrome_os_user_report_request_);
  } else {
    chrome_os_user_report_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementRequest)
}

void DeviceManagementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceManagementRequest_device_5fmanagement_5fbackend_2eproto.base);
  ::memset(&register_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_os_user_report_request_) -
      reinterpret_cast<char*>(&register_request_)) + sizeof(chrome_os_user_report_request_));
}

DeviceManagementRequest::~DeviceManagementRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementRequest)
  SharedDtor();
}

void DeviceManagementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete register_request_;
  if (this != internal_default_instance()) delete unregister_request_;
  if (this != internal_default_instance()) delete policy_request_;
  if (this != internal_default_instance()) delete device_status_report_request_;
  if (this != internal_default_instance()) delete session_status_report_request_;
  if (this != internal_default_instance()) delete auto_enrollment_request_;
  if (this != internal_default_instance()) delete cert_upload_request_;
  if (this != internal_default_instance()) delete service_api_access_request_;
  if (this != internal_default_instance()) delete device_state_retrieval_request_;
  if (this != internal_default_instance()) delete device_state_key_update_request_;
  if (this != internal_default_instance()) delete device_pairing_request_;
  if (this != internal_default_instance()) delete check_device_pairing_request_;
  if (this != internal_default_instance()) delete remote_command_request_;
  if (this != internal_default_instance()) delete device_attribute_update_permission_request_;
  if (this != internal_default_instance()) delete device_attribute_update_request_;
  if (this != internal_default_instance()) delete gcm_id_update_request_;
  if (this != internal_default_instance()) delete check_android_management_request_;
  if (this != internal_default_instance()) delete certificate_based_register_request_;
  if (this != internal_default_instance()) delete active_directory_enroll_play_user_request_;
  if (this != internal_default_instance()) delete active_directory_play_activity_request_;
  if (this != internal_default_instance()) delete check_device_license_request_deprecated_;
  if (this != internal_default_instance()) delete active_directory_user_signin_request_;
  if (this != internal_default_instance()) delete register_browser_request_;
  if (this != internal_default_instance()) delete app_install_report_request_;
  if (this != internal_default_instance()) delete chrome_desktop_report_request_;
  if (this != internal_default_instance()) delete policy_validation_report_request_;
  if (this != internal_default_instance()) delete device_initial_enrollment_state_request_;
  if (this != internal_default_instance()) delete refresh_account_request_;
  if (this != internal_default_instance()) delete child_status_report_request_;
  if (this != internal_default_instance()) delete rsu_lookup_key_upload_request_;
  if (this != internal_default_instance()) delete public_saml_user_request_;
  if (this != internal_default_instance()) delete chrome_os_user_report_request_;
}

void DeviceManagementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceManagementRequest& DeviceManagementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceManagementRequest_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(register_request_ != nullptr);
      register_request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unregister_request_ != nullptr);
      unregister_request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(policy_request_ != nullptr);
      policy_request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(device_status_report_request_ != nullptr);
      device_status_report_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(session_status_report_request_ != nullptr);
      session_status_report_request_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(auto_enrollment_request_ != nullptr);
      auto_enrollment_request_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(cert_upload_request_ != nullptr);
      cert_upload_request_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(service_api_access_request_ != nullptr);
      service_api_access_request_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(device_state_retrieval_request_ != nullptr);
      device_state_retrieval_request_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(device_state_key_update_request_ != nullptr);
      device_state_key_update_request_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(device_pairing_request_ != nullptr);
      device_pairing_request_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(check_device_pairing_request_ != nullptr);
      check_device_pairing_request_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(remote_command_request_ != nullptr);
      remote_command_request_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(device_attribute_update_permission_request_ != nullptr);
      device_attribute_update_permission_request_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(device_attribute_update_request_ != nullptr);
      device_attribute_update_request_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(gcm_id_update_request_ != nullptr);
      gcm_id_update_request_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(check_android_management_request_ != nullptr);
      check_android_management_request_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(certificate_based_register_request_ != nullptr);
      certificate_based_register_request_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(active_directory_enroll_play_user_request_ != nullptr);
      active_directory_enroll_play_user_request_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(active_directory_play_activity_request_ != nullptr);
      active_directory_play_activity_request_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(check_device_license_request_deprecated_ != nullptr);
      check_device_license_request_deprecated_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(active_directory_user_signin_request_ != nullptr);
      active_directory_user_signin_request_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(register_browser_request_ != nullptr);
      register_browser_request_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(app_install_report_request_ != nullptr);
      app_install_report_request_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(chrome_desktop_report_request_ != nullptr);
      chrome_desktop_report_request_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(policy_validation_report_request_ != nullptr);
      policy_validation_report_request_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(device_initial_enrollment_state_request_ != nullptr);
      device_initial_enrollment_state_request_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(refresh_account_request_ != nullptr);
      refresh_account_request_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(child_status_report_request_ != nullptr);
      child_status_report_request_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(rsu_lookup_key_upload_request_ != nullptr);
      rsu_lookup_key_upload_request_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(public_saml_user_request_ != nullptr);
      public_saml_user_request_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(chrome_os_user_report_request_ != nullptr);
      chrome_os_user_report_request_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceManagementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_register_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_unregister_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_policy_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_device_status_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_session_status_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_auto_enrollment_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_cert_upload_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_service_api_access_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_device_state_retrieval_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_device_state_key_update_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_device_pairing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_check_device_pairing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_remote_command_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_device_attribute_update_permission_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_device_attribute_update_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_gcm_id_update_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_check_android_management_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_certificate_based_register_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_active_directory_enroll_play_user_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_active_directory_play_activity_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request_deprecated = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_check_device_license_request_deprecated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_active_directory_user_signin_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_register_browser_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_app_install_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_chrome_desktop_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_policy_validation_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_device_initial_enrollment_state_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RefreshAccountRequest refresh_account_request = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_refresh_account_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChildStatusReportRequest child_status_report_request = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_child_status_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RsuLookupKeyUploadRequest rsu_lookup_key_upload_request = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_rsu_lookup_key_upload_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PublicSamlUserRequest public_saml_user_request = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_public_saml_user_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChromeOsUserReportRequest chrome_os_user_report_request = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_chrome_os_user_report_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceManagementRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unregister_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_status_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_session_status_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_enrollment_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cert_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_api_access_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_state_retrieval_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_state_key_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_pairing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_device_pairing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_command_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_attribute_update_permission_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_attribute_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gcm_id_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_android_management_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificate_based_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_enroll_play_user_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_play_activity_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request_deprecated = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_device_license_request_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_user_signin_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_browser_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_install_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_desktop_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_validation_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_initial_enrollment_state_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RefreshAccountRequest refresh_account_request = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_account_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChildStatusReportRequest child_status_report_request = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_child_status_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RsuLookupKeyUploadRequest rsu_lookup_key_upload_request = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rsu_lookup_key_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PublicSamlUserRequest public_saml_user_request = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_public_saml_user_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeOsUserReportRequest chrome_os_user_report_request = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_os_user_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceManagementRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::register_request(this), output);
  }

  // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::unregister_request(this), output);
  }

  // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::policy_request(this), output);
  }

  // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::device_status_report_request(this), output);
  }

  // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::session_status_report_request(this), output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::auto_enrollment_request(this), output);
  }

  // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::cert_upload_request(this), output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::service_api_access_request(this), output);
  }

  // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::device_state_retrieval_request(this), output);
  }

  // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::device_state_key_update_request(this), output);
  }

  // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::device_pairing_request(this), output);
  }

  // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::check_device_pairing_request(this), output);
  }

  // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::remote_command_request(this), output);
  }

  // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::device_attribute_update_permission_request(this), output);
  }

  // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::device_attribute_update_request(this), output);
  }

  // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::gcm_id_update_request(this), output);
  }

  // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::check_android_management_request(this), output);
  }

  // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::certificate_based_register_request(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::active_directory_enroll_play_user_request(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::active_directory_play_activity_request(this), output);
  }

  // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request_deprecated = 21 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::check_device_license_request_deprecated(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::active_directory_user_signin_request(this), output);
  }

  // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::register_browser_request(this), output);
  }

  // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::app_install_report_request(this), output);
  }

  // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::chrome_desktop_report_request(this), output);
  }

  // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::policy_validation_report_request(this), output);
  }

  // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::device_initial_enrollment_state_request(this), output);
  }

  // optional .enterprise_management.RefreshAccountRequest refresh_account_request = 29;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::refresh_account_request(this), output);
  }

  // optional .enterprise_management.ChildStatusReportRequest child_status_report_request = 30;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::child_status_report_request(this), output);
  }

  // optional .enterprise_management.RsuLookupKeyUploadRequest rsu_lookup_key_upload_request = 31;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::rsu_lookup_key_upload_request(this), output);
  }

  // optional .enterprise_management.PublicSamlUserRequest public_saml_user_request = 32;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::public_saml_user_request(this), output);
  }

  // optional .enterprise_management.ChromeOsUserReportRequest chrome_os_user_report_request = 33;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::chrome_os_user_report_request(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementRequest)
}

size_t DeviceManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *register_request_);
    }

    // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unregister_request_);
    }

    // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_request_);
    }

    // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_status_report_request_);
    }

    // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_status_report_request_);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_enrollment_request_);
    }

    // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_upload_request_);
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_api_access_request_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_state_retrieval_request_);
    }

    // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_state_key_update_request_);
    }

    // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_pairing_request_);
    }

    // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_device_pairing_request_);
    }

    // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remote_command_request_);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_attribute_update_permission_request_);
    }

    // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_attribute_update_request_);
    }

    // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_id_update_request_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_android_management_request_);
    }

    // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificate_based_register_request_);
    }

    // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_enroll_play_user_request_);
    }

    // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_play_activity_request_);
    }

    // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request_deprecated = 21 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_device_license_request_deprecated_);
    }

    // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_user_signin_request_);
    }

    // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *register_browser_request_);
    }

    // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_install_report_request_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_desktop_report_request_);
    }

    // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_validation_report_request_);
    }

    // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_initial_enrollment_state_request_);
    }

    // optional .enterprise_management.RefreshAccountRequest refresh_account_request = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *refresh_account_request_);
    }

    // optional .enterprise_management.ChildStatusReportRequest child_status_report_request = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_status_report_request_);
    }

    // optional .enterprise_management.RsuLookupKeyUploadRequest rsu_lookup_key_upload_request = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsu_lookup_key_upload_request_);
    }

    // optional .enterprise_management.PublicSamlUserRequest public_saml_user_request = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_saml_user_request_);
    }

    // optional .enterprise_management.ChromeOsUserReportRequest chrome_os_user_report_request = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_os_user_report_request_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceManagementRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceManagementRequest*>(
      &from));
}

void DeviceManagementRequest::MergeFrom(const DeviceManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.register_request());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_unregister_request()->::enterprise_management::DeviceUnregisterRequest::MergeFrom(from.unregister_request());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_policy_request()->::enterprise_management::DevicePolicyRequest::MergeFrom(from.policy_request());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_device_status_report_request()->::enterprise_management::DeviceStatusReportRequest::MergeFrom(from.device_status_report_request());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_session_status_report_request()->::enterprise_management::SessionStatusReportRequest::MergeFrom(from.session_status_report_request());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_auto_enrollment_request()->::enterprise_management::DeviceAutoEnrollmentRequest::MergeFrom(from.auto_enrollment_request());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_cert_upload_request()->::enterprise_management::DeviceCertUploadRequest::MergeFrom(from.cert_upload_request());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_service_api_access_request()->::enterprise_management::DeviceServiceApiAccessRequest::MergeFrom(from.service_api_access_request());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_device_state_retrieval_request()->::enterprise_management::DeviceStateRetrievalRequest::MergeFrom(from.device_state_retrieval_request());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_device_state_key_update_request()->::enterprise_management::DeviceStateKeyUpdateRequest::MergeFrom(from.device_state_key_update_request());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_device_pairing_request()->::enterprise_management::DevicePairingRequest::MergeFrom(from.device_pairing_request());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_check_device_pairing_request()->::enterprise_management::CheckDevicePairingRequest::MergeFrom(from.check_device_pairing_request());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_remote_command_request()->::enterprise_management::DeviceRemoteCommandRequest::MergeFrom(from.remote_command_request());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_device_attribute_update_permission_request()->::enterprise_management::DeviceAttributeUpdatePermissionRequest::MergeFrom(from.device_attribute_update_permission_request());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_device_attribute_update_request()->::enterprise_management::DeviceAttributeUpdateRequest::MergeFrom(from.device_attribute_update_request());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gcm_id_update_request()->::enterprise_management::GcmIdUpdateRequest::MergeFrom(from.gcm_id_update_request());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_check_android_management_request()->::enterprise_management::CheckAndroidManagementRequest::MergeFrom(from.check_android_management_request());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_certificate_based_register_request()->::enterprise_management::CertificateBasedDeviceRegisterRequest::MergeFrom(from.certificate_based_register_request());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_active_directory_enroll_play_user_request()->::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::MergeFrom(from.active_directory_enroll_play_user_request());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_active_directory_play_activity_request()->::enterprise_management::ActiveDirectoryPlayActivityRequest::MergeFrom(from.active_directory_play_activity_request());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_check_device_license_request_deprecated()->::enterprise_management::CheckDeviceLicenseRequest::MergeFrom(from.check_device_license_request_deprecated());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_active_directory_user_signin_request()->::enterprise_management::ActiveDirectoryUserSigninRequest::MergeFrom(from.active_directory_user_signin_request());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_register_browser_request()->::enterprise_management::RegisterBrowserRequest::MergeFrom(from.register_browser_request());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_app_install_report_request()->::enterprise_management::AppInstallReportRequest::MergeFrom(from.app_install_report_request());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_chrome_desktop_report_request()->::enterprise_management::ChromeDesktopReportRequest::MergeFrom(from.chrome_desktop_report_request());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_policy_validation_report_request()->::enterprise_management::PolicyValidationReportRequest::MergeFrom(from.policy_validation_report_request());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_device_initial_enrollment_state_request()->::enterprise_management::DeviceInitialEnrollmentStateRequest::MergeFrom(from.device_initial_enrollment_state_request());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_refresh_account_request()->::enterprise_management::RefreshAccountRequest::MergeFrom(from.refresh_account_request());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_child_status_report_request()->::enterprise_management::ChildStatusReportRequest::MergeFrom(from.child_status_report_request());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_rsu_lookup_key_upload_request()->::enterprise_management::RsuLookupKeyUploadRequest::MergeFrom(from.rsu_lookup_key_upload_request());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_public_saml_user_request()->::enterprise_management::PublicSamlUserRequest::MergeFrom(from.public_saml_user_request());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_chrome_os_user_report_request()->::enterprise_management::ChromeOsUserReportRequest::MergeFrom(from.chrome_os_user_report_request());
    }
  }
}

void DeviceManagementRequest::CopyFrom(const DeviceManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceManagementRequest::IsInitialized() const {
  if (has_device_status_report_request()) {
    if (!this->device_status_report_request_->IsInitialized()) return false;
  }
  return true;
}

void DeviceManagementRequest::InternalSwap(DeviceManagementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(register_request_, other->register_request_);
  swap(unregister_request_, other->unregister_request_);
  swap(policy_request_, other->policy_request_);
  swap(device_status_report_request_, other->device_status_report_request_);
  swap(session_status_report_request_, other->session_status_report_request_);
  swap(auto_enrollment_request_, other->auto_enrollment_request_);
  swap(cert_upload_request_, other->cert_upload_request_);
  swap(service_api_access_request_, other->service_api_access_request_);
  swap(device_state_retrieval_request_, other->device_state_retrieval_request_);
  swap(device_state_key_update_request_, other->device_state_key_update_request_);
  swap(device_pairing_request_, other->device_pairing_request_);
  swap(check_device_pairing_request_, other->check_device_pairing_request_);
  swap(remote_command_request_, other->remote_command_request_);
  swap(device_attribute_update_permission_request_, other->device_attribute_update_permission_request_);
  swap(device_attribute_update_request_, other->device_attribute_update_request_);
  swap(gcm_id_update_request_, other->gcm_id_update_request_);
  swap(check_android_management_request_, other->check_android_management_request_);
  swap(certificate_based_register_request_, other->certificate_based_register_request_);
  swap(active_directory_enroll_play_user_request_, other->active_directory_enroll_play_user_request_);
  swap(active_directory_play_activity_request_, other->active_directory_play_activity_request_);
  swap(check_device_license_request_deprecated_, other->check_device_license_request_deprecated_);
  swap(active_directory_user_signin_request_, other->active_directory_user_signin_request_);
  swap(register_browser_request_, other->register_browser_request_);
  swap(app_install_report_request_, other->app_install_report_request_);
  swap(chrome_desktop_report_request_, other->chrome_desktop_report_request_);
  swap(policy_validation_report_request_, other->policy_validation_report_request_);
  swap(device_initial_enrollment_state_request_, other->device_initial_enrollment_state_request_);
  swap(refresh_account_request_, other->refresh_account_request_);
  swap(child_status_report_request_, other->child_status_report_request_);
  swap(rsu_lookup_key_upload_request_, other->rsu_lookup_key_upload_request_);
  swap(public_saml_user_request_, other->public_saml_user_request_);
  swap(chrome_os_user_report_request_, other->chrome_os_user_report_request_);
}

std::string DeviceManagementRequest::GetTypeName() const {
  return "enterprise_management.DeviceManagementRequest";
}


// ===================================================================

void DeviceManagementResponse::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->register_response_ = const_cast< ::enterprise_management::DeviceRegisterResponse*>(
      ::enterprise_management::DeviceRegisterResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->unregister_response_ = const_cast< ::enterprise_management::DeviceUnregisterResponse*>(
      ::enterprise_management::DeviceUnregisterResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->policy_response_ = const_cast< ::enterprise_management::DevicePolicyResponse*>(
      ::enterprise_management::DevicePolicyResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_status_report_response_ = const_cast< ::enterprise_management::DeviceStatusReportResponse*>(
      ::enterprise_management::DeviceStatusReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->session_status_report_response_ = const_cast< ::enterprise_management::SessionStatusReportResponse*>(
      ::enterprise_management::SessionStatusReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->child_status_report_response_ = const_cast< ::enterprise_management::ChildStatusReportResponse*>(
      ::enterprise_management::ChildStatusReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->auto_enrollment_response_ = const_cast< ::enterprise_management::DeviceAutoEnrollmentResponse*>(
      ::enterprise_management::DeviceAutoEnrollmentResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->cert_upload_response_ = const_cast< ::enterprise_management::DeviceCertUploadResponse*>(
      ::enterprise_management::DeviceCertUploadResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->service_api_access_response_ = const_cast< ::enterprise_management::DeviceServiceApiAccessResponse*>(
      ::enterprise_management::DeviceServiceApiAccessResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_state_retrieval_response_ = const_cast< ::enterprise_management::DeviceStateRetrievalResponse*>(
      ::enterprise_management::DeviceStateRetrievalResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_pairing_response_ = const_cast< ::enterprise_management::DevicePairingResponse*>(
      ::enterprise_management::DevicePairingResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->check_device_pairing_response_ = const_cast< ::enterprise_management::CheckDevicePairingResponse*>(
      ::enterprise_management::CheckDevicePairingResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->remote_command_response_ = const_cast< ::enterprise_management::DeviceRemoteCommandResponse*>(
      ::enterprise_management::DeviceRemoteCommandResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_attribute_update_permission_response_ = const_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse*>(
      ::enterprise_management::DeviceAttributeUpdatePermissionResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_attribute_update_response_ = const_cast< ::enterprise_management::DeviceAttributeUpdateResponse*>(
      ::enterprise_management::DeviceAttributeUpdateResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->gcm_id_update_response_ = const_cast< ::enterprise_management::GcmIdUpdateResponse*>(
      ::enterprise_management::GcmIdUpdateResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->check_android_management_response_ = const_cast< ::enterprise_management::CheckAndroidManagementResponse*>(
      ::enterprise_management::CheckAndroidManagementResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->active_directory_enroll_play_user_response_ = const_cast< ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse*>(
      ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->active_directory_play_activity_response_ = const_cast< ::enterprise_management::ActiveDirectoryPlayActivityResponse*>(
      ::enterprise_management::ActiveDirectoryPlayActivityResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->check_device_license_response_deprecated_ = const_cast< ::enterprise_management::CheckDeviceLicenseResponse*>(
      ::enterprise_management::CheckDeviceLicenseResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->active_directory_user_signin_response_ = const_cast< ::enterprise_management::ActiveDirectoryUserSigninResponse*>(
      ::enterprise_management::ActiveDirectoryUserSigninResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->chrome_desktop_report_response_ = const_cast< ::enterprise_management::ChromeDesktopReportResponse*>(
      ::enterprise_management::ChromeDesktopReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->app_install_report_response_ = const_cast< ::enterprise_management::AppInstallReportResponse*>(
      ::enterprise_management::AppInstallReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->policy_validation_report_response_ = const_cast< ::enterprise_management::PolicyValidationReportResponse*>(
      ::enterprise_management::PolicyValidationReportResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->device_initial_enrollment_state_response_ = const_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse*>(
      ::enterprise_management::DeviceInitialEnrollmentStateResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->refresh_account_response_ = const_cast< ::enterprise_management::RefreshAccountResponse*>(
      ::enterprise_management::RefreshAccountResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->rsu_lookup_key_upload_response_ = const_cast< ::enterprise_management::RsuLookupKeyUploadResponse*>(
      ::enterprise_management::RsuLookupKeyUploadResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->public_saml_user_response_ = const_cast< ::enterprise_management::PublicSamlUserResponse*>(
      ::enterprise_management::PublicSamlUserResponse::internal_default_instance());
  ::enterprise_management::_DeviceManagementResponse_default_instance_._instance.get_mutable()->chrome_os_user_report_response_ = const_cast< ::enterprise_management::ChromeOsUserReportResponse*>(
      ::enterprise_management::ChromeOsUserReportResponse::internal_default_instance());
}
class DeviceManagementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceManagementResponse>()._has_bits_);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::DeviceRegisterResponse& register_response(const DeviceManagementResponse* msg);
  static void set_has_register_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::DeviceUnregisterResponse& unregister_response(const DeviceManagementResponse* msg);
  static void set_has_unregister_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::DevicePolicyResponse& policy_response(const DeviceManagementResponse* msg);
  static void set_has_policy_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::DeviceStatusReportResponse& device_status_report_response(const DeviceManagementResponse* msg);
  static void set_has_device_status_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::SessionStatusReportResponse& session_status_report_response(const DeviceManagementResponse* msg);
  static void set_has_session_status_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::ChildStatusReportResponse& child_status_report_response(const DeviceManagementResponse* msg);
  static void set_has_child_status_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::DeviceAutoEnrollmentResponse& auto_enrollment_response(const DeviceManagementResponse* msg);
  static void set_has_auto_enrollment_response(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::enterprise_management::DeviceCertUploadResponse& cert_upload_response(const DeviceManagementResponse* msg);
  static void set_has_cert_upload_response(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::enterprise_management::DeviceServiceApiAccessResponse& service_api_access_response(const DeviceManagementResponse* msg);
  static void set_has_service_api_access_response(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::DeviceStateRetrievalResponse& device_state_retrieval_response(const DeviceManagementResponse* msg);
  static void set_has_device_state_retrieval_response(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::DevicePairingResponse& device_pairing_response(const DeviceManagementResponse* msg);
  static void set_has_device_pairing_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::CheckDevicePairingResponse& check_device_pairing_response(const DeviceManagementResponse* msg);
  static void set_has_check_device_pairing_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::DeviceRemoteCommandResponse& remote_command_response(const DeviceManagementResponse* msg);
  static void set_has_remote_command_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::DeviceAttributeUpdatePermissionResponse& device_attribute_update_permission_response(const DeviceManagementResponse* msg);
  static void set_has_device_attribute_update_permission_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::DeviceAttributeUpdateResponse& device_attribute_update_response(const DeviceManagementResponse* msg);
  static void set_has_device_attribute_update_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::GcmIdUpdateResponse& gcm_id_update_response(const DeviceManagementResponse* msg);
  static void set_has_gcm_id_update_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::CheckAndroidManagementResponse& check_android_management_response(const DeviceManagementResponse* msg);
  static void set_has_check_android_management_response(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse& active_directory_enroll_play_user_response(const DeviceManagementResponse* msg);
  static void set_has_active_directory_enroll_play_user_response(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::ActiveDirectoryPlayActivityResponse& active_directory_play_activity_response(const DeviceManagementResponse* msg);
  static void set_has_active_directory_play_activity_response(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::CheckDeviceLicenseResponse& check_device_license_response_deprecated(const DeviceManagementResponse* msg);
  static void set_has_check_device_license_response_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::enterprise_management::ActiveDirectoryUserSigninResponse& active_directory_user_signin_response(const DeviceManagementResponse* msg);
  static void set_has_active_directory_user_signin_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::ChromeDesktopReportResponse& chrome_desktop_report_response(const DeviceManagementResponse* msg);
  static void set_has_chrome_desktop_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::AppInstallReportResponse& app_install_report_response(const DeviceManagementResponse* msg);
  static void set_has_app_install_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::PolicyValidationReportResponse& policy_validation_report_response(const DeviceManagementResponse* msg);
  static void set_has_policy_validation_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::DeviceInitialEnrollmentStateResponse& device_initial_enrollment_state_response(const DeviceManagementResponse* msg);
  static void set_has_device_initial_enrollment_state_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::RefreshAccountResponse& refresh_account_response(const DeviceManagementResponse* msg);
  static void set_has_refresh_account_response(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::RsuLookupKeyUploadResponse& rsu_lookup_key_upload_response(const DeviceManagementResponse* msg);
  static void set_has_rsu_lookup_key_upload_response(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::PublicSamlUserResponse& public_saml_user_response(const DeviceManagementResponse* msg);
  static void set_has_public_saml_user_response(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::ChromeOsUserReportResponse& chrome_os_user_report_response(const DeviceManagementResponse* msg);
  static void set_has_chrome_os_user_report_response(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::enterprise_management::DeviceRegisterResponse&
DeviceManagementResponse::_Internal::register_response(const DeviceManagementResponse* msg) {
  return *msg->register_response_;
}
const ::enterprise_management::DeviceUnregisterResponse&
DeviceManagementResponse::_Internal::unregister_response(const DeviceManagementResponse* msg) {
  return *msg->unregister_response_;
}
const ::enterprise_management::DevicePolicyResponse&
DeviceManagementResponse::_Internal::policy_response(const DeviceManagementResponse* msg) {
  return *msg->policy_response_;
}
const ::enterprise_management::DeviceStatusReportResponse&
DeviceManagementResponse::_Internal::device_status_report_response(const DeviceManagementResponse* msg) {
  return *msg->device_status_report_response_;
}
const ::enterprise_management::SessionStatusReportResponse&
DeviceManagementResponse::_Internal::session_status_report_response(const DeviceManagementResponse* msg) {
  return *msg->session_status_report_response_;
}
const ::enterprise_management::ChildStatusReportResponse&
DeviceManagementResponse::_Internal::child_status_report_response(const DeviceManagementResponse* msg) {
  return *msg->child_status_report_response_;
}
const ::enterprise_management::DeviceAutoEnrollmentResponse&
DeviceManagementResponse::_Internal::auto_enrollment_response(const DeviceManagementResponse* msg) {
  return *msg->auto_enrollment_response_;
}
const ::enterprise_management::DeviceCertUploadResponse&
DeviceManagementResponse::_Internal::cert_upload_response(const DeviceManagementResponse* msg) {
  return *msg->cert_upload_response_;
}
const ::enterprise_management::DeviceServiceApiAccessResponse&
DeviceManagementResponse::_Internal::service_api_access_response(const DeviceManagementResponse* msg) {
  return *msg->service_api_access_response_;
}
const ::enterprise_management::DeviceStateRetrievalResponse&
DeviceManagementResponse::_Internal::device_state_retrieval_response(const DeviceManagementResponse* msg) {
  return *msg->device_state_retrieval_response_;
}
const ::enterprise_management::DevicePairingResponse&
DeviceManagementResponse::_Internal::device_pairing_response(const DeviceManagementResponse* msg) {
  return *msg->device_pairing_response_;
}
const ::enterprise_management::CheckDevicePairingResponse&
DeviceManagementResponse::_Internal::check_device_pairing_response(const DeviceManagementResponse* msg) {
  return *msg->check_device_pairing_response_;
}
const ::enterprise_management::DeviceRemoteCommandResponse&
DeviceManagementResponse::_Internal::remote_command_response(const DeviceManagementResponse* msg) {
  return *msg->remote_command_response_;
}
const ::enterprise_management::DeviceAttributeUpdatePermissionResponse&
DeviceManagementResponse::_Internal::device_attribute_update_permission_response(const DeviceManagementResponse* msg) {
  return *msg->device_attribute_update_permission_response_;
}
const ::enterprise_management::DeviceAttributeUpdateResponse&
DeviceManagementResponse::_Internal::device_attribute_update_response(const DeviceManagementResponse* msg) {
  return *msg->device_attribute_update_response_;
}
const ::enterprise_management::GcmIdUpdateResponse&
DeviceManagementResponse::_Internal::gcm_id_update_response(const DeviceManagementResponse* msg) {
  return *msg->gcm_id_update_response_;
}
const ::enterprise_management::CheckAndroidManagementResponse&
DeviceManagementResponse::_Internal::check_android_management_response(const DeviceManagementResponse* msg) {
  return *msg->check_android_management_response_;
}
const ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse&
DeviceManagementResponse::_Internal::active_directory_enroll_play_user_response(const DeviceManagementResponse* msg) {
  return *msg->active_directory_enroll_play_user_response_;
}
const ::enterprise_management::ActiveDirectoryPlayActivityResponse&
DeviceManagementResponse::_Internal::active_directory_play_activity_response(const DeviceManagementResponse* msg) {
  return *msg->active_directory_play_activity_response_;
}
const ::enterprise_management::CheckDeviceLicenseResponse&
DeviceManagementResponse::_Internal::check_device_license_response_deprecated(const DeviceManagementResponse* msg) {
  return *msg->check_device_license_response_deprecated_;
}
const ::enterprise_management::ActiveDirectoryUserSigninResponse&
DeviceManagementResponse::_Internal::active_directory_user_signin_response(const DeviceManagementResponse* msg) {
  return *msg->active_directory_user_signin_response_;
}
const ::enterprise_management::ChromeDesktopReportResponse&
DeviceManagementResponse::_Internal::chrome_desktop_report_response(const DeviceManagementResponse* msg) {
  return *msg->chrome_desktop_report_response_;
}
const ::enterprise_management::AppInstallReportResponse&
DeviceManagementResponse::_Internal::app_install_report_response(const DeviceManagementResponse* msg) {
  return *msg->app_install_report_response_;
}
const ::enterprise_management::PolicyValidationReportResponse&
DeviceManagementResponse::_Internal::policy_validation_report_response(const DeviceManagementResponse* msg) {
  return *msg->policy_validation_report_response_;
}
const ::enterprise_management::DeviceInitialEnrollmentStateResponse&
DeviceManagementResponse::_Internal::device_initial_enrollment_state_response(const DeviceManagementResponse* msg) {
  return *msg->device_initial_enrollment_state_response_;
}
const ::enterprise_management::RefreshAccountResponse&
DeviceManagementResponse::_Internal::refresh_account_response(const DeviceManagementResponse* msg) {
  return *msg->refresh_account_response_;
}
const ::enterprise_management::RsuLookupKeyUploadResponse&
DeviceManagementResponse::_Internal::rsu_lookup_key_upload_response(const DeviceManagementResponse* msg) {
  return *msg->rsu_lookup_key_upload_response_;
}
const ::enterprise_management::PublicSamlUserResponse&
DeviceManagementResponse::_Internal::public_saml_user_response(const DeviceManagementResponse* msg) {
  return *msg->public_saml_user_response_;
}
const ::enterprise_management::ChromeOsUserReportResponse&
DeviceManagementResponse::_Internal::chrome_os_user_report_response(const DeviceManagementResponse* msg) {
  return *msg->chrome_os_user_report_response_;
}
DeviceManagementResponse::DeviceManagementResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementResponse)
}
DeviceManagementResponse::DeviceManagementResponse(const DeviceManagementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_register_response()) {
    register_response_ = new ::enterprise_management::DeviceRegisterResponse(*from.register_response_);
  } else {
    register_response_ = nullptr;
  }
  if (from.has_unregister_response()) {
    unregister_response_ = new ::enterprise_management::DeviceUnregisterResponse(*from.unregister_response_);
  } else {
    unregister_response_ = nullptr;
  }
  if (from.has_policy_response()) {
    policy_response_ = new ::enterprise_management::DevicePolicyResponse(*from.policy_response_);
  } else {
    policy_response_ = nullptr;
  }
  if (from.has_device_status_report_response()) {
    device_status_report_response_ = new ::enterprise_management::DeviceStatusReportResponse(*from.device_status_report_response_);
  } else {
    device_status_report_response_ = nullptr;
  }
  if (from.has_session_status_report_response()) {
    session_status_report_response_ = new ::enterprise_management::SessionStatusReportResponse(*from.session_status_report_response_);
  } else {
    session_status_report_response_ = nullptr;
  }
  if (from.has_auto_enrollment_response()) {
    auto_enrollment_response_ = new ::enterprise_management::DeviceAutoEnrollmentResponse(*from.auto_enrollment_response_);
  } else {
    auto_enrollment_response_ = nullptr;
  }
  if (from.has_cert_upload_response()) {
    cert_upload_response_ = new ::enterprise_management::DeviceCertUploadResponse(*from.cert_upload_response_);
  } else {
    cert_upload_response_ = nullptr;
  }
  if (from.has_service_api_access_response()) {
    service_api_access_response_ = new ::enterprise_management::DeviceServiceApiAccessResponse(*from.service_api_access_response_);
  } else {
    service_api_access_response_ = nullptr;
  }
  if (from.has_device_state_retrieval_response()) {
    device_state_retrieval_response_ = new ::enterprise_management::DeviceStateRetrievalResponse(*from.device_state_retrieval_response_);
  } else {
    device_state_retrieval_response_ = nullptr;
  }
  if (from.has_device_pairing_response()) {
    device_pairing_response_ = new ::enterprise_management::DevicePairingResponse(*from.device_pairing_response_);
  } else {
    device_pairing_response_ = nullptr;
  }
  if (from.has_check_device_pairing_response()) {
    check_device_pairing_response_ = new ::enterprise_management::CheckDevicePairingResponse(*from.check_device_pairing_response_);
  } else {
    check_device_pairing_response_ = nullptr;
  }
  if (from.has_remote_command_response()) {
    remote_command_response_ = new ::enterprise_management::DeviceRemoteCommandResponse(*from.remote_command_response_);
  } else {
    remote_command_response_ = nullptr;
  }
  if (from.has_device_attribute_update_permission_response()) {
    device_attribute_update_permission_response_ = new ::enterprise_management::DeviceAttributeUpdatePermissionResponse(*from.device_attribute_update_permission_response_);
  } else {
    device_attribute_update_permission_response_ = nullptr;
  }
  if (from.has_device_attribute_update_response()) {
    device_attribute_update_response_ = new ::enterprise_management::DeviceAttributeUpdateResponse(*from.device_attribute_update_response_);
  } else {
    device_attribute_update_response_ = nullptr;
  }
  if (from.has_gcm_id_update_response()) {
    gcm_id_update_response_ = new ::enterprise_management::GcmIdUpdateResponse(*from.gcm_id_update_response_);
  } else {
    gcm_id_update_response_ = nullptr;
  }
  if (from.has_check_android_management_response()) {
    check_android_management_response_ = new ::enterprise_management::CheckAndroidManagementResponse(*from.check_android_management_response_);
  } else {
    check_android_management_response_ = nullptr;
  }
  if (from.has_active_directory_enroll_play_user_response()) {
    active_directory_enroll_play_user_response_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse(*from.active_directory_enroll_play_user_response_);
  } else {
    active_directory_enroll_play_user_response_ = nullptr;
  }
  if (from.has_active_directory_play_activity_response()) {
    active_directory_play_activity_response_ = new ::enterprise_management::ActiveDirectoryPlayActivityResponse(*from.active_directory_play_activity_response_);
  } else {
    active_directory_play_activity_response_ = nullptr;
  }
  if (from.has_check_device_license_response_deprecated()) {
    check_device_license_response_deprecated_ = new ::enterprise_management::CheckDeviceLicenseResponse(*from.check_device_license_response_deprecated_);
  } else {
    check_device_license_response_deprecated_ = nullptr;
  }
  if (from.has_active_directory_user_signin_response()) {
    active_directory_user_signin_response_ = new ::enterprise_management::ActiveDirectoryUserSigninResponse(*from.active_directory_user_signin_response_);
  } else {
    active_directory_user_signin_response_ = nullptr;
  }
  if (from.has_chrome_desktop_report_response()) {
    chrome_desktop_report_response_ = new ::enterprise_management::ChromeDesktopReportResponse(*from.chrome_desktop_report_response_);
  } else {
    chrome_desktop_report_response_ = nullptr;
  }
  if (from.has_app_install_report_response()) {
    app_install_report_response_ = new ::enterprise_management::AppInstallReportResponse(*from.app_install_report_response_);
  } else {
    app_install_report_response_ = nullptr;
  }
  if (from.has_policy_validation_report_response()) {
    policy_validation_report_response_ = new ::enterprise_management::PolicyValidationReportResponse(*from.policy_validation_report_response_);
  } else {
    policy_validation_report_response_ = nullptr;
  }
  if (from.has_device_initial_enrollment_state_response()) {
    device_initial_enrollment_state_response_ = new ::enterprise_management::DeviceInitialEnrollmentStateResponse(*from.device_initial_enrollment_state_response_);
  } else {
    device_initial_enrollment_state_response_ = nullptr;
  }
  if (from.has_refresh_account_response()) {
    refresh_account_response_ = new ::enterprise_management::RefreshAccountResponse(*from.refresh_account_response_);
  } else {
    refresh_account_response_ = nullptr;
  }
  if (from.has_child_status_report_response()) {
    child_status_report_response_ = new ::enterprise_management::ChildStatusReportResponse(*from.child_status_report_response_);
  } else {
    child_status_report_response_ = nullptr;
  }
  if (from.has_rsu_lookup_key_upload_response()) {
    rsu_lookup_key_upload_response_ = new ::enterprise_management::RsuLookupKeyUploadResponse(*from.rsu_lookup_key_upload_response_);
  } else {
    rsu_lookup_key_upload_response_ = nullptr;
  }
  if (from.has_public_saml_user_response()) {
    public_saml_user_response_ = new ::enterprise_management::PublicSamlUserResponse(*from.public_saml_user_response_);
  } else {
    public_saml_user_response_ = nullptr;
  }
  if (from.has_chrome_os_user_report_response()) {
    chrome_os_user_report_response_ = new ::enterprise_management::ChromeOsUserReportResponse(*from.chrome_os_user_report_response_);
  } else {
    chrome_os_user_report_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementResponse)
}

void DeviceManagementResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceManagementResponse_device_5fmanagement_5fbackend_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&register_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_os_user_report_response_) -
      reinterpret_cast<char*>(&register_response_)) + sizeof(chrome_os_user_report_response_));
}

DeviceManagementResponse::~DeviceManagementResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementResponse)
  SharedDtor();
}

void DeviceManagementResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete register_response_;
  if (this != internal_default_instance()) delete unregister_response_;
  if (this != internal_default_instance()) delete policy_response_;
  if (this != internal_default_instance()) delete device_status_report_response_;
  if (this != internal_default_instance()) delete session_status_report_response_;
  if (this != internal_default_instance()) delete auto_enrollment_response_;
  if (this != internal_default_instance()) delete cert_upload_response_;
  if (this != internal_default_instance()) delete service_api_access_response_;
  if (this != internal_default_instance()) delete device_state_retrieval_response_;
  if (this != internal_default_instance()) delete device_pairing_response_;
  if (this != internal_default_instance()) delete check_device_pairing_response_;
  if (this != internal_default_instance()) delete remote_command_response_;
  if (this != internal_default_instance()) delete device_attribute_update_permission_response_;
  if (this != internal_default_instance()) delete device_attribute_update_response_;
  if (this != internal_default_instance()) delete gcm_id_update_response_;
  if (this != internal_default_instance()) delete check_android_management_response_;
  if (this != internal_default_instance()) delete active_directory_enroll_play_user_response_;
  if (this != internal_default_instance()) delete active_directory_play_activity_response_;
  if (this != internal_default_instance()) delete check_device_license_response_deprecated_;
  if (this != internal_default_instance()) delete active_directory_user_signin_response_;
  if (this != internal_default_instance()) delete chrome_desktop_report_response_;
  if (this != internal_default_instance()) delete app_install_report_response_;
  if (this != internal_default_instance()) delete policy_validation_report_response_;
  if (this != internal_default_instance()) delete device_initial_enrollment_state_response_;
  if (this != internal_default_instance()) delete refresh_account_response_;
  if (this != internal_default_instance()) delete child_status_report_response_;
  if (this != internal_default_instance()) delete rsu_lookup_key_upload_response_;
  if (this != internal_default_instance()) delete public_saml_user_response_;
  if (this != internal_default_instance()) delete chrome_os_user_report_response_;
}

void DeviceManagementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceManagementResponse& DeviceManagementResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceManagementResponse_device_5fmanagement_5fbackend_2eproto.base);
  return *internal_default_instance();
}


void DeviceManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(register_response_ != nullptr);
      register_response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(unregister_response_ != nullptr);
      unregister_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(policy_response_ != nullptr);
      policy_response_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(device_status_report_response_ != nullptr);
      device_status_report_response_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(session_status_report_response_ != nullptr);
      session_status_report_response_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(auto_enrollment_response_ != nullptr);
      auto_enrollment_response_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cert_upload_response_ != nullptr);
      cert_upload_response_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(service_api_access_response_ != nullptr);
      service_api_access_response_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(device_state_retrieval_response_ != nullptr);
      device_state_retrieval_response_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(device_pairing_response_ != nullptr);
      device_pairing_response_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(check_device_pairing_response_ != nullptr);
      check_device_pairing_response_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(remote_command_response_ != nullptr);
      remote_command_response_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(device_attribute_update_permission_response_ != nullptr);
      device_attribute_update_permission_response_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(device_attribute_update_response_ != nullptr);
      device_attribute_update_response_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(gcm_id_update_response_ != nullptr);
      gcm_id_update_response_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(check_android_management_response_ != nullptr);
      check_android_management_response_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(active_directory_enroll_play_user_response_ != nullptr);
      active_directory_enroll_play_user_response_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(active_directory_play_activity_response_ != nullptr);
      active_directory_play_activity_response_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(check_device_license_response_deprecated_ != nullptr);
      check_device_license_response_deprecated_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(active_directory_user_signin_response_ != nullptr);
      active_directory_user_signin_response_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(chrome_desktop_report_response_ != nullptr);
      chrome_desktop_report_response_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(app_install_report_response_ != nullptr);
      app_install_report_response_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(policy_validation_report_response_ != nullptr);
      policy_validation_report_response_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(device_initial_enrollment_state_response_ != nullptr);
      device_initial_enrollment_state_response_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(refresh_account_response_ != nullptr);
      refresh_account_response_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(child_status_report_response_ != nullptr);
      child_status_report_response_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(rsu_lookup_key_upload_response_ != nullptr);
      rsu_lookup_key_upload_response_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(public_saml_user_response_ != nullptr);
      public_saml_user_response_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(chrome_os_user_report_response_ != nullptr);
      chrome_os_user_report_response_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceManagementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_register_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_unregister_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_policy_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_device_status_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_session_status_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_auto_enrollment_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_cert_upload_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_service_api_access_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_device_state_retrieval_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_device_pairing_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_check_device_pairing_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_remote_command_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_device_attribute_update_permission_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_device_attribute_update_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_gcm_id_update_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_check_android_management_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_active_directory_enroll_play_user_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_active_directory_play_activity_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response_deprecated = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_check_device_license_response_deprecated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_active_directory_user_signin_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_chrome_desktop_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_app_install_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_policy_validation_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_device_initial_enrollment_state_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RefreshAccountResponse refresh_account_response = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_refresh_account_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChildStatusReportResponse child_status_report_response = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_child_status_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RsuLookupKeyUploadResponse rsu_lookup_key_upload_response = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_rsu_lookup_key_upload_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PublicSamlUserResponse public_saml_user_response = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_public_saml_user_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ChromeOsUserReportResponse chrome_os_user_report_response = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_chrome_os_user_report_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceManagementResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unregister_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_status_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_session_status_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_enrollment_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cert_upload_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_api_access_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_state_retrieval_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_pairing_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_device_pairing_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_command_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_attribute_update_permission_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_attribute_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gcm_id_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_android_management_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_enroll_play_user_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_play_activity_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response_deprecated = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_device_license_response_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_directory_user_signin_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_desktop_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_install_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_validation_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_initial_enrollment_state_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RefreshAccountResponse refresh_account_response = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_refresh_account_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChildStatusReportResponse child_status_report_response = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_child_status_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RsuLookupKeyUploadResponse rsu_lookup_key_upload_response = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rsu_lookup_key_upload_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PublicSamlUserResponse public_saml_user_response = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_public_saml_user_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeOsUserReportResponse chrome_os_user_report_response = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_os_user_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceManagementResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::register_response(this), output);
  }

  // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::unregister_response(this), output);
  }

  // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::policy_response(this), output);
  }

  // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::device_status_report_response(this), output);
  }

  // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::session_status_report_response(this), output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::auto_enrollment_response(this), output);
  }

  // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::cert_upload_response(this), output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::service_api_access_response(this), output);
  }

  // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::device_state_retrieval_response(this), output);
  }

  // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::device_pairing_response(this), output);
  }

  // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::check_device_pairing_response(this), output);
  }

  // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::remote_command_response(this), output);
  }

  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::device_attribute_update_permission_response(this), output);
  }

  // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::device_attribute_update_response(this), output);
  }

  // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::gcm_id_update_response(this), output);
  }

  // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::check_android_management_response(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::active_directory_enroll_play_user_response(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::active_directory_play_activity_response(this), output);
  }

  // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response_deprecated = 21 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::check_device_license_response_deprecated(this), output);
  }

  // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::active_directory_user_signin_response(this), output);
  }

  // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::chrome_desktop_report_response(this), output);
  }

  // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::app_install_report_response(this), output);
  }

  // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::policy_validation_report_response(this), output);
  }

  // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::device_initial_enrollment_state_response(this), output);
  }

  // optional .enterprise_management.RefreshAccountResponse refresh_account_response = 28;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::refresh_account_response(this), output);
  }

  // optional .enterprise_management.ChildStatusReportResponse child_status_report_response = 29;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::child_status_report_response(this), output);
  }

  // optional .enterprise_management.RsuLookupKeyUploadResponse rsu_lookup_key_upload_response = 30;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::rsu_lookup_key_upload_response(this), output);
  }

  // optional .enterprise_management.PublicSamlUserResponse public_saml_user_response = 31;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::public_saml_user_response(this), output);
  }

  // optional .enterprise_management.ChromeOsUserReportResponse chrome_os_user_report_response = 32;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::chrome_os_user_report_response(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementResponse)
}

size_t DeviceManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *register_response_);
    }

    // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unregister_response_);
    }

    // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_response_);
    }

    // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_status_report_response_);
    }

    // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_status_report_response_);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_enrollment_response_);
    }

    // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_upload_response_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_api_access_response_);
    }

    // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_state_retrieval_response_);
    }

    // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_pairing_response_);
    }

    // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_device_pairing_response_);
    }

    // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remote_command_response_);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_attribute_update_permission_response_);
    }

    // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_attribute_update_response_);
    }

    // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_id_update_response_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_android_management_response_);
    }

    // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_enroll_play_user_response_);
    }

    // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_play_activity_response_);
    }

    // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response_deprecated = 21 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_device_license_response_deprecated_);
    }

    // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_directory_user_signin_response_);
    }

    // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_desktop_report_response_);
    }

    // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_install_report_response_);
    }

    // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_validation_report_response_);
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_initial_enrollment_state_response_);
    }

    // optional .enterprise_management.RefreshAccountResponse refresh_account_response = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *refresh_account_response_);
    }

    // optional .enterprise_management.ChildStatusReportResponse child_status_report_response = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_status_report_response_);
    }

    // optional .enterprise_management.RsuLookupKeyUploadResponse rsu_lookup_key_upload_response = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsu_lookup_key_upload_response_);
    }

    // optional .enterprise_management.PublicSamlUserResponse public_saml_user_response = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_saml_user_response_);
    }

    // optional .enterprise_management.ChromeOsUserReportResponse chrome_os_user_report_response = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_os_user_report_response_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceManagementResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceManagementResponse*>(
      &from));
}

void DeviceManagementResponse::MergeFrom(const DeviceManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_register_response()->::enterprise_management::DeviceRegisterResponse::MergeFrom(from.register_response());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_unregister_response()->::enterprise_management::DeviceUnregisterResponse::MergeFrom(from.unregister_response());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_policy_response()->::enterprise_management::DevicePolicyResponse::MergeFrom(from.policy_response());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_device_status_report_response()->::enterprise_management::DeviceStatusReportResponse::MergeFrom(from.device_status_report_response());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_session_status_report_response()->::enterprise_management::SessionStatusReportResponse::MergeFrom(from.session_status_report_response());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_auto_enrollment_response()->::enterprise_management::DeviceAutoEnrollmentResponse::MergeFrom(from.auto_enrollment_response());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cert_upload_response()->::enterprise_management::DeviceCertUploadResponse::MergeFrom(from.cert_upload_response());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_service_api_access_response()->::enterprise_management::DeviceServiceApiAccessResponse::MergeFrom(from.service_api_access_response());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_device_state_retrieval_response()->::enterprise_management::DeviceStateRetrievalResponse::MergeFrom(from.device_state_retrieval_response());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_device_pairing_response()->::enterprise_management::DevicePairingResponse::MergeFrom(from.device_pairing_response());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_check_device_pairing_response()->::enterprise_management::CheckDevicePairingResponse::MergeFrom(from.check_device_pairing_response());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_remote_command_response()->::enterprise_management::DeviceRemoteCommandResponse::MergeFrom(from.remote_command_response());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_device_attribute_update_permission_response()->::enterprise_management::DeviceAttributeUpdatePermissionResponse::MergeFrom(from.device_attribute_update_permission_response());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_device_attribute_update_response()->::enterprise_management::DeviceAttributeUpdateResponse::MergeFrom(from.device_attribute_update_response());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gcm_id_update_response()->::enterprise_management::GcmIdUpdateResponse::MergeFrom(from.gcm_id_update_response());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_check_android_management_response()->::enterprise_management::CheckAndroidManagementResponse::MergeFrom(from.check_android_management_response());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_active_directory_enroll_play_user_response()->::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::MergeFrom(from.active_directory_enroll_play_user_response());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_active_directory_play_activity_response()->::enterprise_management::ActiveDirectoryPlayActivityResponse::MergeFrom(from.active_directory_play_activity_response());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_check_device_license_response_deprecated()->::enterprise_management::CheckDeviceLicenseResponse::MergeFrom(from.check_device_license_response_deprecated());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_active_directory_user_signin_response()->::enterprise_management::ActiveDirectoryUserSigninResponse::MergeFrom(from.active_directory_user_signin_response());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_chrome_desktop_report_response()->::enterprise_management::ChromeDesktopReportResponse::MergeFrom(from.chrome_desktop_report_response());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_app_install_report_response()->::enterprise_management::AppInstallReportResponse::MergeFrom(from.app_install_report_response());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_policy_validation_report_response()->::enterprise_management::PolicyValidationReportResponse::MergeFrom(from.policy_validation_report_response());
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_device_initial_enrollment_state_response()->::enterprise_management::DeviceInitialEnrollmentStateResponse::MergeFrom(from.device_initial_enrollment_state_response());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_refresh_account_response()->::enterprise_management::RefreshAccountResponse::MergeFrom(from.refresh_account_response());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_child_status_report_response()->::enterprise_management::ChildStatusReportResponse::MergeFrom(from.child_status_report_response());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_rsu_lookup_key_upload_response()->::enterprise_management::RsuLookupKeyUploadResponse::MergeFrom(from.rsu_lookup_key_upload_response());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_public_saml_user_response()->::enterprise_management::PublicSamlUserResponse::MergeFrom(from.public_saml_user_response());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_chrome_os_user_report_response()->::enterprise_management::ChromeOsUserReportResponse::MergeFrom(from.chrome_os_user_report_response());
    }
  }
}

void DeviceManagementResponse::CopyFrom(const DeviceManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceManagementResponse::IsInitialized() const {
  if (has_register_response()) {
    if (!this->register_response_->IsInitialized()) return false;
  }
  return true;
}

void DeviceManagementResponse::InternalSwap(DeviceManagementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(register_response_, other->register_response_);
  swap(unregister_response_, other->unregister_response_);
  swap(policy_response_, other->policy_response_);
  swap(device_status_report_response_, other->device_status_report_response_);
  swap(session_status_report_response_, other->session_status_report_response_);
  swap(auto_enrollment_response_, other->auto_enrollment_response_);
  swap(cert_upload_response_, other->cert_upload_response_);
  swap(service_api_access_response_, other->service_api_access_response_);
  swap(device_state_retrieval_response_, other->device_state_retrieval_response_);
  swap(device_pairing_response_, other->device_pairing_response_);
  swap(check_device_pairing_response_, other->check_device_pairing_response_);
  swap(remote_command_response_, other->remote_command_response_);
  swap(device_attribute_update_permission_response_, other->device_attribute_update_permission_response_);
  swap(device_attribute_update_response_, other->device_attribute_update_response_);
  swap(gcm_id_update_response_, other->gcm_id_update_response_);
  swap(check_android_management_response_, other->check_android_management_response_);
  swap(active_directory_enroll_play_user_response_, other->active_directory_enroll_play_user_response_);
  swap(active_directory_play_activity_response_, other->active_directory_play_activity_response_);
  swap(check_device_license_response_deprecated_, other->check_device_license_response_deprecated_);
  swap(active_directory_user_signin_response_, other->active_directory_user_signin_response_);
  swap(chrome_desktop_report_response_, other->chrome_desktop_report_response_);
  swap(app_install_report_response_, other->app_install_report_response_);
  swap(policy_validation_report_response_, other->policy_validation_report_response_);
  swap(device_initial_enrollment_state_response_, other->device_initial_enrollment_state_response_);
  swap(refresh_account_response_, other->refresh_account_response_);
  swap(child_status_report_response_, other->child_status_report_response_);
  swap(rsu_lookup_key_upload_response_, other->rsu_lookup_key_upload_response_);
  swap(public_saml_user_response_, other->public_saml_user_response_);
  swap(chrome_os_user_report_response_, other->chrome_os_user_report_response_);
}

std::string DeviceManagementResponse::GetTypeName() const {
  return "enterprise_management.DeviceManagementResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::LicenseType* Arena::CreateMaybeMessage< ::enterprise_management::LicenseType >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::LicenseType >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SignedData* Arena::CreateMaybeMessage< ::enterprise_management::SignedData >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SignedData >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRegisterRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRegisterResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUnregisterRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUnregisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceUnregisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUnregisterResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUnregisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceUnregisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceCertUploadRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceCertUploadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceCertUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceCertUploadResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceCertUploadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceCertUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceServiceApiAccessRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceServiceApiAccessRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceServiceApiAccessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceServiceApiAccessResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceServiceApiAccessResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceServiceApiAccessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyFetchRequest* Arena::CreateMaybeMessage< ::enterprise_management::PolicyFetchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyFetchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DisabledState* Arena::CreateMaybeMessage< ::enterprise_management::DisabledState >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DisabledState >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceState* Arena::CreateMaybeMessage< ::enterprise_management::DeviceState >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceState >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CustomerLogo* Arena::CreateMaybeMessage< ::enterprise_management::CustomerLogo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CustomerLogo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyData* Arena::CreateMaybeMessage< ::enterprise_management::PolicyData >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyData >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ClientActionRequired* Arena::CreateMaybeMessage< ::enterprise_management::ClientActionRequired >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ClientActionRequired >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyFetchResponse* Arena::CreateMaybeMessage< ::enterprise_management::PolicyFetchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyFetchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DEPRECATEDPolicyPublicKeyAndDomain* Arena::CreateMaybeMessage< ::enterprise_management::DEPRECATEDPolicyPublicKeyAndDomain >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DEPRECATEDPolicyPublicKeyAndDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PublicKeyVerificationData* Arena::CreateMaybeMessage< ::enterprise_management::PublicKeyVerificationData >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PublicKeyVerificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePolicyRequest* Arena::CreateMaybeMessage< ::enterprise_management::DevicePolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DevicePolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePolicyResponse* Arena::CreateMaybeMessage< ::enterprise_management::DevicePolicyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DevicePolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::TimePeriod* Arena::CreateMaybeMessage< ::enterprise_management::TimePeriod >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::TimePeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveTimePeriod* Arena::CreateMaybeMessage< ::enterprise_management::ActiveTimePeriod >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveTimePeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::NetworkInterface* Arena::CreateMaybeMessage< ::enterprise_management::NetworkInterface >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::NetworkInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::NetworkState* Arena::CreateMaybeMessage< ::enterprise_management::NetworkState >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::NetworkState >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUser* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUser >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceUser >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::VolumeInfo* Arena::CreateMaybeMessage< ::enterprise_management::VolumeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::VolumeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CpuUtilizationInfo* Arena::CreateMaybeMessage< ::enterprise_management::CpuUtilizationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CpuUtilizationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemFreeRamInfo* Arena::CreateMaybeMessage< ::enterprise_management::SystemFreeRamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SystemFreeRamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CPUTempInfo* Arena::CreateMaybeMessage< ::enterprise_management::CPUTempInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CPUTempInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StatefulPartitionInfo* Arena::CreateMaybeMessage< ::enterprise_management::StatefulPartitionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::StatefulPartitionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BatterySample* Arena::CreateMaybeMessage< ::enterprise_management::BatterySample >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::BatterySample >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BatteryInfo* Arena::CreateMaybeMessage< ::enterprise_management::BatteryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::BatteryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PowerStatus* Arena::CreateMaybeMessage< ::enterprise_management::PowerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PowerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DiskLifetimeEstimation* Arena::CreateMaybeMessage< ::enterprise_management::DiskLifetimeEstimation >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DiskLifetimeEstimation >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DiskInfo* Arena::CreateMaybeMessage< ::enterprise_management::DiskInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DiskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StorageStatus* Arena::CreateMaybeMessage< ::enterprise_management::StorageStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::StorageStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ThermalSample* Arena::CreateMaybeMessage< ::enterprise_management::ThermalSample >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ThermalSample >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ThermalInfo* Arena::CreateMaybeMessage< ::enterprise_management::ThermalInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ThermalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BoardStatus* Arena::CreateMaybeMessage< ::enterprise_management::BoardStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::BoardStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemStatus* Arena::CreateMaybeMessage< ::enterprise_management::SystemStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SystemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CpuInfo* Arena::CreateMaybeMessage< ::enterprise_management::CpuInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CpuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DisplayInfo* Arena::CreateMaybeMessage< ::enterprise_management::DisplayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DisplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::GraphicsAdapterInfo* Arena::CreateMaybeMessage< ::enterprise_management::GraphicsAdapterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::GraphicsAdapterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::GraphicsStatus* Arena::CreateMaybeMessage< ::enterprise_management::GraphicsStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::GraphicsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CrashReportInfo* Arena::CreateMaybeMessage< ::enterprise_management::CrashReportInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CrashReportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceStatusReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceStatusReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceStatusReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OsUpdateStatus* Arena::CreateMaybeMessage< ::enterprise_management::OsUpdateStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::OsUpdateStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppStatus* Arena::CreateMaybeMessage< ::enterprise_management::AppStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AndroidAppPermission* Arena::CreateMaybeMessage< ::enterprise_management::AndroidAppPermission >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AndroidAppPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AndroidAppInfo* Arena::CreateMaybeMessage< ::enterprise_management::AndroidAppInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AndroidAppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeUserProfileReport* Arena::CreateMaybeMessage< ::enterprise_management::ChromeUserProfileReport >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeUserProfileReport >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeSignedInUser* Arena::CreateMaybeMessage< ::enterprise_management::ChromeSignedInUser >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeSignedInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ExtensionRequest* Arena::CreateMaybeMessage< ::enterprise_management::ExtensionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ExtensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::Extension* Arena::CreateMaybeMessage< ::enterprise_management::Extension >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::Plugin* Arena::CreateMaybeMessage< ::enterprise_management::Plugin >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::Plugin >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::Policy* Arena::CreateMaybeMessage< ::enterprise_management::Policy >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::Policy >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ExtensionPolicy* Arena::CreateMaybeMessage< ::enterprise_management::ExtensionPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ExtensionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyFetchTimestamp* Arena::CreateMaybeMessage< ::enterprise_management::PolicyFetchTimestamp >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyFetchTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeUserProfileInfo* Arena::CreateMaybeMessage< ::enterprise_management::ChromeUserProfileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeUserProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BrowserReport* Arena::CreateMaybeMessage< ::enterprise_management::BrowserReport >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::BrowserReport >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OSReport* Arena::CreateMaybeMessage< ::enterprise_management::OSReport >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::OSReport >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeDesktopReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::ChromeDesktopReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeDesktopReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeOsUserReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::ChromeOsUserReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeOsUserReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyValueValidationIssue* Arena::CreateMaybeMessage< ::enterprise_management::PolicyValueValidationIssue >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyValueValidationIssue >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyValidationReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::PolicyValidationReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyValidationReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyValidationReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::PolicyValidationReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyValidationReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AndroidStatus* Arena::CreateMaybeMessage< ::enterprise_management::AndroidStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AndroidStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CrostiniApp* Arena::CreateMaybeMessage< ::enterprise_management::CrostiniApp >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CrostiniApp >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CrostiniStatus* Arena::CreateMaybeMessage< ::enterprise_management::CrostiniStatus >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CrostiniStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SessionStatusReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::SessionStatusReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SessionStatusReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceStatusReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceStatusReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceStatusReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeDesktopReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::ChromeDesktopReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeDesktopReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeOsUserReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::ChromeOsUserReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChromeOsUserReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SessionStatusReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::SessionStatusReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SessionStatusReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAutoEnrollmentRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAutoEnrollmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAutoEnrollmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAutoEnrollmentResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAutoEnrollmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAutoEnrollmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceStateRetrievalRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceStateRetrievalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceStateRetrievalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceStateKeyUpdateRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceStateKeyUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceStateKeyUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceStateRetrievalResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceStateRetrievalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceStateRetrievalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceInitialEnrollmentStateRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceInitialEnrollmentStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceInitialEnrollmentStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceInitialEnrollmentStateResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceInitialEnrollmentStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceInitialEnrollmentStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePairingRequest* Arena::CreateMaybeMessage< ::enterprise_management::DevicePairingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DevicePairingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePairingResponse* Arena::CreateMaybeMessage< ::enterprise_management::DevicePairingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DevicePairingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckDevicePairingRequest* Arena::CreateMaybeMessage< ::enterprise_management::CheckDevicePairingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckDevicePairingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckDevicePairingResponse* Arena::CreateMaybeMessage< ::enterprise_management::CheckDevicePairingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckDevicePairingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RemoteCommand* Arena::CreateMaybeMessage< ::enterprise_management::RemoteCommand >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RemoteCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RemoteCommandResult* Arena::CreateMaybeMessage< ::enterprise_management::RemoteCommandResult >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RemoteCommandResult >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRemoteCommandRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRemoteCommandRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceRemoteCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRemoteCommandResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRemoteCommandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceRemoteCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAttributeUpdatePermissionRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAttributeUpdatePermissionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAttributeUpdatePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAttributeUpdatePermissionResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAttributeUpdatePermissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAttributeUpdatePermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAttributeUpdateRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAttributeUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAttributeUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAttributeUpdateResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAttributeUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceAttributeUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::GcmIdUpdateRequest* Arena::CreateMaybeMessage< ::enterprise_management::GcmIdUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::GcmIdUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::GcmIdUpdateResponse* Arena::CreateMaybeMessage< ::enterprise_management::GcmIdUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::GcmIdUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckAndroidManagementRequest* Arena::CreateMaybeMessage< ::enterprise_management::CheckAndroidManagementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckAndroidManagementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckAndroidManagementResponse* Arena::CreateMaybeMessage< ::enterprise_management::CheckAndroidManagementResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckAndroidManagementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CertificateBasedDeviceRegisterRequest* Arena::CreateMaybeMessage< ::enterprise_management::CertificateBasedDeviceRegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CertificateBasedDeviceRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRegisterConfiguration* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRegisterConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceRegisterConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CertificateBasedDeviceRegistrationData* Arena::CreateMaybeMessage< ::enterprise_management::CertificateBasedDeviceRegistrationData >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CertificateBasedDeviceRegistrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RegisterBrowserRequest* Arena::CreateMaybeMessage< ::enterprise_management::RegisterBrowserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RegisterBrowserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SamlParametersProto* Arena::CreateMaybeMessage< ::enterprise_management::SamlParametersProto >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SamlParametersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PublicSamlUserRequest* Arena::CreateMaybeMessage< ::enterprise_management::PublicSamlUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PublicSamlUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PublicSamlUserResponse* Arena::CreateMaybeMessage< ::enterprise_management::PublicSamlUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PublicSamlUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryPlayActivityRequest* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryPlayActivityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryPlayActivityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryPlayActivityResponse* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryPlayActivityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryPlayActivityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckDeviceLicenseRequest* Arena::CreateMaybeMessage< ::enterprise_management::CheckDeviceLicenseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckDeviceLicenseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LicenseAvailability* Arena::CreateMaybeMessage< ::enterprise_management::LicenseAvailability >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::LicenseAvailability >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CheckDeviceLicenseResponse* Arena::CreateMaybeMessage< ::enterprise_management::CheckDeviceLicenseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CheckDeviceLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryUserSigninRequest* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryUserSigninRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryUserSigninRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ActiveDirectoryUserSigninResponse* Arena::CreateMaybeMessage< ::enterprise_management::ActiveDirectoryUserSigninResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ActiveDirectoryUserSigninResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::TpmVersionInfo* Arena::CreateMaybeMessage< ::enterprise_management::TpmVersionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::TpmVersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::TpmStatusInfo* Arena::CreateMaybeMessage< ::enterprise_management::TpmStatusInfo >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::TpmStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemState* Arena::CreateMaybeMessage< ::enterprise_management::SystemState >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::SystemState >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppInstallReportLogEvent* Arena::CreateMaybeMessage< ::enterprise_management::AppInstallReportLogEvent >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppInstallReportLogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppInstallReport* Arena::CreateMaybeMessage< ::enterprise_management::AppInstallReport >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppInstallReport >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppInstallReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::AppInstallReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppInstallReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppInstallReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::AppInstallReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppInstallReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RefreshAccountRequest* Arena::CreateMaybeMessage< ::enterprise_management::RefreshAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RefreshAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RefreshAccountResponse* Arena::CreateMaybeMessage< ::enterprise_management::RefreshAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RefreshAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RsuLookupKeyUploadRequest* Arena::CreateMaybeMessage< ::enterprise_management::RsuLookupKeyUploadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RsuLookupKeyUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RsuLookupKeyUploadResponse* Arena::CreateMaybeMessage< ::enterprise_management::RsuLookupKeyUploadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::RsuLookupKeyUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::App* Arena::CreateMaybeMessage< ::enterprise_management::App >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::App >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AppActivity* Arena::CreateMaybeMessage< ::enterprise_management::AppActivity >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::AppActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ScreenTimeSpan* Arena::CreateMaybeMessage< ::enterprise_management::ScreenTimeSpan >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ScreenTimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChildStatusReportRequest* Arena::CreateMaybeMessage< ::enterprise_management::ChildStatusReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChildStatusReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChildStatusReportResponse* Arena::CreateMaybeMessage< ::enterprise_management::ChildStatusReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::ChildStatusReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceManagementRequest* Arena::CreateMaybeMessage< ::enterprise_management::DeviceManagementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceManagementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceManagementResponse* Arena::CreateMaybeMessage< ::enterprise_management::DeviceManagementResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::DeviceManagementResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
