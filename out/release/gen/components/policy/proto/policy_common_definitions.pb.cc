// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_common_definitions.proto

#include "policy_common_definitions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringList_policy_5fcommon_5fdefinitions_2eproto;
namespace enterprise_management {
class StringListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringList> _instance;
} _StringList_default_instance_;
class PolicyOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyOptions> _instance;
} _PolicyOptions_default_instance_;
class BooleanPolicyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BooleanPolicyProto> _instance;
} _BooleanPolicyProto_default_instance_;
class IntegerPolicyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerPolicyProto> _instance;
} _IntegerPolicyProto_default_instance_;
class StringPolicyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringPolicyProto> _instance;
} _StringPolicyProto_default_instance_;
class StringListPolicyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringListPolicyProto> _instance;
} _StringListPolicyProto_default_instance_;
}  // namespace enterprise_management
static void InitDefaultsscc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_BooleanPolicyProto_default_instance_;
    new (ptr) ::enterprise_management::BooleanPolicyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::BooleanPolicyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto}, {
      &scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base,}};

static void InitDefaultsscc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_IntegerPolicyProto_default_instance_;
    new (ptr) ::enterprise_management::IntegerPolicyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::IntegerPolicyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto}, {
      &scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base,}};

static void InitDefaultsscc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PolicyOptions_default_instance_;
    new (ptr) ::enterprise_management::PolicyOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PolicyOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto}, {}};

static void InitDefaultsscc_info_StringList_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StringList_default_instance_;
    new (ptr) ::enterprise_management::StringList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StringList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringList_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringList_policy_5fcommon_5fdefinitions_2eproto}, {}};

static void InitDefaultsscc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StringListPolicyProto_default_instance_;
    new (ptr) ::enterprise_management::StringListPolicyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StringListPolicyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto}, {
      &scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_StringList_policy_5fcommon_5fdefinitions_2eproto.base,}};

static void InitDefaultsscc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StringPolicyProto_default_instance_;
    new (ptr) ::enterprise_management::StringPolicyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StringPolicyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto}, {
      &scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base,}};

namespace enterprise_management {
bool PolicyOptions_PolicyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyOptions_PolicyMode_strings[3] = {};

static const char PolicyOptions_PolicyMode_names[] =
  "MANDATORY"
  "RECOMMENDED"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyOptions_PolicyMode_entries[] = {
  { {PolicyOptions_PolicyMode_names + 0, 9}, 0 },
  { {PolicyOptions_PolicyMode_names + 9, 11}, 1 },
  { {PolicyOptions_PolicyMode_names + 20, 5}, 2 },
};

static const int PolicyOptions_PolicyMode_entries_by_number[] = {
  0, // 0 -> MANDATORY
  1, // 1 -> RECOMMENDED
  2, // 2 -> UNSET
};

const std::string& PolicyOptions_PolicyMode_Name(
    PolicyOptions_PolicyMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyOptions_PolicyMode_entries,
          PolicyOptions_PolicyMode_entries_by_number,
          3, PolicyOptions_PolicyMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyOptions_PolicyMode_entries,
      PolicyOptions_PolicyMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyOptions_PolicyMode_strings[idx].get();
}
bool PolicyOptions_PolicyMode_Parse(
    const std::string& name, PolicyOptions_PolicyMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyOptions_PolicyMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyOptions_PolicyMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PolicyOptions_PolicyMode PolicyOptions::MANDATORY;
constexpr PolicyOptions_PolicyMode PolicyOptions::RECOMMENDED;
constexpr PolicyOptions_PolicyMode PolicyOptions::UNSET;
constexpr PolicyOptions_PolicyMode PolicyOptions::PolicyMode_MIN;
constexpr PolicyOptions_PolicyMode PolicyOptions::PolicyMode_MAX;
constexpr int PolicyOptions::PolicyMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StringList::InitAsDefaultInstance() {
}
class StringList::_Internal {
 public:
  using HasBits = decltype(std::declval<StringList>()._has_bits_);
};

StringList::StringList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringList)
}

void StringList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringList_policy_5fcommon_5fdefinitions_2eproto.base);
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringList)
  SharedDtor();
}

void StringList::SharedDtor() {
}

void StringList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringList& StringList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringList_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_entries(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.StringList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.StringList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.StringList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string entries = 1;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->entries(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.StringList)
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringList)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->entries_size());
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringList*>(
      &from));
}

void StringList::MergeFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(CastToBase(&other->entries_));
}

std::string StringList::GetTypeName() const {
  return "enterprise_management.StringList";
}


// ===================================================================

void PolicyOptions::InitAsDefaultInstance() {
}
class PolicyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyOptions>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PolicyOptions::PolicyOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyOptions)
}
PolicyOptions::PolicyOptions(const PolicyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyOptions)
}

void PolicyOptions::SharedCtor() {
  mode_ = 0;
}

PolicyOptions::~PolicyOptions() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyOptions)
  SharedDtor();
}

void PolicyOptions::SharedDtor() {
}

void PolicyOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyOptions& PolicyOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void PolicyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PolicyOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyOptions_PolicyMode_IsValid(val))) {
            set_mode(static_cast<::enterprise_management::PolicyOptions_PolicyMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PolicyOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyOptions_PolicyMode_IsValid(value)) {
            set_mode(static_cast< ::enterprise_management::PolicyOptions_PolicyMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PolicyOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyOptions)
}

size_t PolicyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PolicyOptions*>(
      &from));
}

void PolicyOptions::MergeFrom(const PolicyOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mode()) {
    set_mode(from.mode());
  }
}

void PolicyOptions::CopyFrom(const PolicyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyOptions::IsInitialized() const {
  return true;
}

void PolicyOptions::InternalSwap(PolicyOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
}

std::string PolicyOptions::GetTypeName() const {
  return "enterprise_management.PolicyOptions";
}


// ===================================================================

void BooleanPolicyProto::InitAsDefaultInstance() {
  ::enterprise_management::_BooleanPolicyProto_default_instance_._instance.get_mutable()->policy_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
}
class BooleanPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanPolicyProto>()._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const BooleanPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
BooleanPolicyProto::_Internal::policy_options(const BooleanPolicyProto* msg) {
  return *msg->policy_options_;
}
BooleanPolicyProto::BooleanPolicyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BooleanPolicyProto)
}
BooleanPolicyProto::BooleanPolicyProto(const BooleanPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy_options()) {
    policy_options_ = new ::enterprise_management::PolicyOptions(*from.policy_options_);
  } else {
    policy_options_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BooleanPolicyProto)
}

void BooleanPolicyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  ::memset(&policy_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&policy_options_)) + sizeof(value_));
}

BooleanPolicyProto::~BooleanPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.BooleanPolicyProto)
  SharedDtor();
}

void BooleanPolicyProto::SharedDtor() {
  if (this != internal_default_instance()) delete policy_options_;
}

void BooleanPolicyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BooleanPolicyProto& BooleanPolicyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void BooleanPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BooleanPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(policy_options_ != nullptr);
    policy_options_->Clear();
  }
  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BooleanPolicyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_policy_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BooleanPolicyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BooleanPolicyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BooleanPolicyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BooleanPolicyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BooleanPolicyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BooleanPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::policy_options(this), output);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BooleanPolicyProto)
}

size_t BooleanPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BooleanPolicyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_options_);
    }

    // optional bool value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BooleanPolicyProto*>(
      &from));
}

void BooleanPolicyProto::MergeFrom(const BooleanPolicyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BooleanPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(from.policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BooleanPolicyProto::CopyFrom(const BooleanPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BooleanPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanPolicyProto::IsInitialized() const {
  return true;
}

void BooleanPolicyProto::InternalSwap(BooleanPolicyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(policy_options_, other->policy_options_);
  swap(value_, other->value_);
}

std::string BooleanPolicyProto::GetTypeName() const {
  return "enterprise_management.BooleanPolicyProto";
}


// ===================================================================

void IntegerPolicyProto::InitAsDefaultInstance() {
  ::enterprise_management::_IntegerPolicyProto_default_instance_._instance.get_mutable()->policy_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
}
class IntegerPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IntegerPolicyProto>()._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const IntegerPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
IntegerPolicyProto::_Internal::policy_options(const IntegerPolicyProto* msg) {
  return *msg->policy_options_;
}
IntegerPolicyProto::IntegerPolicyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.IntegerPolicyProto)
}
IntegerPolicyProto::IntegerPolicyProto(const IntegerPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy_options()) {
    policy_options_ = new ::enterprise_management::PolicyOptions(*from.policy_options_);
  } else {
    policy_options_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.IntegerPolicyProto)
}

void IntegerPolicyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  ::memset(&policy_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&policy_options_)) + sizeof(value_));
}

IntegerPolicyProto::~IntegerPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.IntegerPolicyProto)
  SharedDtor();
}

void IntegerPolicyProto::SharedDtor() {
  if (this != internal_default_instance()) delete policy_options_;
}

void IntegerPolicyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerPolicyProto& IntegerPolicyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void IntegerPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.IntegerPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(policy_options_ != nullptr);
    policy_options_->Clear();
  }
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntegerPolicyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_policy_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntegerPolicyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.IntegerPolicyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.IntegerPolicyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.IntegerPolicyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntegerPolicyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.IntegerPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::policy_options(this), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.IntegerPolicyProto)
}

size_t IntegerPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.IntegerPolicyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_options_);
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IntegerPolicyProto*>(
      &from));
}

void IntegerPolicyProto::MergeFrom(const IntegerPolicyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.IntegerPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(from.policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntegerPolicyProto::CopyFrom(const IntegerPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.IntegerPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerPolicyProto::IsInitialized() const {
  return true;
}

void IntegerPolicyProto::InternalSwap(IntegerPolicyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(policy_options_, other->policy_options_);
  swap(value_, other->value_);
}

std::string IntegerPolicyProto::GetTypeName() const {
  return "enterprise_management.IntegerPolicyProto";
}


// ===================================================================

void StringPolicyProto::InitAsDefaultInstance() {
  ::enterprise_management::_StringPolicyProto_default_instance_._instance.get_mutable()->policy_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
}
class StringPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StringPolicyProto>()._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const StringPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::PolicyOptions&
StringPolicyProto::_Internal::policy_options(const StringPolicyProto* msg) {
  return *msg->policy_options_;
}
StringPolicyProto::StringPolicyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.StringPolicyProto)
}
StringPolicyProto::StringPolicyProto(const StringPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_policy_options()) {
    policy_options_ = new ::enterprise_management::PolicyOptions(*from.policy_options_);
  } else {
    policy_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringPolicyProto)
}

void StringPolicyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_options_ = nullptr;
}

StringPolicyProto::~StringPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringPolicyProto)
  SharedDtor();
}

void StringPolicyProto::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_options_;
}

void StringPolicyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringPolicyProto& StringPolicyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void StringPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(policy_options_ != nullptr);
      policy_options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringPolicyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_policy_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringPolicyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.StringPolicyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.StringPolicyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.StringPolicyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringPolicyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.StringPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::policy_options(this), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.StringPolicyProto)
}

size_t StringPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringPolicyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_options_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringPolicyProto*>(
      &from));
}

void StringPolicyProto::MergeFrom(const StringPolicyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(from.policy_options());
    }
  }
}

void StringPolicyProto::CopyFrom(const StringPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPolicyProto::IsInitialized() const {
  return true;
}

void StringPolicyProto::InternalSwap(StringPolicyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(policy_options_, other->policy_options_);
}

std::string StringPolicyProto::GetTypeName() const {
  return "enterprise_management.StringPolicyProto";
}


// ===================================================================

void StringListPolicyProto::InitAsDefaultInstance() {
  ::enterprise_management::_StringListPolicyProto_default_instance_._instance.get_mutable()->policy_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_StringListPolicyProto_default_instance_._instance.get_mutable()->value_ = const_cast< ::enterprise_management::StringList*>(
      ::enterprise_management::StringList::internal_default_instance());
}
class StringListPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StringListPolicyProto>()._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const StringListPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::StringList& value(const StringListPolicyProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
StringListPolicyProto::_Internal::policy_options(const StringListPolicyProto* msg) {
  return *msg->policy_options_;
}
const ::enterprise_management::StringList&
StringListPolicyProto::_Internal::value(const StringListPolicyProto* msg) {
  return *msg->value_;
}
StringListPolicyProto::StringListPolicyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.StringListPolicyProto)
}
StringListPolicyProto::StringListPolicyProto(const StringListPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy_options()) {
    policy_options_ = new ::enterprise_management::PolicyOptions(*from.policy_options_);
  } else {
    policy_options_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::enterprise_management::StringList(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringListPolicyProto)
}

void StringListPolicyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  ::memset(&policy_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&policy_options_)) + sizeof(value_));
}

StringListPolicyProto::~StringListPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringListPolicyProto)
  SharedDtor();
}

void StringListPolicyProto::SharedDtor() {
  if (this != internal_default_instance()) delete policy_options_;
  if (this != internal_default_instance()) delete value_;
}

void StringListPolicyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringListPolicyProto& StringListPolicyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base);
  return *internal_default_instance();
}


void StringListPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringListPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(policy_options_ != nullptr);
      policy_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringListPolicyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_policy_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringList value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringListPolicyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.StringListPolicyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringList value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.StringListPolicyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.StringListPolicyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringListPolicyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.StringListPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::policy_options(this), output);
  }

  // optional .enterprise_management.StringList value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::value(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.StringListPolicyProto)
}

size_t StringListPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringListPolicyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_options_);
    }

    // optional .enterprise_management.StringList value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringListPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringListPolicyProto*>(
      &from));
}

void StringListPolicyProto::MergeFrom(const StringListPolicyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringListPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(from.policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::enterprise_management::StringList::MergeFrom(from.value());
    }
  }
}

void StringListPolicyProto::CopyFrom(const StringListPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringListPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringListPolicyProto::IsInitialized() const {
  return true;
}

void StringListPolicyProto::InternalSwap(StringListPolicyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(policy_options_, other->policy_options_);
  swap(value_, other->value_);
}

std::string StringListPolicyProto::GetTypeName() const {
  return "enterprise_management.StringListPolicyProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::StringList* Arena::CreateMaybeMessage< ::enterprise_management::StringList >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyOptions* Arena::CreateMaybeMessage< ::enterprise_management::PolicyOptions >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::PolicyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BooleanPolicyProto* Arena::CreateMaybeMessage< ::enterprise_management::BooleanPolicyProto >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::BooleanPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::IntegerPolicyProto* Arena::CreateMaybeMessage< ::enterprise_management::IntegerPolicyProto >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::IntegerPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StringPolicyProto* Arena::CreateMaybeMessage< ::enterprise_management::StringPolicyProto >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::StringPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StringListPolicyProto* Arena::CreateMaybeMessage< ::enterprise_management::StringListPolicyProto >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::StringListPolicyProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
