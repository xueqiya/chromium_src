// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: affiliation_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_affiliation_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_affiliation_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace affiliation_pb {
class Affiliation;
class AffiliationDefaultTypeInternal;
extern AffiliationDefaultTypeInternal _Affiliation_default_instance_;
class BrandingInfo;
class BrandingInfoDefaultTypeInternal;
extern BrandingInfoDefaultTypeInternal _BrandingInfo_default_instance_;
class Facet;
class FacetDefaultTypeInternal;
extern FacetDefaultTypeInternal _Facet_default_instance_;
class LookupAffiliationMask;
class LookupAffiliationMaskDefaultTypeInternal;
extern LookupAffiliationMaskDefaultTypeInternal _LookupAffiliationMask_default_instance_;
class LookupAffiliationRequest;
class LookupAffiliationRequestDefaultTypeInternal;
extern LookupAffiliationRequestDefaultTypeInternal _LookupAffiliationRequest_default_instance_;
class LookupAffiliationResponse;
class LookupAffiliationResponseDefaultTypeInternal;
extern LookupAffiliationResponseDefaultTypeInternal _LookupAffiliationResponse_default_instance_;
}  // namespace affiliation_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::affiliation_pb::Affiliation* Arena::CreateMaybeMessage<::affiliation_pb::Affiliation>(Arena*);
template<> ::affiliation_pb::BrandingInfo* Arena::CreateMaybeMessage<::affiliation_pb::BrandingInfo>(Arena*);
template<> ::affiliation_pb::Facet* Arena::CreateMaybeMessage<::affiliation_pb::Facet>(Arena*);
template<> ::affiliation_pb::LookupAffiliationMask* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationMask>(Arena*);
template<> ::affiliation_pb::LookupAffiliationRequest* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationRequest>(Arena*);
template<> ::affiliation_pb::LookupAffiliationResponse* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace affiliation_pb {

// ===================================================================

class Affiliation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.Affiliation) */ {
 public:
  Affiliation();
  virtual ~Affiliation();

  Affiliation(const Affiliation& from);
  Affiliation(Affiliation&& from) noexcept
    : Affiliation() {
    *this = ::std::move(from);
  }

  inline Affiliation& operator=(const Affiliation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Affiliation& operator=(Affiliation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Affiliation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Affiliation* internal_default_instance() {
    return reinterpret_cast<const Affiliation*>(
               &_Affiliation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Affiliation& a, Affiliation& b) {
    a.Swap(&b);
  }
  inline void Swap(Affiliation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Affiliation* New() const final {
    return CreateMaybeMessage<Affiliation>(nullptr);
  }

  Affiliation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Affiliation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Affiliation& from);
  void MergeFrom(const Affiliation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Affiliation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.Affiliation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacetFieldNumber = 1,
  };
  // repeated .affiliation_pb.Facet facet = 1;
  int facet_size() const;
  void clear_facet();
  ::affiliation_pb::Facet* mutable_facet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
      mutable_facet();
  const ::affiliation_pb::Facet& facet(int index) const;
  ::affiliation_pb::Facet* add_facet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
      facet() const;

  // @@protoc_insertion_point(class_scope:affiliation_pb.Affiliation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet > facet_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Facet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.Facet) */ {
 public:
  Facet();
  virtual ~Facet();

  Facet(const Facet& from);
  Facet(Facet&& from) noexcept
    : Facet() {
    *this = ::std::move(from);
  }

  inline Facet& operator=(const Facet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Facet& operator=(Facet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Facet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Facet* internal_default_instance() {
    return reinterpret_cast<const Facet*>(
               &_Facet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Facet& a, Facet& b) {
    a.Swap(&b);
  }
  inline void Swap(Facet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Facet* New() const final {
    return CreateMaybeMessage<Facet>(nullptr);
  }

  Facet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Facet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Facet& from);
  void MergeFrom(const Facet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Facet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.Facet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBrandingInfoFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .affiliation_pb.BrandingInfo branding_info = 2;
  bool has_branding_info() const;
  void clear_branding_info();
  const ::affiliation_pb::BrandingInfo& branding_info() const;
  ::affiliation_pb::BrandingInfo* release_branding_info();
  ::affiliation_pb::BrandingInfo* mutable_branding_info();
  void set_allocated_branding_info(::affiliation_pb::BrandingInfo* branding_info);

  // @@protoc_insertion_point(class_scope:affiliation_pb.Facet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::affiliation_pb::BrandingInfo* branding_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class BrandingInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.BrandingInfo) */ {
 public:
  BrandingInfo();
  virtual ~BrandingInfo();

  BrandingInfo(const BrandingInfo& from);
  BrandingInfo(BrandingInfo&& from) noexcept
    : BrandingInfo() {
    *this = ::std::move(from);
  }

  inline BrandingInfo& operator=(const BrandingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrandingInfo& operator=(BrandingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BrandingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrandingInfo* internal_default_instance() {
    return reinterpret_cast<const BrandingInfo*>(
               &_BrandingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BrandingInfo& a, BrandingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BrandingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrandingInfo* New() const final {
    return CreateMaybeMessage<BrandingInfo>(nullptr);
  }

  BrandingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrandingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BrandingInfo& from);
  void MergeFrom(const BrandingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrandingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.BrandingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIconUrlFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string icon_url = 2;
  bool has_icon_url() const;
  void clear_icon_url();
  const std::string& icon_url() const;
  void set_icon_url(const std::string& value);
  void set_icon_url(std::string&& value);
  void set_icon_url(const char* value);
  void set_icon_url(const char* value, size_t size);
  std::string* mutable_icon_url();
  std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);

  // @@protoc_insertion_point(class_scope:affiliation_pb.BrandingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationMask :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationMask) */ {
 public:
  LookupAffiliationMask();
  virtual ~LookupAffiliationMask();

  LookupAffiliationMask(const LookupAffiliationMask& from);
  LookupAffiliationMask(LookupAffiliationMask&& from) noexcept
    : LookupAffiliationMask() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationMask& operator=(const LookupAffiliationMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationMask& operator=(LookupAffiliationMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LookupAffiliationMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAffiliationMask* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationMask*>(
               &_LookupAffiliationMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LookupAffiliationMask& a, LookupAffiliationMask& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAffiliationMask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAffiliationMask* New() const final {
    return CreateMaybeMessage<LookupAffiliationMask>(nullptr);
  }

  LookupAffiliationMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAffiliationMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAffiliationMask& from);
  void MergeFrom(const LookupAffiliationMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationMask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 2,
    kBrandingInfoFieldNumber = 1,
  };
  // optional string locale = 2;
  bool has_locale() const;
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);

  // optional bool branding_info = 1;
  bool has_branding_info() const;
  void clear_branding_info();
  bool branding_info() const;
  void set_branding_info(bool value);

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationMask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  bool branding_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationRequest) */ {
 public:
  LookupAffiliationRequest();
  virtual ~LookupAffiliationRequest();

  LookupAffiliationRequest(const LookupAffiliationRequest& from);
  LookupAffiliationRequest(LookupAffiliationRequest&& from) noexcept
    : LookupAffiliationRequest() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationRequest& operator=(const LookupAffiliationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationRequest& operator=(LookupAffiliationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LookupAffiliationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAffiliationRequest* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationRequest*>(
               &_LookupAffiliationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LookupAffiliationRequest& a, LookupAffiliationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAffiliationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAffiliationRequest* New() const final {
    return CreateMaybeMessage<LookupAffiliationRequest>(nullptr);
  }

  LookupAffiliationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAffiliationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAffiliationRequest& from);
  void MergeFrom(const LookupAffiliationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacetFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // repeated string facet = 1;
  int facet_size() const;
  void clear_facet();
  const std::string& facet(int index) const;
  std::string* mutable_facet(int index);
  void set_facet(int index, const std::string& value);
  void set_facet(int index, std::string&& value);
  void set_facet(int index, const char* value);
  void set_facet(int index, const char* value, size_t size);
  std::string* add_facet();
  void add_facet(const std::string& value);
  void add_facet(std::string&& value);
  void add_facet(const char* value);
  void add_facet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& facet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_facet();

  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  bool has_mask() const;
  void clear_mask();
  const ::affiliation_pb::LookupAffiliationMask& mask() const;
  ::affiliation_pb::LookupAffiliationMask* release_mask();
  ::affiliation_pb::LookupAffiliationMask* mutable_mask();
  void set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask);

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> facet_;
  ::affiliation_pb::LookupAffiliationMask* mask_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationResponse) */ {
 public:
  LookupAffiliationResponse();
  virtual ~LookupAffiliationResponse();

  LookupAffiliationResponse(const LookupAffiliationResponse& from);
  LookupAffiliationResponse(LookupAffiliationResponse&& from) noexcept
    : LookupAffiliationResponse() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationResponse& operator=(const LookupAffiliationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationResponse& operator=(LookupAffiliationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LookupAffiliationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAffiliationResponse* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationResponse*>(
               &_LookupAffiliationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LookupAffiliationResponse& a, LookupAffiliationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAffiliationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAffiliationResponse* New() const final {
    return CreateMaybeMessage<LookupAffiliationResponse>(nullptr);
  }

  LookupAffiliationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAffiliationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAffiliationResponse& from);
  void MergeFrom(const LookupAffiliationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffiliationFieldNumber = 1,
  };
  // repeated .affiliation_pb.Affiliation affiliation = 1;
  int affiliation_size() const;
  void clear_affiliation();
  ::affiliation_pb::Affiliation* mutable_affiliation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
      mutable_affiliation();
  const ::affiliation_pb::Affiliation& affiliation(int index) const;
  ::affiliation_pb::Affiliation* add_affiliation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
      affiliation() const;

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation > affiliation_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Affiliation

// repeated .affiliation_pb.Facet facet = 1;
inline int Affiliation::facet_size() const {
  return facet_.size();
}
inline void Affiliation::clear_facet() {
  facet_.Clear();
}
inline ::affiliation_pb::Facet* Affiliation::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Affiliation.facet)
  return facet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
Affiliation::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.Affiliation.facet)
  return &facet_;
}
inline const ::affiliation_pb::Facet& Affiliation::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Affiliation.facet)
  return facet_.Get(index);
}
inline ::affiliation_pb::Facet* Affiliation::add_facet() {
  // @@protoc_insertion_point(field_add:affiliation_pb.Affiliation.facet)
  return facet_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
Affiliation::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.Affiliation.facet)
  return facet_;
}

// -------------------------------------------------------------------

// Facet

// optional string id = 1;
inline bool Facet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Facet::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Facet::id() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.id)
  return id_.GetNoArena();
}
inline void Facet::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.Facet.id)
}
inline void Facet::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:affiliation_pb.Facet.id)
}
inline void Facet::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.Facet.id)
}
inline void Facet::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.Facet.id)
}
inline std::string* Facet::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Facet::release_id() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Facet::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.id)
}

// optional .affiliation_pb.BrandingInfo branding_info = 2;
inline bool Facet::has_branding_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Facet::clear_branding_info() {
  if (branding_info_ != nullptr) branding_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::affiliation_pb::BrandingInfo& Facet::branding_info() const {
  const ::affiliation_pb::BrandingInfo* p = branding_info_;
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.branding_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::affiliation_pb::BrandingInfo*>(
      &::affiliation_pb::_BrandingInfo_default_instance_);
}
inline ::affiliation_pb::BrandingInfo* Facet::release_branding_info() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.branding_info)
  _has_bits_[0] &= ~0x00000002u;
  ::affiliation_pb::BrandingInfo* temp = branding_info_;
  branding_info_ = nullptr;
  return temp;
}
inline ::affiliation_pb::BrandingInfo* Facet::mutable_branding_info() {
  _has_bits_[0] |= 0x00000002u;
  if (branding_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::BrandingInfo>(GetArenaNoVirtual());
    branding_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.branding_info)
  return branding_info_;
}
inline void Facet::set_allocated_branding_info(::affiliation_pb::BrandingInfo* branding_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete branding_info_;
  }
  if (branding_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      branding_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, branding_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branding_info_ = branding_info;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.branding_info)
}

// -------------------------------------------------------------------

// BrandingInfo

// optional string name = 1;
inline bool BrandingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrandingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BrandingInfo::name() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.name)
  return name_.GetNoArena();
}
inline void BrandingInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.name)
}
inline void BrandingInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:affiliation_pb.BrandingInfo.name)
}
inline void BrandingInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.BrandingInfo.name)
}
inline void BrandingInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.BrandingInfo.name)
}
inline std::string* BrandingInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BrandingInfo::release_name() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BrandingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.name)
}

// optional string icon_url = 2;
inline bool BrandingInfo::has_icon_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrandingInfo::clear_icon_url() {
  icon_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BrandingInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.icon_url)
  return icon_url_.GetNoArena();
}
inline void BrandingInfo::set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.icon_url)
}
inline void BrandingInfo::set_icon_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:affiliation_pb.BrandingInfo.icon_url)
}
inline void BrandingInfo::set_icon_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.BrandingInfo.icon_url)
}
inline void BrandingInfo::set_icon_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.BrandingInfo.icon_url)
}
inline std::string* BrandingInfo::mutable_icon_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.icon_url)
  return icon_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BrandingInfo::release_icon_url() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.icon_url)
  if (!has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BrandingInfo::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_url);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.icon_url)
}

// -------------------------------------------------------------------

// LookupAffiliationMask

// optional bool branding_info = 1;
inline bool LookupAffiliationMask::has_branding_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LookupAffiliationMask::clear_branding_info() {
  branding_info_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LookupAffiliationMask::branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.branding_info)
  return branding_info_;
}
inline void LookupAffiliationMask::set_branding_info(bool value) {
  _has_bits_[0] |= 0x00000002u;
  branding_info_ = value;
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.branding_info)
}

// optional string locale = 2;
inline bool LookupAffiliationMask::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LookupAffiliationMask::clear_locale() {
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LookupAffiliationMask::locale() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.locale)
  return locale_.GetNoArena();
}
inline void LookupAffiliationMask::set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.locale)
}
inline void LookupAffiliationMask::set_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:affiliation_pb.LookupAffiliationMask.locale)
}
inline void LookupAffiliationMask::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.LookupAffiliationMask.locale)
}
inline void LookupAffiliationMask::set_locale(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.LookupAffiliationMask.locale)
}
inline std::string* LookupAffiliationMask::mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationMask.locale)
  return locale_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookupAffiliationMask::release_locale() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationMask.locale)
  if (!has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return locale_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookupAffiliationMask::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationMask.locale)
}

// -------------------------------------------------------------------

// LookupAffiliationRequest

// repeated string facet = 1;
inline int LookupAffiliationRequest::facet_size() const {
  return facet_.size();
}
inline void LookupAffiliationRequest::clear_facet() {
  facet_.Clear();
}
inline const std::string& LookupAffiliationRequest::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Get(index);
}
inline std::string* LookupAffiliationRequest::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Mutable(index);
}
inline void LookupAffiliationRequest::set_facet(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationRequest.facet)
  facet_.Mutable(index)->assign(value);
}
inline void LookupAffiliationRequest::set_facet(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationRequest.facet)
  facet_.Mutable(index)->assign(std::move(value));
}
inline void LookupAffiliationRequest::set_facet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::set_facet(int index, const char* value, size_t size) {
  facet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
inline std::string* LookupAffiliationRequest::add_facet() {
  // @@protoc_insertion_point(field_add_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Add();
}
inline void LookupAffiliationRequest::add_facet(const std::string& value) {
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(std::string&& value) {
  facet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(const char* value, size_t size) {
  facet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupAffiliationRequest::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupAffiliationRequest::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationRequest.facet)
  return &facet_;
}

// optional .affiliation_pb.LookupAffiliationMask mask = 2;
inline bool LookupAffiliationRequest::has_mask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LookupAffiliationRequest::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationRequest::mask() const {
  const ::affiliation_pb::LookupAffiliationMask* p = mask_;
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::affiliation_pb::LookupAffiliationMask*>(
      &::affiliation_pb::_LookupAffiliationMask_default_instance_);
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::release_mask() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationRequest.mask)
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::mutable_mask() {
  _has_bits_[0] |= 0x00000001u;
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::LookupAffiliationMask>(GetArenaNoVirtual());
    mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.mask)
  return mask_;
}
inline void LookupAffiliationRequest::set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationRequest.mask)
}

// -------------------------------------------------------------------

// LookupAffiliationResponse

// repeated .affiliation_pb.Affiliation affiliation = 1;
inline int LookupAffiliationResponse::affiliation_size() const {
  return affiliation_.size();
}
inline void LookupAffiliationResponse::clear_affiliation() {
  affiliation_.Clear();
}
inline ::affiliation_pb::Affiliation* LookupAffiliationResponse::mutable_affiliation(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
LookupAffiliationResponse::mutable_affiliation() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return &affiliation_;
}
inline const ::affiliation_pb::Affiliation& LookupAffiliationResponse::affiliation(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Get(index);
}
inline ::affiliation_pb::Affiliation* LookupAffiliationResponse::add_affiliation() {
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
LookupAffiliationResponse::affiliation() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace affiliation_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto
