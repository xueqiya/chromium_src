// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leak_detection_api.proto

#include "leak_detection_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {
class LookupSingleLeakRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupSingleLeakRequest> _instance;
} _LookupSingleLeakRequest_default_instance_;
class LookupSingleLeakResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupSingleLeakResponse> _instance;
} _LookupSingleLeakResponse_default_instance_;
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
static void InitDefaultsscc_info_LookupSingleLeakRequest_leak_5fdetection_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::internal::identity::passwords::leak::check::v1::_LookupSingleLeakRequest_default_instance_;
    new (ptr) ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupSingleLeakRequest_leak_5fdetection_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LookupSingleLeakRequest_leak_5fdetection_5fapi_2eproto}, {}};

static void InitDefaultsscc_info_LookupSingleLeakResponse_leak_5fdetection_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::internal::identity::passwords::leak::check::v1::_LookupSingleLeakResponse_default_instance_;
    new (ptr) ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupSingleLeakResponse_leak_5fdetection_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LookupSingleLeakResponse_leak_5fdetection_5fapi_2eproto}, {}};

namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {

// ===================================================================

void LookupSingleLeakRequest::InitAsDefaultInstance() {
}
class LookupSingleLeakRequest::_Internal {
 public:
};

LookupSingleLeakRequest::LookupSingleLeakRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
}
LookupSingleLeakRequest::LookupSingleLeakRequest(const LookupSingleLeakRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_hash_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.username_hash_prefix().empty()) {
    username_hash_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_hash_prefix_);
  }
  encrypted_lookup_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.encrypted_lookup_hash().empty()) {
    encrypted_lookup_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_lookup_hash_);
  }
  username_hash_prefix_length_ = from.username_hash_prefix_length_;
  // @@protoc_insertion_point(copy_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
}

void LookupSingleLeakRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupSingleLeakRequest_leak_5fdetection_5fapi_2eproto.base);
  username_hash_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_lookup_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_hash_prefix_length_ = 0u;
}

LookupSingleLeakRequest::~LookupSingleLeakRequest() {
  // @@protoc_insertion_point(destructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  SharedDtor();
}

void LookupSingleLeakRequest::SharedDtor() {
  username_hash_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_lookup_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupSingleLeakRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupSingleLeakRequest& LookupSingleLeakRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupSingleLeakRequest_leak_5fdetection_5fapi_2eproto.base);
  return *internal_default_instance();
}


void LookupSingleLeakRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_hash_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_lookup_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_hash_prefix_length_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LookupSingleLeakRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes username_hash_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_username_hash_prefix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 username_hash_prefix_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          username_hash_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_lookup_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encrypted_lookup_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LookupSingleLeakRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes username_hash_prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username_hash_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 username_hash_prefix_length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &username_hash_prefix_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes encrypted_lookup_hash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_lookup_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LookupSingleLeakRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username_hash_prefix = 1;
  if (this->username_hash_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username_hash_prefix(), output);
  }

  // uint32 username_hash_prefix_length = 2;
  if (this->username_hash_prefix_length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->username_hash_prefix_length(), output);
  }

  // bytes encrypted_lookup_hash = 3;
  if (this->encrypted_lookup_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encrypted_lookup_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
}

size_t LookupSingleLeakRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username_hash_prefix = 1;
  if (this->username_hash_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->username_hash_prefix());
  }

  // bytes encrypted_lookup_hash = 3;
  if (this->encrypted_lookup_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encrypted_lookup_hash());
  }

  // uint32 username_hash_prefix_length = 2;
  if (this->username_hash_prefix_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->username_hash_prefix_length());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupSingleLeakRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupSingleLeakRequest*>(
      &from));
}

void LookupSingleLeakRequest::MergeFrom(const LookupSingleLeakRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username_hash_prefix().size() > 0) {

    username_hash_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_hash_prefix_);
  }
  if (from.encrypted_lookup_hash().size() > 0) {

    encrypted_lookup_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_lookup_hash_);
  }
  if (from.username_hash_prefix_length() != 0) {
    set_username_hash_prefix_length(from.username_hash_prefix_length());
  }
}

void LookupSingleLeakRequest::CopyFrom(const LookupSingleLeakRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSingleLeakRequest::IsInitialized() const {
  return true;
}

void LookupSingleLeakRequest::InternalSwap(LookupSingleLeakRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_hash_prefix_.Swap(&other->username_hash_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_lookup_hash_.Swap(&other->encrypted_lookup_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(username_hash_prefix_length_, other->username_hash_prefix_length_);
}

std::string LookupSingleLeakRequest::GetTypeName() const {
  return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest";
}


// ===================================================================

void LookupSingleLeakResponse::InitAsDefaultInstance() {
}
class LookupSingleLeakResponse::_Internal {
 public:
};

LookupSingleLeakResponse::LookupSingleLeakResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
}
LookupSingleLeakResponse::LookupSingleLeakResponse(const LookupSingleLeakResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      encrypted_leak_match_prefix_(from.encrypted_leak_match_prefix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reencrypted_lookup_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reencrypted_lookup_hash().empty()) {
    reencrypted_lookup_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reencrypted_lookup_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
}

void LookupSingleLeakResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupSingleLeakResponse_leak_5fdetection_5fapi_2eproto.base);
  reencrypted_lookup_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LookupSingleLeakResponse::~LookupSingleLeakResponse() {
  // @@protoc_insertion_point(destructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  SharedDtor();
}

void LookupSingleLeakResponse::SharedDtor() {
  reencrypted_lookup_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupSingleLeakResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupSingleLeakResponse& LookupSingleLeakResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupSingleLeakResponse_leak_5fdetection_5fapi_2eproto.base);
  return *internal_default_instance();
}


void LookupSingleLeakResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_leak_match_prefix_.Clear();
  reencrypted_lookup_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LookupSingleLeakResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes encrypted_leak_match_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_encrypted_leak_match_prefix(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bytes reencrypted_lookup_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_reencrypted_lookup_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LookupSingleLeakResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes encrypted_leak_match_prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_encrypted_leak_match_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes reencrypted_lookup_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reencrypted_lookup_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LookupSingleLeakResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes encrypted_leak_match_prefix = 1;
  for (int i = 0, n = this->encrypted_leak_match_prefix_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->encrypted_leak_match_prefix(i), output);
  }

  // bytes reencrypted_lookup_hash = 2;
  if (this->reencrypted_lookup_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reencrypted_lookup_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
}

size_t LookupSingleLeakResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes encrypted_leak_match_prefix = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->encrypted_leak_match_prefix_size());
  for (int i = 0, n = this->encrypted_leak_match_prefix_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->encrypted_leak_match_prefix(i));
  }

  // bytes reencrypted_lookup_hash = 2;
  if (this->reencrypted_lookup_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->reencrypted_lookup_hash());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupSingleLeakResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupSingleLeakResponse*>(
      &from));
}

void LookupSingleLeakResponse::MergeFrom(const LookupSingleLeakResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_leak_match_prefix_.MergeFrom(from.encrypted_leak_match_prefix_);
  if (from.reencrypted_lookup_hash().size() > 0) {

    reencrypted_lookup_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reencrypted_lookup_hash_);
  }
}

void LookupSingleLeakResponse::CopyFrom(const LookupSingleLeakResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSingleLeakResponse::IsInitialized() const {
  return true;
}

void LookupSingleLeakResponse::InternalSwap(LookupSingleLeakResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encrypted_leak_match_prefix_.InternalSwap(CastToBase(&other->encrypted_leak_match_prefix_));
  reencrypted_lookup_hash_.Swap(&other->reencrypted_lookup_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string LookupSingleLeakResponse::GetTypeName() const {
  return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest* Arena::CreateMaybeMessage< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse* Arena::CreateMaybeMessage< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
