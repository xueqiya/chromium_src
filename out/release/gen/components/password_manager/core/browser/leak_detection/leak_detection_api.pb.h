// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leak_detection_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_leak_5fdetection_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_leak_5fdetection_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {
class LookupSingleLeakRequest;
class LookupSingleLeakRequestDefaultTypeInternal;
extern LookupSingleLeakRequestDefaultTypeInternal _LookupSingleLeakRequest_default_instance_;
class LookupSingleLeakResponse;
class LookupSingleLeakResponseDefaultTypeInternal;
extern LookupSingleLeakResponseDefaultTypeInternal _LookupSingleLeakResponse_default_instance_;
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest* Arena::CreateMaybeMessage<::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest>(Arena*);
template<> ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse* Arena::CreateMaybeMessage<::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {

// ===================================================================

class LookupSingleLeakRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest) */ {
 public:
  LookupSingleLeakRequest();
  virtual ~LookupSingleLeakRequest();

  LookupSingleLeakRequest(const LookupSingleLeakRequest& from);
  LookupSingleLeakRequest(LookupSingleLeakRequest&& from) noexcept
    : LookupSingleLeakRequest() {
    *this = ::std::move(from);
  }

  inline LookupSingleLeakRequest& operator=(const LookupSingleLeakRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupSingleLeakRequest& operator=(LookupSingleLeakRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupSingleLeakRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupSingleLeakRequest* internal_default_instance() {
    return reinterpret_cast<const LookupSingleLeakRequest*>(
               &_LookupSingleLeakRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LookupSingleLeakRequest& a, LookupSingleLeakRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupSingleLeakRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupSingleLeakRequest* New() const final {
    return CreateMaybeMessage<LookupSingleLeakRequest>(nullptr);
  }

  LookupSingleLeakRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupSingleLeakRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupSingleLeakRequest& from);
  void MergeFrom(const LookupSingleLeakRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupSingleLeakRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameHashPrefixFieldNumber = 1,
    kEncryptedLookupHashFieldNumber = 3,
    kUsernameHashPrefixLengthFieldNumber = 2,
  };
  // bytes username_hash_prefix = 1;
  void clear_username_hash_prefix();
  const std::string& username_hash_prefix() const;
  void set_username_hash_prefix(const std::string& value);
  void set_username_hash_prefix(std::string&& value);
  void set_username_hash_prefix(const char* value);
  void set_username_hash_prefix(const void* value, size_t size);
  std::string* mutable_username_hash_prefix();
  std::string* release_username_hash_prefix();
  void set_allocated_username_hash_prefix(std::string* username_hash_prefix);

  // bytes encrypted_lookup_hash = 3;
  void clear_encrypted_lookup_hash();
  const std::string& encrypted_lookup_hash() const;
  void set_encrypted_lookup_hash(const std::string& value);
  void set_encrypted_lookup_hash(std::string&& value);
  void set_encrypted_lookup_hash(const char* value);
  void set_encrypted_lookup_hash(const void* value, size_t size);
  std::string* mutable_encrypted_lookup_hash();
  std::string* release_encrypted_lookup_hash();
  void set_allocated_encrypted_lookup_hash(std::string* encrypted_lookup_hash);

  // uint32 username_hash_prefix_length = 2;
  void clear_username_hash_prefix_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 username_hash_prefix_length() const;
  void set_username_hash_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_hash_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_lookup_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 username_hash_prefix_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_leak_5fdetection_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupSingleLeakResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse) */ {
 public:
  LookupSingleLeakResponse();
  virtual ~LookupSingleLeakResponse();

  LookupSingleLeakResponse(const LookupSingleLeakResponse& from);
  LookupSingleLeakResponse(LookupSingleLeakResponse&& from) noexcept
    : LookupSingleLeakResponse() {
    *this = ::std::move(from);
  }

  inline LookupSingleLeakResponse& operator=(const LookupSingleLeakResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupSingleLeakResponse& operator=(LookupSingleLeakResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupSingleLeakResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupSingleLeakResponse* internal_default_instance() {
    return reinterpret_cast<const LookupSingleLeakResponse*>(
               &_LookupSingleLeakResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LookupSingleLeakResponse& a, LookupSingleLeakResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupSingleLeakResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupSingleLeakResponse* New() const final {
    return CreateMaybeMessage<LookupSingleLeakResponse>(nullptr);
  }

  LookupSingleLeakResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupSingleLeakResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupSingleLeakResponse& from);
  void MergeFrom(const LookupSingleLeakResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupSingleLeakResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedLeakMatchPrefixFieldNumber = 1,
    kReencryptedLookupHashFieldNumber = 2,
  };
  // repeated bytes encrypted_leak_match_prefix = 1;
  int encrypted_leak_match_prefix_size() const;
  void clear_encrypted_leak_match_prefix();
  const std::string& encrypted_leak_match_prefix(int index) const;
  std::string* mutable_encrypted_leak_match_prefix(int index);
  void set_encrypted_leak_match_prefix(int index, const std::string& value);
  void set_encrypted_leak_match_prefix(int index, std::string&& value);
  void set_encrypted_leak_match_prefix(int index, const char* value);
  void set_encrypted_leak_match_prefix(int index, const void* value, size_t size);
  std::string* add_encrypted_leak_match_prefix();
  void add_encrypted_leak_match_prefix(const std::string& value);
  void add_encrypted_leak_match_prefix(std::string&& value);
  void add_encrypted_leak_match_prefix(const char* value);
  void add_encrypted_leak_match_prefix(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& encrypted_leak_match_prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_encrypted_leak_match_prefix();

  // bytes reencrypted_lookup_hash = 2;
  void clear_reencrypted_lookup_hash();
  const std::string& reencrypted_lookup_hash() const;
  void set_reencrypted_lookup_hash(const std::string& value);
  void set_reencrypted_lookup_hash(std::string&& value);
  void set_reencrypted_lookup_hash(const char* value);
  void set_reencrypted_lookup_hash(const void* value, size_t size);
  std::string* mutable_reencrypted_lookup_hash();
  std::string* release_reencrypted_lookup_hash();
  void set_allocated_reencrypted_lookup_hash(std::string* reencrypted_lookup_hash);

  // @@protoc_insertion_point(class_scope:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> encrypted_leak_match_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reencrypted_lookup_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_leak_5fdetection_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LookupSingleLeakRequest

// bytes username_hash_prefix = 1;
inline void LookupSingleLeakRequest::clear_username_hash_prefix() {
  username_hash_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LookupSingleLeakRequest::username_hash_prefix() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  return username_hash_prefix_.GetNoArena();
}
inline void LookupSingleLeakRequest::set_username_hash_prefix(const std::string& value) {
  
  username_hash_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}
inline void LookupSingleLeakRequest::set_username_hash_prefix(std::string&& value) {
  
  username_hash_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}
inline void LookupSingleLeakRequest::set_username_hash_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_hash_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}
inline void LookupSingleLeakRequest::set_username_hash_prefix(const void* value, size_t size) {
  
  username_hash_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}
inline std::string* LookupSingleLeakRequest::mutable_username_hash_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  return username_hash_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookupSingleLeakRequest::release_username_hash_prefix() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  
  return username_hash_prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookupSingleLeakRequest::set_allocated_username_hash_prefix(std::string* username_hash_prefix) {
  if (username_hash_prefix != nullptr) {
    
  } else {
    
  }
  username_hash_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username_hash_prefix);
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}

// uint32 username_hash_prefix_length = 2;
inline void LookupSingleLeakRequest::clear_username_hash_prefix_length() {
  username_hash_prefix_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LookupSingleLeakRequest::username_hash_prefix_length() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix_length)
  return username_hash_prefix_length_;
}
inline void LookupSingleLeakRequest::set_username_hash_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  username_hash_prefix_length_ = value;
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix_length)
}

// bytes encrypted_lookup_hash = 3;
inline void LookupSingleLeakRequest::clear_encrypted_lookup_hash() {
  encrypted_lookup_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LookupSingleLeakRequest::encrypted_lookup_hash() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  return encrypted_lookup_hash_.GetNoArena();
}
inline void LookupSingleLeakRequest::set_encrypted_lookup_hash(const std::string& value) {
  
  encrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}
inline void LookupSingleLeakRequest::set_encrypted_lookup_hash(std::string&& value) {
  
  encrypted_lookup_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}
inline void LookupSingleLeakRequest::set_encrypted_lookup_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}
inline void LookupSingleLeakRequest::set_encrypted_lookup_hash(const void* value, size_t size) {
  
  encrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}
inline std::string* LookupSingleLeakRequest::mutable_encrypted_lookup_hash() {
  
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  return encrypted_lookup_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookupSingleLeakRequest::release_encrypted_lookup_hash() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  
  return encrypted_lookup_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookupSingleLeakRequest::set_allocated_encrypted_lookup_hash(std::string* encrypted_lookup_hash) {
  if (encrypted_lookup_hash != nullptr) {
    
  } else {
    
  }
  encrypted_lookup_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_lookup_hash);
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}

// -------------------------------------------------------------------

// LookupSingleLeakResponse

// repeated bytes encrypted_leak_match_prefix = 1;
inline int LookupSingleLeakResponse::encrypted_leak_match_prefix_size() const {
  return encrypted_leak_match_prefix_.size();
}
inline void LookupSingleLeakResponse::clear_encrypted_leak_match_prefix() {
  encrypted_leak_match_prefix_.Clear();
}
inline const std::string& LookupSingleLeakResponse::encrypted_leak_match_prefix(int index) const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_.Get(index);
}
inline std::string* LookupSingleLeakResponse::mutable_encrypted_leak_match_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_.Mutable(index);
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  encrypted_leak_match_prefix_.Mutable(index)->assign(value);
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  encrypted_leak_match_prefix_.Mutable(index)->assign(std::move(value));
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encrypted_leak_match_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const void* value, size_t size) {
  encrypted_leak_match_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline std::string* LookupSingleLeakResponse::add_encrypted_leak_match_prefix() {
  // @@protoc_insertion_point(field_add_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_.Add();
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const std::string& value) {
  encrypted_leak_match_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(std::string&& value) {
  encrypted_leak_match_prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encrypted_leak_match_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const void* value, size_t size) {
  encrypted_leak_match_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupSingleLeakResponse::encrypted_leak_match_prefix() const {
  // @@protoc_insertion_point(field_list:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupSingleLeakResponse::mutable_encrypted_leak_match_prefix() {
  // @@protoc_insertion_point(field_mutable_list:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return &encrypted_leak_match_prefix_;
}

// bytes reencrypted_lookup_hash = 2;
inline void LookupSingleLeakResponse::clear_reencrypted_lookup_hash() {
  reencrypted_lookup_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LookupSingleLeakResponse::reencrypted_lookup_hash() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  return reencrypted_lookup_hash_.GetNoArena();
}
inline void LookupSingleLeakResponse::set_reencrypted_lookup_hash(const std::string& value) {
  
  reencrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}
inline void LookupSingleLeakResponse::set_reencrypted_lookup_hash(std::string&& value) {
  
  reencrypted_lookup_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}
inline void LookupSingleLeakResponse::set_reencrypted_lookup_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reencrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}
inline void LookupSingleLeakResponse::set_reencrypted_lookup_hash(const void* value, size_t size) {
  
  reencrypted_lookup_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}
inline std::string* LookupSingleLeakResponse::mutable_reencrypted_lookup_hash() {
  
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  return reencrypted_lookup_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookupSingleLeakResponse::release_reencrypted_lookup_hash() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  
  return reencrypted_lookup_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookupSingleLeakResponse::set_allocated_reencrypted_lookup_hash(std::string* reencrypted_lookup_hash) {
  if (reencrypted_lookup_hash != nullptr) {
    
  } else {
    
  }
  reencrypted_lookup_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reencrypted_lookup_hash);
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto
