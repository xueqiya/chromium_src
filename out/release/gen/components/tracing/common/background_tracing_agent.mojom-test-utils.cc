// components/tracing/common/background_tracing_agent.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/tracing/common/background_tracing_agent.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef COMPONENTS_TRACING_COMMON_BACKGROUND_TRACING_AGENT_MOJOM_JUMBO_H_
#define COMPONENTS_TRACING_COMMON_BACKGROUND_TRACING_AGENT_MOJOM_JUMBO_H_
#endif


namespace tracing {
namespace mojom {


void BackgroundTracingAgentClientInterceptorForTesting::OnInitialized() {
  GetForwardingInterface()->OnInitialized();
}
void BackgroundTracingAgentClientInterceptorForTesting::OnTriggerBackgroundTrace(const std::string& histogram_name) {
  GetForwardingInterface()->OnTriggerBackgroundTrace(std::move(histogram_name));
}
void BackgroundTracingAgentClientInterceptorForTesting::OnAbortBackgroundTrace() {
  GetForwardingInterface()->OnAbortBackgroundTrace();
}
BackgroundTracingAgentClientAsyncWaiter::BackgroundTracingAgentClientAsyncWaiter(
    BackgroundTracingAgentClient* proxy) : proxy_(proxy) {}

BackgroundTracingAgentClientAsyncWaiter::~BackgroundTracingAgentClientAsyncWaiter() = default;




void BackgroundTracingAgentInterceptorForTesting::SetUMACallback(const std::string& histogram_name, int32_t histogram_lower_value, int32_t histogram_upper_value, bool repeat) {
  GetForwardingInterface()->SetUMACallback(std::move(histogram_name), std::move(histogram_lower_value), std::move(histogram_upper_value), std::move(repeat));
}
void BackgroundTracingAgentInterceptorForTesting::ClearUMACallback(const std::string& histogram_name) {
  GetForwardingInterface()->ClearUMACallback(std::move(histogram_name));
}
BackgroundTracingAgentAsyncWaiter::BackgroundTracingAgentAsyncWaiter(
    BackgroundTracingAgent* proxy) : proxy_(proxy) {}

BackgroundTracingAgentAsyncWaiter::~BackgroundTracingAgentAsyncWaiter() = default;




void BackgroundTracingAgentProviderInterceptorForTesting::Create(uint64_t tracing_process_id, mojo::PendingRemote<BackgroundTracingAgentClient> client, mojo::PendingReceiver<BackgroundTracingAgent> agent) {
  GetForwardingInterface()->Create(std::move(tracing_process_id), std::move(client), std::move(agent));
}
BackgroundTracingAgentProviderAsyncWaiter::BackgroundTracingAgentProviderAsyncWaiter(
    BackgroundTracingAgentProvider* proxy) : proxy_(proxy) {}

BackgroundTracingAgentProviderAsyncWaiter::~BackgroundTracingAgentProviderAsyncWaiter() = default;






}  // namespace mojom
}  // namespace tracing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif