// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/heap_profiling/HeapProfilingTestShim

#ifndef org_chromium_components_heap_profiling_HeapProfilingTestShim_JNI
#define org_chromium_components_heap_profiling_HeapProfilingTestShim_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_heap_1profiling_HeapProfilingTestShim[];
const char kClassPath_org_chromium_components_heap_1profiling_HeapProfilingTestShim[] =
    "org/chromium/components/heap_profiling/HeapProfilingTestShim";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_heap_1profiling_HeapProfilingTestShim_clazz(nullptr);
#ifndef org_chromium_components_heap_1profiling_HeapProfilingTestShim_clazz_defined
#define org_chromium_components_heap_1profiling_HeapProfilingTestShim_clazz_defined
inline jclass org_chromium_components_heap_1profiling_HeapProfilingTestShim_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_heap_1profiling_HeapProfilingTestShim,
      &g_org_chromium_components_heap_1profiling_HeapProfilingTestShim_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_HeapProfilingTestShim_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_components_heap_1profiling_HeapProfilingTestShim_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_HeapProfilingTestShim_Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_org_chromium_components_heap_1profiling_HeapProfilingTestShim_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeHeapProfilingTestShim) {
  HeapProfilingTestShim* native =
      reinterpret_cast<HeapProfilingTestShim*>(nativeHeapProfilingTestShim);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_components_heap_1profiling_HeapProfilingTestShim_nativeRunTestForMode(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeHeapProfilingTestShim,
    jstring mode,
    jboolean dynamicallyStartProfiling,
    jstring stackMode,
    jboolean shouldSample,
    jboolean sampleEverything) {
  HeapProfilingTestShim* native =
      reinterpret_cast<HeapProfilingTestShim*>(nativeHeapProfilingTestShim);
  CHECK_NATIVE_PTR(env, jcaller, native, "RunTestForMode", false);
  return native->RunTestForMode(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, mode), dynamicallyStartProfiling,
      base::android::JavaParamRef<jstring>(env, stackMode), shouldSample, sampleEverything);
}


// Step 4: Generated test functions (optional).


#endif  // org_chromium_components_heap_profiling_HeapProfilingTestShim_JNI
