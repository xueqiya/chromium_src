// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements_shard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_5fshard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_5fshard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include "password_requirements.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_password_5frequirements_5fshard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_password_5frequirements_5fshard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace autofill {
class PasswordRequirementsShard;
class PasswordRequirementsShardDefaultTypeInternal;
extern PasswordRequirementsShardDefaultTypeInternal _PasswordRequirementsShard_default_instance_;
class PasswordRequirementsShard_SpecsEntry_DoNotUse;
class PasswordRequirementsShard_SpecsEntry_DoNotUseDefaultTypeInternal;
extern PasswordRequirementsShard_SpecsEntry_DoNotUseDefaultTypeInternal _PasswordRequirementsShard_SpecsEntry_DoNotUse_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::PasswordRequirementsShard* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsShard>(Arena*);
template<> ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class PasswordRequirementsShard_SpecsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<PasswordRequirementsShard_SpecsEntry_DoNotUse, 
    std::string, ::autofill::PasswordRequirementsSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<PasswordRequirementsShard_SpecsEntry_DoNotUse, 
    std::string, ::autofill::PasswordRequirementsSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PasswordRequirementsShard_SpecsEntry_DoNotUse();
  PasswordRequirementsShard_SpecsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PasswordRequirementsShard_SpecsEntry_DoNotUse& other);
  static const PasswordRequirementsShard_SpecsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PasswordRequirementsShard_SpecsEntry_DoNotUse*>(&_PasswordRequirementsShard_SpecsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class PasswordRequirementsShard :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.PasswordRequirementsShard) */ {
 public:
  PasswordRequirementsShard();
  virtual ~PasswordRequirementsShard();

  PasswordRequirementsShard(const PasswordRequirementsShard& from);
  PasswordRequirementsShard(PasswordRequirementsShard&& from) noexcept
    : PasswordRequirementsShard() {
    *this = ::std::move(from);
  }

  inline PasswordRequirementsShard& operator=(const PasswordRequirementsShard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordRequirementsShard& operator=(PasswordRequirementsShard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordRequirementsShard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordRequirementsShard* internal_default_instance() {
    return reinterpret_cast<const PasswordRequirementsShard*>(
               &_PasswordRequirementsShard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordRequirementsShard& a, PasswordRequirementsShard& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordRequirementsShard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordRequirementsShard* New() const final {
    return CreateMaybeMessage<PasswordRequirementsShard>(nullptr);
  }

  PasswordRequirementsShard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordRequirementsShard>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordRequirementsShard& from);
  void MergeFrom(const PasswordRequirementsShard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordRequirementsShard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.PasswordRequirementsShard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSpecsFieldNumber = 1,
  };
  // map<string, .autofill.PasswordRequirementsSpec> specs = 1;
  int specs_size() const;
  void clear_specs();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >&
      specs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >*
      mutable_specs();

  // @@protoc_insertion_point(class_scope:autofill.PasswordRequirementsShard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      PasswordRequirementsShard_SpecsEntry_DoNotUse,
      std::string, ::autofill::PasswordRequirementsSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > specs_;
  friend struct ::TableStruct_password_5frequirements_5fshard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PasswordRequirementsShard

// map<string, .autofill.PasswordRequirementsSpec> specs = 1;
inline int PasswordRequirementsShard::specs_size() const {
  return specs_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >&
PasswordRequirementsShard::specs() const {
  // @@protoc_insertion_point(field_map:autofill.PasswordRequirementsShard.specs)
  return specs_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >*
PasswordRequirementsShard::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_map:autofill.PasswordRequirementsShard.specs)
  return specs_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_5fshard_2eproto
