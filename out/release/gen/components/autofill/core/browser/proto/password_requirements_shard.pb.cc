// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements_shard.proto

#include "password_requirements_shard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_password_5frequirements_5fshard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsShard_SpecsEntry_DoNotUse_password_5frequirements_5fshard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto;
namespace autofill {
class PasswordRequirementsShard_SpecsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordRequirementsShard_SpecsEntry_DoNotUse> _instance;
} _PasswordRequirementsShard_SpecsEntry_DoNotUse_default_instance_;
class PasswordRequirementsShardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordRequirementsShard> _instance;
} _PasswordRequirementsShard_default_instance_;
}  // namespace autofill
static void InitDefaultsscc_info_PasswordRequirementsShard_password_5frequirements_5fshard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_PasswordRequirementsShard_default_instance_;
    new (ptr) ::autofill::PasswordRequirementsShard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::PasswordRequirementsShard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsShard_password_5frequirements_5fshard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PasswordRequirementsShard_password_5frequirements_5fshard_2eproto}, {
      &scc_info_PasswordRequirementsShard_SpecsEntry_DoNotUse_password_5frequirements_5fshard_2eproto.base,}};

static void InitDefaultsscc_info_PasswordRequirementsShard_SpecsEntry_DoNotUse_password_5frequirements_5fshard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_PasswordRequirementsShard_SpecsEntry_DoNotUse_default_instance_;
    new (ptr) ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse();
  }
  ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsShard_SpecsEntry_DoNotUse_password_5frequirements_5fshard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PasswordRequirementsShard_SpecsEntry_DoNotUse_password_5frequirements_5fshard_2eproto}, {
      &scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto.base,}};

namespace autofill {

// ===================================================================

PasswordRequirementsShard_SpecsEntry_DoNotUse::PasswordRequirementsShard_SpecsEntry_DoNotUse() {}
PasswordRequirementsShard_SpecsEntry_DoNotUse::PasswordRequirementsShard_SpecsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PasswordRequirementsShard_SpecsEntry_DoNotUse::MergeFrom(const PasswordRequirementsShard_SpecsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void PasswordRequirementsShard::InitAsDefaultInstance() {
}
class PasswordRequirementsShard::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordRequirementsShard>()._has_bits_);
};

void PasswordRequirementsShard::clear_specs() {
  specs_.Clear();
}
PasswordRequirementsShard::PasswordRequirementsShard()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.PasswordRequirementsShard)
}
PasswordRequirementsShard::PasswordRequirementsShard(const PasswordRequirementsShard& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  specs_.MergeFrom(from.specs_);
  // @@protoc_insertion_point(copy_constructor:autofill.PasswordRequirementsShard)
}

void PasswordRequirementsShard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PasswordRequirementsShard_password_5frequirements_5fshard_2eproto.base);
}

PasswordRequirementsShard::~PasswordRequirementsShard() {
  // @@protoc_insertion_point(destructor:autofill.PasswordRequirementsShard)
  SharedDtor();
}

void PasswordRequirementsShard::SharedDtor() {
}

void PasswordRequirementsShard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PasswordRequirementsShard& PasswordRequirementsShard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PasswordRequirementsShard_password_5frequirements_5fshard_2eproto.base);
  return *internal_default_instance();
}


void PasswordRequirementsShard::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.PasswordRequirementsShard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PasswordRequirementsShard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .autofill.PasswordRequirementsSpec> specs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&specs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PasswordRequirementsShard::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.PasswordRequirementsShard)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .autofill.PasswordRequirementsSpec> specs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          PasswordRequirementsShard_SpecsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              PasswordRequirementsShard_SpecsEntry_DoNotUse,
              std::string, ::autofill::PasswordRequirementsSpec,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec > > parser(&specs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.PasswordRequirementsShard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.PasswordRequirementsShard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PasswordRequirementsShard::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.PasswordRequirementsShard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .autofill.PasswordRequirementsSpec> specs = 1;
  if (!this->specs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->specs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->specs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >::const_iterator
          it = this->specs().begin();
          it != this->specs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        PasswordRequirementsShard_SpecsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >::const_iterator
          it = this->specs().begin();
          it != this->specs().end(); ++it) {
        PasswordRequirementsShard_SpecsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.PasswordRequirementsShard)
}

size_t PasswordRequirementsShard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.PasswordRequirementsShard)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .autofill.PasswordRequirementsSpec> specs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->specs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::PasswordRequirementsSpec >::const_iterator
      it = this->specs().begin();
      it != this->specs().end(); ++it) {
    total_size += PasswordRequirementsShard_SpecsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordRequirementsShard::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PasswordRequirementsShard*>(
      &from));
}

void PasswordRequirementsShard::MergeFrom(const PasswordRequirementsShard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.PasswordRequirementsShard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specs_.MergeFrom(from.specs_);
}

void PasswordRequirementsShard::CopyFrom(const PasswordRequirementsShard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.PasswordRequirementsShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordRequirementsShard::IsInitialized() const {
  return true;
}

void PasswordRequirementsShard::InternalSwap(PasswordRequirementsShard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  specs_.Swap(&other->specs_);
}

std::string PasswordRequirementsShard::GetTypeName() const {
  return "autofill.PasswordRequirementsShard";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse* Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::PasswordRequirementsShard_SpecsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsShard* Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsShard >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::PasswordRequirementsShard >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
