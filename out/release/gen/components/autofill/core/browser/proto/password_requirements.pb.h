// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_password_5frequirements_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace autofill {
class PasswordRequirementsSpec;
class PasswordRequirementsSpecDefaultTypeInternal;
extern PasswordRequirementsSpecDefaultTypeInternal _PasswordRequirementsSpec_default_instance_;
class PasswordRequirementsSpec_CharacterClass;
class PasswordRequirementsSpec_CharacterClassDefaultTypeInternal;
extern PasswordRequirementsSpec_CharacterClassDefaultTypeInternal _PasswordRequirementsSpec_CharacterClass_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::PasswordRequirementsSpec* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsSpec>(Arena*);
template<> ::autofill::PasswordRequirementsSpec_CharacterClass* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class PasswordRequirementsSpec_CharacterClass :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.PasswordRequirementsSpec.CharacterClass) */ {
 public:
  PasswordRequirementsSpec_CharacterClass();
  virtual ~PasswordRequirementsSpec_CharacterClass();

  PasswordRequirementsSpec_CharacterClass(const PasswordRequirementsSpec_CharacterClass& from);
  PasswordRequirementsSpec_CharacterClass(PasswordRequirementsSpec_CharacterClass&& from) noexcept
    : PasswordRequirementsSpec_CharacterClass() {
    *this = ::std::move(from);
  }

  inline PasswordRequirementsSpec_CharacterClass& operator=(const PasswordRequirementsSpec_CharacterClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordRequirementsSpec_CharacterClass& operator=(PasswordRequirementsSpec_CharacterClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordRequirementsSpec_CharacterClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordRequirementsSpec_CharacterClass* internal_default_instance() {
    return reinterpret_cast<const PasswordRequirementsSpec_CharacterClass*>(
               &_PasswordRequirementsSpec_CharacterClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PasswordRequirementsSpec_CharacterClass& a, PasswordRequirementsSpec_CharacterClass& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordRequirementsSpec_CharacterClass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordRequirementsSpec_CharacterClass* New() const final {
    return CreateMaybeMessage<PasswordRequirementsSpec_CharacterClass>(nullptr);
  }

  PasswordRequirementsSpec_CharacterClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordRequirementsSpec_CharacterClass>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordRequirementsSpec_CharacterClass& from);
  void MergeFrom(const PasswordRequirementsSpec_CharacterClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordRequirementsSpec_CharacterClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.PasswordRequirementsSpec.CharacterClass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterSetFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // optional string character_set = 1;
  bool has_character_set() const;
  void clear_character_set();
  const std::string& character_set() const;
  void set_character_set(const std::string& value);
  void set_character_set(std::string&& value);
  void set_character_set(const char* value);
  void set_character_set(const char* value, size_t size);
  std::string* mutable_character_set();
  std::string* release_character_set();
  void set_allocated_character_set(std::string* character_set);

  // optional uint32 min = 2;
  bool has_min() const;
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max = 3;
  bool has_max() const;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:autofill.PasswordRequirementsSpec.CharacterClass)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_set_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  friend struct ::TableStruct_password_5frequirements_2eproto;
};
// -------------------------------------------------------------------

class PasswordRequirementsSpec :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.PasswordRequirementsSpec) */ {
 public:
  PasswordRequirementsSpec();
  virtual ~PasswordRequirementsSpec();

  PasswordRequirementsSpec(const PasswordRequirementsSpec& from);
  PasswordRequirementsSpec(PasswordRequirementsSpec&& from) noexcept
    : PasswordRequirementsSpec() {
    *this = ::std::move(from);
  }

  inline PasswordRequirementsSpec& operator=(const PasswordRequirementsSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordRequirementsSpec& operator=(PasswordRequirementsSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordRequirementsSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordRequirementsSpec* internal_default_instance() {
    return reinterpret_cast<const PasswordRequirementsSpec*>(
               &_PasswordRequirementsSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordRequirementsSpec& a, PasswordRequirementsSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordRequirementsSpec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordRequirementsSpec* New() const final {
    return CreateMaybeMessage<PasswordRequirementsSpec>(nullptr);
  }

  PasswordRequirementsSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordRequirementsSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordRequirementsSpec& from);
  void MergeFrom(const PasswordRequirementsSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordRequirementsSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.PasswordRequirementsSpec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordRequirementsSpec_CharacterClass CharacterClass;

  // accessors -------------------------------------------------------

  enum : int {
    kLowerCaseFieldNumber = 6,
    kUpperCaseFieldNumber = 7,
    kAlphabeticFieldNumber = 8,
    kNumericFieldNumber = 9,
    kSymbolsFieldNumber = 10,
    kPriorityFieldNumber = 1,
    kSpecVersionFieldNumber = 2,
    kMinLengthFieldNumber = 4,
    kMaxLengthFieldNumber = 5,
  };
  // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
  bool has_lower_case() const;
  void clear_lower_case();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& lower_case() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* release_lower_case();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_lower_case();
  void set_allocated_lower_case(::autofill::PasswordRequirementsSpec_CharacterClass* lower_case);

  // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
  bool has_upper_case() const;
  void clear_upper_case();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& upper_case() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* release_upper_case();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_upper_case();
  void set_allocated_upper_case(::autofill::PasswordRequirementsSpec_CharacterClass* upper_case);

  // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
  bool has_alphabetic() const;
  void clear_alphabetic();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& alphabetic() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* release_alphabetic();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_alphabetic();
  void set_allocated_alphabetic(::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic);

  // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
  bool has_numeric() const;
  void clear_numeric();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& numeric() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* release_numeric();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_numeric();
  void set_allocated_numeric(::autofill::PasswordRequirementsSpec_CharacterClass* numeric);

  // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
  bool has_symbols() const;
  void clear_symbols();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& symbols() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* release_symbols();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_symbols();
  void set_allocated_symbols(::autofill::PasswordRequirementsSpec_CharacterClass* symbols);

  // optional uint32 priority = 1;
  bool has_priority() const;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 spec_version = 2;
  bool has_spec_version() const;
  void clear_spec_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 spec_version() const;
  void set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 min_length = 4;
  bool has_min_length() const;
  void clear_min_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_length() const;
  void set_min_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_length = 5;
  bool has_max_length() const;
  void clear_max_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_length() const;
  void set_max_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:autofill.PasswordRequirementsSpec)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* lower_case_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* upper_case_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* numeric_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* symbols_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spec_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_length_;
  friend struct ::TableStruct_password_5frequirements_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PasswordRequirementsSpec_CharacterClass

// optional string character_set = 1;
inline bool PasswordRequirementsSpec_CharacterClass::has_character_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordRequirementsSpec_CharacterClass::clear_character_set() {
  character_set_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordRequirementsSpec_CharacterClass::character_set() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  return character_set_.GetNoArena();
}
inline void PasswordRequirementsSpec_CharacterClass::set_character_set(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_set_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}
inline void PasswordRequirementsSpec_CharacterClass::set_character_set(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  character_set_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}
inline void PasswordRequirementsSpec_CharacterClass::set_character_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  character_set_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}
inline void PasswordRequirementsSpec_CharacterClass::set_character_set(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  character_set_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}
inline std::string* PasswordRequirementsSpec_CharacterClass::mutable_character_set() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  return character_set_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordRequirementsSpec_CharacterClass::release_character_set() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  if (!has_character_set()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return character_set_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordRequirementsSpec_CharacterClass::set_allocated_character_set(std::string* character_set) {
  if (character_set != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_set_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_set);
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}

// optional uint32 min = 2;
inline bool PasswordRequirementsSpec_CharacterClass::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordRequirementsSpec_CharacterClass::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec_CharacterClass::min() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.min)
  return min_;
}
inline void PasswordRequirementsSpec_CharacterClass::set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.min)
}

// optional uint32 max = 3;
inline bool PasswordRequirementsSpec_CharacterClass::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordRequirementsSpec_CharacterClass::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec_CharacterClass::max() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.max)
  return max_;
}
inline void PasswordRequirementsSpec_CharacterClass::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.max)
}

// -------------------------------------------------------------------

// PasswordRequirementsSpec

// optional uint32 priority = 1;
inline bool PasswordRequirementsSpec::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PasswordRequirementsSpec::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec::priority() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.priority)
  return priority_;
}
inline void PasswordRequirementsSpec::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.priority)
}

// optional uint32 spec_version = 2;
inline bool PasswordRequirementsSpec::has_spec_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PasswordRequirementsSpec::clear_spec_version() {
  spec_version_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec::spec_version() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.spec_version)
  return spec_version_;
}
inline void PasswordRequirementsSpec::set_spec_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  spec_version_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.spec_version)
}

// optional uint32 min_length = 4;
inline bool PasswordRequirementsSpec::has_min_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PasswordRequirementsSpec::clear_min_length() {
  min_length_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec::min_length() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.min_length)
  return min_length_;
}
inline void PasswordRequirementsSpec::set_min_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  min_length_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.min_length)
}

// optional uint32 max_length = 5;
inline bool PasswordRequirementsSpec::has_max_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PasswordRequirementsSpec::clear_max_length() {
  max_length_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasswordRequirementsSpec::max_length() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.max_length)
  return max_length_;
}
inline void PasswordRequirementsSpec::set_max_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_length_ = value;
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.max_length)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
inline bool PasswordRequirementsSpec::has_lower_case() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordRequirementsSpec::clear_lower_case() {
  if (lower_case_ != nullptr) lower_case_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::lower_case() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = lower_case_;
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.lower_case)
  return p != nullptr ? *p : *reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_lower_case() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.lower_case)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = lower_case_;
  lower_case_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_lower_case() {
  _has_bits_[0] |= 0x00000001u;
  if (lower_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaNoVirtual());
    lower_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.lower_case)
  return lower_case_;
}
inline void PasswordRequirementsSpec::set_allocated_lower_case(::autofill::PasswordRequirementsSpec_CharacterClass* lower_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lower_case_;
  }
  if (lower_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lower_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lower_case_ = lower_case;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.lower_case)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
inline bool PasswordRequirementsSpec::has_upper_case() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordRequirementsSpec::clear_upper_case() {
  if (upper_case_ != nullptr) upper_case_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::upper_case() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = upper_case_;
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.upper_case)
  return p != nullptr ? *p : *reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_upper_case() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.upper_case)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = upper_case_;
  upper_case_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_upper_case() {
  _has_bits_[0] |= 0x00000002u;
  if (upper_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaNoVirtual());
    upper_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.upper_case)
  return upper_case_;
}
inline void PasswordRequirementsSpec::set_allocated_upper_case(::autofill::PasswordRequirementsSpec_CharacterClass* upper_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upper_case_;
  }
  if (upper_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upper_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upper_case_ = upper_case;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.upper_case)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
inline bool PasswordRequirementsSpec::has_alphabetic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordRequirementsSpec::clear_alphabetic() {
  if (alphabetic_ != nullptr) alphabetic_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::alphabetic() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = alphabetic_;
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.alphabetic)
  return p != nullptr ? *p : *reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_alphabetic() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.alphabetic)
  _has_bits_[0] &= ~0x00000004u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = alphabetic_;
  alphabetic_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_alphabetic() {
  _has_bits_[0] |= 0x00000004u;
  if (alphabetic_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaNoVirtual());
    alphabetic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.alphabetic)
  return alphabetic_;
}
inline void PasswordRequirementsSpec::set_allocated_alphabetic(::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alphabetic_;
  }
  if (alphabetic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alphabetic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alphabetic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alphabetic_ = alphabetic;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.alphabetic)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
inline bool PasswordRequirementsSpec::has_numeric() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PasswordRequirementsSpec::clear_numeric() {
  if (numeric_ != nullptr) numeric_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::numeric() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = numeric_;
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.numeric)
  return p != nullptr ? *p : *reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_numeric() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.numeric)
  _has_bits_[0] &= ~0x00000008u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = numeric_;
  numeric_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_numeric() {
  _has_bits_[0] |= 0x00000008u;
  if (numeric_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaNoVirtual());
    numeric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.numeric)
  return numeric_;
}
inline void PasswordRequirementsSpec::set_allocated_numeric(::autofill::PasswordRequirementsSpec_CharacterClass* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete numeric_;
  }
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  numeric_ = numeric;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.numeric)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
inline bool PasswordRequirementsSpec::has_symbols() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PasswordRequirementsSpec::clear_symbols() {
  if (symbols_ != nullptr) symbols_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::symbols() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = symbols_;
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.symbols)
  return p != nullptr ? *p : *reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_symbols() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.symbols)
  _has_bits_[0] &= ~0x00000010u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = symbols_;
  symbols_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_symbols() {
  _has_bits_[0] |= 0x00000010u;
  if (symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaNoVirtual());
    symbols_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.symbols)
  return symbols_;
}
inline void PasswordRequirementsSpec::set_allocated_symbols(::autofill::PasswordRequirementsSpec_CharacterClass* symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete symbols_;
  }
  if (symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbols, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  symbols_ = symbols;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.symbols)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto
