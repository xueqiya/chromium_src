// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryContents_Form_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryContents_Form_Field_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryResponseContents_Field_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFieldMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFormMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillRandomizedValue_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillUploadContents_ButtonTitle_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillUploadContents_Field_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileValidityMap_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_server_2eproto;
namespace autofill {
class AutofillQueryContents_Form_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryContents_Form_Field> _instance;
} _AutofillQueryContents_Form_Field_default_instance_;
class AutofillQueryContents_FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryContents_Form> _instance;
} _AutofillQueryContents_Form_default_instance_;
class AutofillQueryContentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryContents> _instance;
} _AutofillQueryContents_default_instance_;
class AutofillQueryResponseContents_Field_FieldPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponseContents_Field_FieldPrediction> _instance;
} _AutofillQueryResponseContents_Field_FieldPrediction_default_instance_;
class AutofillQueryResponseContents_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponseContents_Field> _instance;
} _AutofillQueryResponseContents_Field_default_instance_;
class AutofillQueryResponseContentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponseContents> _instance;
} _AutofillQueryResponseContents_default_instance_;
class AutofillRandomizedValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillRandomizedValue> _instance;
} _AutofillRandomizedValue_default_instance_;
class AutofillRandomizedFormMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillRandomizedFormMetadata> _instance;
} _AutofillRandomizedFormMetadata_default_instance_;
class AutofillRandomizedFieldMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillRandomizedFieldMetadata> _instance;
} _AutofillRandomizedFieldMetadata_default_instance_;
class AutofillUploadContents_Field_AutofillTypeValiditiesPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillUploadContents_Field_AutofillTypeValiditiesPair> _instance;
} _AutofillUploadContents_Field_AutofillTypeValiditiesPair_default_instance_;
class AutofillUploadContents_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillUploadContents_Field> _instance;
} _AutofillUploadContents_Field_default_instance_;
class AutofillUploadContents_ButtonTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillUploadContents_ButtonTitle> _instance;
} _AutofillUploadContents_ButtonTitle_default_instance_;
class AutofillUploadContentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillUploadContents> _instance;
} _AutofillUploadContents_default_instance_;
class ProfileValidityMap_FieldValidityStatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileValidityMap_FieldValidityStatesEntry_DoNotUse> _instance;
} _ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_default_instance_;
class ProfileValidityMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileValidityMap> _instance;
} _ProfileValidityMap_default_instance_;
class UserProfileValidityMap_ProfileValidityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserProfileValidityMap_ProfileValidityEntry_DoNotUse> _instance;
} _UserProfileValidityMap_ProfileValidityEntry_DoNotUse_default_instance_;
class UserProfileValidityMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserProfileValidityMap> _instance;
} _UserProfileValidityMap_default_instance_;
}  // namespace autofill
static void InitDefaultsscc_info_AutofillQueryContents_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryContents_default_instance_;
    new (ptr) ::autofill::AutofillQueryContents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryContents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryContents_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillQueryContents_server_2eproto}, {
      &scc_info_AutofillQueryContents_Form_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryContents_Form_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryContents_Form_default_instance_;
    new (ptr) ::autofill::AutofillQueryContents_Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryContents_Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryContents_Form_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AutofillQueryContents_Form_server_2eproto}, {
      &scc_info_AutofillRandomizedFormMetadata_server_2eproto.base,
      &scc_info_AutofillQueryContents_Form_Field_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryContents_Form_Field_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryContents_Form_Field_default_instance_;
    new (ptr) ::autofill::AutofillQueryContents_Form_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryContents_Form_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryContents_Form_Field_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillQueryContents_Form_Field_server_2eproto}, {
      &scc_info_AutofillRandomizedFieldMetadata_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponseContents_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponseContents_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponseContents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponseContents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryResponseContents_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillQueryResponseContents_server_2eproto}, {
      &scc_info_AutofillQueryResponseContents_Field_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponseContents_Field_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponseContents_Field_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponseContents_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponseContents_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryResponseContents_Field_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AutofillQueryResponseContents_Field_server_2eproto}, {
      &scc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto.base,
      &scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponseContents_Field_FieldPrediction_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponseContents_Field_FieldPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponseContents_Field_FieldPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto}, {}};

static void InitDefaultsscc_info_AutofillRandomizedFieldMetadata_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillRandomizedFieldMetadata_default_instance_;
    new (ptr) ::autofill::AutofillRandomizedFieldMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillRandomizedFieldMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFieldMetadata_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillRandomizedFieldMetadata_server_2eproto}, {
      &scc_info_AutofillRandomizedValue_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillRandomizedFormMetadata_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillRandomizedFormMetadata_default_instance_;
    new (ptr) ::autofill::AutofillRandomizedFormMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillRandomizedFormMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFormMetadata_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillRandomizedFormMetadata_server_2eproto}, {
      &scc_info_AutofillRandomizedValue_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillRandomizedValue_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillRandomizedValue_default_instance_;
    new (ptr) ::autofill::AutofillRandomizedValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillRandomizedValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillRandomizedValue_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillRandomizedValue_server_2eproto}, {}};

static void InitDefaultsscc_info_AutofillUploadContents_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillUploadContents_default_instance_;
    new (ptr) ::autofill::AutofillUploadContents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillUploadContents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AutofillUploadContents_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AutofillUploadContents_server_2eproto}, {
      &scc_info_AutofillUploadContents_Field_server_2eproto.base,
      &scc_info_AutofillRandomizedFormMetadata_server_2eproto.base,
      &scc_info_AutofillUploadContents_ButtonTitle_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillUploadContents_ButtonTitle_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillUploadContents_ButtonTitle_default_instance_;
    new (ptr) ::autofill::AutofillUploadContents_ButtonTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillUploadContents_ButtonTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillUploadContents_ButtonTitle_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillUploadContents_ButtonTitle_server_2eproto}, {}};

static void InitDefaultsscc_info_AutofillUploadContents_Field_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillUploadContents_Field_default_instance_;
    new (ptr) ::autofill::AutofillUploadContents_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillUploadContents_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillUploadContents_Field_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AutofillUploadContents_Field_server_2eproto}, {
      &scc_info_AutofillRandomizedFieldMetadata_server_2eproto.base,
      &scc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillUploadContents_Field_AutofillTypeValiditiesPair_default_instance_;
    new (ptr) ::autofill::AutofillUploadContents_Field_AutofillTypeValiditiesPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillUploadContents_Field_AutofillTypeValiditiesPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto}, {}};

static void InitDefaultsscc_info_ProfileValidityMap_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_ProfileValidityMap_default_instance_;
    new (ptr) ::autofill::ProfileValidityMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::ProfileValidityMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileValidityMap_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProfileValidityMap_server_2eproto}, {
      &scc_info_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_server_2eproto.base,}};

static void InitDefaultsscc_info_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_default_instance_;
    new (ptr) ::autofill::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse();
  }
  ::autofill::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProfileValidityMap_FieldValidityStatesEntry_DoNotUse_server_2eproto}, {}};

static void InitDefaultsscc_info_UserProfileValidityMap_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_UserProfileValidityMap_default_instance_;
    new (ptr) ::autofill::UserProfileValidityMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::UserProfileValidityMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserProfileValidityMap_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UserProfileValidityMap_server_2eproto}, {
      &scc_info_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_server_2eproto.base,}};

static void InitDefaultsscc_info_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_default_instance_;
    new (ptr) ::autofill::UserProfileValidityMap_ProfileValidityEntry_DoNotUse();
  }
  ::autofill::UserProfileValidityMap_ProfileValidityEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UserProfileValidityMap_ProfileValidityEntry_DoNotUse_server_2eproto}, {
      &scc_info_ProfileValidityMap_server_2eproto.base,}};

namespace autofill {
bool AutofillRandomizedValue_EncodingType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillRandomizedValue_EncodingType_strings[12] = {};

static const char AutofillRandomizedValue_EncodingType_names[] =
  "ALL_BITS"
  "BIT_0"
  "BIT_1"
  "BIT_2"
  "BIT_3"
  "BIT_4"
  "BIT_5"
  "BIT_6"
  "BIT_7"
  "EVEN_BITS"
  "ODD_BITS"
  "UNSPECIFIED_ENCODING_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillRandomizedValue_EncodingType_entries[] = {
  { {AutofillRandomizedValue_EncodingType_names + 0, 8}, 10 },
  { {AutofillRandomizedValue_EncodingType_names + 8, 5}, 0 },
  { {AutofillRandomizedValue_EncodingType_names + 13, 5}, 1 },
  { {AutofillRandomizedValue_EncodingType_names + 18, 5}, 2 },
  { {AutofillRandomizedValue_EncodingType_names + 23, 5}, 3 },
  { {AutofillRandomizedValue_EncodingType_names + 28, 5}, 4 },
  { {AutofillRandomizedValue_EncodingType_names + 33, 5}, 5 },
  { {AutofillRandomizedValue_EncodingType_names + 38, 5}, 6 },
  { {AutofillRandomizedValue_EncodingType_names + 43, 5}, 7 },
  { {AutofillRandomizedValue_EncodingType_names + 48, 9}, 8 },
  { {AutofillRandomizedValue_EncodingType_names + 57, 8}, 9 },
  { {AutofillRandomizedValue_EncodingType_names + 65, 25}, -1 },
};

static const int AutofillRandomizedValue_EncodingType_entries_by_number[] = {
  11, // -1 -> UNSPECIFIED_ENCODING_TYPE
  1, // 0 -> BIT_0
  2, // 1 -> BIT_1
  3, // 2 -> BIT_2
  4, // 3 -> BIT_3
  5, // 4 -> BIT_4
  6, // 5 -> BIT_5
  7, // 6 -> BIT_6
  8, // 7 -> BIT_7
  9, // 8 -> EVEN_BITS
  10, // 9 -> ODD_BITS
  0, // 10 -> ALL_BITS
};

const std::string& AutofillRandomizedValue_EncodingType_Name(
    AutofillRandomizedValue_EncodingType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillRandomizedValue_EncodingType_entries,
          AutofillRandomizedValue_EncodingType_entries_by_number,
          12, AutofillRandomizedValue_EncodingType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillRandomizedValue_EncodingType_entries,
      AutofillRandomizedValue_EncodingType_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillRandomizedValue_EncodingType_strings[idx].get();
}
bool AutofillRandomizedValue_EncodingType_Parse(
    const std::string& name, AutofillRandomizedValue_EncodingType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillRandomizedValue_EncodingType_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<AutofillRandomizedValue_EncodingType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::UNSPECIFIED_ENCODING_TYPE;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_0;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_1;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_2;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_3;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_4;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_5;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_6;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::BIT_7;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::EVEN_BITS;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::ODD_BITS;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::ALL_BITS;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::EncodingType_MIN;
constexpr AutofillRandomizedValue_EncodingType AutofillRandomizedValue::EncodingType_MAX;
constexpr int AutofillRandomizedValue::EncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutofillUploadContents_Field_PasswordGenerationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillUploadContents_Field_PasswordGenerationType_strings[6] = {};

static const char AutofillUploadContents_Field_PasswordGenerationType_names[] =
  "AUTOMATICALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM"
  "AUTOMATICALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM"
  "IGNORED_GENERATION_POPUP"
  "MANUALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM"
  "MANUALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM"
  "NO_GENERATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillUploadContents_Field_PasswordGenerationType_entries[] = {
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 0, 58}, 2 },
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 58, 50}, 1 },
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 108, 24}, 5 },
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 132, 53}, 4 },
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 185, 45}, 3 },
  { {AutofillUploadContents_Field_PasswordGenerationType_names + 230, 13}, 0 },
};

static const int AutofillUploadContents_Field_PasswordGenerationType_entries_by_number[] = {
  5, // 0 -> NO_GENERATION
  1, // 1 -> AUTOMATICALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM
  0, // 2 -> AUTOMATICALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM
  4, // 3 -> MANUALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM
  3, // 4 -> MANUALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM
  2, // 5 -> IGNORED_GENERATION_POPUP
};

const std::string& AutofillUploadContents_Field_PasswordGenerationType_Name(
    AutofillUploadContents_Field_PasswordGenerationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillUploadContents_Field_PasswordGenerationType_entries,
          AutofillUploadContents_Field_PasswordGenerationType_entries_by_number,
          6, AutofillUploadContents_Field_PasswordGenerationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillUploadContents_Field_PasswordGenerationType_entries,
      AutofillUploadContents_Field_PasswordGenerationType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillUploadContents_Field_PasswordGenerationType_strings[idx].get();
}
bool AutofillUploadContents_Field_PasswordGenerationType_Parse(
    const std::string& name, AutofillUploadContents_Field_PasswordGenerationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillUploadContents_Field_PasswordGenerationType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<AutofillUploadContents_Field_PasswordGenerationType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::NO_GENERATION;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::IGNORED_GENERATION_POPUP;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MIN;
constexpr AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MAX;
constexpr int AutofillUploadContents_Field::PasswordGenerationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutofillUploadContents_Field_VoteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillUploadContents_Field_VoteType_strings[7] = {};

static const char AutofillUploadContents_Field_VoteType_names[] =
  "BASE_HEURISTIC"
  "CREDENTIALS_REUSED"
  "FIRST_USE"
  "HTML_CLASSIFIER"
  "NO_INFORMATION"
  "USERNAME_EDITED"
  "USERNAME_OVERWRITTEN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillUploadContents_Field_VoteType_entries[] = {
  { {AutofillUploadContents_Field_VoteType_names + 0, 14}, 4 },
  { {AutofillUploadContents_Field_VoteType_names + 14, 18}, 1 },
  { {AutofillUploadContents_Field_VoteType_names + 32, 9}, 6 },
  { {AutofillUploadContents_Field_VoteType_names + 41, 15}, 5 },
  { {AutofillUploadContents_Field_VoteType_names + 56, 14}, 0 },
  { {AutofillUploadContents_Field_VoteType_names + 70, 15}, 3 },
  { {AutofillUploadContents_Field_VoteType_names + 85, 20}, 2 },
};

static const int AutofillUploadContents_Field_VoteType_entries_by_number[] = {
  4, // 0 -> NO_INFORMATION
  1, // 1 -> CREDENTIALS_REUSED
  6, // 2 -> USERNAME_OVERWRITTEN
  5, // 3 -> USERNAME_EDITED
  0, // 4 -> BASE_HEURISTIC
  3, // 5 -> HTML_CLASSIFIER
  2, // 6 -> FIRST_USE
};

const std::string& AutofillUploadContents_Field_VoteType_Name(
    AutofillUploadContents_Field_VoteType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillUploadContents_Field_VoteType_entries,
          AutofillUploadContents_Field_VoteType_entries_by_number,
          7, AutofillUploadContents_Field_VoteType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillUploadContents_Field_VoteType_entries,
      AutofillUploadContents_Field_VoteType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillUploadContents_Field_VoteType_strings[idx].get();
}
bool AutofillUploadContents_Field_VoteType_Parse(
    const std::string& name, AutofillUploadContents_Field_VoteType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillUploadContents_Field_VoteType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<AutofillUploadContents_Field_VoteType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::NO_INFORMATION;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::CREDENTIALS_REUSED;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::USERNAME_OVERWRITTEN;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::USERNAME_EDITED;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::BASE_HEURISTIC;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::HTML_CLASSIFIER;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::FIRST_USE;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::VoteType_MIN;
constexpr AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::VoteType_MAX;
constexpr int AutofillUploadContents_Field::VoteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutofillUploadContents_ButtonTitle_ButtonTitleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillUploadContents_ButtonTitle_ButtonTitleType_strings[8] = {};

static const char AutofillUploadContents_ButtonTitle_ButtonTitleType_names[] =
  "BUTTON_ELEMENT_BUTTON_TYPE"
  "BUTTON_ELEMENT_SUBMIT_TYPE"
  "DIV"
  "HYPERLINK"
  "INPUT_ELEMENT_BUTTON_TYPE"
  "INPUT_ELEMENT_SUBMIT_TYPE"
  "NONE"
  "SPAN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillUploadContents_ButtonTitle_ButtonTitleType_entries[] = {
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 0, 26}, 2 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 26, 26}, 1 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 52, 3}, 6 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 55, 9}, 5 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 64, 25}, 4 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 89, 25}, 3 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 114, 4}, 0 },
  { {AutofillUploadContents_ButtonTitle_ButtonTitleType_names + 118, 4}, 7 },
};

static const int AutofillUploadContents_ButtonTitle_ButtonTitleType_entries_by_number[] = {
  6, // 0 -> NONE
  1, // 1 -> BUTTON_ELEMENT_SUBMIT_TYPE
  0, // 2 -> BUTTON_ELEMENT_BUTTON_TYPE
  5, // 3 -> INPUT_ELEMENT_SUBMIT_TYPE
  4, // 4 -> INPUT_ELEMENT_BUTTON_TYPE
  3, // 5 -> HYPERLINK
  2, // 6 -> DIV
  7, // 7 -> SPAN
};

const std::string& AutofillUploadContents_ButtonTitle_ButtonTitleType_Name(
    AutofillUploadContents_ButtonTitle_ButtonTitleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillUploadContents_ButtonTitle_ButtonTitleType_entries,
          AutofillUploadContents_ButtonTitle_ButtonTitleType_entries_by_number,
          8, AutofillUploadContents_ButtonTitle_ButtonTitleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillUploadContents_ButtonTitle_ButtonTitleType_entries,
      AutofillUploadContents_ButtonTitle_ButtonTitleType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillUploadContents_ButtonTitle_ButtonTitleType_strings[idx].get();
}
bool AutofillUploadContents_ButtonTitle_ButtonTitleType_Parse(
    const std::string& name, AutofillUploadContents_ButtonTitle_ButtonTitleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillUploadContents_ButtonTitle_ButtonTitleType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<AutofillUploadContents_ButtonTitle_ButtonTitleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::NONE;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::BUTTON_ELEMENT_SUBMIT_TYPE;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::BUTTON_ELEMENT_BUTTON_TYPE;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::INPUT_ELEMENT_SUBMIT_TYPE;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::INPUT_ELEMENT_BUTTON_TYPE;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::HYPERLINK;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::DIV;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::SPAN;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::ButtonTitleType_MIN;
constexpr AutofillUploadContents_ButtonTitle_ButtonTitleType AutofillUploadContents_ButtonTitle::ButtonTitleType_MAX;
constexpr int AutofillUploadContents_ButtonTitle::ButtonTitleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutofillUploadContents_SubmissionIndicatorEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillUploadContents_SubmissionIndicatorEvent_strings[11] = {};

static const char AutofillUploadContents_SubmissionIndicatorEvent_names[] =
  "DEPRECATED_FILLED_FORM_ON_START_PROVISIONAL_LOAD"
  "DEPRECATED_FILLED_INPUT_ELEMENTS_ON_START_PROVISIONAL_LOAD"
  "DEPRECATED_MANUAL_SAVE"
  "DOM_MUTATION_AFTER_XHR"
  "FRAME_DETACHED"
  "HTML_FORM_SUBMISSION"
  "NONE"
  "PROBABLE_FORM_SUBMISSION"
  "PROVISIONALLY_SAVED_FORM_ON_START_PROVISIONAL_LOAD"
  "SAME_DOCUMENT_NAVIGATION"
  "XHR_SUCCEEDED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillUploadContents_SubmissionIndicatorEvent_entries[] = {
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 0, 48}, 8 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 48, 58}, 9 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 106, 22}, 5 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 128, 22}, 6 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 150, 14}, 4 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 164, 20}, 1 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 184, 4}, 0 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 188, 24}, 10 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 212, 50}, 7 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 262, 24}, 2 },
  { {AutofillUploadContents_SubmissionIndicatorEvent_names + 286, 13}, 3 },
};

static const int AutofillUploadContents_SubmissionIndicatorEvent_entries_by_number[] = {
  6, // 0 -> NONE
  5, // 1 -> HTML_FORM_SUBMISSION
  9, // 2 -> SAME_DOCUMENT_NAVIGATION
  10, // 3 -> XHR_SUCCEEDED
  4, // 4 -> FRAME_DETACHED
  2, // 5 -> DEPRECATED_MANUAL_SAVE
  3, // 6 -> DOM_MUTATION_AFTER_XHR
  8, // 7 -> PROVISIONALLY_SAVED_FORM_ON_START_PROVISIONAL_LOAD
  0, // 8 -> DEPRECATED_FILLED_FORM_ON_START_PROVISIONAL_LOAD
  1, // 9 -> DEPRECATED_FILLED_INPUT_ELEMENTS_ON_START_PROVISIONAL_LOAD
  7, // 10 -> PROBABLE_FORM_SUBMISSION
};

const std::string& AutofillUploadContents_SubmissionIndicatorEvent_Name(
    AutofillUploadContents_SubmissionIndicatorEvent value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillUploadContents_SubmissionIndicatorEvent_entries,
          AutofillUploadContents_SubmissionIndicatorEvent_entries_by_number,
          11, AutofillUploadContents_SubmissionIndicatorEvent_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillUploadContents_SubmissionIndicatorEvent_entries,
      AutofillUploadContents_SubmissionIndicatorEvent_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillUploadContents_SubmissionIndicatorEvent_strings[idx].get();
}
bool AutofillUploadContents_SubmissionIndicatorEvent_Parse(
    const std::string& name, AutofillUploadContents_SubmissionIndicatorEvent* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillUploadContents_SubmissionIndicatorEvent_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<AutofillUploadContents_SubmissionIndicatorEvent>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::NONE;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::HTML_FORM_SUBMISSION;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::SAME_DOCUMENT_NAVIGATION;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::XHR_SUCCEEDED;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::FRAME_DETACHED;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::DEPRECATED_MANUAL_SAVE;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::DOM_MUTATION_AFTER_XHR;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::PROVISIONALLY_SAVED_FORM_ON_START_PROVISIONAL_LOAD;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::DEPRECATED_FILLED_FORM_ON_START_PROVISIONAL_LOAD;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::DEPRECATED_FILLED_INPUT_ELEMENTS_ON_START_PROVISIONAL_LOAD;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::PROBABLE_FORM_SUBMISSION;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::SubmissionIndicatorEvent_MIN;
constexpr AutofillUploadContents_SubmissionIndicatorEvent AutofillUploadContents::SubmissionIndicatorEvent_MAX;
constexpr int AutofillUploadContents::SubmissionIndicatorEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AutofillQueryContents_Form_Field::InitAsDefaultInstance() {
  ::autofill::_AutofillQueryContents_Form_Field_default_instance_._instance.get_mutable()->field_metadata_ = const_cast< ::autofill::AutofillRandomizedFieldMetadata*>(
      ::autofill::AutofillRandomizedFieldMetadata::internal_default_instance());
}
class AutofillQueryContents_Form_Field::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryContents_Form_Field>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFieldMetadata& field_metadata(const AutofillQueryContents_Form_Field* msg);
  static void set_has_field_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill::AutofillRandomizedFieldMetadata&
AutofillQueryContents_Form_Field::_Internal::field_metadata(const AutofillQueryContents_Form_Field* msg) {
  return *msg->field_metadata_;
}
AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form.Field)
}
AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field(const AutofillQueryContents_Form_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_field_metadata()) {
    field_metadata_ = new ::autofill::AutofillRandomizedFieldMetadata(*from.field_metadata_);
  } else {
    field_metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form.Field)
}

void AutofillQueryContents_Form_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryContents_Form_Field_server_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&field_metadata_)) + sizeof(signature_));
}

AutofillQueryContents_Form_Field::~AutofillQueryContents_Form_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form.Field)
  SharedDtor();
}

void AutofillQueryContents_Form_Field::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_metadata_;
}

void AutofillQueryContents_Form_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryContents_Form_Field& AutofillQueryContents_Form_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryContents_Form_Field_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryContents_Form_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(field_metadata_ != nullptr);
      field_metadata_->Clear();
    }
  }
  signature_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryContents_Form_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFieldMetadata field_metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_field_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryContents_Form_Field::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form.Field)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 signature = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFieldMetadata field_metadata = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_field_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagWireType(tag) ==
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form.Field)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryContents_Form_Field::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 signature = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(5, this->signature(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional string type = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->type(), output);
  }

  // optional .autofill.AutofillRandomizedFieldMetadata field_metadata = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::field_metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form.Field)
}

size_t AutofillQueryContents_Form_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form.Field)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required fixed32 signature = 5;
  if (has_signature()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .autofill.AutofillRandomizedFieldMetadata field_metadata = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_metadata_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryContents_Form_Field::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryContents_Form_Field*>(
      &from));
}

void AutofillQueryContents_Form_Field::MergeFrom(const AutofillQueryContents_Form_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_field_metadata()->::autofill::AutofillRandomizedFieldMetadata::MergeFrom(from.field_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryContents_Form_Field::CopyFrom(const AutofillQueryContents_Form_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents_Form_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void AutofillQueryContents_Form_Field::InternalSwap(AutofillQueryContents_Form_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_metadata_, other->field_metadata_);
  swap(signature_, other->signature_);
}

std::string AutofillQueryContents_Form_Field::GetTypeName() const {
  return "autofill.AutofillQueryContents.Form.Field";
}


// ===================================================================

void AutofillQueryContents_Form::InitAsDefaultInstance() {
  ::autofill::_AutofillQueryContents_Form_default_instance_._instance.get_mutable()->form_metadata_ = const_cast< ::autofill::AutofillRandomizedFormMetadata*>(
      ::autofill::AutofillRandomizedFormMetadata::internal_default_instance());
}
class AutofillQueryContents_Form::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryContents_Form>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFormMetadata& form_metadata(const AutofillQueryContents_Form* msg);
  static void set_has_form_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::AutofillRandomizedFormMetadata&
AutofillQueryContents_Form::_Internal::form_metadata(const AutofillQueryContents_Form* msg) {
  return *msg->form_metadata_;
}
AutofillQueryContents_Form::AutofillQueryContents_Form()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form)
}
AutofillQueryContents_Form::AutofillQueryContents_Form(const AutofillQueryContents_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_form_metadata()) {
    form_metadata_ = new ::autofill::AutofillRandomizedFormMetadata(*from.form_metadata_);
  } else {
    form_metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form)
}

void AutofillQueryContents_Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryContents_Form_server_2eproto.base);
  ::memset(&form_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&form_metadata_)) + sizeof(signature_));
}

AutofillQueryContents_Form::~AutofillQueryContents_Form() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form)
  SharedDtor();
}

void AutofillQueryContents_Form::SharedDtor() {
  if (this != internal_default_instance()) delete form_metadata_;
}

void AutofillQueryContents_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryContents_Form& AutofillQueryContents_Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryContents_Form_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryContents_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(form_metadata_ != nullptr);
    form_metadata_->Clear();
  }
  signature_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryContents_Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated group Field = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(add_field(), ptr, 35);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 35);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFormMetadata form_metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_form_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryContents_Form::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 signature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 4 { ... };
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (35 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadGroup(4, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFormMetadata form_metadata = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_form_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagWireType(tag) ==
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryContents_Form::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 signature = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
  }

  // repeated group Field = 4 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteGroup(
      4,
      this->field(static_cast<int>(i)),
      output);
  }

  // optional .autofill.AutofillRandomizedFormMetadata form_metadata = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::form_metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form)
}

size_t AutofillQueryContents_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required fixed64 signature = 3;
  if (has_signature()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Field = 4 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          this->field(static_cast<int>(i)));
    }
  }

  // optional .autofill.AutofillRandomizedFormMetadata form_metadata = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *form_metadata_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryContents_Form::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryContents_Form*>(
      &from));
}

void AutofillQueryContents_Form::MergeFrom(const AutofillQueryContents_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_form_metadata()->::autofill::AutofillRandomizedFormMetadata::MergeFrom(from.form_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryContents_Form::CopyFrom(const AutofillQueryContents_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents_Form::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillQueryContents_Form::InternalSwap(AutofillQueryContents_Form* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_)->InternalSwap(CastToBase(&other->field_));
  swap(form_metadata_, other->form_metadata_);
  swap(signature_, other->signature_);
}

std::string AutofillQueryContents_Form::GetTypeName() const {
  return "autofill.AutofillQueryContents.Form";
}


// ===================================================================

void AutofillQueryContents::InitAsDefaultInstance() {
}
class AutofillQueryContents::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryContents>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillQueryContents::AutofillQueryContents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents)
}
AutofillQueryContents::AutofillQueryContents(const AutofillQueryContents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      form_(from.form_),
      experiments_(from.experiments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents)
}

void AutofillQueryContents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryContents_server_2eproto.base);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutofillQueryContents::~AutofillQueryContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents)
  SharedDtor();
}

void AutofillQueryContents::SharedDtor() {
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillQueryContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryContents& AutofillQueryContents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryContents_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  form_.Clear();
  experiments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_version_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryContents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Form = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 19)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(add_form(), ptr, 19);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 19);
        } else goto handle_unusual;
        continue;
      // repeated int64 experiments = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_experiments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 112);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_experiments(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryContents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Form = 2 { ... };
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (19 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadGroup(2, input, add_form()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 experiments = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 112u, input, this->mutable_experiments())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_experiments())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryContents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_version(), output);
  }

  // repeated group Form = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->form_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteGroup(
      2,
      this->form(static_cast<int>(i)),
      output);
  }

  // repeated int64 experiments = 14;
  for (int i = 0, n = this->experiments_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      14, this->experiments(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents)
}

size_t AutofillQueryContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string client_version = 1;
  if (has_client_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Form = 2 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->form_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          this->form(static_cast<int>(i)));
    }
  }

  // repeated int64 experiments = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->experiments_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->experiments_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryContents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryContents*>(
      &from));
}

void AutofillQueryContents::MergeFrom(const AutofillQueryContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  form_.MergeFrom(from.form_);
  experiments_.MergeFrom(from.experiments_);
  if (from.has_client_version()) {
    _has_bits_[0] |= 0x00000001u;
    client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
}

void AutofillQueryContents::CopyFrom(const AutofillQueryContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->form())) return false;
  return true;
}

void AutofillQueryContents::InternalSwap(AutofillQueryContents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&form_)->InternalSwap(CastToBase(&other->form_));
  experiments_.InternalSwap(&other->experiments_);
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string AutofillQueryContents::GetTypeName() const {
  return "autofill.AutofillQueryContents";
}


// ===================================================================

void AutofillQueryResponseContents_Field_FieldPrediction::InitAsDefaultInstance() {
}
class AutofillQueryResponseContents_Field_FieldPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponseContents_Field_FieldPrediction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_use_prefilled_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AutofillQueryResponseContents_Field_FieldPrediction::AutofillQueryResponseContents_Field_FieldPrediction()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}
AutofillQueryResponseContents_Field_FieldPrediction::AutofillQueryResponseContents_Field_FieldPrediction(const AutofillQueryResponseContents_Field_FieldPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
    reinterpret_cast<char*>(&type_)) + sizeof(may_use_prefilled_placeholder_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}

void AutofillQueryResponseContents_Field_FieldPrediction::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
      reinterpret_cast<char*>(&type_)) + sizeof(may_use_prefilled_placeholder_));
}

AutofillQueryResponseContents_Field_FieldPrediction::~AutofillQueryResponseContents_Field_FieldPrediction() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  SharedDtor();
}

void AutofillQueryResponseContents_Field_FieldPrediction::SharedDtor() {
}

void AutofillQueryResponseContents_Field_FieldPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponseContents_Field_FieldPrediction& AutofillQueryResponseContents_Field_FieldPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponseContents_Field_FieldPrediction_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponseContents_Field_FieldPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
        reinterpret_cast<char*>(&type_)) + sizeof(may_use_prefilled_placeholder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponseContents_Field_FieldPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool may_use_prefilled_placeholder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_may_use_prefilled_placeholder(&has_bits);
          may_use_prefilled_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponseContents_Field_FieldPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool may_use_prefilled_placeholder = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_may_use_prefilled_placeholder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_use_prefilled_placeholder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponseContents_Field_FieldPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  // optional bool may_use_prefilled_placeholder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->may_use_prefilled_placeholder(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}

size_t AutofillQueryResponseContents_Field_FieldPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool may_use_prefilled_placeholder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponseContents_Field_FieldPrediction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponseContents_Field_FieldPrediction*>(
      &from));
}

void AutofillQueryResponseContents_Field_FieldPrediction::MergeFrom(const AutofillQueryResponseContents_Field_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      may_use_prefilled_placeholder_ = from.may_use_prefilled_placeholder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryResponseContents_Field_FieldPrediction::CopyFrom(const AutofillQueryResponseContents_Field_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents_Field_FieldPrediction::IsInitialized() const {
  return true;
}

void AutofillQueryResponseContents_Field_FieldPrediction::InternalSwap(AutofillQueryResponseContents_Field_FieldPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(may_use_prefilled_placeholder_, other->may_use_prefilled_placeholder_);
}

std::string AutofillQueryResponseContents_Field_FieldPrediction::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents.Field.FieldPrediction";
}


// ===================================================================

void AutofillQueryResponseContents_Field::InitAsDefaultInstance() {
  ::autofill::_AutofillQueryResponseContents_Field_default_instance_._instance.get_mutable()->password_requirements_ = const_cast< ::autofill::PasswordRequirementsSpec*>(
      ::autofill::PasswordRequirementsSpec::internal_default_instance());
}
class AutofillQueryResponseContents_Field::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponseContents_Field>()._has_bits_);
  static void set_has_overall_type_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::PasswordRequirementsSpec& password_requirements(const AutofillQueryResponseContents_Field* msg);
  static void set_has_password_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::PasswordRequirementsSpec&
AutofillQueryResponseContents_Field::_Internal::password_requirements(const AutofillQueryResponseContents_Field* msg) {
  return *msg->password_requirements_;
}
void AutofillQueryResponseContents_Field::clear_password_requirements() {
  if (password_requirements_ != nullptr) password_requirements_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents.Field)
}
AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field(const AutofillQueryResponseContents_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_password_requirements()) {
    password_requirements_ = new ::autofill::PasswordRequirementsSpec(*from.password_requirements_);
  } else {
    password_requirements_ = nullptr;
  }
  overall_type_prediction_ = from.overall_type_prediction_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents.Field)
}

void AutofillQueryResponseContents_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryResponseContents_Field_server_2eproto.base);
  ::memset(&password_requirements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overall_type_prediction_) -
      reinterpret_cast<char*>(&password_requirements_)) + sizeof(overall_type_prediction_));
}

AutofillQueryResponseContents_Field::~AutofillQueryResponseContents_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents.Field)
  SharedDtor();
}

void AutofillQueryResponseContents_Field::SharedDtor() {
  if (this != internal_default_instance()) delete password_requirements_;
}

void AutofillQueryResponseContents_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponseContents_Field& AutofillQueryResponseContents_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponseContents_Field_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponseContents_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(password_requirements_ != nullptr);
    password_requirements_->Clear();
  }
  overall_type_prediction_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponseContents_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 overall_type_prediction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_overall_type_prediction(&has_bits);
          overall_type_prediction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec password_requirements = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_password_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponseContents_Field::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents.Field)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 overall_type_prediction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_overall_type_prediction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &overall_type_prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec password_requirements = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_password_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagWireType(tag) ==
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents.Field)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponseContents_Field::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 overall_type_prediction = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(3, this->overall_type_prediction(), output);
  }

  // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->predictions(static_cast<int>(i)),
      output);
  }

  // optional .autofill.PasswordRequirementsSpec password_requirements = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::password_requirements(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents.Field)
}

size_t AutofillQueryResponseContents_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents.Field)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required fixed32 overall_type_prediction = 3;
  if (has_overall_type_prediction()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->predictions(static_cast<int>(i)));
    }
  }

  // optional .autofill.PasswordRequirementsSpec password_requirements = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_requirements_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponseContents_Field::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponseContents_Field*>(
      &from));
}

void AutofillQueryResponseContents_Field::MergeFrom(const AutofillQueryResponseContents_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_password_requirements()->::autofill::PasswordRequirementsSpec::MergeFrom(from.password_requirements());
    }
    if (cached_has_bits & 0x00000002u) {
      overall_type_prediction_ = from.overall_type_prediction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryResponseContents_Field::CopyFrom(const AutofillQueryResponseContents_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AutofillQueryResponseContents_Field::InternalSwap(AutofillQueryResponseContents_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&predictions_)->InternalSwap(CastToBase(&other->predictions_));
  swap(password_requirements_, other->password_requirements_);
  swap(overall_type_prediction_, other->overall_type_prediction_);
}

std::string AutofillQueryResponseContents_Field::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents.Field";
}


// ===================================================================

void AutofillQueryResponseContents::InitAsDefaultInstance() {
}
class AutofillQueryResponseContents::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponseContents>()._has_bits_);
  static void set_has_upload_required(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillQueryResponseContents::AutofillQueryResponseContents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents)
}
AutofillQueryResponseContents::AutofillQueryResponseContents(const AutofillQueryResponseContents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_required_ = from.upload_required_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents)
}

void AutofillQueryResponseContents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryResponseContents_server_2eproto.base);
  upload_required_ = false;
}

AutofillQueryResponseContents::~AutofillQueryResponseContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents)
  SharedDtor();
}

void AutofillQueryResponseContents::SharedDtor() {
}

void AutofillQueryResponseContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponseContents& AutofillQueryResponseContents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponseContents_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponseContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  upload_required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponseContents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool upload_required = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upload_required(&has_bits);
          upload_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Field = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 19)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(add_field(), ptr, 19);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 19);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponseContents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool upload_required = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_upload_required(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 2 { ... };
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (19 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadGroup(2, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponseContents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool upload_required = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->upload_required(), output);
  }

  // repeated group Field = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteGroup(
      2,
      this->field(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents)
}

size_t AutofillQueryResponseContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Field = 2 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          this->field(static_cast<int>(i)));
    }
  }

  // optional bool upload_required = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponseContents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponseContents*>(
      &from));
}

void AutofillQueryResponseContents::MergeFrom(const AutofillQueryResponseContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.has_upload_required()) {
    set_upload_required(from.upload_required());
  }
}

void AutofillQueryResponseContents::CopyFrom(const AutofillQueryResponseContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillQueryResponseContents::InternalSwap(AutofillQueryResponseContents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_)->InternalSwap(CastToBase(&other->field_));
  swap(upload_required_, other->upload_required_);
}

std::string AutofillQueryResponseContents::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents";
}


// ===================================================================

void AutofillRandomizedValue::InitAsDefaultInstance() {
}
class AutofillRandomizedValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillRandomizedValue>()._has_bits_);
  static void set_has_encoding_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encoded_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillRandomizedValue::AutofillRandomizedValue()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillRandomizedValue)
}
AutofillRandomizedValue::AutofillRandomizedValue(const AutofillRandomizedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoded_bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_bits()) {
    encoded_bits_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_bits_);
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillRandomizedValue)
}

void AutofillRandomizedValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillRandomizedValue_server_2eproto.base);
  encoded_bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_type_ = -1;
}

AutofillRandomizedValue::~AutofillRandomizedValue() {
  // @@protoc_insertion_point(destructor:autofill.AutofillRandomizedValue)
  SharedDtor();
}

void AutofillRandomizedValue::SharedDtor() {
  encoded_bits_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillRandomizedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillRandomizedValue& AutofillRandomizedValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillRandomizedValue_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillRandomizedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillRandomizedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encoded_bits_.ClearNonDefaultToEmptyNoArena();
    }
    encoding_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillRandomizedValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.AutofillRandomizedValue.EncodingType encoding_type = 1 [default = UNSPECIFIED_ENCODING_TYPE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::AutofillRandomizedValue_EncodingType_IsValid(val))) {
            set_encoding_type(static_cast<::autofill::AutofillRandomizedValue_EncodingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes encoded_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_bits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillRandomizedValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillRandomizedValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.AutofillRandomizedValue.EncodingType encoding_type = 1 [default = UNSPECIFIED_ENCODING_TYPE];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillRandomizedValue_EncodingType_IsValid(value)) {
            set_encoding_type(static_cast< ::autofill::AutofillRandomizedValue_EncodingType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encoded_bits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_bits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillRandomizedValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillRandomizedValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillRandomizedValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillRandomizedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.AutofillRandomizedValue.EncodingType encoding_type = 1 [default = UNSPECIFIED_ENCODING_TYPE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->encoding_type(), output);
  }

  // optional bytes encoded_bits = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encoded_bits(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillRandomizedValue)
}

size_t AutofillRandomizedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillRandomizedValue)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encoded_bits = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->encoded_bits());
    }

    // optional .autofill.AutofillRandomizedValue.EncodingType encoding_type = 1 [default = UNSPECIFIED_ENCODING_TYPE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->encoding_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillRandomizedValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillRandomizedValue*>(
      &from));
}

void AutofillRandomizedValue::MergeFrom(const AutofillRandomizedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillRandomizedValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encoded_bits_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_bits_);
    }
    if (cached_has_bits & 0x00000002u) {
      encoding_type_ = from.encoding_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillRandomizedValue::CopyFrom(const AutofillRandomizedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillRandomizedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillRandomizedValue::IsInitialized() const {
  return true;
}

void AutofillRandomizedValue::InternalSwap(AutofillRandomizedValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encoded_bits_.Swap(&other->encoded_bits_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoding_type_, other->encoding_type_);
}

std::string AutofillRandomizedValue::GetTypeName() const {
  return "autofill.AutofillRandomizedValue";
}


// ===================================================================

void AutofillRandomizedFormMetadata::InitAsDefaultInstance() {
  ::autofill::_AutofillRandomizedFormMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFormMetadata_default_instance_._instance.get_mutable()->name_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFormMetadata_default_instance_._instance.get_mutable()->action_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
}
class AutofillRandomizedFormMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillRandomizedFormMetadata>()._has_bits_);
  static const ::autofill::AutofillRandomizedValue& id(const AutofillRandomizedFormMetadata* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::AutofillRandomizedValue& name(const AutofillRandomizedFormMetadata* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedValue& action(const AutofillRandomizedFormMetadata* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFormMetadata::_Internal::id(const AutofillRandomizedFormMetadata* msg) {
  return *msg->id_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFormMetadata::_Internal::name(const AutofillRandomizedFormMetadata* msg) {
  return *msg->name_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFormMetadata::_Internal::action(const AutofillRandomizedFormMetadata* msg) {
  return *msg->action_;
}
AutofillRandomizedFormMetadata::AutofillRandomizedFormMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillRandomizedFormMetadata)
}
AutofillRandomizedFormMetadata::AutofillRandomizedFormMetadata(const AutofillRandomizedFormMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::autofill::AutofillRandomizedValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_name()) {
    name_ = new ::autofill::AutofillRandomizedValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::autofill::AutofillRandomizedValue(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillRandomizedFormMetadata)
}

void AutofillRandomizedFormMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillRandomizedFormMetadata_server_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_)) + sizeof(action_));
}

AutofillRandomizedFormMetadata::~AutofillRandomizedFormMetadata() {
  // @@protoc_insertion_point(destructor:autofill.AutofillRandomizedFormMetadata)
  SharedDtor();
}

void AutofillRandomizedFormMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete action_;
}

void AutofillRandomizedFormMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillRandomizedFormMetadata& AutofillRandomizedFormMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillRandomizedFormMetadata_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillRandomizedFormMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillRandomizedFormMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillRandomizedFormMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.AutofillRandomizedValue id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillRandomizedFormMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillRandomizedFormMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.AutofillRandomizedValue id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue action = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillRandomizedFormMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillRandomizedFormMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillRandomizedFormMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillRandomizedFormMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.AutofillRandomizedValue id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::id(this), output);
  }

  // optional .autofill.AutofillRandomizedValue name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::name(this), output);
  }

  // optional .autofill.AutofillRandomizedValue action = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::action(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillRandomizedFormMetadata)
}

size_t AutofillRandomizedFormMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillRandomizedFormMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill.AutofillRandomizedValue id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .autofill.AutofillRandomizedValue name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_);
    }

    // optional .autofill.AutofillRandomizedValue action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillRandomizedFormMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillRandomizedFormMetadata*>(
      &from));
}

void AutofillRandomizedFormMetadata::MergeFrom(const AutofillRandomizedFormMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillRandomizedFormMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::autofill::AutofillRandomizedValue::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_name()->::autofill::AutofillRandomizedValue::MergeFrom(from.name());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::autofill::AutofillRandomizedValue::MergeFrom(from.action());
    }
  }
}

void AutofillRandomizedFormMetadata::CopyFrom(const AutofillRandomizedFormMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillRandomizedFormMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillRandomizedFormMetadata::IsInitialized() const {
  return true;
}

void AutofillRandomizedFormMetadata::InternalSwap(AutofillRandomizedFormMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(name_, other->name_);
  swap(action_, other->action_);
}

std::string AutofillRandomizedFormMetadata::GetTypeName() const {
  return "autofill.AutofillRandomizedFormMetadata";
}


// ===================================================================

void AutofillRandomizedFieldMetadata::InitAsDefaultInstance() {
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->name_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->type_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->label_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->aria_label_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->aria_description_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->css_class_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->placeholder_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
  ::autofill::_AutofillRandomizedFieldMetadata_default_instance_._instance.get_mutable()->initial_value_hash_ = const_cast< ::autofill::AutofillRandomizedValue*>(
      ::autofill::AutofillRandomizedValue::internal_default_instance());
}
class AutofillRandomizedFieldMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillRandomizedFieldMetadata>()._has_bits_);
  static const ::autofill::AutofillRandomizedValue& id(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::AutofillRandomizedValue& name(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedValue& type(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::AutofillRandomizedValue& label(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::AutofillRandomizedValue& aria_label(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_aria_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::autofill::AutofillRandomizedValue& aria_description(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_aria_description(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::autofill::AutofillRandomizedValue& css_class(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_css_class(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::autofill::AutofillRandomizedValue& placeholder(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::autofill::AutofillRandomizedValue& initial_value_hash(const AutofillRandomizedFieldMetadata* msg);
  static void set_has_initial_value_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::id(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->id_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::name(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->name_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::type(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->type_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::label(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->label_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::aria_label(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->aria_label_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::aria_description(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->aria_description_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::css_class(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->css_class_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::placeholder(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->placeholder_;
}
const ::autofill::AutofillRandomizedValue&
AutofillRandomizedFieldMetadata::_Internal::initial_value_hash(const AutofillRandomizedFieldMetadata* msg) {
  return *msg->initial_value_hash_;
}
AutofillRandomizedFieldMetadata::AutofillRandomizedFieldMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillRandomizedFieldMetadata)
}
AutofillRandomizedFieldMetadata::AutofillRandomizedFieldMetadata(const AutofillRandomizedFieldMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::autofill::AutofillRandomizedValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_name()) {
    name_ = new ::autofill::AutofillRandomizedValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::autofill::AutofillRandomizedValue(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from.has_label()) {
    label_ = new ::autofill::AutofillRandomizedValue(*from.label_);
  } else {
    label_ = nullptr;
  }
  if (from.has_aria_label()) {
    aria_label_ = new ::autofill::AutofillRandomizedValue(*from.aria_label_);
  } else {
    aria_label_ = nullptr;
  }
  if (from.has_aria_description()) {
    aria_description_ = new ::autofill::AutofillRandomizedValue(*from.aria_description_);
  } else {
    aria_description_ = nullptr;
  }
  if (from.has_css_class()) {
    css_class_ = new ::autofill::AutofillRandomizedValue(*from.css_class_);
  } else {
    css_class_ = nullptr;
  }
  if (from.has_placeholder()) {
    placeholder_ = new ::autofill::AutofillRandomizedValue(*from.placeholder_);
  } else {
    placeholder_ = nullptr;
  }
  if (from.has_initial_value_hash()) {
    initial_value_hash_ = new ::autofill::AutofillRandomizedValue(*from.initial_value_hash_);
  } else {
    initial_value_hash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillRandomizedFieldMetadata)
}

void AutofillRandomizedFieldMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillRandomizedFieldMetadata_server_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_value_hash_) -
      reinterpret_cast<char*>(&id_)) + sizeof(initial_value_hash_));
}

AutofillRandomizedFieldMetadata::~AutofillRandomizedFieldMetadata() {
  // @@protoc_insertion_point(destructor:autofill.AutofillRandomizedFieldMetadata)
  SharedDtor();
}

void AutofillRandomizedFieldMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete label_;
  if (this != internal_default_instance()) delete aria_label_;
  if (this != internal_default_instance()) delete aria_description_;
  if (this != internal_default_instance()) delete css_class_;
  if (this != internal_default_instance()) delete placeholder_;
  if (this != internal_default_instance()) delete initial_value_hash_;
}

void AutofillRandomizedFieldMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillRandomizedFieldMetadata& AutofillRandomizedFieldMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillRandomizedFieldMetadata_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillRandomizedFieldMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillRandomizedFieldMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(label_ != nullptr);
      label_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aria_label_ != nullptr);
      aria_label_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(aria_description_ != nullptr);
      aria_description_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(css_class_ != nullptr);
      css_class_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(placeholder_ != nullptr);
      placeholder_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(initial_value_hash_ != nullptr);
    initial_value_hash_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillRandomizedFieldMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.AutofillRandomizedValue id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue aria_label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_aria_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue aria_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_aria_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue css_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_css_class(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue placeholder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_placeholder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedValue initial_value_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_initial_value_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillRandomizedFieldMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillRandomizedFieldMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.AutofillRandomizedValue id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue label = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue aria_label = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aria_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue aria_description = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aria_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue css_class = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_css_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue placeholder = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_placeholder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedValue initial_value_hash = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_value_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillRandomizedFieldMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillRandomizedFieldMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillRandomizedFieldMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillRandomizedFieldMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.AutofillRandomizedValue id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::id(this), output);
  }

  // optional .autofill.AutofillRandomizedValue name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::name(this), output);
  }

  // optional .autofill.AutofillRandomizedValue type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::type(this), output);
  }

  // optional .autofill.AutofillRandomizedValue label = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::label(this), output);
  }

  // optional .autofill.AutofillRandomizedValue aria_label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::aria_label(this), output);
  }

  // optional .autofill.AutofillRandomizedValue aria_description = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::aria_description(this), output);
  }

  // optional .autofill.AutofillRandomizedValue css_class = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::css_class(this), output);
  }

  // optional .autofill.AutofillRandomizedValue placeholder = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::placeholder(this), output);
  }

  // optional .autofill.AutofillRandomizedValue initial_value_hash = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::initial_value_hash(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillRandomizedFieldMetadata)
}

size_t AutofillRandomizedFieldMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillRandomizedFieldMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .autofill.AutofillRandomizedValue id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .autofill.AutofillRandomizedValue name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_);
    }

    // optional .autofill.AutofillRandomizedValue type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .autofill.AutofillRandomizedValue label = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_);
    }

    // optional .autofill.AutofillRandomizedValue aria_label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aria_label_);
    }

    // optional .autofill.AutofillRandomizedValue aria_description = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aria_description_);
    }

    // optional .autofill.AutofillRandomizedValue css_class = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *css_class_);
    }

    // optional .autofill.AutofillRandomizedValue placeholder = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *placeholder_);
    }

  }
  // optional .autofill.AutofillRandomizedValue initial_value_hash = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_value_hash_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillRandomizedFieldMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillRandomizedFieldMetadata*>(
      &from));
}

void AutofillRandomizedFieldMetadata::MergeFrom(const AutofillRandomizedFieldMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillRandomizedFieldMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::autofill::AutofillRandomizedValue::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_name()->::autofill::AutofillRandomizedValue::MergeFrom(from.name());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_type()->::autofill::AutofillRandomizedValue::MergeFrom(from.type());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_label()->::autofill::AutofillRandomizedValue::MergeFrom(from.label());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_aria_label()->::autofill::AutofillRandomizedValue::MergeFrom(from.aria_label());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_aria_description()->::autofill::AutofillRandomizedValue::MergeFrom(from.aria_description());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_css_class()->::autofill::AutofillRandomizedValue::MergeFrom(from.css_class());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_placeholder()->::autofill::AutofillRandomizedValue::MergeFrom(from.placeholder());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_initial_value_hash()->::autofill::AutofillRandomizedValue::MergeFrom(from.initial_value_hash());
  }
}

void AutofillRandomizedFieldMetadata::CopyFrom(const AutofillRandomizedFieldMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillRandomizedFieldMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillRandomizedFieldMetadata::IsInitialized() const {
  return true;
}

void AutofillRandomizedFieldMetadata::InternalSwap(AutofillRandomizedFieldMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(name_, other->name_);
  swap(type_, other->type_);
  swap(label_, other->label_);
  swap(aria_label_, other->aria_label_);
  swap(aria_description_, other->aria_description_);
  swap(css_class_, other->css_class_);
  swap(placeholder_, other->placeholder_);
  swap(initial_value_hash_, other->initial_value_hash_);
}

std::string AutofillRandomizedFieldMetadata::GetTypeName() const {
  return "autofill.AutofillRandomizedFieldMetadata";
}


// ===================================================================

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::InitAsDefaultInstance() {
}
class AutofillUploadContents_Field_AutofillTypeValiditiesPair::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadContents_Field_AutofillTypeValiditiesPair>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillUploadContents_Field_AutofillTypeValiditiesPair::AutofillUploadContents_Field_AutofillTypeValiditiesPair()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
}
AutofillUploadContents_Field_AutofillTypeValiditiesPair::AutofillUploadContents_Field_AutofillTypeValiditiesPair(const AutofillUploadContents_Field_AutofillTypeValiditiesPair& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      validity_(from.validity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::SharedCtor() {
  type_ = 0;
}

AutofillUploadContents_Field_AutofillTypeValiditiesPair::~AutofillUploadContents_Field_AutofillTypeValiditiesPair() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  SharedDtor();
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::SharedDtor() {
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillUploadContents_Field_AutofillTypeValiditiesPair& AutofillUploadContents_Field_AutofillTypeValiditiesPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillUploadContents_Field_AutofillTypeValiditiesPair_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillUploadContents_Field_AutofillTypeValiditiesPair::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validity_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillUploadContents_Field_AutofillTypeValiditiesPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 validity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_validity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_validity(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillUploadContents_Field_AutofillTypeValiditiesPair::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 validity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_validity())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_validity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 validity = 2;
  for (int i = 0, n = this->validity_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->validity(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
}

size_t AutofillUploadContents_Field_AutofillTypeValiditiesPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 validity = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->validity_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->validity_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillUploadContents_Field_AutofillTypeValiditiesPair*>(
      &from));
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::MergeFrom(const AutofillUploadContents_Field_AutofillTypeValiditiesPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validity_.MergeFrom(from.validity_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::CopyFrom(const AutofillUploadContents_Field_AutofillTypeValiditiesPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents_Field_AutofillTypeValiditiesPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AutofillUploadContents_Field_AutofillTypeValiditiesPair::InternalSwap(AutofillUploadContents_Field_AutofillTypeValiditiesPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  validity_.InternalSwap(&other->validity_);
  swap(type_, other->type_);
}

std::string AutofillUploadContents_Field_AutofillTypeValiditiesPair::GetTypeName() const {
  return "autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair";
}


// ===================================================================

void AutofillUploadContents_Field::InitAsDefaultInstance() {
  ::autofill::_AutofillUploadContents_Field_default_instance_._instance.get_mutable()->randomized_field_metadata_ = const_cast< ::autofill::AutofillRandomizedFieldMetadata*>(
      ::autofill::AutofillRandomizedFieldMetadata::internal_default_instance());
}
class AutofillUploadContents_Field::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadContents_Field>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autocomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::AutofillRandomizedFieldMetadata& randomized_field_metadata(const AutofillUploadContents_Field* msg);
  static void set_has_randomized_field_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_generation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_css_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_properties_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_generated_password_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_initial_value_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::autofill::AutofillRandomizedFieldMetadata&
AutofillUploadContents_Field::_Internal::randomized_field_metadata(const AutofillUploadContents_Field* msg) {
  return *msg->randomized_field_metadata_;
}
AutofillUploadContents_Field::AutofillUploadContents_Field()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents.Field)
}
AutofillUploadContents_Field::AutofillUploadContents_Field(const AutofillUploadContents_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      autofill_type_(from.autofill_type_),
      autofill_type_validities_(from.autofill_type_validities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  autocomplete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_autocomplete()) {
    autocomplete_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.autocomplete_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  css_classes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_css_classes()) {
    css_classes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.css_classes_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_randomized_field_metadata()) {
    randomized_field_metadata_ = new ::autofill::AutofillRandomizedFieldMetadata(*from.randomized_field_metadata_);
  } else {
    randomized_field_metadata_ = nullptr;
  }
  ::memcpy(&signature_, &from.signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_value_hash_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(initial_value_hash_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents.Field)
}

void AutofillUploadContents_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillUploadContents_Field_server_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  autocomplete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  css_classes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&randomized_field_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_value_hash_) -
      reinterpret_cast<char*>(&randomized_field_metadata_)) + sizeof(initial_value_hash_));
}

AutofillUploadContents_Field::~AutofillUploadContents_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents.Field)
  SharedDtor();
}

void AutofillUploadContents_Field::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  autocomplete_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  css_classes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete randomized_field_metadata_;
}

void AutofillUploadContents_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillUploadContents_Field& AutofillUploadContents_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillUploadContents_Field_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillUploadContents_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  autofill_type_.Clear();
  autofill_type_validities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      autocomplete_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      css_classes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(randomized_field_metadata_ != nullptr);
      randomized_field_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&generation_type_) -
        reinterpret_cast<char*>(&signature_)) + sizeof(generation_type_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&properties_mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_value_hash_) -
        reinterpret_cast<char*>(&properties_mask_)) + sizeof(initial_value_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillUploadContents_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 autofill_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_autofill_type(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 61);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(mutable_autofill_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string autocomplete = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_autocomplete(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(val))) {
            set_generation_type(static_cast<::autofill::AutofillUploadContents_Field_PasswordGenerationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string css_classes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_css_classes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 properties_mask = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_properties_mask(&has_bits);
          properties_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool generated_password_changed = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_generated_password_changed(&has_bits);
          generated_password_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::AutofillUploadContents_Field_VoteType_IsValid(val))) {
            set_vote_type(static_cast<::autofill::AutofillUploadContents_Field_VoteType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFieldMetadata randomized_field_metadata = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_randomized_field_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair autofill_type_validities = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_autofill_type_validities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 666);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_value_hash = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_initial_value_hash(&has_bits);
          initial_value_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillUploadContents_Field::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents.Field)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 signature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 autofill_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61u, input, this->mutable_autofill_type())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_autofill_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string autocomplete = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_autocomplete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(value)) {
            set_generation_type(static_cast< ::autofill::AutofillUploadContents_Field_PasswordGenerationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string css_classes = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_css_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 properties_mask = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_properties_mask(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &properties_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool generated_password_changed = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_generated_password_changed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generated_password_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_Field_VoteType_IsValid(value)) {
            set_vote_type(static_cast< ::autofill::AutofillUploadContents_Field_VoteType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFieldMetadata randomized_field_metadata = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_randomized_field_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair autofill_type_validities = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_autofill_type_validities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_value_hash = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_initial_value_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_value_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagWireType(tag) ==
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents.Field)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillUploadContents_Field::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 signature = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(6, this->signature(), output);
  }

  // repeated fixed32 autofill_type = 7;
  for (int i = 0, n = this->autofill_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(
      7, this->autofill_type(i), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional string autocomplete = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->autocomplete(), output);
  }

  // optional string type = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->type(), output);
  }

  // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->generation_type(), output);
  }

  // optional string css_classes = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->css_classes(), output);
  }

  // optional uint32 properties_mask = 20;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->properties_mask(), output);
  }

  // optional string id = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->id(), output);
  }

  // optional bool generated_password_changed = 22;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->generated_password_changed(), output);
  }

  // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->vote_type(), output);
  }

  // optional .autofill.AutofillRandomizedFieldMetadata randomized_field_metadata = 33;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::randomized_field_metadata(this), output);
  }

  // repeated .autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair autofill_type_validities = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->autofill_type_validities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35,
      this->autofill_type_validities(static_cast<int>(i)),
      output);
  }

  // optional uint32 initial_value_hash = 40;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(40, this->initial_value_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents.Field)
}

size_t AutofillUploadContents_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents.Field)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required fixed32 signature = 6;
  if (has_signature()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 autofill_type = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->autofill_type_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->autofill_type_size());
    total_size += data_size;
  }

  // repeated .autofill.AutofillUploadContents.Field.AutofillTypeValiditiesPair autofill_type_validities = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->autofill_type_validities_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->autofill_type_validities(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string autocomplete = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->autocomplete());
    }

    // optional string type = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string css_classes = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->css_classes());
    }

    // optional string id = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .autofill.AutofillRandomizedFieldMetadata randomized_field_metadata = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *randomized_field_metadata_);
    }

  }
  // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->generation_type());
  }

  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 properties_mask = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->properties_mask());
    }

    // optional bool generated_password_changed = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vote_type());
    }

    // optional uint32 initial_value_hash = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->initial_value_hash());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadContents_Field::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillUploadContents_Field*>(
      &from));
}

void AutofillUploadContents_Field::MergeFrom(const AutofillUploadContents_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  autofill_type_.MergeFrom(from.autofill_type_);
  autofill_type_validities_.MergeFrom(from.autofill_type_validities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      autocomplete_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.autocomplete_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      css_classes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.css_classes_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_randomized_field_metadata()->::autofill::AutofillRandomizedFieldMetadata::MergeFrom(from.randomized_field_metadata());
    }
    if (cached_has_bits & 0x00000040u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000080u) {
      generation_type_ = from.generation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      properties_mask_ = from.properties_mask_;
    }
    if (cached_has_bits & 0x00000200u) {
      generated_password_changed_ = from.generated_password_changed_;
    }
    if (cached_has_bits & 0x00000400u) {
      vote_type_ = from.vote_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      initial_value_hash_ = from.initial_value_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillUploadContents_Field::CopyFrom(const AutofillUploadContents_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->autofill_type_validities())) return false;
  return true;
}

void AutofillUploadContents_Field::InternalSwap(AutofillUploadContents_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  autofill_type_.InternalSwap(&other->autofill_type_);
  CastToBase(&autofill_type_validities_)->InternalSwap(CastToBase(&other->autofill_type_validities_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  autocomplete_.Swap(&other->autocomplete_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  css_classes_.Swap(&other->css_classes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(randomized_field_metadata_, other->randomized_field_metadata_);
  swap(signature_, other->signature_);
  swap(generation_type_, other->generation_type_);
  swap(properties_mask_, other->properties_mask_);
  swap(generated_password_changed_, other->generated_password_changed_);
  swap(vote_type_, other->vote_type_);
  swap(initial_value_hash_, other->initial_value_hash_);
}

std::string AutofillUploadContents_Field::GetTypeName() const {
  return "autofill.AutofillUploadContents.Field";
}


// ===================================================================

void AutofillUploadContents_ButtonTitle::InitAsDefaultInstance() {
}
class AutofillUploadContents_ButtonTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadContents_ButtonTitle>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AutofillUploadContents_ButtonTitle::AutofillUploadContents_ButtonTitle()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents.ButtonTitle)
}
AutofillUploadContents_ButtonTitle::AutofillUploadContents_ButtonTitle(const AutofillUploadContents_ButtonTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents.ButtonTitle)
}

void AutofillUploadContents_ButtonTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillUploadContents_ButtonTitle_server_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AutofillUploadContents_ButtonTitle::~AutofillUploadContents_ButtonTitle() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents.ButtonTitle)
  SharedDtor();
}

void AutofillUploadContents_ButtonTitle::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillUploadContents_ButtonTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillUploadContents_ButtonTitle& AutofillUploadContents_ButtonTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillUploadContents_ButtonTitle_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillUploadContents_ButtonTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents.ButtonTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillUploadContents_ButtonTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillUploadContents.ButtonTitle.ButtonTitleType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::AutofillUploadContents_ButtonTitle_ButtonTitleType_IsValid(val))) {
            set_type(static_cast<::autofill::AutofillUploadContents_ButtonTitle_ButtonTitleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillUploadContents_ButtonTitle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents.ButtonTitle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.ButtonTitle.ButtonTitleType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_ButtonTitle_ButtonTitleType_IsValid(value)) {
            set_type(static_cast< ::autofill::AutofillUploadContents_ButtonTitle_ButtonTitleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents.ButtonTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents.ButtonTitle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillUploadContents_ButtonTitle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents.ButtonTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional .autofill.AutofillUploadContents.ButtonTitle.ButtonTitleType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents.ButtonTitle)
}

size_t AutofillUploadContents_ButtonTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents.ButtonTitle)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .autofill.AutofillUploadContents.ButtonTitle.ButtonTitleType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadContents_ButtonTitle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillUploadContents_ButtonTitle*>(
      &from));
}

void AutofillUploadContents_ButtonTitle::MergeFrom(const AutofillUploadContents_ButtonTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents.ButtonTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillUploadContents_ButtonTitle::CopyFrom(const AutofillUploadContents_ButtonTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents.ButtonTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents_ButtonTitle::IsInitialized() const {
  return true;
}

void AutofillUploadContents_ButtonTitle::InternalSwap(AutofillUploadContents_ButtonTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

std::string AutofillUploadContents_ButtonTitle::GetTypeName() const {
  return "autofill.AutofillUploadContents.ButtonTitle";
}


// ===================================================================

void AutofillUploadContents::InitAsDefaultInstance() {
  ::autofill::_AutofillUploadContents_default_instance_._instance.get_mutable()->randomized_form_metadata_ = const_cast< ::autofill::AutofillRandomizedFormMetadata*>(
      ::autofill::AutofillRandomizedFormMetadata::internal_default_instance());
}
class AutofillUploadContents::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadContents>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_form_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_secondary_form_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_autofill_used(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_data_present(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_login_form_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_submission(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_form_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passwords_revealed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_password_has_lowercase_letter(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_password_has_uppercase_letter(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_password_has_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_password_has_special_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_password_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_password_special_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_submission_event(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::AutofillRandomizedFormMetadata& randomized_form_metadata(const AutofillUploadContents* msg);
  static void set_has_randomized_form_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_form_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_was_throttleable(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::autofill::AutofillRandomizedFormMetadata&
AutofillUploadContents::_Internal::randomized_form_metadata(const AutofillUploadContents* msg) {
  return *msg->randomized_form_metadata_;
}
AutofillUploadContents::AutofillUploadContents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents)
}
AutofillUploadContents::AutofillUploadContents(const AutofillUploadContents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_(from.field_),
      button_title_(from.button_title_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  data_present_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_present()) {
    data_present_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_present_);
  }
  form_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_form_name()) {
    form_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.form_name_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_randomized_form_metadata()) {
    randomized_form_metadata_ = new ::autofill::AutofillRandomizedFormMetadata(*from.randomized_form_metadata_);
  } else {
    randomized_form_metadata_ = nullptr;
  }
  ::memcpy(&form_signature_, &from.form_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&password_special_symbol_) -
    reinterpret_cast<char*>(&form_signature_)) + sizeof(password_special_symbol_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents)
}

void AutofillUploadContents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillUploadContents_server_2eproto.base);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_present_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  form_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&randomized_form_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_special_symbol_) -
      reinterpret_cast<char*>(&randomized_form_metadata_)) + sizeof(password_special_symbol_));
}

AutofillUploadContents::~AutofillUploadContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents)
  SharedDtor();
}

void AutofillUploadContents::SharedDtor() {
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_present_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  form_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete randomized_form_metadata_;
}

void AutofillUploadContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillUploadContents& AutofillUploadContents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillUploadContents_server_2eproto.base);
  return *internal_default_instance();
}


void AutofillUploadContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  button_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      client_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_present_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      form_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      language_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(randomized_form_metadata_ != nullptr);
      randomized_form_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&form_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_form_signature_) -
        reinterpret_cast<char*>(&form_signature_)) + sizeof(login_form_signature_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&autofill_used_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&password_has_special_symbol_) -
        reinterpret_cast<char*>(&autofill_used_)) + sizeof(password_has_special_symbol_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&has_form_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&password_special_symbol_) -
        reinterpret_cast<char*>(&has_form_tag_)) + sizeof(password_special_symbol_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillUploadContents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 form_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_form_signature(&has_bits);
          form_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required bool autofill_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_autofill_used(&has_bits);
          autofill_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string data_present = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data_present(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Field = 5 { ... };
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 43)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(add_field(), ptr, 43);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 43);
        } else goto handle_unusual;
        continue;
      // optional fixed64 action_signature = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_action_signature(&has_bits);
          action_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 login_form_signature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_login_form_signature(&has_bits);
          login_form_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool submission = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_submission(&has_bits);
          submission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string form_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_form_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passwords_revealed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_passwords_revealed(&has_bits);
          passwords_revealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool password_has_lowercase_letter = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_password_has_lowercase_letter(&has_bits);
          password_has_lowercase_letter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool password_has_uppercase_letter = 26 [deprecated = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_password_has_uppercase_letter(&has_bits);
          password_has_uppercase_letter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool password_has_numeric = 27 [deprecated = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_password_has_numeric(&has_bits);
          password_has_numeric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool password_has_special_symbol = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_password_has_special_symbol(&has_bits);
          password_has_special_symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 password_length = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_password_length(&has_bits);
          password_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillUploadContents.SubmissionIndicatorEvent submission_event = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::AutofillUploadContents_SubmissionIndicatorEvent_IsValid(val))) {
            set_submission_event(static_cast<::autofill::AutofillUploadContents_SubmissionIndicatorEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string language = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_language(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFormMetadata randomized_form_metadata = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_randomized_form_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 secondary_form_signature = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_secondary_form_signature(&has_bits);
          secondary_form_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillUploadContents.ButtonTitle button_title = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_button_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 674);
        } else goto handle_unusual;
        continue;
      // optional bool has_form_tag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_form_tag(&has_bits);
          has_form_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_throttleable = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_was_throttleable(&has_bits);
          was_throttleable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 password_special_symbol = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_password_special_symbol(&has_bits);
          password_special_symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillUploadContents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 form_signature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_form_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &form_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool autofill_used = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_autofill_used(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofill_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data_present = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 5 { ... };
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (43 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadGroup(5, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 action_signature = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {
          _Internal::set_has_action_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &action_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 login_form_signature = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {
          _Internal::set_has_login_form_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &login_form_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool submission = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_submission(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &submission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string form_name = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_form_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool passwords_revealed = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_passwords_revealed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passwords_revealed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool password_has_lowercase_letter = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_password_has_lowercase_letter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_has_lowercase_letter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool password_has_uppercase_letter = 26 [deprecated = true];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_password_has_uppercase_letter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_has_uppercase_letter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool password_has_numeric = 27 [deprecated = true];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_password_has_numeric(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_has_numeric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool password_has_special_symbol = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_password_has_special_symbol(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_has_special_symbol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 password_length = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_password_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.SubmissionIndicatorEvent submission_event = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_SubmissionIndicatorEvent_IsValid(value)) {
            set_submission_event(static_cast< ::autofill::AutofillUploadContents_SubmissionIndicatorEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(240u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFormMetadata randomized_form_metadata = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_randomized_form_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 secondary_form_signature = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (273 & 0xFF)) {
          _Internal::set_has_secondary_form_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondary_form_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillUploadContents.ButtonTitle button_title = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_button_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_form_tag = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_has_form_tag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_form_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_throttleable = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_was_throttleable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_throttleable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 password_special_symbol = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_password_special_symbol(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_special_symbol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillUploadContents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_version(), output);
  }

  // required fixed64 form_signature = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(2, this->form_signature(), output);
  }

  // required bool autofill_used = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->autofill_used(), output);
  }

  // required string data_present = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_present(), output);
  }

  // repeated group Field = 5 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteGroup(
      5,
      this->field(static_cast<int>(i)),
      output);
  }

  // optional fixed64 action_signature = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(13, this->action_signature(), output);
  }

  // optional fixed64 login_form_signature = 14;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(14, this->login_form_signature(), output);
  }

  // optional bool submission = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->submission(), output);
  }

  // optional string form_name = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->form_name(), output);
  }

  // optional bool passwords_revealed = 24;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->passwords_revealed(), output);
  }

  // optional bool password_has_lowercase_letter = 25;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->password_has_lowercase_letter(), output);
  }

  // optional bool password_has_uppercase_letter = 26 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->password_has_uppercase_letter(), output);
  }

  // optional bool password_has_numeric = 27 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->password_has_numeric(), output);
  }

  // optional bool password_has_special_symbol = 28;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(28, this->password_has_special_symbol(), output);
  }

  // optional uint32 password_length = 29;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(29, this->password_length(), output);
  }

  // optional .autofill.AutofillUploadContents.SubmissionIndicatorEvent submission_event = 30;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      30, this->submission_event(), output);
  }

  // optional string language = 31;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->language(), output);
  }

  // optional .autofill.AutofillRandomizedFormMetadata randomized_form_metadata = 32;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::randomized_form_metadata(this), output);
  }

  // optional fixed64 secondary_form_signature = 34;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(34, this->secondary_form_signature(), output);
  }

  // repeated .autofill.AutofillUploadContents.ButtonTitle button_title = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->button_title_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      36,
      this->button_title(static_cast<int>(i)),
      output);
  }

  // optional bool has_form_tag = 37;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->has_form_tag(), output);
  }

  // optional bool was_throttleable = 38;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(38, this->was_throttleable(), output);
  }

  // optional uint32 password_special_symbol = 39;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(39, this->password_special_symbol(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents)
}

size_t AutofillUploadContents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autofill.AutofillUploadContents)
  size_t total_size = 0;

  if (has_client_version()) {
    // required string client_version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  if (has_data_present()) {
    // required string data_present = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->data_present());
  }

  if (has_form_signature()) {
    // required fixed64 form_signature = 2;
    total_size += 1 + 8;
  }

  if (has_autofill_used()) {
    // required bool autofill_used = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AutofillUploadContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000123) ^ 0x00000123) == 0) {  // All required fields are present.
    // required string client_version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_version());

    // required string data_present = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->data_present());

    // required fixed64 form_signature = 2;
    total_size += 1 + 8;

    // required bool autofill_used = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Field = 5 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          this->field(static_cast<int>(i)));
    }
  }

  // repeated .autofill.AutofillUploadContents.ButtonTitle button_title = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->button_title_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->button_title(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional string form_name = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->form_name());
    }

    // optional string language = 31;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional .autofill.AutofillRandomizedFormMetadata randomized_form_metadata = 32;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *randomized_form_metadata_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional fixed64 action_signature = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed64 login_form_signature = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000fe00u) {
    // optional bool submission = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool passwords_revealed = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool password_has_lowercase_letter = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint32 password_length = 29;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->password_length());
    }

    // optional bool password_has_uppercase_letter = 26 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool password_has_numeric = 27 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool password_has_special_symbol = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool has_form_tag = 37;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional .autofill.AutofillUploadContents.SubmissionIndicatorEvent submission_event = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->submission_event());
    }

    // optional fixed64 secondary_form_signature = 34;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional bool was_throttleable = 38;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 password_special_symbol = 39;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->password_special_symbol());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadContents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillUploadContents*>(
      &from));
}

void AutofillUploadContents::MergeFrom(const AutofillUploadContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  button_title_.MergeFrom(from.button_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_present_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_present_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      form_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.form_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_randomized_form_metadata()->::autofill::AutofillRandomizedFormMetadata::MergeFrom(from.randomized_form_metadata());
    }
    if (cached_has_bits & 0x00000020u) {
      form_signature_ = from.form_signature_;
    }
    if (cached_has_bits & 0x00000040u) {
      action_signature_ = from.action_signature_;
    }
    if (cached_has_bits & 0x00000080u) {
      login_form_signature_ = from.login_form_signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      autofill_used_ = from.autofill_used_;
    }
    if (cached_has_bits & 0x00000200u) {
      submission_ = from.submission_;
    }
    if (cached_has_bits & 0x00000400u) {
      passwords_revealed_ = from.passwords_revealed_;
    }
    if (cached_has_bits & 0x00000800u) {
      password_has_lowercase_letter_ = from.password_has_lowercase_letter_;
    }
    if (cached_has_bits & 0x00001000u) {
      password_length_ = from.password_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      password_has_uppercase_letter_ = from.password_has_uppercase_letter_;
    }
    if (cached_has_bits & 0x00004000u) {
      password_has_numeric_ = from.password_has_numeric_;
    }
    if (cached_has_bits & 0x00008000u) {
      password_has_special_symbol_ = from.password_has_special_symbol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      has_form_tag_ = from.has_form_tag_;
    }
    if (cached_has_bits & 0x00020000u) {
      submission_event_ = from.submission_event_;
    }
    if (cached_has_bits & 0x00040000u) {
      secondary_form_signature_ = from.secondary_form_signature_;
    }
    if (cached_has_bits & 0x00080000u) {
      was_throttleable_ = from.was_throttleable_;
    }
    if (cached_has_bits & 0x00100000u) {
      password_special_symbol_ = from.password_special_symbol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillUploadContents::CopyFrom(const AutofillUploadContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000123) != 0x00000123) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillUploadContents::InternalSwap(AutofillUploadContents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_)->InternalSwap(CastToBase(&other->field_));
  CastToBase(&button_title_)->InternalSwap(CastToBase(&other->button_title_));
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_present_.Swap(&other->data_present_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  form_name_.Swap(&other->form_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(randomized_form_metadata_, other->randomized_form_metadata_);
  swap(form_signature_, other->form_signature_);
  swap(action_signature_, other->action_signature_);
  swap(login_form_signature_, other->login_form_signature_);
  swap(autofill_used_, other->autofill_used_);
  swap(submission_, other->submission_);
  swap(passwords_revealed_, other->passwords_revealed_);
  swap(password_has_lowercase_letter_, other->password_has_lowercase_letter_);
  swap(password_length_, other->password_length_);
  swap(password_has_uppercase_letter_, other->password_has_uppercase_letter_);
  swap(password_has_numeric_, other->password_has_numeric_);
  swap(password_has_special_symbol_, other->password_has_special_symbol_);
  swap(has_form_tag_, other->has_form_tag_);
  swap(submission_event_, other->submission_event_);
  swap(secondary_form_signature_, other->secondary_form_signature_);
  swap(was_throttleable_, other->was_throttleable_);
  swap(password_special_symbol_, other->password_special_symbol_);
}

std::string AutofillUploadContents::GetTypeName() const {
  return "autofill.AutofillUploadContents";
}


// ===================================================================

ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse() {}
ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::MergeFrom(const ProfileValidityMap_FieldValidityStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ProfileValidityMap::InitAsDefaultInstance() {
}
class ProfileValidityMap::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileValidityMap>()._has_bits_);
};

ProfileValidityMap::ProfileValidityMap()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.ProfileValidityMap)
}
ProfileValidityMap::ProfileValidityMap(const ProfileValidityMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_validity_states_.MergeFrom(from.field_validity_states_);
  // @@protoc_insertion_point(copy_constructor:autofill.ProfileValidityMap)
}

void ProfileValidityMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileValidityMap_server_2eproto.base);
}

ProfileValidityMap::~ProfileValidityMap() {
  // @@protoc_insertion_point(destructor:autofill.ProfileValidityMap)
  SharedDtor();
}

void ProfileValidityMap::SharedDtor() {
}

void ProfileValidityMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileValidityMap& ProfileValidityMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileValidityMap_server_2eproto.base);
  return *internal_default_instance();
}


void ProfileValidityMap::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.ProfileValidityMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_validity_states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfileValidityMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> field_validity_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&field_validity_states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfileValidityMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.ProfileValidityMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> field_validity_states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              ProfileValidityMap_FieldValidityStatesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&field_validity_states_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.ProfileValidityMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.ProfileValidityMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfileValidityMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.ProfileValidityMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> field_validity_states = 1;
  if (!this->field_validity_states().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->field_validity_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->field_validity_states().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->field_validity_states().begin();
          it != this->field_validity_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->field_validity_states().begin();
          it != this->field_validity_states().end(); ++it) {
        ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.ProfileValidityMap)
}

size_t ProfileValidityMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.ProfileValidityMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> field_validity_states = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->field_validity_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->field_validity_states().begin();
      it != this->field_validity_states().end(); ++it) {
    total_size += ProfileValidityMap_FieldValidityStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileValidityMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfileValidityMap*>(
      &from));
}

void ProfileValidityMap::MergeFrom(const ProfileValidityMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.ProfileValidityMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_validity_states_.MergeFrom(from.field_validity_states_);
}

void ProfileValidityMap::CopyFrom(const ProfileValidityMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.ProfileValidityMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileValidityMap::IsInitialized() const {
  return true;
}

void ProfileValidityMap::InternalSwap(ProfileValidityMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_validity_states_.Swap(&other->field_validity_states_);
}

std::string ProfileValidityMap::GetTypeName() const {
  return "autofill.ProfileValidityMap";
}


// ===================================================================

UserProfileValidityMap_ProfileValidityEntry_DoNotUse::UserProfileValidityMap_ProfileValidityEntry_DoNotUse() {}
UserProfileValidityMap_ProfileValidityEntry_DoNotUse::UserProfileValidityMap_ProfileValidityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserProfileValidityMap_ProfileValidityEntry_DoNotUse::MergeFrom(const UserProfileValidityMap_ProfileValidityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void UserProfileValidityMap::InitAsDefaultInstance() {
}
class UserProfileValidityMap::_Internal {
 public:
  using HasBits = decltype(std::declval<UserProfileValidityMap>()._has_bits_);
};

UserProfileValidityMap::UserProfileValidityMap()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.UserProfileValidityMap)
}
UserProfileValidityMap::UserProfileValidityMap(const UserProfileValidityMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  profile_validity_.MergeFrom(from.profile_validity_);
  // @@protoc_insertion_point(copy_constructor:autofill.UserProfileValidityMap)
}

void UserProfileValidityMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserProfileValidityMap_server_2eproto.base);
}

UserProfileValidityMap::~UserProfileValidityMap() {
  // @@protoc_insertion_point(destructor:autofill.UserProfileValidityMap)
  SharedDtor();
}

void UserProfileValidityMap::SharedDtor() {
}

void UserProfileValidityMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserProfileValidityMap& UserProfileValidityMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserProfileValidityMap_server_2eproto.base);
  return *internal_default_instance();
}


void UserProfileValidityMap::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.UserProfileValidityMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_validity_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserProfileValidityMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .autofill.ProfileValidityMap> profile_validity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&profile_validity_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserProfileValidityMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.UserProfileValidityMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .autofill.ProfileValidityMap> profile_validity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          UserProfileValidityMap_ProfileValidityEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              UserProfileValidityMap_ProfileValidityEntry_DoNotUse,
              std::string, ::autofill::ProfileValidityMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap > > parser(&profile_validity_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.UserProfileValidityMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.UserProfileValidityMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserProfileValidityMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.UserProfileValidityMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .autofill.ProfileValidityMap> profile_validity = 1;
  if (!this->profile_validity().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->profile_validity().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->profile_validity().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap >::const_iterator
          it = this->profile_validity().begin();
          it != this->profile_validity().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        UserProfileValidityMap_ProfileValidityEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap >::const_iterator
          it = this->profile_validity().begin();
          it != this->profile_validity().end(); ++it) {
        UserProfileValidityMap_ProfileValidityEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.UserProfileValidityMap)
}

size_t UserProfileValidityMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.UserProfileValidityMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .autofill.ProfileValidityMap> profile_validity = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->profile_validity_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill::ProfileValidityMap >::const_iterator
      it = this->profile_validity().begin();
      it != this->profile_validity().end(); ++it) {
    total_size += UserProfileValidityMap_ProfileValidityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProfileValidityMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserProfileValidityMap*>(
      &from));
}

void UserProfileValidityMap::MergeFrom(const UserProfileValidityMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.UserProfileValidityMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  profile_validity_.MergeFrom(from.profile_validity_);
}

void UserProfileValidityMap::CopyFrom(const UserProfileValidityMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.UserProfileValidityMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfileValidityMap::IsInitialized() const {
  return true;
}

void UserProfileValidityMap::InternalSwap(UserProfileValidityMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  profile_validity_.Swap(&other->profile_validity_);
}

std::string UserProfileValidityMap::GetTypeName() const {
  return "autofill.UserProfileValidityMap";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryContents_Form_Field* Arena::CreateMaybeMessage< ::autofill::AutofillQueryContents_Form_Field >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryContents_Form_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryContents_Form* Arena::CreateMaybeMessage< ::autofill::AutofillQueryContents_Form >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryContents_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryContents* Arena::CreateMaybeMessage< ::autofill::AutofillQueryContents >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryContents >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponseContents_Field_FieldPrediction* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponseContents_Field_FieldPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponseContents_Field_FieldPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponseContents_Field* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponseContents_Field >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponseContents_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponseContents* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponseContents >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponseContents >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillRandomizedValue* Arena::CreateMaybeMessage< ::autofill::AutofillRandomizedValue >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillRandomizedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillRandomizedFormMetadata* Arena::CreateMaybeMessage< ::autofill::AutofillRandomizedFormMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillRandomizedFormMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillRandomizedFieldMetadata* Arena::CreateMaybeMessage< ::autofill::AutofillRandomizedFieldMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillRandomizedFieldMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadContents_Field_AutofillTypeValiditiesPair* Arena::CreateMaybeMessage< ::autofill::AutofillUploadContents_Field_AutofillTypeValiditiesPair >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillUploadContents_Field_AutofillTypeValiditiesPair >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadContents_Field* Arena::CreateMaybeMessage< ::autofill::AutofillUploadContents_Field >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillUploadContents_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadContents_ButtonTitle* Arena::CreateMaybeMessage< ::autofill::AutofillUploadContents_ButtonTitle >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillUploadContents_ButtonTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadContents* Arena::CreateMaybeMessage< ::autofill::AutofillUploadContents >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillUploadContents >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::autofill::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::ProfileValidityMap_FieldValidityStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::ProfileValidityMap* Arena::CreateMaybeMessage< ::autofill::ProfileValidityMap >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::ProfileValidityMap >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::UserProfileValidityMap_ProfileValidityEntry_DoNotUse* Arena::CreateMaybeMessage< ::autofill::UserProfileValidityMap_ProfileValidityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::UserProfileValidityMap_ProfileValidityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::UserProfileValidityMap* Arena::CreateMaybeMessage< ::autofill::UserProfileValidityMap >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::UserProfileValidityMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
