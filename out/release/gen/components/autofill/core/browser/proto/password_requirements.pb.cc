// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements.proto

#include "password_requirements.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto;
namespace autofill {
class PasswordRequirementsSpec_CharacterClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordRequirementsSpec_CharacterClass> _instance;
} _PasswordRequirementsSpec_CharacterClass_default_instance_;
class PasswordRequirementsSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordRequirementsSpec> _instance;
} _PasswordRequirementsSpec_default_instance_;
}  // namespace autofill
static void InitDefaultsscc_info_PasswordRequirementsSpec_password_5frequirements_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_PasswordRequirementsSpec_default_instance_;
    new (ptr) ::autofill::PasswordRequirementsSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::PasswordRequirementsSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PasswordRequirementsSpec_password_5frequirements_2eproto}, {
      &scc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto.base,}};

static void InitDefaultsscc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_;
    new (ptr) ::autofill::PasswordRequirementsSpec_CharacterClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::PasswordRequirementsSpec_CharacterClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto}, {}};

namespace autofill {

// ===================================================================

void PasswordRequirementsSpec_CharacterClass::InitAsDefaultInstance() {
}
class PasswordRequirementsSpec_CharacterClass::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordRequirementsSpec_CharacterClass>()._has_bits_);
  static void set_has_character_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PasswordRequirementsSpec_CharacterClass::PasswordRequirementsSpec_CharacterClass()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.PasswordRequirementsSpec.CharacterClass)
}
PasswordRequirementsSpec_CharacterClass::PasswordRequirementsSpec_CharacterClass(const PasswordRequirementsSpec_CharacterClass& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_character_set()) {
    character_set_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.character_set_);
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:autofill.PasswordRequirementsSpec.CharacterClass)
}

void PasswordRequirementsSpec_CharacterClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto.base);
  character_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

PasswordRequirementsSpec_CharacterClass::~PasswordRequirementsSpec_CharacterClass() {
  // @@protoc_insertion_point(destructor:autofill.PasswordRequirementsSpec.CharacterClass)
  SharedDtor();
}

void PasswordRequirementsSpec_CharacterClass::SharedDtor() {
  character_set_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PasswordRequirementsSpec_CharacterClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec_CharacterClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PasswordRequirementsSpec_CharacterClass_password_5frequirements_2eproto.base);
  return *internal_default_instance();
}


void PasswordRequirementsSpec_CharacterClass::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.PasswordRequirementsSpec.CharacterClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    character_set_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PasswordRequirementsSpec_CharacterClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string character_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_character_set(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PasswordRequirementsSpec_CharacterClass::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.PasswordRequirementsSpec.CharacterClass)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string character_set = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_character_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_min(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.PasswordRequirementsSpec.CharacterClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.PasswordRequirementsSpec.CharacterClass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PasswordRequirementsSpec_CharacterClass::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.PasswordRequirementsSpec.CharacterClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string character_set = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->character_set(), output);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.PasswordRequirementsSpec.CharacterClass)
}

size_t PasswordRequirementsSpec_CharacterClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.PasswordRequirementsSpec.CharacterClass)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string character_set = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->character_set());
    }

    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordRequirementsSpec_CharacterClass::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PasswordRequirementsSpec_CharacterClass*>(
      &from));
}

void PasswordRequirementsSpec_CharacterClass::MergeFrom(const PasswordRequirementsSpec_CharacterClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.PasswordRequirementsSpec.CharacterClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      character_set_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.character_set_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PasswordRequirementsSpec_CharacterClass::CopyFrom(const PasswordRequirementsSpec_CharacterClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.PasswordRequirementsSpec.CharacterClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordRequirementsSpec_CharacterClass::IsInitialized() const {
  return true;
}

void PasswordRequirementsSpec_CharacterClass::InternalSwap(PasswordRequirementsSpec_CharacterClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  character_set_.Swap(&other->character_set_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_, other->min_);
  swap(max_, other->max_);
}

std::string PasswordRequirementsSpec_CharacterClass::GetTypeName() const {
  return "autofill.PasswordRequirementsSpec.CharacterClass";
}


// ===================================================================

void PasswordRequirementsSpec::InitAsDefaultInstance() {
  ::autofill::_PasswordRequirementsSpec_default_instance_._instance.get_mutable()->lower_case_ = const_cast< ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      ::autofill::PasswordRequirementsSpec_CharacterClass::internal_default_instance());
  ::autofill::_PasswordRequirementsSpec_default_instance_._instance.get_mutable()->upper_case_ = const_cast< ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      ::autofill::PasswordRequirementsSpec_CharacterClass::internal_default_instance());
  ::autofill::_PasswordRequirementsSpec_default_instance_._instance.get_mutable()->alphabetic_ = const_cast< ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      ::autofill::PasswordRequirementsSpec_CharacterClass::internal_default_instance());
  ::autofill::_PasswordRequirementsSpec_default_instance_._instance.get_mutable()->numeric_ = const_cast< ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      ::autofill::PasswordRequirementsSpec_CharacterClass::internal_default_instance());
  ::autofill::_PasswordRequirementsSpec_default_instance_._instance.get_mutable()->symbols_ = const_cast< ::autofill::PasswordRequirementsSpec_CharacterClass*>(
      ::autofill::PasswordRequirementsSpec_CharacterClass::internal_default_instance());
}
class PasswordRequirementsSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordRequirementsSpec>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spec_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& lower_case(const PasswordRequirementsSpec* msg);
  static void set_has_lower_case(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& upper_case(const PasswordRequirementsSpec* msg);
  static void set_has_upper_case(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& alphabetic(const PasswordRequirementsSpec* msg);
  static void set_has_alphabetic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& numeric(const PasswordRequirementsSpec* msg);
  static void set_has_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& symbols(const PasswordRequirementsSpec* msg);
  static void set_has_symbols(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::lower_case(const PasswordRequirementsSpec* msg) {
  return *msg->lower_case_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::upper_case(const PasswordRequirementsSpec* msg) {
  return *msg->upper_case_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::alphabetic(const PasswordRequirementsSpec* msg) {
  return *msg->alphabetic_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::numeric(const PasswordRequirementsSpec* msg) {
  return *msg->numeric_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::symbols(const PasswordRequirementsSpec* msg) {
  return *msg->symbols_;
}
PasswordRequirementsSpec::PasswordRequirementsSpec()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.PasswordRequirementsSpec)
}
PasswordRequirementsSpec::PasswordRequirementsSpec(const PasswordRequirementsSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower_case()) {
    lower_case_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.lower_case_);
  } else {
    lower_case_ = nullptr;
  }
  if (from.has_upper_case()) {
    upper_case_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.upper_case_);
  } else {
    upper_case_ = nullptr;
  }
  if (from.has_alphabetic()) {
    alphabetic_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.alphabetic_);
  } else {
    alphabetic_ = nullptr;
  }
  if (from.has_numeric()) {
    numeric_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.numeric_);
  } else {
    numeric_ = nullptr;
  }
  if (from.has_symbols()) {
    symbols_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.symbols_);
  } else {
    symbols_ = nullptr;
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_length_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(max_length_));
  // @@protoc_insertion_point(copy_constructor:autofill.PasswordRequirementsSpec)
}

void PasswordRequirementsSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto.base);
  ::memset(&lower_case_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_length_) -
      reinterpret_cast<char*>(&lower_case_)) + sizeof(max_length_));
}

PasswordRequirementsSpec::~PasswordRequirementsSpec() {
  // @@protoc_insertion_point(destructor:autofill.PasswordRequirementsSpec)
  SharedDtor();
}

void PasswordRequirementsSpec::SharedDtor() {
  if (this != internal_default_instance()) delete lower_case_;
  if (this != internal_default_instance()) delete upper_case_;
  if (this != internal_default_instance()) delete alphabetic_;
  if (this != internal_default_instance()) delete numeric_;
  if (this != internal_default_instance()) delete symbols_;
}

void PasswordRequirementsSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PasswordRequirementsSpec& PasswordRequirementsSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto.base);
  return *internal_default_instance();
}


void PasswordRequirementsSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.PasswordRequirementsSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lower_case_ != nullptr);
      lower_case_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upper_case_ != nullptr);
      upper_case_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alphabetic_ != nullptr);
      alphabetic_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(numeric_ != nullptr);
      numeric_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(symbols_ != nullptr);
      symbols_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_length_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(min_length_));
  }
  max_length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PasswordRequirementsSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spec_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spec_version(&has_bits);
          spec_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_length(&has_bits);
          min_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_length(&has_bits);
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_lower_case(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_upper_case(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_alphabetic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_numeric(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_symbols(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PasswordRequirementsSpec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.PasswordRequirementsSpec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 priority = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spec_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_spec_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spec_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_length = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_min_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_max_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alphabetic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_numeric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.PasswordRequirementsSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.PasswordRequirementsSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PasswordRequirementsSpec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.PasswordRequirementsSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->priority(), output);
  }

  // optional uint32 spec_version = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->spec_version(), output);
  }

  // optional uint32 min_length = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->min_length(), output);
  }

  // optional uint32 max_length = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->max_length(), output);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::lower_case(this), output);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::upper_case(this), output);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::alphabetic(this), output);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::numeric(this), output);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::symbols(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.PasswordRequirementsSpec)
}

size_t PasswordRequirementsSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.PasswordRequirementsSpec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lower_case_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upper_case_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alphabetic_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *numeric_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *symbols_);
    }

    // optional uint32 priority = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 spec_version = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->spec_version());
    }

    // optional uint32 min_length = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min_length());
    }

  }
  // optional uint32 max_length = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_length());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordRequirementsSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PasswordRequirementsSpec*>(
      &from));
}

void PasswordRequirementsSpec::MergeFrom(const PasswordRequirementsSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.PasswordRequirementsSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lower_case()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from.lower_case());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_upper_case()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from.upper_case());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_alphabetic()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from.alphabetic());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_numeric()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from.numeric());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_symbols()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from.symbols());
    }
    if (cached_has_bits & 0x00000020u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000040u) {
      spec_version_ = from.spec_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_length_ = from.min_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_max_length(from.max_length());
  }
}

void PasswordRequirementsSpec::CopyFrom(const PasswordRequirementsSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.PasswordRequirementsSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordRequirementsSpec::IsInitialized() const {
  return true;
}

void PasswordRequirementsSpec::InternalSwap(PasswordRequirementsSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lower_case_, other->lower_case_);
  swap(upper_case_, other->upper_case_);
  swap(alphabetic_, other->alphabetic_);
  swap(numeric_, other->numeric_);
  swap(symbols_, other->symbols_);
  swap(priority_, other->priority_);
  swap(spec_version_, other->spec_version_);
  swap(min_length_, other->min_length_);
  swap(max_length_, other->max_length_);
}

std::string PasswordRequirementsSpec::GetTypeName() const {
  return "autofill.PasswordRequirementsSpec";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsSpec_CharacterClass* Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsSpec_CharacterClass >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::PasswordRequirementsSpec_CharacterClass >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsSpec* Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsSpec >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::PasswordRequirementsSpec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
