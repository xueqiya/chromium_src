// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api_v1.proto

#include "api_v1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFieldMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillRandomizedFormMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AutofillUploadContents_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto;
namespace autofill {
class AutofillPageResourceQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillPageResourceQueryRequest> _instance;
} _AutofillPageResourceQueryRequest_default_instance_;
class AutofillPageQueryRequest_Form_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillPageQueryRequest_Form_Field> _instance;
} _AutofillPageQueryRequest_Form_Field_default_instance_;
class AutofillPageQueryRequest_FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillPageQueryRequest_Form> _instance;
} _AutofillPageQueryRequest_Form_default_instance_;
class AutofillPageQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillPageQueryRequest> _instance;
} _AutofillPageQueryRequest_default_instance_;
class AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction> _instance;
} _AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_default_instance_;
class AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponse_FormSuggestion_FieldSuggestion> _instance;
} _AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_;
class AutofillQueryResponse_FormSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponse_FormSuggestion> _instance;
} _AutofillQueryResponse_FormSuggestion_default_instance_;
class AutofillQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillQueryResponse> _instance;
} _AutofillQueryResponse_default_instance_;
class AutofillUploadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillUploadRequest> _instance;
} _AutofillUploadRequest_default_instance_;
}  // namespace autofill
static void InitDefaultsscc_info_AutofillPageQueryRequest_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillPageQueryRequest_default_instance_;
    new (ptr) ::autofill::AutofillPageQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillPageQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillPageQueryRequest_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillPageQueryRequest_api_5fv1_2eproto}, {
      &scc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillPageQueryRequest_Form_default_instance_;
    new (ptr) ::autofill::AutofillPageQueryRequest_Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillPageQueryRequest_Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto}, {
      &scc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto.base,
      &scc_info_AutofillRandomizedFormMetadata_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillPageQueryRequest_Form_Field_default_instance_;
    new (ptr) ::autofill::AutofillPageQueryRequest_Form_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillPageQueryRequest_Form_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto}, {
      &scc_info_AutofillRandomizedFieldMetadata_server_2eproto.base,}};

static void InitDefaultsscc_info_AutofillPageResourceQueryRequest_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillPageResourceQueryRequest_default_instance_;
    new (ptr) ::autofill::AutofillPageResourceQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillPageResourceQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillPageResourceQueryRequest_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillPageResourceQueryRequest_api_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_AutofillQueryResponse_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponse_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryResponse_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillQueryResponse_api_5fv1_2eproto}, {
      &scc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponse_FormSuggestion_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponse_FormSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponse_FormSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto}, {
      &scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto}, {
      &scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto.base,
      &scc_info_PasswordRequirementsSpec_password_5frequirements_2eproto.base,}};

static void InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_default_instance_;
    new (ptr) ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_AutofillUploadRequest_api_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::_AutofillUploadRequest_default_instance_;
    new (ptr) ::autofill::AutofillUploadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::AutofillUploadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillUploadRequest_api_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillUploadRequest_api_5fv1_2eproto}, {
      &scc_info_AutofillUploadContents_server_2eproto.base,}};

namespace autofill {

// ===================================================================

void AutofillPageResourceQueryRequest::InitAsDefaultInstance() {
}
class AutofillPageResourceQueryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageResourceQueryRequest>()._has_bits_);
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillPageResourceQueryRequest::AutofillPageResourceQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillPageResourceQueryRequest)
}
AutofillPageResourceQueryRequest::AutofillPageResourceQueryRequest(const AutofillPageResourceQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_request()) {
    serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageResourceQueryRequest)
}

void AutofillPageResourceQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillPageResourceQueryRequest_api_5fv1_2eproto.base);
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutofillPageResourceQueryRequest::~AutofillPageResourceQueryRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageResourceQueryRequest)
  SharedDtor();
}

void AutofillPageResourceQueryRequest::SharedDtor() {
  serialized_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillPageResourceQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillPageResourceQueryRequest& AutofillPageResourceQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillPageResourceQueryRequest_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillPageResourceQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageResourceQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_request_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillPageResourceQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serialized_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_request(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillPageResourceQueryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillPageResourceQueryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serialized_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillPageResourceQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillPageResourceQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillPageResourceQueryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillPageResourceQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serialized_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serialized_request(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillPageResourceQueryRequest)
}

size_t AutofillPageResourceQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageResourceQueryRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string serialized_request = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->serialized_request());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageResourceQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillPageResourceQueryRequest*>(
      &from));
}

void AutofillPageResourceQueryRequest::MergeFrom(const AutofillPageResourceQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageResourceQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serialized_request()) {
    _has_bits_[0] |= 0x00000001u;
    serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
}

void AutofillPageResourceQueryRequest::CopyFrom(const AutofillPageResourceQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageResourceQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageResourceQueryRequest::IsInitialized() const {
  return true;
}

void AutofillPageResourceQueryRequest::InternalSwap(AutofillPageResourceQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_request_.Swap(&other->serialized_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string AutofillPageResourceQueryRequest::GetTypeName() const {
  return "autofill.AutofillPageResourceQueryRequest";
}


// ===================================================================

void AutofillPageQueryRequest_Form_Field::InitAsDefaultInstance() {
  ::autofill::_AutofillPageQueryRequest_Form_Field_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::autofill::AutofillRandomizedFieldMetadata*>(
      ::autofill::AutofillRandomizedFieldMetadata::internal_default_instance());
}
class AutofillPageQueryRequest_Form_Field::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest_Form_Field>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_control_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFieldMetadata& metadata(const AutofillPageQueryRequest_Form_Field* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill::AutofillRandomizedFieldMetadata&
AutofillPageQueryRequest_Form_Field::_Internal::metadata(const AutofillPageQueryRequest_Form_Field* msg) {
  return *msg->metadata_;
}
void AutofillPageQueryRequest_Form_Field::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AutofillPageQueryRequest_Form_Field::AutofillPageQueryRequest_Form_Field()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillPageQueryRequest.Form.Field)
}
AutofillPageQueryRequest_Form_Field::AutofillPageQueryRequest_Form_Field(const AutofillPageQueryRequest_Form_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  control_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_control_type()) {
    control_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_type_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::autofill::AutofillRandomizedFieldMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest.Form.Field)
}

void AutofillPageQueryRequest_Form_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(signature_));
}

AutofillPageQueryRequest_Form_Field::~AutofillPageQueryRequest_Form_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest.Form.Field)
  SharedDtor();
}

void AutofillPageQueryRequest_Form_Field::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void AutofillPageQueryRequest_Form_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillPageQueryRequest_Form_Field& AutofillPageQueryRequest_Form_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillPageQueryRequest_Form_Field_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillPageQueryRequest_Form_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest.Form.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      control_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  signature_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillPageQueryRequest_Form_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string control_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_control_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillPageQueryRequest_Form_Field::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillPageQueryRequest.Form.Field)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 signature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string control_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_control_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillPageQueryRequest.Form.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillPageQueryRequest.Form.Field)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillPageQueryRequest_Form_Field::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillPageQueryRequest.Form.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 signature = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(1, this->signature(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string control_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->control_type(), output);
  }

  // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillPageQueryRequest.Form.Field)
}

size_t AutofillPageQueryRequest_Form_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest.Form.Field)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string control_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->control_type());
    }

    // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional fixed32 signature = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest_Form_Field::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillPageQueryRequest_Form_Field*>(
      &from));
}

void AutofillPageQueryRequest_Form_Field::MergeFrom(const AutofillPageQueryRequest_Form_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest.Form.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      control_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_metadata()->::autofill::AutofillRandomizedFieldMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillPageQueryRequest_Form_Field::CopyFrom(const AutofillPageQueryRequest_Form_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest.Form.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest_Form_Field::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest_Form_Field::InternalSwap(AutofillPageQueryRequest_Form_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  control_type_.Swap(&other->control_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(signature_, other->signature_);
}

std::string AutofillPageQueryRequest_Form_Field::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest.Form.Field";
}


// ===================================================================

void AutofillPageQueryRequest_Form::InitAsDefaultInstance() {
  ::autofill::_AutofillPageQueryRequest_Form_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::autofill::AutofillRandomizedFormMetadata*>(
      ::autofill::AutofillRandomizedFormMetadata::internal_default_instance());
}
class AutofillPageQueryRequest_Form::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest_Form>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFormMetadata& metadata(const AutofillPageQueryRequest_Form* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::AutofillRandomizedFormMetadata&
AutofillPageQueryRequest_Form::_Internal::metadata(const AutofillPageQueryRequest_Form* msg) {
  return *msg->metadata_;
}
void AutofillPageQueryRequest_Form::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillPageQueryRequest_Form::AutofillPageQueryRequest_Form()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillPageQueryRequest.Form)
}
AutofillPageQueryRequest_Form::AutofillPageQueryRequest_Form(const AutofillPageQueryRequest_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::autofill::AutofillRandomizedFormMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest.Form)
}

void AutofillPageQueryRequest_Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(signature_));
}

AutofillPageQueryRequest_Form::~AutofillPageQueryRequest_Form() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest.Form)
  SharedDtor();
}

void AutofillPageQueryRequest_Form::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void AutofillPageQueryRequest_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillPageQueryRequest_Form& AutofillPageQueryRequest_Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillPageQueryRequest_Form_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillPageQueryRequest_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  signature_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillPageQueryRequest_Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillPageQueryRequest_Form::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillPageQueryRequest.Form)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 signature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillPageQueryRequest.Form)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillPageQueryRequest.Form)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillPageQueryRequest_Form::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillPageQueryRequest.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 signature = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->signature(), output);
  }

  // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->fields(static_cast<int>(i)),
      output);
  }

  // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillPageQueryRequest.Form)
}

size_t AutofillPageQueryRequest_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest.Form)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional fixed64 signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest_Form::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillPageQueryRequest_Form*>(
      &from));
}

void AutofillPageQueryRequest_Form::MergeFrom(const AutofillPageQueryRequest_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metadata()->::autofill::AutofillRandomizedFormMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillPageQueryRequest_Form::CopyFrom(const AutofillPageQueryRequest_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest_Form::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest_Form::InternalSwap(AutofillPageQueryRequest_Form* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
  swap(metadata_, other->metadata_);
  swap(signature_, other->signature_);
}

std::string AutofillPageQueryRequest_Form::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest.Form";
}


// ===================================================================

void AutofillPageQueryRequest::InitAsDefaultInstance() {
}
class AutofillPageQueryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillPageQueryRequest::AutofillPageQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillPageQueryRequest)
}
AutofillPageQueryRequest::AutofillPageQueryRequest(const AutofillPageQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      forms_(from.forms_),
      experiments_(from.experiments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest)
}

void AutofillPageQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillPageQueryRequest_api_5fv1_2eproto.base);
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutofillPageQueryRequest::~AutofillPageQueryRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest)
  SharedDtor();
}

void AutofillPageQueryRequest::SharedDtor() {
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillPageQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillPageQueryRequest& AutofillPageQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillPageQueryRequest_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillPageQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forms_.Clear();
  experiments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_version_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillPageQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string client_version = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_forms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int64 experiments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_experiments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_experiments(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillPageQueryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillPageQueryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_version = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_forms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 experiments = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_experiments())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_experiments())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillPageQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillPageQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillPageQueryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillPageQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_version = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_version(), output);
  }

  // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->forms(static_cast<int>(i)),
      output);
  }

  // repeated int64 experiments = 3;
  for (int i = 0, n = this->experiments_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      3, this->experiments(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillPageQueryRequest)
}

size_t AutofillPageQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->forms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->forms(static_cast<int>(i)));
    }
  }

  // repeated int64 experiments = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->experiments_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->experiments_size());
    total_size += data_size;
  }

  // optional string client_version = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillPageQueryRequest*>(
      &from));
}

void AutofillPageQueryRequest::MergeFrom(const AutofillPageQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forms_.MergeFrom(from.forms_);
  experiments_.MergeFrom(from.experiments_);
  if (from.has_client_version()) {
    _has_bits_[0] |= 0x00000001u;
    client_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
}

void AutofillPageQueryRequest::CopyFrom(const AutofillPageQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest::InternalSwap(AutofillPageQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&forms_)->InternalSwap(CastToBase(&other->forms_));
  experiments_.InternalSwap(&other->experiments_);
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string AutofillPageQueryRequest::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest";
}


// ===================================================================

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::InitAsDefaultInstance() {
}
class AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SharedCtor() {
  type_ = 0;
}

AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::~AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  SharedDtor();
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SharedDtor() {
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
}

size_t AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

std::string AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction";
}


// ===================================================================

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::InitAsDefaultInstance() {
  ::autofill::_AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_._instance.get_mutable()->password_requirements_ = const_cast< ::autofill::PasswordRequirementsSpec*>(
      ::autofill::PasswordRequirementsSpec::internal_default_instance());
}
class AutofillQueryResponse_FormSuggestion_FieldSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse_FormSuggestion_FieldSuggestion>()._has_bits_);
  static void set_has_field_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_primary_type_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_may_use_prefilled_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::PasswordRequirementsSpec& password_requirements(const AutofillQueryResponse_FormSuggestion_FieldSuggestion* msg);
  static void set_has_password_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::PasswordRequirementsSpec&
AutofillQueryResponse_FormSuggestion_FieldSuggestion::_Internal::password_requirements(const AutofillQueryResponse_FormSuggestion_FieldSuggestion* msg) {
  return *msg->password_requirements_;
}
void AutofillQueryResponse_FormSuggestion_FieldSuggestion::clear_password_requirements() {
  if (password_requirements_ != nullptr) password_requirements_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion::AutofillQueryResponse_FormSuggestion_FieldSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion::AutofillQueryResponse_FormSuggestion_FieldSuggestion(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_password_requirements()) {
    password_requirements_ = new ::autofill::PasswordRequirementsSpec(*from.password_requirements_);
  } else {
    password_requirements_ = nullptr;
  }
  ::memcpy(&field_signature_, &from.field_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
    reinterpret_cast<char*>(&field_signature_)) + sizeof(may_use_prefilled_placeholder_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto.base);
  ::memset(&password_requirements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
      reinterpret_cast<char*>(&password_requirements_)) + sizeof(may_use_prefilled_placeholder_));
}

AutofillQueryResponse_FormSuggestion_FieldSuggestion::~AutofillQueryResponse_FormSuggestion_FieldSuggestion() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  SharedDtor();
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SharedDtor() {
  if (this != internal_default_instance()) delete password_requirements_;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponse_FormSuggestion_FieldSuggestion& AutofillQueryResponse_FormSuggestion_FieldSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponse_FormSuggestion_FieldSuggestion_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponse_FormSuggestion_FieldSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(password_requirements_ != nullptr);
    password_requirements_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&field_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
        reinterpret_cast<char*>(&field_signature_)) + sizeof(may_use_prefilled_placeholder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponse_FormSuggestion_FieldSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 field_signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_field_signature(&has_bits);
          field_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 primary_type_prediction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_primary_type_prediction(&has_bits);
          primary_type_prediction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional bool may_use_prefilled_placeholder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_may_use_prefilled_placeholder(&has_bits);
          may_use_prefilled_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_password_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 field_signature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_field_signature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &field_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_type_prediction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_primary_type_prediction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_type_prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool may_use_prefilled_placeholder = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_may_use_prefilled_placeholder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_use_prefilled_placeholder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_password_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 field_signature = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(1, this->field_signature(), output);
  }

  // optional int32 primary_type_prediction = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->primary_type_prediction(), output);
  }

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->predictions(static_cast<int>(i)),
      output);
  }

  // optional bool may_use_prefilled_placeholder = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->may_use_prefilled_placeholder(), output);
  }

  // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::password_requirements(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
}

size_t AutofillQueryResponse_FormSuggestion_FieldSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->predictions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *password_requirements_);
    }

    // optional fixed32 field_signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 primary_type_prediction = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->primary_type_prediction());
    }

    // optional bool may_use_prefilled_placeholder = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_password_requirements()->::autofill::PasswordRequirementsSpec::MergeFrom(from.password_requirements());
    }
    if (cached_has_bits & 0x00000002u) {
      field_signature_ = from.field_signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      primary_type_prediction_ = from.primary_type_prediction_;
    }
    if (cached_has_bits & 0x00000008u) {
      may_use_prefilled_placeholder_ = from.may_use_prefilled_placeholder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&predictions_)->InternalSwap(CastToBase(&other->predictions_));
  swap(password_requirements_, other->password_requirements_);
  swap(field_signature_, other->field_signature_);
  swap(primary_type_prediction_, other->primary_type_prediction_);
  swap(may_use_prefilled_placeholder_, other->may_use_prefilled_placeholder_);
}

std::string AutofillQueryResponse_FormSuggestion_FieldSuggestion::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion";
}


// ===================================================================

void AutofillQueryResponse_FormSuggestion::InitAsDefaultInstance() {
}
class AutofillQueryResponse_FormSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse_FormSuggestion>()._has_bits_);
};

AutofillQueryResponse_FormSuggestion::AutofillQueryResponse_FormSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponse.FormSuggestion)
}
AutofillQueryResponse_FormSuggestion::AutofillQueryResponse_FormSuggestion(const AutofillQueryResponse_FormSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_suggestions_(from.field_suggestions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion)
}

void AutofillQueryResponse_FormSuggestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto.base);
}

AutofillQueryResponse_FormSuggestion::~AutofillQueryResponse_FormSuggestion() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion)
  SharedDtor();
}

void AutofillQueryResponse_FormSuggestion::SharedDtor() {
}

void AutofillQueryResponse_FormSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponse_FormSuggestion& AutofillQueryResponse_FormSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponse_FormSuggestion_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponse_FormSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_suggestions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponse_FormSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_field_suggestions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponse_FormSuggestion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponse.FormSuggestion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_field_suggestions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponse.FormSuggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponse.FormSuggestion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponse_FormSuggestion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponse.FormSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_suggestions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->field_suggestions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponse.FormSuggestion)
}

size_t AutofillQueryResponse_FormSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_suggestions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->field_suggestions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponse_FormSuggestion*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion::MergeFrom(const AutofillQueryResponse_FormSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_suggestions_.MergeFrom(from.field_suggestions_);
}

void AutofillQueryResponse_FormSuggestion::CopyFrom(const AutofillQueryResponse_FormSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion::InternalSwap(AutofillQueryResponse_FormSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_suggestions_)->InternalSwap(CastToBase(&other->field_suggestions_));
}

std::string AutofillQueryResponse_FormSuggestion::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion";
}


// ===================================================================

void AutofillQueryResponse::InitAsDefaultInstance() {
}
class AutofillQueryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse>()._has_bits_);
};

AutofillQueryResponse::AutofillQueryResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponse)
}
AutofillQueryResponse::AutofillQueryResponse(const AutofillQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      form_suggestions_(from.form_suggestions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse)
}

void AutofillQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillQueryResponse_api_5fv1_2eproto.base);
}

AutofillQueryResponse::~AutofillQueryResponse() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse)
  SharedDtor();
}

void AutofillQueryResponse::SharedDtor() {
}

void AutofillQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillQueryResponse& AutofillQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillQueryResponse_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  form_suggestions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_form_suggestions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillQueryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_form_suggestions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillQueryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->form_suggestions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->form_suggestions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponse)
}

size_t AutofillQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->form_suggestions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->form_suggestions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillQueryResponse*>(
      &from));
}

void AutofillQueryResponse::MergeFrom(const AutofillQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  form_suggestions_.MergeFrom(from.form_suggestions_);
}

void AutofillQueryResponse::CopyFrom(const AutofillQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse::IsInitialized() const {
  return true;
}

void AutofillQueryResponse::InternalSwap(AutofillQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&form_suggestions_)->InternalSwap(CastToBase(&other->form_suggestions_));
}

std::string AutofillQueryResponse::GetTypeName() const {
  return "autofill.AutofillQueryResponse";
}


// ===================================================================

void AutofillUploadRequest::InitAsDefaultInstance() {
  ::autofill::_AutofillUploadRequest_default_instance_._instance.get_mutable()->upload_ = const_cast< ::autofill::AutofillUploadContents*>(
      ::autofill::AutofillUploadContents::internal_default_instance());
}
class AutofillUploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadRequest>()._has_bits_);
  static const ::autofill::AutofillUploadContents& upload(const AutofillUploadRequest* msg);
  static void set_has_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::AutofillUploadContents&
AutofillUploadRequest::_Internal::upload(const AutofillUploadRequest* msg) {
  return *msg->upload_;
}
void AutofillUploadRequest::clear_upload() {
  if (upload_ != nullptr) upload_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillUploadRequest::AutofillUploadRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadRequest)
}
AutofillUploadRequest::AutofillUploadRequest(const AutofillUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_upload()) {
    upload_ = new ::autofill::AutofillUploadContents(*from.upload_);
  } else {
    upload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadRequest)
}

void AutofillUploadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillUploadRequest_api_5fv1_2eproto.base);
  upload_ = nullptr;
}

AutofillUploadRequest::~AutofillUploadRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadRequest)
  SharedDtor();
}

void AutofillUploadRequest::SharedDtor() {
  if (this != internal_default_instance()) delete upload_;
}

void AutofillUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillUploadRequest& AutofillUploadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillUploadRequest_api_5fv1_2eproto.base);
  return *internal_default_instance();
}


void AutofillUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(upload_ != nullptr);
    upload_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillUploadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.AutofillUploadContents upload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_upload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillUploadRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.AutofillUploadContents upload = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillUploadRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.AutofillUploadContents upload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::upload(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadRequest)
}

size_t AutofillUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill.AutofillUploadContents upload = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upload_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillUploadRequest*>(
      &from));
}

void AutofillUploadRequest::MergeFrom(const AutofillUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_upload()) {
    mutable_upload()->::autofill::AutofillUploadContents::MergeFrom(from.upload());
  }
}

void AutofillUploadRequest::CopyFrom(const AutofillUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadRequest::IsInitialized() const {
  if (has_upload()) {
    if (!this->upload_->IsInitialized()) return false;
  }
  return true;
}

void AutofillUploadRequest::InternalSwap(AutofillUploadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(upload_, other->upload_);
}

std::string AutofillUploadRequest::GetTypeName() const {
  return "autofill.AutofillUploadRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageResourceQueryRequest* Arena::CreateMaybeMessage< ::autofill::AutofillPageResourceQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillPageResourceQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest_Form_Field* Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest_Form_Field >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillPageQueryRequest_Form_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest_Form* Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest_Form >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillPageQueryRequest_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest* Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillPageQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponse_FormSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse* Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadRequest* Arena::CreateMaybeMessage< ::autofill::AutofillUploadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::AutofillUploadRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
