// components/autofill/content/common/mojom/autofill_agent.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "components/autofill/content/common/mojom/autofill_agent.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/autofill/content/common/mojom/autofill_agent.mojom-params-data.h"
#include "components/autofill/content/common/mojom/autofill_agent.mojom-shared-message-ids.h"

#include "components/autofill/content/common/mojom/autofill_agent.mojom-import-headers.h"


#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_JUMBO_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_JUMBO_H_
#include "components/autofill/core/common/mojom/autofill_types_mojom_traits.h"
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "mojo/public/cpp/base/text_direction_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace autofill {
namespace mojom {
const char AutofillAgent::Name_[] = "autofill.mojom.AutofillAgent";

class AutofillAgent_GetElementFormAndFieldData_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AutofillAgent_GetElementFormAndFieldData_ForwardToCallback(
      AutofillAgent::GetElementFormAndFieldDataCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AutofillAgent::GetElementFormAndFieldDataCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(AutofillAgent_GetElementFormAndFieldData_ForwardToCallback);
};

AutofillAgentProxy::AutofillAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AutofillAgentProxy::FillForm(
    int32_t in_id, const ::autofill::FormData& in_form) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::FillForm");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_FillForm_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_FillForm_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->id = in_id;
  typename decltype(params->form)::BaseType::BufferWriter
      form_writer;
  mojo::internal::Serialize<::autofill::mojom::FormDataDataView>(
      in_form, buffer, &form_writer, &serialization_context);
  params->form.Set(
      form_writer.is_null() ? nullptr : form_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->form.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null form in AutofillAgent.FillForm request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("FillForm");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::PreviewForm(
    int32_t in_id, const ::autofill::FormData& in_form) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::PreviewForm");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_PreviewForm_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_PreviewForm_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->id = in_id;
  typename decltype(params->form)::BaseType::BufferWriter
      form_writer;
  mojo::internal::Serialize<::autofill::mojom::FormDataDataView>(
      in_form, buffer, &form_writer, &serialization_context);
  params->form.Set(
      form_writer.is_null() ? nullptr : form_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->form.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null form in AutofillAgent.PreviewForm request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("PreviewForm");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::FieldTypePredictionsAvailable(
    const std::vector<::autofill::FormDataPredictions>& in_forms) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::FieldTypePredictionsAvailable");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_FieldTypePredictionsAvailable_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_FieldTypePredictionsAvailable_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->forms)::BaseType::BufferWriter
      forms_writer;
  const mojo::internal::ContainerValidateParams forms_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::FormDataPredictionsDataView>>(
      in_forms, buffer, &forms_writer, &forms_validate_params,
      &serialization_context);
  params->forms.Set(
      forms_writer.is_null() ? nullptr : forms_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->forms.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null forms in AutofillAgent.FieldTypePredictionsAvailable request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("FieldTypePredictionsAvailable");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::ClearSection(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::ClearSection");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_ClearSection_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_ClearSection_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("ClearSection");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::ClearPreviewedForm(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::ClearPreviewedForm");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_ClearPreviewedForm_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_ClearPreviewedForm_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("ClearPreviewedForm");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::FillFieldWithValue(
    const ::base::string16& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::FillFieldWithValue");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_FillFieldWithValue_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_FillFieldWithValue_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in AutofillAgent.FillFieldWithValue request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("FillFieldWithValue");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::PreviewFieldWithValue(
    const ::base::string16& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::PreviewFieldWithValue");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_PreviewFieldWithValue_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_PreviewFieldWithValue_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in AutofillAgent.PreviewFieldWithValue request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("PreviewFieldWithValue");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::SetSuggestionAvailability(
    ::autofill::mojom::AutofillState in_type) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::SetSuggestionAvailability");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_SetSuggestionAvailability_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_SetSuggestionAvailability_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::autofill::mojom::AutofillState>(
      in_type, &params->type);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("SetSuggestionAvailability");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::AcceptDataListSuggestion(
    const ::base::string16& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::AcceptDataListSuggestion");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_AcceptDataListSuggestion_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_AcceptDataListSuggestion_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in AutofillAgent.AcceptDataListSuggestion request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("AcceptDataListSuggestion");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::FillPasswordSuggestion(
    const ::base::string16& in_username, const ::base::string16& in_password) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::FillPasswordSuggestion");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_FillPasswordSuggestion_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_FillPasswordSuggestion_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->username)::BaseType::BufferWriter
      username_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_username, buffer, &username_writer, &serialization_context);
  params->username.Set(
      username_writer.is_null() ? nullptr : username_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->username.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null username in AutofillAgent.FillPasswordSuggestion request");
  typename decltype(params->password)::BaseType::BufferWriter
      password_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_password, buffer, &password_writer, &serialization_context);
  params->password.Set(
      password_writer.is_null() ? nullptr : password_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->password.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null password in AutofillAgent.FillPasswordSuggestion request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("FillPasswordSuggestion");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::PreviewPasswordSuggestion(
    const ::base::string16& in_username, const ::base::string16& in_password) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::PreviewPasswordSuggestion");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_PreviewPasswordSuggestion_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_PreviewPasswordSuggestion_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->username)::BaseType::BufferWriter
      username_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_username, buffer, &username_writer, &serialization_context);
  params->username.Set(
      username_writer.is_null() ? nullptr : username_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->username.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null username in AutofillAgent.PreviewPasswordSuggestion request");
  typename decltype(params->password)::BaseType::BufferWriter
      password_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_password, buffer, &password_writer, &serialization_context);
  params->password.Set(
      password_writer.is_null() ? nullptr : password_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->password.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null password in AutofillAgent.PreviewPasswordSuggestion request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("PreviewPasswordSuggestion");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::SetUserGestureRequired(
    bool in_required) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::SetUserGestureRequired");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_SetUserGestureRequired_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_SetUserGestureRequired_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->required = in_required;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("SetUserGestureRequired");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::SetSecureContextRequired(
    bool in_required) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::SetSecureContextRequired");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_SetSecureContextRequired_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_SetSecureContextRequired_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->required = in_required;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("SetSecureContextRequired");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::SetFocusRequiresScroll(
    bool in_require) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::SetFocusRequiresScroll");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_SetFocusRequiresScroll_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_SetFocusRequiresScroll_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->require = in_require;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("SetFocusRequiresScroll");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::SetQueryPasswordSuggestion(
    bool in_query) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::SetQueryPasswordSuggestion");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_SetQueryPasswordSuggestion_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_SetQueryPasswordSuggestion_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->query = in_query;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("SetQueryPasswordSuggestion");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AutofillAgentProxy::GetElementFormAndFieldData(
    const std::vector<std::string>& in_selectors, GetElementFormAndFieldDataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::AutofillAgent::GetElementFormAndFieldData");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_GetElementFormAndFieldData_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_GetElementFormAndFieldData_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->selectors)::BaseType::BufferWriter
      selectors_writer;
  const mojo::internal::ContainerValidateParams selectors_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_selectors, buffer, &selectors_writer, &selectors_validate_params,
      &serialization_context);
  params->selectors.Set(
      selectors_writer.is_null() ? nullptr : selectors_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->selectors.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null selectors in AutofillAgent.GetElementFormAndFieldData request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("GetElementFormAndFieldData");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AutofillAgent_GetElementFormAndFieldData_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class AutofillAgent_GetElementFormAndFieldData_ProxyToResponder {
 public:
  static AutofillAgent::GetElementFormAndFieldDataCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AutofillAgent_GetElementFormAndFieldData_ProxyToResponder> proxy(
        new AutofillAgent_GetElementFormAndFieldData_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&AutofillAgent_GetElementFormAndFieldData_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AutofillAgent_GetElementFormAndFieldData_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  AutofillAgent_GetElementFormAndFieldData_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AutofillAgent::GetElementFormAndFieldDataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::autofill::FormData& in_form, const ::autofill::FormFieldData& in_field);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(AutofillAgent_GetElementFormAndFieldData_ProxyToResponder);
};

bool AutofillAgent_GetElementFormAndFieldData_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "autofill::mojom::AutofillAgent::GetElementFormAndFieldDataCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::AutofillAgent_GetElementFormAndFieldData_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AutofillAgent_GetElementFormAndFieldData_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  ::autofill::FormData p_form{};
  ::autofill::FormFieldData p_field{};
  AutofillAgent_GetElementFormAndFieldData_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadForm(&p_form))
    success = false;
  if (success && !input_data_view.ReadField(&p_field))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AutofillAgent::Name_, 15, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_form), 
std::move(p_field));
  return true;
}

void AutofillAgent_GetElementFormAndFieldData_ProxyToResponder::Run(
    const ::autofill::FormData& in_form, const ::autofill::FormFieldData& in_field) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAutofillAgent_GetElementFormAndFieldData_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::AutofillAgent_GetElementFormAndFieldData_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->form)::BaseType::BufferWriter
      form_writer;
  mojo::internal::Serialize<::autofill::mojom::FormDataDataView>(
      in_form, buffer, &form_writer, &serialization_context);
  params->form.Set(
      form_writer.is_null() ? nullptr : form_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->form.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null form in ");
  typename decltype(params->field)::BaseType::BufferWriter
      field_writer;
  mojo::internal::Serialize<::autofill::mojom::FormFieldDataDataView>(
      in_field, buffer, &field_writer, &serialization_context);
  params->field.Set(
      field_writer.is_null() ? nullptr : field_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->field.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null field in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)autofill::mojom::AutofillAgent::GetElementFormAndFieldDataCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAgent::Name_);
  message.set_method_name("GetElementFormAndFieldData");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AutofillAgentStubDispatch::Accept(
    AutofillAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAutofillAgent_FillForm_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::FillForm",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::FillForm");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_FillForm_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_FillForm_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      int32_t p_id{};
      ::autofill::FormData p_form{};
      AutofillAgent_FillForm_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_id = input_data_view.id();
      if (success && !input_data_view.ReadForm(&p_form))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FillForm(
std::move(p_id), 
std::move(p_form));
      return true;
    }
    case internal::kAutofillAgent_PreviewForm_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::PreviewForm",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::PreviewForm");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_PreviewForm_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_PreviewForm_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      int32_t p_id{};
      ::autofill::FormData p_form{};
      AutofillAgent_PreviewForm_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_id = input_data_view.id();
      if (success && !input_data_view.ReadForm(&p_form))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PreviewForm(
std::move(p_id), 
std::move(p_form));
      return true;
    }
    case internal::kAutofillAgent_FieldTypePredictionsAvailable_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::FieldTypePredictionsAvailable",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::FieldTypePredictionsAvailable");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_FieldTypePredictionsAvailable_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_FieldTypePredictionsAvailable_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      std::vector<::autofill::FormDataPredictions> p_forms{};
      AutofillAgent_FieldTypePredictionsAvailable_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadForms(&p_forms))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FieldTypePredictionsAvailable(
std::move(p_forms));
      return true;
    }
    case internal::kAutofillAgent_ClearSection_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::ClearSection",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::ClearSection");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_ClearSection_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_ClearSection_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      AutofillAgent_ClearSection_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearSection();
      return true;
    }
    case internal::kAutofillAgent_ClearPreviewedForm_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::ClearPreviewedForm",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::ClearPreviewedForm");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_ClearPreviewedForm_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_ClearPreviewedForm_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      AutofillAgent_ClearPreviewedForm_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearPreviewedForm();
      return true;
    }
    case internal::kAutofillAgent_FillFieldWithValue_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::FillFieldWithValue",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::FillFieldWithValue");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_FillFieldWithValue_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_FillFieldWithValue_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_value{};
      AutofillAgent_FillFieldWithValue_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FillFieldWithValue(
std::move(p_value));
      return true;
    }
    case internal::kAutofillAgent_PreviewFieldWithValue_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::PreviewFieldWithValue",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::PreviewFieldWithValue");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_PreviewFieldWithValue_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_PreviewFieldWithValue_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_value{};
      AutofillAgent_PreviewFieldWithValue_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PreviewFieldWithValue(
std::move(p_value));
      return true;
    }
    case internal::kAutofillAgent_SetSuggestionAvailability_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::SetSuggestionAvailability",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::SetSuggestionAvailability");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_SetSuggestionAvailability_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_SetSuggestionAvailability_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::autofill::mojom::AutofillState p_type{};
      AutofillAgent_SetSuggestionAvailability_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetSuggestionAvailability(
std::move(p_type));
      return true;
    }
    case internal::kAutofillAgent_AcceptDataListSuggestion_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::AcceptDataListSuggestion",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::AcceptDataListSuggestion");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_AcceptDataListSuggestion_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_AcceptDataListSuggestion_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_value{};
      AutofillAgent_AcceptDataListSuggestion_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AcceptDataListSuggestion(
std::move(p_value));
      return true;
    }
    case internal::kAutofillAgent_FillPasswordSuggestion_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::FillPasswordSuggestion",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::FillPasswordSuggestion");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_FillPasswordSuggestion_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_FillPasswordSuggestion_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_username{};
      ::base::string16 p_password{};
      AutofillAgent_FillPasswordSuggestion_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadUsername(&p_username))
        success = false;
      if (success && !input_data_view.ReadPassword(&p_password))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FillPasswordSuggestion(
std::move(p_username), 
std::move(p_password));
      return true;
    }
    case internal::kAutofillAgent_PreviewPasswordSuggestion_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::PreviewPasswordSuggestion",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::PreviewPasswordSuggestion");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_PreviewPasswordSuggestion_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_PreviewPasswordSuggestion_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_username{};
      ::base::string16 p_password{};
      AutofillAgent_PreviewPasswordSuggestion_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadUsername(&p_username))
        success = false;
      if (success && !input_data_view.ReadPassword(&p_password))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PreviewPasswordSuggestion(
std::move(p_username), 
std::move(p_password));
      return true;
    }
    case internal::kAutofillAgent_SetUserGestureRequired_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::SetUserGestureRequired",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::SetUserGestureRequired");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_SetUserGestureRequired_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_SetUserGestureRequired_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_required{};
      AutofillAgent_SetUserGestureRequired_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_required = input_data_view.required();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetUserGestureRequired(
std::move(p_required));
      return true;
    }
    case internal::kAutofillAgent_SetSecureContextRequired_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::SetSecureContextRequired",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::SetSecureContextRequired");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_SetSecureContextRequired_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_SetSecureContextRequired_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_required{};
      AutofillAgent_SetSecureContextRequired_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_required = input_data_view.required();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetSecureContextRequired(
std::move(p_required));
      return true;
    }
    case internal::kAutofillAgent_SetFocusRequiresScroll_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::SetFocusRequiresScroll",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::SetFocusRequiresScroll");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_SetFocusRequiresScroll_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_SetFocusRequiresScroll_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_require{};
      AutofillAgent_SetFocusRequiresScroll_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_require = input_data_view.require();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetFocusRequiresScroll(
std::move(p_require));
      return true;
    }
    case internal::kAutofillAgent_SetQueryPasswordSuggestion_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::SetQueryPasswordSuggestion",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::SetQueryPasswordSuggestion");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AutofillAgent_SetQueryPasswordSuggestion_Params_Data* params =
          reinterpret_cast<internal::AutofillAgent_SetQueryPasswordSuggestion_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_query{};
      AutofillAgent_SetQueryPasswordSuggestion_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_query = input_data_view.query();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetQueryPasswordSuggestion(
std::move(p_query));
      return true;
    }
    case internal::kAutofillAgent_GetElementFormAndFieldData_Name: {
      break;
    }
  }
  return false;
}

// static
bool AutofillAgentStubDispatch::AcceptWithResponder(
    AutofillAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kAutofillAgent_FillForm_Name: {
      break;
    }
    case internal::kAutofillAgent_PreviewForm_Name: {
      break;
    }
    case internal::kAutofillAgent_FieldTypePredictionsAvailable_Name: {
      break;
    }
    case internal::kAutofillAgent_ClearSection_Name: {
      break;
    }
    case internal::kAutofillAgent_ClearPreviewedForm_Name: {
      break;
    }
    case internal::kAutofillAgent_FillFieldWithValue_Name: {
      break;
    }
    case internal::kAutofillAgent_PreviewFieldWithValue_Name: {
      break;
    }
    case internal::kAutofillAgent_SetSuggestionAvailability_Name: {
      break;
    }
    case internal::kAutofillAgent_AcceptDataListSuggestion_Name: {
      break;
    }
    case internal::kAutofillAgent_FillPasswordSuggestion_Name: {
      break;
    }
    case internal::kAutofillAgent_PreviewPasswordSuggestion_Name: {
      break;
    }
    case internal::kAutofillAgent_SetUserGestureRequired_Name: {
      break;
    }
    case internal::kAutofillAgent_SetSecureContextRequired_Name: {
      break;
    }
    case internal::kAutofillAgent_SetFocusRequiresScroll_Name: {
      break;
    }
    case internal::kAutofillAgent_SetQueryPasswordSuggestion_Name: {
      break;
    }
    case internal::kAutofillAgent_GetElementFormAndFieldData_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::AutofillAgent::GetElementFormAndFieldData",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::AutofillAgent::GetElementFormAndFieldData");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::AutofillAgent_GetElementFormAndFieldData_Params_Data* params =
          reinterpret_cast<
              internal::AutofillAgent_GetElementFormAndFieldData_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      std::vector<std::string> p_selectors{};
      AutofillAgent_GetElementFormAndFieldData_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadSelectors(&p_selectors))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAgent::Name_, 15, false);
        return false;
      }
      AutofillAgent::GetElementFormAndFieldDataCallback callback =
          AutofillAgent_GetElementFormAndFieldData_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetElementFormAndFieldData(
std::move(p_selectors), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAutofillAgentValidationInfo[] = {
    {&internal::AutofillAgent_FillForm_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_PreviewForm_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_FieldTypePredictionsAvailable_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_ClearSection_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_ClearPreviewedForm_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_FillFieldWithValue_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_PreviewFieldWithValue_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_SetSuggestionAvailability_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_AcceptDataListSuggestion_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_FillPasswordSuggestion_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_PreviewPasswordSuggestion_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_SetUserGestureRequired_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_SetSecureContextRequired_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_SetFocusRequiresScroll_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_SetQueryPasswordSuggestion_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AutofillAgent_GetElementFormAndFieldData_Params_Data::Validate,
     &internal::AutofillAgent_GetElementFormAndFieldData_ResponseParams_Data::Validate},
};

bool AutofillAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill::mojom::AutofillAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAutofillAgentValidationInfo);
}

bool AutofillAgentResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill::mojom::AutofillAgent::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAutofillAgentValidationInfo);
}
const char PasswordAutofillAgent::Name_[] = "autofill.mojom.PasswordAutofillAgent";

PasswordAutofillAgentProxy::PasswordAutofillAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PasswordAutofillAgentProxy::FillPasswordForm(
    const ::autofill::PasswordFormFillData& in_form_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::FillPasswordForm");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_FillPasswordForm_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_FillPasswordForm_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->form_data)::BaseType::BufferWriter
      form_data_writer;
  mojo::internal::Serialize<::autofill::mojom::PasswordFormFillDataDataView>(
      in_form_data, buffer, &form_data_writer, &serialization_context);
  params->form_data.Set(
      form_data_writer.is_null() ? nullptr : form_data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->form_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null form_data in PasswordAutofillAgent.FillPasswordForm request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("FillPasswordForm");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordAutofillAgentProxy::InformNoSavedCredentials(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::InformNoSavedCredentials");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_InformNoSavedCredentials_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_InformNoSavedCredentials_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("InformNoSavedCredentials");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordAutofillAgentProxy::FillIntoFocusedField(
    bool in_is_password, const ::base::string16& in_credential) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::FillIntoFocusedField");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_FillIntoFocusedField_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_FillIntoFocusedField_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->is_password = in_is_password;
  typename decltype(params->credential)::BaseType::BufferWriter
      credential_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_credential, buffer, &credential_writer, &serialization_context);
  params->credential.Set(
      credential_writer.is_null() ? nullptr : credential_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->credential.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null credential in PasswordAutofillAgent.FillIntoFocusedField request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("FillIntoFocusedField");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordAutofillAgentProxy::SetLoggingState(
    bool in_active) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::SetLoggingState");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_SetLoggingState_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_SetLoggingState_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->active = in_active;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("SetLoggingState");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordAutofillAgentProxy::TouchToFillClosed(
    bool in_show_virtual_keyboard) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::TouchToFillClosed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_TouchToFillClosed_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_TouchToFillClosed_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->show_virtual_keyboard = in_show_virtual_keyboard;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("TouchToFillClosed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordAutofillAgentProxy::AnnotateFieldsWithParsingResult(
    const ::autofill::ParsingResult& in_parsing_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordAutofillAgent::AnnotateFieldsWithParsingResult");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordAutofillAgent_AnnotateFieldsWithParsingResult_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordAutofillAgent_AnnotateFieldsWithParsingResult_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->parsing_result)::BaseType::BufferWriter
      parsing_result_writer;
  mojo::internal::Serialize<::autofill::mojom::ParsingResultDataView>(
      in_parsing_result, buffer, &parsing_result_writer, &serialization_context);
  params->parsing_result.Set(
      parsing_result_writer.is_null() ? nullptr : parsing_result_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->parsing_result.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null parsing_result in PasswordAutofillAgent.AnnotateFieldsWithParsingResult request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordAutofillAgent::Name_);
  message.set_method_name("AnnotateFieldsWithParsingResult");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool PasswordAutofillAgentStubDispatch::Accept(
    PasswordAutofillAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPasswordAutofillAgent_FillPasswordForm_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::FillPasswordForm",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::FillPasswordForm");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_FillPasswordForm_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_FillPasswordForm_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::autofill::PasswordFormFillData p_form_data{};
      PasswordAutofillAgent_FillPasswordForm_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadFormData(&p_form_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FillPasswordForm(
std::move(p_form_data));
      return true;
    }
    case internal::kPasswordAutofillAgent_InformNoSavedCredentials_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::InformNoSavedCredentials",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::InformNoSavedCredentials");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_InformNoSavedCredentials_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_InformNoSavedCredentials_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      PasswordAutofillAgent_InformNoSavedCredentials_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->InformNoSavedCredentials();
      return true;
    }
    case internal::kPasswordAutofillAgent_FillIntoFocusedField_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::FillIntoFocusedField",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::FillIntoFocusedField");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_FillIntoFocusedField_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_FillIntoFocusedField_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_is_password{};
      ::base::string16 p_credential{};
      PasswordAutofillAgent_FillIntoFocusedField_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_is_password = input_data_view.is_password();
      if (success && !input_data_view.ReadCredential(&p_credential))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FillIntoFocusedField(
std::move(p_is_password), 
std::move(p_credential));
      return true;
    }
    case internal::kPasswordAutofillAgent_SetLoggingState_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::SetLoggingState",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::SetLoggingState");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_SetLoggingState_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_SetLoggingState_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_active{};
      PasswordAutofillAgent_SetLoggingState_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_active = input_data_view.active();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetLoggingState(
std::move(p_active));
      return true;
    }
    case internal::kPasswordAutofillAgent_TouchToFillClosed_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::TouchToFillClosed",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::TouchToFillClosed");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_TouchToFillClosed_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_TouchToFillClosed_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      bool p_show_virtual_keyboard{};
      PasswordAutofillAgent_TouchToFillClosed_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_show_virtual_keyboard = input_data_view.show_virtual_keyboard();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->TouchToFillClosed(
std::move(p_show_virtual_keyboard));
      return true;
    }
    case internal::kPasswordAutofillAgent_AnnotateFieldsWithParsingResult_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordAutofillAgent::AnnotateFieldsWithParsingResult",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordAutofillAgent::AnnotateFieldsWithParsingResult");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordAutofillAgent_AnnotateFieldsWithParsingResult_Params_Data* params =
          reinterpret_cast<internal::PasswordAutofillAgent_AnnotateFieldsWithParsingResult_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::autofill::ParsingResult p_parsing_result{};
      PasswordAutofillAgent_AnnotateFieldsWithParsingResult_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadParsingResult(&p_parsing_result))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordAutofillAgent::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AnnotateFieldsWithParsingResult(
std::move(p_parsing_result));
      return true;
    }
  }
  return false;
}

// static
bool PasswordAutofillAgentStubDispatch::AcceptWithResponder(
    PasswordAutofillAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kPasswordAutofillAgent_FillPasswordForm_Name: {
      break;
    }
    case internal::kPasswordAutofillAgent_InformNoSavedCredentials_Name: {
      break;
    }
    case internal::kPasswordAutofillAgent_FillIntoFocusedField_Name: {
      break;
    }
    case internal::kPasswordAutofillAgent_SetLoggingState_Name: {
      break;
    }
    case internal::kPasswordAutofillAgent_TouchToFillClosed_Name: {
      break;
    }
    case internal::kPasswordAutofillAgent_AnnotateFieldsWithParsingResult_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPasswordAutofillAgentValidationInfo[] = {
    {&internal::PasswordAutofillAgent_FillPasswordForm_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordAutofillAgent_InformNoSavedCredentials_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordAutofillAgent_FillIntoFocusedField_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordAutofillAgent_SetLoggingState_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordAutofillAgent_TouchToFillClosed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordAutofillAgent_AnnotateFieldsWithParsingResult_Params_Data::Validate,
     nullptr /* no response */},
};

bool PasswordAutofillAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill::mojom::PasswordAutofillAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPasswordAutofillAgentValidationInfo);
}

const char PasswordGenerationAgent::Name_[] = "autofill.mojom.PasswordGenerationAgent";

class PasswordGenerationAgent_UserTriggeredGeneratePassword_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PasswordGenerationAgent_UserTriggeredGeneratePassword_ForwardToCallback(
      PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PasswordGenerationAgent_UserTriggeredGeneratePassword_ForwardToCallback);
};

PasswordGenerationAgentProxy::PasswordGenerationAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PasswordGenerationAgentProxy::GeneratedPasswordAccepted(
    const ::base::string16& in_generated_password) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordGenerationAgent::GeneratedPasswordAccepted");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordGenerationAgent_GeneratedPasswordAccepted_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordGenerationAgent_GeneratedPasswordAccepted_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->generated_password)::BaseType::BufferWriter
      generated_password_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_generated_password, buffer, &generated_password_writer, &serialization_context);
  params->generated_password.Set(
      generated_password_writer.is_null() ? nullptr : generated_password_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->generated_password.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null generated_password in PasswordGenerationAgent.GeneratedPasswordAccepted request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordGenerationAgent::Name_);
  message.set_method_name("GeneratedPasswordAccepted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PasswordGenerationAgentProxy::UserTriggeredGeneratePassword(
    UserTriggeredGeneratePasswordCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordGenerationAgent::UserTriggeredGeneratePassword");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordGenerationAgent_UserTriggeredGeneratePassword_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordGenerationAgent::Name_);
  message.set_method_name("UserTriggeredGeneratePassword");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PasswordGenerationAgent_UserTriggeredGeneratePassword_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PasswordGenerationAgentProxy::FoundFormEligibleForGeneration(
    const ::autofill::PasswordFormGenerationData& in_form) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "autofill::mojom::PasswordGenerationAgent::FoundFormEligibleForGeneration");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordGenerationAgent_FoundFormEligibleForGeneration_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordGenerationAgent_FoundFormEligibleForGeneration_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->form)::BaseType::BufferWriter
      form_writer;
  mojo::internal::Serialize<::autofill::mojom::PasswordFormGenerationDataDataView>(
      in_form, buffer, &form_writer, &serialization_context);
  params->form.Set(
      form_writer.is_null() ? nullptr : form_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->form.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null form in PasswordGenerationAgent.FoundFormEligibleForGeneration request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordGenerationAgent::Name_);
  message.set_method_name("FoundFormEligibleForGeneration");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder {
 public:
  static PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder> proxy(
        new PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const base::Optional<::autofill::password_generation::PasswordGenerationUIData>& in_data);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder);
};

bool PasswordGenerationAgent_UserTriggeredGeneratePassword_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "autofill::mojom::PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  base::Optional<::autofill::password_generation::PasswordGenerationUIData> p_data{};
  PasswordGenerationAgent_UserTriggeredGeneratePassword_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadData(&p_data))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PasswordGenerationAgent::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_data));
  return true;
}

void PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder::Run(
    const base::Optional<::autofill::password_generation::PasswordGenerationUIData>& in_data) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPasswordGenerationAgent_UserTriggeredGeneratePassword_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::autofill::mojom::internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->data)::BaseType::BufferWriter
      data_writer;
  mojo::internal::Serialize<::autofill::mojom::PasswordGenerationUIDataDataView>(
      in_data, buffer, &data_writer, &serialization_context);
  params->data.Set(
      data_writer.is_null() ? nullptr : data_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)autofill::mojom::PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PasswordGenerationAgent::Name_);
  message.set_method_name("UserTriggeredGeneratePassword");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PasswordGenerationAgentStubDispatch::Accept(
    PasswordGenerationAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPasswordGenerationAgent_GeneratedPasswordAccepted_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordGenerationAgent::GeneratedPasswordAccepted",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordGenerationAgent::GeneratedPasswordAccepted");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordGenerationAgent_GeneratedPasswordAccepted_Params_Data* params =
          reinterpret_cast<internal::PasswordGenerationAgent_GeneratedPasswordAccepted_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_generated_password{};
      PasswordGenerationAgent_GeneratedPasswordAccepted_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadGeneratedPassword(&p_generated_password))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordGenerationAgent::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GeneratedPasswordAccepted(
std::move(p_generated_password));
      return true;
    }
    case internal::kPasswordGenerationAgent_UserTriggeredGeneratePassword_Name: {
      break;
    }
    case internal::kPasswordGenerationAgent_FoundFormEligibleForGeneration_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordGenerationAgent::FoundFormEligibleForGeneration",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordGenerationAgent::FoundFormEligibleForGeneration");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::PasswordGenerationAgent_FoundFormEligibleForGeneration_Params_Data* params =
          reinterpret_cast<internal::PasswordGenerationAgent_FoundFormEligibleForGeneration_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::autofill::PasswordFormGenerationData p_form{};
      PasswordGenerationAgent_FoundFormEligibleForGeneration_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadForm(&p_form))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordGenerationAgent::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FoundFormEligibleForGeneration(
std::move(p_form));
      return true;
    }
  }
  return false;
}

// static
bool PasswordGenerationAgentStubDispatch::AcceptWithResponder(
    PasswordGenerationAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kPasswordGenerationAgent_GeneratedPasswordAccepted_Name: {
      break;
    }
    case internal::kPasswordGenerationAgent_UserTriggeredGeneratePassword_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)autofill::mojom::PasswordGenerationAgent::UserTriggeredGeneratePassword",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)autofill::mojom::PasswordGenerationAgent::UserTriggeredGeneratePassword");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_Params_Data* params =
          reinterpret_cast<
              internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      PasswordGenerationAgent_UserTriggeredGeneratePassword_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PasswordGenerationAgent::Name_, 1, false);
        return false;
      }
      PasswordGenerationAgent::UserTriggeredGeneratePasswordCallback callback =
          PasswordGenerationAgent_UserTriggeredGeneratePassword_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UserTriggeredGeneratePassword(std::move(callback));
      return true;
    }
    case internal::kPasswordGenerationAgent_FoundFormEligibleForGeneration_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPasswordGenerationAgentValidationInfo[] = {
    {&internal::PasswordGenerationAgent_GeneratedPasswordAccepted_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_Params_Data::Validate,
     &internal::PasswordGenerationAgent_UserTriggeredGeneratePassword_ResponseParams_Data::Validate},
    {&internal::PasswordGenerationAgent_FoundFormEligibleForGeneration_Params_Data::Validate,
     nullptr /* no response */},
};

bool PasswordGenerationAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill::mojom::PasswordGenerationAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPasswordGenerationAgentValidationInfo);
}

bool PasswordGenerationAgentResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill::mojom::PasswordGenerationAgent::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPasswordGenerationAgentValidationInfo);
}
}  // namespace mojom
}  // namespace autofill

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif