// components/autofill/content/common/mojom/autofill_driver.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "components/autofill/content/common/mojom/autofill_driver.mojom-shared.h"
#include "components/autofill/content/common/mojom/autofill_driver.mojom-forward.h"
#include "components/autofill/core/common/mojom/autofill_types.mojom-forward.h"
#include "mojo/public/mojom/base/string16.mojom-forward.h"
#include "mojo/public/mojom/base/text_direction.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-forward.h"
#include "url/mojom/url.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace autofill {
namespace mojom {

class AutofillDriverProxy;

template <typename ImplRefTraits>
class AutofillDriverStub;

class AutofillDriverRequestValidator;


class  AutofillDriver
    : public AutofillDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AutofillDriverInterfaceBase;
  using Proxy_ = AutofillDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = AutofillDriverStub<ImplRefTraits>;

  using RequestValidator_ = AutofillDriverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kFormsSeenMinVersion = 0,
    kFormSubmittedMinVersion = 0,
    kTextFieldDidChangeMinVersion = 0,
    kTextFieldDidScrollMinVersion = 0,
    kSelectControlDidChangeMinVersion = 0,
    kSelectFieldOptionsDidChangeMinVersion = 0,
    kQueryFormFieldAutofillMinVersion = 0,
    kHidePopupMinVersion = 0,
    kFocusNoLongerOnFormMinVersion = 0,
    kFocusOnFormFieldMinVersion = 0,
    kDidFillAutofillFormDataMinVersion = 0,
    kDidPreviewAutofillFormDataMinVersion = 0,
    kDidEndTextFieldEditingMinVersion = 0,
    kSetDataListMinVersion = 0,
  };
  virtual ~AutofillDriver() {}

  
  virtual void FormsSeen(const std::vector<::autofill::FormData>& forms, ::base::TimeTicks timestamp) = 0;

  
  virtual void FormSubmitted(const ::autofill::FormData& form, bool known_success, ::autofill::mojom::SubmissionSource source) = 0;

  
  virtual void TextFieldDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, ::base::TimeTicks timestamp) = 0;

  
  virtual void TextFieldDidScroll(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) = 0;

  
  virtual void SelectControlDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) = 0;

  
  virtual void SelectFieldOptionsDidChange(const ::autofill::FormData& form) = 0;

  
  virtual void QueryFormFieldAutofill(int32_t id, const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, bool autoselect_first_suggestion) = 0;

  
  virtual void HidePopup() = 0;

  
  virtual void FocusNoLongerOnForm() = 0;

  
  virtual void FocusOnFormField(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) = 0;

  
  virtual void DidFillAutofillFormData(const ::autofill::FormData& form, ::base::TimeTicks timestamp) = 0;

  
  virtual void DidPreviewAutofillFormData() = 0;

  
  virtual void DidEndTextFieldEditing() = 0;

  
  virtual void SetDataList(const std::vector<::base::string16>& values, const std::vector<::base::string16>& labels) = 0;
};

class PasswordManagerDriverProxy;

template <typename ImplRefTraits>
class PasswordManagerDriverStub;

class PasswordManagerDriverRequestValidator;


class  PasswordManagerDriver
    : public PasswordManagerDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PasswordManagerDriverInterfaceBase;
  using Proxy_ = PasswordManagerDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = PasswordManagerDriverStub<ImplRefTraits>;

  using RequestValidator_ = PasswordManagerDriverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPasswordFormsParsedMinVersion = 0,
    kPasswordFormsRenderedMinVersion = 0,
    kPasswordFormSubmittedMinVersion = 0,
    kShowManualFallbackForSavingMinVersion = 0,
    kHideManualFallbackForSavingMinVersion = 0,
    kSameDocumentNavigationMinVersion = 0,
    kRecordSavePasswordProgressMinVersion = 0,
    kUserModifiedPasswordFieldMinVersion = 0,
    kUserModifiedNonPasswordFieldMinVersion = 0,
    kShowPasswordSuggestionsMinVersion = 0,
    kShowTouchToFillMinVersion = 0,
    kCheckSafeBrowsingReputationMinVersion = 0,
    kFocusedInputChangedMinVersion = 0,
    kLogFirstFillingResultMinVersion = 0,
  };
  virtual ~PasswordManagerDriver() {}

  
  virtual void PasswordFormsParsed(const std::vector<::autofill::FormData>& forms_data) = 0;

  
  virtual void PasswordFormsRendered(const std::vector<::autofill::FormData>& visible_forms_data, bool did_stop_loading) = 0;

  
  virtual void PasswordFormSubmitted(const ::autofill::FormData& form_data) = 0;

  
  virtual void ShowManualFallbackForSaving(const ::autofill::FormData& form_data) = 0;

  
  virtual void HideManualFallbackForSaving() = 0;

  
  virtual void SameDocumentNavigation(::autofill::mojom::SubmissionIndicatorEvent submission_indication_event) = 0;

  
  virtual void RecordSavePasswordProgress(const std::string& log) = 0;

  
  virtual void UserModifiedPasswordField() = 0;

  
  virtual void UserModifiedNonPasswordField(uint32_t renderer_id, const ::base::string16& value) = 0;

  
  virtual void ShowPasswordSuggestions(::base::i18n::TextDirection text_direction, const ::base::string16& typed_username, int32_t options, const ::gfx::RectF& bounds) = 0;

  
  virtual void ShowTouchToFill() = 0;

  
  virtual void CheckSafeBrowsingReputation(const ::GURL& form_action, const ::GURL& frame_url) = 0;

  
  virtual void FocusedInputChanged(::autofill::mojom::FocusedFieldType focused_field_type) = 0;

  
  virtual void LogFirstFillingResult(uint32_t form_renderer_id, int32_t result) = 0;
};

class PasswordGenerationDriverProxy;

template <typename ImplRefTraits>
class PasswordGenerationDriverStub;

class PasswordGenerationDriverRequestValidator;


class  PasswordGenerationDriver
    : public PasswordGenerationDriverInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = PasswordGenerationDriverInterfaceBase;
  using Proxy_ = PasswordGenerationDriverProxy;

  template <typename ImplRefTraits>
  using Stub_ = PasswordGenerationDriverStub<ImplRefTraits>;

  using RequestValidator_ = PasswordGenerationDriverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kAutomaticGenerationAvailableMinVersion = 0,
    kShowPasswordEditingPopupMinVersion = 0,
    kPasswordGenerationRejectedByTypingMinVersion = 0,
    kPresaveGeneratedPasswordMinVersion = 0,
    kPasswordNoLongerGeneratedMinVersion = 0,
    kFrameWasScrolledMinVersion = 0,
    kGenerationElementLostFocusMinVersion = 0,
  };
  virtual ~PasswordGenerationDriver() {}

  
  virtual void AutomaticGenerationAvailable(const ::autofill::password_generation::PasswordGenerationUIData& password_generation_ui_data) = 0;

  
  virtual void ShowPasswordEditingPopup(const ::gfx::RectF& bounds, const ::autofill::FormData& form_data, uint32_t field_renderer_id, const ::base::string16& password_value) = 0;

  
  virtual void PasswordGenerationRejectedByTyping() = 0;

  
  virtual void PresaveGeneratedPassword(const ::autofill::FormData& form_data, const ::base::string16& password_value) = 0;

  
  virtual void PasswordNoLongerGenerated(const ::autofill::FormData& form_data) = 0;

  
  virtual void FrameWasScrolled() = 0;

  
  virtual void GenerationElementLostFocus() = 0;
};



class  AutofillDriverProxy
    : public AutofillDriver {
 public:
  using InterfaceType = AutofillDriver;

  explicit AutofillDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void FormsSeen(const std::vector<::autofill::FormData>& forms, ::base::TimeTicks timestamp) final;
  
  void FormSubmitted(const ::autofill::FormData& form, bool known_success, ::autofill::mojom::SubmissionSource source) final;
  
  void TextFieldDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, ::base::TimeTicks timestamp) final;
  
  void TextFieldDidScroll(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) final;
  
  void SelectControlDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) final;
  
  void SelectFieldOptionsDidChange(const ::autofill::FormData& form) final;
  
  void QueryFormFieldAutofill(int32_t id, const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, bool autoselect_first_suggestion) final;
  
  void HidePopup() final;
  
  void FocusNoLongerOnForm() final;
  
  void FocusOnFormField(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) final;
  
  void DidFillAutofillFormData(const ::autofill::FormData& form, ::base::TimeTicks timestamp) final;
  
  void DidPreviewAutofillFormData() final;
  
  void DidEndTextFieldEditing() final;
  
  void SetDataList(const std::vector<::base::string16>& values, const std::vector<::base::string16>& labels) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PasswordManagerDriverProxy
    : public PasswordManagerDriver {
 public:
  using InterfaceType = PasswordManagerDriver;

  explicit PasswordManagerDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void PasswordFormsParsed(const std::vector<::autofill::FormData>& forms_data) final;
  
  void PasswordFormsRendered(const std::vector<::autofill::FormData>& visible_forms_data, bool did_stop_loading) final;
  
  void PasswordFormSubmitted(const ::autofill::FormData& form_data) final;
  
  void ShowManualFallbackForSaving(const ::autofill::FormData& form_data) final;
  
  void HideManualFallbackForSaving() final;
  
  void SameDocumentNavigation(::autofill::mojom::SubmissionIndicatorEvent submission_indication_event) final;
  
  void RecordSavePasswordProgress(const std::string& log) final;
  
  void UserModifiedPasswordField() final;
  
  void UserModifiedNonPasswordField(uint32_t renderer_id, const ::base::string16& value) final;
  
  void ShowPasswordSuggestions(::base::i18n::TextDirection text_direction, const ::base::string16& typed_username, int32_t options, const ::gfx::RectF& bounds) final;
  
  void ShowTouchToFill() final;
  
  void CheckSafeBrowsingReputation(const ::GURL& form_action, const ::GURL& frame_url) final;
  
  void FocusedInputChanged(::autofill::mojom::FocusedFieldType focused_field_type) final;
  
  void LogFirstFillingResult(uint32_t form_renderer_id, int32_t result) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PasswordGenerationDriverProxy
    : public PasswordGenerationDriver {
 public:
  using InterfaceType = PasswordGenerationDriver;

  explicit PasswordGenerationDriverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void AutomaticGenerationAvailable(const ::autofill::password_generation::PasswordGenerationUIData& password_generation_ui_data) final;
  
  void ShowPasswordEditingPopup(const ::gfx::RectF& bounds, const ::autofill::FormData& form_data, uint32_t field_renderer_id, const ::base::string16& password_value) final;
  
  void PasswordGenerationRejectedByTyping() final;
  
  void PresaveGeneratedPassword(const ::autofill::FormData& form_data, const ::base::string16& password_value) final;
  
  void PasswordNoLongerGenerated(const ::autofill::FormData& form_data) final;
  
  void FrameWasScrolled() final;
  
  void GenerationElementLostFocus() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  AutofillDriverStubDispatch {
 public:
  static bool Accept(AutofillDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AutofillDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AutofillDriver>>
class AutofillDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AutofillDriverStub() {}
  ~AutofillDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AutofillDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AutofillDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PasswordManagerDriverStubDispatch {
 public:
  static bool Accept(PasswordManagerDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PasswordManagerDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PasswordManagerDriver>>
class PasswordManagerDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PasswordManagerDriverStub() {}
  ~PasswordManagerDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordManagerDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordManagerDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PasswordGenerationDriverStubDispatch {
 public:
  static bool Accept(PasswordGenerationDriver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PasswordGenerationDriver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PasswordGenerationDriver>>
class PasswordGenerationDriverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PasswordGenerationDriverStub() {}
  ~PasswordGenerationDriverStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordGenerationDriverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordGenerationDriverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AutofillDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PasswordManagerDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PasswordGenerationDriverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace autofill

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_H_