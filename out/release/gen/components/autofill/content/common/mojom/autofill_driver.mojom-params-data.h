// components/autofill/content/common/mojom/autofill_driver.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace autofill {
namespace mojom {
namespace internal {
class  AutofillDriver_FormsSeen_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_FormsSeen_Params_Data));
      new (data()) AutofillDriver_FormsSeen_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_FormsSeen_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_FormsSeen_Params_Data>(index_);
    }
    AutofillDriver_FormsSeen_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data>>> forms;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> timestamp;

 private:
  AutofillDriver_FormsSeen_Params_Data();
  ~AutofillDriver_FormsSeen_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_FormsSeen_Params_Data) == 24,
              "Bad sizeof(AutofillDriver_FormsSeen_Params_Data)");
class  AutofillDriver_FormSubmitted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_FormSubmitted_Params_Data));
      new (data()) AutofillDriver_FormSubmitted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_FormSubmitted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_FormSubmitted_Params_Data>(index_);
    }
    AutofillDriver_FormSubmitted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  uint8_t known_success : 1;
  uint8_t pad1_[3];
  int32_t source;

 private:
  AutofillDriver_FormSubmitted_Params_Data();
  ~AutofillDriver_FormSubmitted_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_FormSubmitted_Params_Data) == 24,
              "Bad sizeof(AutofillDriver_FormSubmitted_Params_Data)");
class  AutofillDriver_TextFieldDidChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_TextFieldDidChange_Params_Data));
      new (data()) AutofillDriver_TextFieldDidChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_TextFieldDidChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_TextFieldDidChange_Params_Data>(index_);
    }
    AutofillDriver_TextFieldDidChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::autofill::mojom::internal::FormFieldData_Data> field;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounding_box;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> timestamp;

 private:
  AutofillDriver_TextFieldDidChange_Params_Data();
  ~AutofillDriver_TextFieldDidChange_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_TextFieldDidChange_Params_Data) == 40,
              "Bad sizeof(AutofillDriver_TextFieldDidChange_Params_Data)");
class  AutofillDriver_TextFieldDidScroll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_TextFieldDidScroll_Params_Data));
      new (data()) AutofillDriver_TextFieldDidScroll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_TextFieldDidScroll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_TextFieldDidScroll_Params_Data>(index_);
    }
    AutofillDriver_TextFieldDidScroll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::autofill::mojom::internal::FormFieldData_Data> field;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounding_box;

 private:
  AutofillDriver_TextFieldDidScroll_Params_Data();
  ~AutofillDriver_TextFieldDidScroll_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_TextFieldDidScroll_Params_Data) == 32,
              "Bad sizeof(AutofillDriver_TextFieldDidScroll_Params_Data)");
class  AutofillDriver_SelectControlDidChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_SelectControlDidChange_Params_Data));
      new (data()) AutofillDriver_SelectControlDidChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_SelectControlDidChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_SelectControlDidChange_Params_Data>(index_);
    }
    AutofillDriver_SelectControlDidChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::autofill::mojom::internal::FormFieldData_Data> field;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounding_box;

 private:
  AutofillDriver_SelectControlDidChange_Params_Data();
  ~AutofillDriver_SelectControlDidChange_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_SelectControlDidChange_Params_Data) == 32,
              "Bad sizeof(AutofillDriver_SelectControlDidChange_Params_Data)");
class  AutofillDriver_SelectFieldOptionsDidChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_SelectFieldOptionsDidChange_Params_Data));
      new (data()) AutofillDriver_SelectFieldOptionsDidChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_SelectFieldOptionsDidChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_SelectFieldOptionsDidChange_Params_Data>(index_);
    }
    AutofillDriver_SelectFieldOptionsDidChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;

 private:
  AutofillDriver_SelectFieldOptionsDidChange_Params_Data();
  ~AutofillDriver_SelectFieldOptionsDidChange_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_SelectFieldOptionsDidChange_Params_Data) == 16,
              "Bad sizeof(AutofillDriver_SelectFieldOptionsDidChange_Params_Data)");
class  AutofillDriver_QueryFormFieldAutofill_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_QueryFormFieldAutofill_Params_Data));
      new (data()) AutofillDriver_QueryFormFieldAutofill_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_QueryFormFieldAutofill_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_QueryFormFieldAutofill_Params_Data>(index_);
    }
    AutofillDriver_QueryFormFieldAutofill_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t autoselect_first_suggestion : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::autofill::mojom::internal::FormFieldData_Data> field;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounding_box;

 private:
  AutofillDriver_QueryFormFieldAutofill_Params_Data();
  ~AutofillDriver_QueryFormFieldAutofill_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_QueryFormFieldAutofill_Params_Data) == 40,
              "Bad sizeof(AutofillDriver_QueryFormFieldAutofill_Params_Data)");
class  AutofillDriver_HidePopup_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_HidePopup_Params_Data));
      new (data()) AutofillDriver_HidePopup_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_HidePopup_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_HidePopup_Params_Data>(index_);
    }
    AutofillDriver_HidePopup_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  AutofillDriver_HidePopup_Params_Data();
  ~AutofillDriver_HidePopup_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_HidePopup_Params_Data) == 8,
              "Bad sizeof(AutofillDriver_HidePopup_Params_Data)");
class  AutofillDriver_FocusNoLongerOnForm_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_FocusNoLongerOnForm_Params_Data));
      new (data()) AutofillDriver_FocusNoLongerOnForm_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_FocusNoLongerOnForm_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_FocusNoLongerOnForm_Params_Data>(index_);
    }
    AutofillDriver_FocusNoLongerOnForm_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  AutofillDriver_FocusNoLongerOnForm_Params_Data();
  ~AutofillDriver_FocusNoLongerOnForm_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_FocusNoLongerOnForm_Params_Data) == 8,
              "Bad sizeof(AutofillDriver_FocusNoLongerOnForm_Params_Data)");
class  AutofillDriver_FocusOnFormField_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_FocusOnFormField_Params_Data));
      new (data()) AutofillDriver_FocusOnFormField_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_FocusOnFormField_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_FocusOnFormField_Params_Data>(index_);
    }
    AutofillDriver_FocusOnFormField_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::autofill::mojom::internal::FormFieldData_Data> field;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounding_box;

 private:
  AutofillDriver_FocusOnFormField_Params_Data();
  ~AutofillDriver_FocusOnFormField_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_FocusOnFormField_Params_Data) == 32,
              "Bad sizeof(AutofillDriver_FocusOnFormField_Params_Data)");
class  AutofillDriver_DidFillAutofillFormData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_DidFillAutofillFormData_Params_Data));
      new (data()) AutofillDriver_DidFillAutofillFormData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_DidFillAutofillFormData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_DidFillAutofillFormData_Params_Data>(index_);
    }
    AutofillDriver_DidFillAutofillFormData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> timestamp;

 private:
  AutofillDriver_DidFillAutofillFormData_Params_Data();
  ~AutofillDriver_DidFillAutofillFormData_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_DidFillAutofillFormData_Params_Data) == 24,
              "Bad sizeof(AutofillDriver_DidFillAutofillFormData_Params_Data)");
class  AutofillDriver_DidPreviewAutofillFormData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_DidPreviewAutofillFormData_Params_Data));
      new (data()) AutofillDriver_DidPreviewAutofillFormData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_DidPreviewAutofillFormData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_DidPreviewAutofillFormData_Params_Data>(index_);
    }
    AutofillDriver_DidPreviewAutofillFormData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  AutofillDriver_DidPreviewAutofillFormData_Params_Data();
  ~AutofillDriver_DidPreviewAutofillFormData_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_DidPreviewAutofillFormData_Params_Data) == 8,
              "Bad sizeof(AutofillDriver_DidPreviewAutofillFormData_Params_Data)");
class  AutofillDriver_DidEndTextFieldEditing_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_DidEndTextFieldEditing_Params_Data));
      new (data()) AutofillDriver_DidEndTextFieldEditing_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_DidEndTextFieldEditing_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_DidEndTextFieldEditing_Params_Data>(index_);
    }
    AutofillDriver_DidEndTextFieldEditing_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  AutofillDriver_DidEndTextFieldEditing_Params_Data();
  ~AutofillDriver_DidEndTextFieldEditing_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_DidEndTextFieldEditing_Params_Data) == 8,
              "Bad sizeof(AutofillDriver_DidEndTextFieldEditing_Params_Data)");
class  AutofillDriver_SetDataList_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutofillDriver_SetDataList_Params_Data));
      new (data()) AutofillDriver_SetDataList_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutofillDriver_SetDataList_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutofillDriver_SetDataList_Params_Data>(index_);
    }
    AutofillDriver_SetDataList_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data>>> values;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data>>> labels;

 private:
  AutofillDriver_SetDataList_Params_Data();
  ~AutofillDriver_SetDataList_Params_Data() = delete;
};
static_assert(sizeof(AutofillDriver_SetDataList_Params_Data) == 24,
              "Bad sizeof(AutofillDriver_SetDataList_Params_Data)");
class  PasswordManagerDriver_PasswordFormsParsed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_PasswordFormsParsed_Params_Data));
      new (data()) PasswordManagerDriver_PasswordFormsParsed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_PasswordFormsParsed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_PasswordFormsParsed_Params_Data>(index_);
    }
    PasswordManagerDriver_PasswordFormsParsed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data>>> forms_data;

 private:
  PasswordManagerDriver_PasswordFormsParsed_Params_Data();
  ~PasswordManagerDriver_PasswordFormsParsed_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_PasswordFormsParsed_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_PasswordFormsParsed_Params_Data)");
class  PasswordManagerDriver_PasswordFormsRendered_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_PasswordFormsRendered_Params_Data));
      new (data()) PasswordManagerDriver_PasswordFormsRendered_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_PasswordFormsRendered_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_PasswordFormsRendered_Params_Data>(index_);
    }
    PasswordManagerDriver_PasswordFormsRendered_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data>>> visible_forms_data;
  uint8_t did_stop_loading : 1;
  uint8_t padfinal_[7];

 private:
  PasswordManagerDriver_PasswordFormsRendered_Params_Data();
  ~PasswordManagerDriver_PasswordFormsRendered_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_PasswordFormsRendered_Params_Data) == 24,
              "Bad sizeof(PasswordManagerDriver_PasswordFormsRendered_Params_Data)");
class  PasswordManagerDriver_PasswordFormSubmitted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_PasswordFormSubmitted_Params_Data));
      new (data()) PasswordManagerDriver_PasswordFormSubmitted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_PasswordFormSubmitted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_PasswordFormSubmitted_Params_Data>(index_);
    }
    PasswordManagerDriver_PasswordFormSubmitted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form_data;

 private:
  PasswordManagerDriver_PasswordFormSubmitted_Params_Data();
  ~PasswordManagerDriver_PasswordFormSubmitted_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_PasswordFormSubmitted_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_PasswordFormSubmitted_Params_Data)");
class  PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data));
      new (data()) PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data>(index_);
    }
    PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form_data;

 private:
  PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data();
  ~PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data)");
class  PasswordManagerDriver_HideManualFallbackForSaving_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_HideManualFallbackForSaving_Params_Data));
      new (data()) PasswordManagerDriver_HideManualFallbackForSaving_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_HideManualFallbackForSaving_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_HideManualFallbackForSaving_Params_Data>(index_);
    }
    PasswordManagerDriver_HideManualFallbackForSaving_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordManagerDriver_HideManualFallbackForSaving_Params_Data();
  ~PasswordManagerDriver_HideManualFallbackForSaving_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_HideManualFallbackForSaving_Params_Data) == 8,
              "Bad sizeof(PasswordManagerDriver_HideManualFallbackForSaving_Params_Data)");
class  PasswordManagerDriver_SameDocumentNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_SameDocumentNavigation_Params_Data));
      new (data()) PasswordManagerDriver_SameDocumentNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_SameDocumentNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_SameDocumentNavigation_Params_Data>(index_);
    }
    PasswordManagerDriver_SameDocumentNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t submission_indication_event;
  uint8_t padfinal_[4];

 private:
  PasswordManagerDriver_SameDocumentNavigation_Params_Data();
  ~PasswordManagerDriver_SameDocumentNavigation_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_SameDocumentNavigation_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_SameDocumentNavigation_Params_Data)");
class  PasswordManagerDriver_RecordSavePasswordProgress_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_RecordSavePasswordProgress_Params_Data));
      new (data()) PasswordManagerDriver_RecordSavePasswordProgress_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_RecordSavePasswordProgress_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_RecordSavePasswordProgress_Params_Data>(index_);
    }
    PasswordManagerDriver_RecordSavePasswordProgress_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> log;

 private:
  PasswordManagerDriver_RecordSavePasswordProgress_Params_Data();
  ~PasswordManagerDriver_RecordSavePasswordProgress_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_RecordSavePasswordProgress_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_RecordSavePasswordProgress_Params_Data)");
class  PasswordManagerDriver_UserModifiedPasswordField_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_UserModifiedPasswordField_Params_Data));
      new (data()) PasswordManagerDriver_UserModifiedPasswordField_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_UserModifiedPasswordField_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_UserModifiedPasswordField_Params_Data>(index_);
    }
    PasswordManagerDriver_UserModifiedPasswordField_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordManagerDriver_UserModifiedPasswordField_Params_Data();
  ~PasswordManagerDriver_UserModifiedPasswordField_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_UserModifiedPasswordField_Params_Data) == 8,
              "Bad sizeof(PasswordManagerDriver_UserModifiedPasswordField_Params_Data)");
class  PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data));
      new (data()) PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data>(index_);
    }
    PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t renderer_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> value;

 private:
  PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data();
  ~PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data) == 24,
              "Bad sizeof(PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data)");
class  PasswordManagerDriver_ShowPasswordSuggestions_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_ShowPasswordSuggestions_Params_Data));
      new (data()) PasswordManagerDriver_ShowPasswordSuggestions_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_ShowPasswordSuggestions_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_ShowPasswordSuggestions_Params_Data>(index_);
    }
    PasswordManagerDriver_ShowPasswordSuggestions_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t text_direction;
  int32_t options;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> typed_username;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounds;

 private:
  PasswordManagerDriver_ShowPasswordSuggestions_Params_Data();
  ~PasswordManagerDriver_ShowPasswordSuggestions_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_ShowPasswordSuggestions_Params_Data) == 32,
              "Bad sizeof(PasswordManagerDriver_ShowPasswordSuggestions_Params_Data)");
class  PasswordManagerDriver_ShowTouchToFill_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_ShowTouchToFill_Params_Data));
      new (data()) PasswordManagerDriver_ShowTouchToFill_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_ShowTouchToFill_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_ShowTouchToFill_Params_Data>(index_);
    }
    PasswordManagerDriver_ShowTouchToFill_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordManagerDriver_ShowTouchToFill_Params_Data();
  ~PasswordManagerDriver_ShowTouchToFill_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_ShowTouchToFill_Params_Data) == 8,
              "Bad sizeof(PasswordManagerDriver_ShowTouchToFill_Params_Data)");
class  PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data));
      new (data()) PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data>(index_);
    }
    PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> form_action;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> frame_url;

 private:
  PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data();
  ~PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data) == 24,
              "Bad sizeof(PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data)");
class  PasswordManagerDriver_FocusedInputChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_FocusedInputChanged_Params_Data));
      new (data()) PasswordManagerDriver_FocusedInputChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_FocusedInputChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_FocusedInputChanged_Params_Data>(index_);
    }
    PasswordManagerDriver_FocusedInputChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t focused_field_type;
  uint8_t padfinal_[4];

 private:
  PasswordManagerDriver_FocusedInputChanged_Params_Data();
  ~PasswordManagerDriver_FocusedInputChanged_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_FocusedInputChanged_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_FocusedInputChanged_Params_Data)");
class  PasswordManagerDriver_LogFirstFillingResult_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordManagerDriver_LogFirstFillingResult_Params_Data));
      new (data()) PasswordManagerDriver_LogFirstFillingResult_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordManagerDriver_LogFirstFillingResult_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordManagerDriver_LogFirstFillingResult_Params_Data>(index_);
    }
    PasswordManagerDriver_LogFirstFillingResult_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t form_renderer_id;
  int32_t result;

 private:
  PasswordManagerDriver_LogFirstFillingResult_Params_Data();
  ~PasswordManagerDriver_LogFirstFillingResult_Params_Data() = delete;
};
static_assert(sizeof(PasswordManagerDriver_LogFirstFillingResult_Params_Data) == 16,
              "Bad sizeof(PasswordManagerDriver_LogFirstFillingResult_Params_Data)");
class  PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data));
      new (data()) PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data>(index_);
    }
    PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::PasswordGenerationUIData_Data> password_generation_ui_data;

 private:
  PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data();
  ~PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data) == 16,
              "Bad sizeof(PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data)");
class  PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data));
      new (data()) PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data>(index_);
    }
    PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> bounds;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form_data;
  uint32_t field_renderer_id;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> password_value;

 private:
  PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data();
  ~PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data) == 40,
              "Bad sizeof(PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data)");
class  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data));
      new (data()) PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data>(index_);
    }
    PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data();
  ~PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data) == 8,
              "Bad sizeof(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data)");
class  PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data));
      new (data()) PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data>(index_);
    }
    PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form_data;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> password_value;

 private:
  PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data();
  ~PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data) == 24,
              "Bad sizeof(PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data)");
class  PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data));
      new (data()) PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data>(index_);
    }
    PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::autofill::mojom::internal::FormData_Data> form_data;

 private:
  PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data();
  ~PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data) == 16,
              "Bad sizeof(PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data)");
class  PasswordGenerationDriver_FrameWasScrolled_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_FrameWasScrolled_Params_Data));
      new (data()) PasswordGenerationDriver_FrameWasScrolled_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_FrameWasScrolled_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_FrameWasScrolled_Params_Data>(index_);
    }
    PasswordGenerationDriver_FrameWasScrolled_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordGenerationDriver_FrameWasScrolled_Params_Data();
  ~PasswordGenerationDriver_FrameWasScrolled_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_FrameWasScrolled_Params_Data) == 8,
              "Bad sizeof(PasswordGenerationDriver_FrameWasScrolled_Params_Data)");
class  PasswordGenerationDriver_GenerationElementLostFocus_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PasswordGenerationDriver_GenerationElementLostFocus_Params_Data));
      new (data()) PasswordGenerationDriver_GenerationElementLostFocus_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PasswordGenerationDriver_GenerationElementLostFocus_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PasswordGenerationDriver_GenerationElementLostFocus_Params_Data>(index_);
    }
    PasswordGenerationDriver_GenerationElementLostFocus_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PasswordGenerationDriver_GenerationElementLostFocus_Params_Data();
  ~PasswordGenerationDriver_GenerationElementLostFocus_Params_Data() = delete;
};
static_assert(sizeof(PasswordGenerationDriver_GenerationElementLostFocus_Params_Data) == 8,
              "Bad sizeof(PasswordGenerationDriver_GenerationElementLostFocus_Params_Data)");

}  // namespace internal
class AutofillDriver_FormsSeen_ParamsDataView {
 public:
  AutofillDriver_FormsSeen_ParamsDataView() {}

  AutofillDriver_FormsSeen_ParamsDataView(
      internal::AutofillDriver_FormsSeen_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormsDataView(
      mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForms(UserType* output) {
    auto* pointer = data_->forms.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FormDataDataView>>(
        pointer, output, context_);
  }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTimestamp(UserType* output) {
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_FormsSeen_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_FormSubmitted_ParamsDataView {
 public:
  AutofillDriver_FormSubmitted_ParamsDataView() {}

  AutofillDriver_FormSubmitted_ParamsDataView(
      internal::AutofillDriver_FormSubmitted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  bool known_success() const {
    return data_->known_success;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSource(UserType* output) const {
    auto data_value = data_->source;
    return mojo::internal::Deserialize<::autofill::mojom::SubmissionSource>(
        data_value, output);
  }

  ::autofill::mojom::SubmissionSource source() const {
    return static_cast<::autofill::mojom::SubmissionSource>(data_->source);
  }
 private:
  internal::AutofillDriver_FormSubmitted_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_TextFieldDidChange_ParamsDataView {
 public:
  AutofillDriver_TextFieldDidChange_ParamsDataView() {}

  AutofillDriver_TextFieldDidChange_ParamsDataView(
      internal::AutofillDriver_TextFieldDidChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetFieldDataView(
      ::autofill::mojom::FormFieldDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadField(UserType* output) {
    auto* pointer = data_->field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, context_);
  }
  inline void GetBoundingBoxDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundingBox(UserType* output) {
    auto* pointer = data_->bounding_box.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTimestamp(UserType* output) {
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_TextFieldDidChange_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_TextFieldDidScroll_ParamsDataView {
 public:
  AutofillDriver_TextFieldDidScroll_ParamsDataView() {}

  AutofillDriver_TextFieldDidScroll_ParamsDataView(
      internal::AutofillDriver_TextFieldDidScroll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetFieldDataView(
      ::autofill::mojom::FormFieldDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadField(UserType* output) {
    auto* pointer = data_->field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, context_);
  }
  inline void GetBoundingBoxDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundingBox(UserType* output) {
    auto* pointer = data_->bounding_box.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_TextFieldDidScroll_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_SelectControlDidChange_ParamsDataView {
 public:
  AutofillDriver_SelectControlDidChange_ParamsDataView() {}

  AutofillDriver_SelectControlDidChange_ParamsDataView(
      internal::AutofillDriver_SelectControlDidChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetFieldDataView(
      ::autofill::mojom::FormFieldDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadField(UserType* output) {
    auto* pointer = data_->field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, context_);
  }
  inline void GetBoundingBoxDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundingBox(UserType* output) {
    auto* pointer = data_->bounding_box.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_SelectControlDidChange_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_SelectFieldOptionsDidChange_ParamsDataView {
 public:
  AutofillDriver_SelectFieldOptionsDidChange_ParamsDataView() {}

  AutofillDriver_SelectFieldOptionsDidChange_ParamsDataView(
      internal::AutofillDriver_SelectFieldOptionsDidChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_SelectFieldOptionsDidChange_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_QueryFormFieldAutofill_ParamsDataView {
 public:
  AutofillDriver_QueryFormFieldAutofill_ParamsDataView() {}

  AutofillDriver_QueryFormFieldAutofill_ParamsDataView(
      internal::AutofillDriver_QueryFormFieldAutofill_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetFieldDataView(
      ::autofill::mojom::FormFieldDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadField(UserType* output) {
    auto* pointer = data_->field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, context_);
  }
  inline void GetBoundingBoxDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundingBox(UserType* output) {
    auto* pointer = data_->bounding_box.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
  bool autoselect_first_suggestion() const {
    return data_->autoselect_first_suggestion;
  }
 private:
  internal::AutofillDriver_QueryFormFieldAutofill_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_HidePopup_ParamsDataView {
 public:
  AutofillDriver_HidePopup_ParamsDataView() {}

  AutofillDriver_HidePopup_ParamsDataView(
      internal::AutofillDriver_HidePopup_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AutofillDriver_HidePopup_Params_Data* data_ = nullptr;
};

class AutofillDriver_FocusNoLongerOnForm_ParamsDataView {
 public:
  AutofillDriver_FocusNoLongerOnForm_ParamsDataView() {}

  AutofillDriver_FocusNoLongerOnForm_ParamsDataView(
      internal::AutofillDriver_FocusNoLongerOnForm_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AutofillDriver_FocusNoLongerOnForm_Params_Data* data_ = nullptr;
};

class AutofillDriver_FocusOnFormField_ParamsDataView {
 public:
  AutofillDriver_FocusOnFormField_ParamsDataView() {}

  AutofillDriver_FocusOnFormField_ParamsDataView(
      internal::AutofillDriver_FocusOnFormField_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetFieldDataView(
      ::autofill::mojom::FormFieldDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadField(UserType* output) {
    auto* pointer = data_->field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, context_);
  }
  inline void GetBoundingBoxDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundingBox(UserType* output) {
    auto* pointer = data_->bounding_box.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_FocusOnFormField_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_DidFillAutofillFormData_ParamsDataView {
 public:
  AutofillDriver_DidFillAutofillFormData_ParamsDataView() {}

  AutofillDriver_DidFillAutofillFormData_ParamsDataView(
      internal::AutofillDriver_DidFillAutofillFormData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadForm(UserType* output) {
    auto* pointer = data_->form.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTimestamp(UserType* output) {
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_DidFillAutofillFormData_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutofillDriver_DidPreviewAutofillFormData_ParamsDataView {
 public:
  AutofillDriver_DidPreviewAutofillFormData_ParamsDataView() {}

  AutofillDriver_DidPreviewAutofillFormData_ParamsDataView(
      internal::AutofillDriver_DidPreviewAutofillFormData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AutofillDriver_DidPreviewAutofillFormData_Params_Data* data_ = nullptr;
};

class AutofillDriver_DidEndTextFieldEditing_ParamsDataView {
 public:
  AutofillDriver_DidEndTextFieldEditing_ParamsDataView() {}

  AutofillDriver_DidEndTextFieldEditing_ParamsDataView(
      internal::AutofillDriver_DidEndTextFieldEditing_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AutofillDriver_DidEndTextFieldEditing_Params_Data* data_ = nullptr;
};

class AutofillDriver_SetDataList_ParamsDataView {
 public:
  AutofillDriver_SetDataList_ParamsDataView() {}

  AutofillDriver_SetDataList_ParamsDataView(
      internal::AutofillDriver_SetDataList_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetValuesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValues(UserType* output) {
    auto* pointer = data_->values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        pointer, output, context_);
  }
  inline void GetLabelsDataView(
      mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLabels(UserType* output) {
    auto* pointer = data_->labels.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        pointer, output, context_);
  }
 private:
  internal::AutofillDriver_SetDataList_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_PasswordFormsParsed_ParamsDataView {
 public:
  PasswordManagerDriver_PasswordFormsParsed_ParamsDataView() {}

  PasswordManagerDriver_PasswordFormsParsed_ParamsDataView(
      internal::PasswordManagerDriver_PasswordFormsParsed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormsDataDataView(
      mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormsData(UserType* output) {
    auto* pointer = data_->forms_data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FormDataDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_PasswordFormsParsed_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_PasswordFormsRendered_ParamsDataView {
 public:
  PasswordManagerDriver_PasswordFormsRendered_ParamsDataView() {}

  PasswordManagerDriver_PasswordFormsRendered_ParamsDataView(
      internal::PasswordManagerDriver_PasswordFormsRendered_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetVisibleFormsDataDataView(
      mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisibleFormsData(UserType* output) {
    auto* pointer = data_->visible_forms_data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FormDataDataView>>(
        pointer, output, context_);
  }
  bool did_stop_loading() const {
    return data_->did_stop_loading;
  }
 private:
  internal::PasswordManagerDriver_PasswordFormsRendered_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_PasswordFormSubmitted_ParamsDataView {
 public:
  PasswordManagerDriver_PasswordFormSubmitted_ParamsDataView() {}

  PasswordManagerDriver_PasswordFormSubmitted_ParamsDataView(
      internal::PasswordManagerDriver_PasswordFormSubmitted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormData(UserType* output) {
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_PasswordFormSubmitted_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_ShowManualFallbackForSaving_ParamsDataView {
 public:
  PasswordManagerDriver_ShowManualFallbackForSaving_ParamsDataView() {}

  PasswordManagerDriver_ShowManualFallbackForSaving_ParamsDataView(
      internal::PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormData(UserType* output) {
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_ShowManualFallbackForSaving_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_HideManualFallbackForSaving_ParamsDataView {
 public:
  PasswordManagerDriver_HideManualFallbackForSaving_ParamsDataView() {}

  PasswordManagerDriver_HideManualFallbackForSaving_ParamsDataView(
      internal::PasswordManagerDriver_HideManualFallbackForSaving_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordManagerDriver_HideManualFallbackForSaving_Params_Data* data_ = nullptr;
};

class PasswordManagerDriver_SameDocumentNavigation_ParamsDataView {
 public:
  PasswordManagerDriver_SameDocumentNavigation_ParamsDataView() {}

  PasswordManagerDriver_SameDocumentNavigation_ParamsDataView(
      internal::PasswordManagerDriver_SameDocumentNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubmissionIndicationEvent(UserType* output) const {
    auto data_value = data_->submission_indication_event;
    return mojo::internal::Deserialize<::autofill::mojom::SubmissionIndicatorEvent>(
        data_value, output);
  }

  ::autofill::mojom::SubmissionIndicatorEvent submission_indication_event() const {
    return static_cast<::autofill::mojom::SubmissionIndicatorEvent>(data_->submission_indication_event);
  }
 private:
  internal::PasswordManagerDriver_SameDocumentNavigation_Params_Data* data_ = nullptr;
};

class PasswordManagerDriver_RecordSavePasswordProgress_ParamsDataView {
 public:
  PasswordManagerDriver_RecordSavePasswordProgress_ParamsDataView() {}

  PasswordManagerDriver_RecordSavePasswordProgress_ParamsDataView(
      internal::PasswordManagerDriver_RecordSavePasswordProgress_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLogDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLog(UserType* output) {
    auto* pointer = data_->log.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_RecordSavePasswordProgress_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_UserModifiedPasswordField_ParamsDataView {
 public:
  PasswordManagerDriver_UserModifiedPasswordField_ParamsDataView() {}

  PasswordManagerDriver_UserModifiedPasswordField_ParamsDataView(
      internal::PasswordManagerDriver_UserModifiedPasswordField_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordManagerDriver_UserModifiedPasswordField_Params_Data* data_ = nullptr;
};

class PasswordManagerDriver_UserModifiedNonPasswordField_ParamsDataView {
 public:
  PasswordManagerDriver_UserModifiedNonPasswordField_ParamsDataView() {}

  PasswordManagerDriver_UserModifiedNonPasswordField_ParamsDataView(
      internal::PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint32_t renderer_id() const {
    return data_->renderer_id;
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_UserModifiedNonPasswordField_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_ShowPasswordSuggestions_ParamsDataView {
 public:
  PasswordManagerDriver_ShowPasswordSuggestions_ParamsDataView() {}

  PasswordManagerDriver_ShowPasswordSuggestions_ParamsDataView(
      internal::PasswordManagerDriver_ShowPasswordSuggestions_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTextDirection(UserType* output) const {
    auto data_value = data_->text_direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }

  ::mojo_base::mojom::TextDirection text_direction() const {
    return static_cast<::mojo_base::mojom::TextDirection>(data_->text_direction);
  }
  inline void GetTypedUsernameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTypedUsername(UserType* output) {
    auto* pointer = data_->typed_username.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  int32_t options() const {
    return data_->options;
  }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBounds(UserType* output) {
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_ShowPasswordSuggestions_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_ShowTouchToFill_ParamsDataView {
 public:
  PasswordManagerDriver_ShowTouchToFill_ParamsDataView() {}

  PasswordManagerDriver_ShowTouchToFill_ParamsDataView(
      internal::PasswordManagerDriver_ShowTouchToFill_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordManagerDriver_ShowTouchToFill_Params_Data* data_ = nullptr;
};

class PasswordManagerDriver_CheckSafeBrowsingReputation_ParamsDataView {
 public:
  PasswordManagerDriver_CheckSafeBrowsingReputation_ParamsDataView() {}

  PasswordManagerDriver_CheckSafeBrowsingReputation_ParamsDataView(
      internal::PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormActionDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormAction(UserType* output) {
    auto* pointer = data_->form_action.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetFrameUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameUrl(UserType* output) {
    auto* pointer = data_->frame_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordManagerDriver_CheckSafeBrowsingReputation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordManagerDriver_FocusedInputChanged_ParamsDataView {
 public:
  PasswordManagerDriver_FocusedInputChanged_ParamsDataView() {}

  PasswordManagerDriver_FocusedInputChanged_ParamsDataView(
      internal::PasswordManagerDriver_FocusedInputChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFocusedFieldType(UserType* output) const {
    auto data_value = data_->focused_field_type;
    return mojo::internal::Deserialize<::autofill::mojom::FocusedFieldType>(
        data_value, output);
  }

  ::autofill::mojom::FocusedFieldType focused_field_type() const {
    return static_cast<::autofill::mojom::FocusedFieldType>(data_->focused_field_type);
  }
 private:
  internal::PasswordManagerDriver_FocusedInputChanged_Params_Data* data_ = nullptr;
};

class PasswordManagerDriver_LogFirstFillingResult_ParamsDataView {
 public:
  PasswordManagerDriver_LogFirstFillingResult_ParamsDataView() {}

  PasswordManagerDriver_LogFirstFillingResult_ParamsDataView(
      internal::PasswordManagerDriver_LogFirstFillingResult_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t form_renderer_id() const {
    return data_->form_renderer_id;
  }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::PasswordManagerDriver_LogFirstFillingResult_Params_Data* data_ = nullptr;
};

class PasswordGenerationDriver_AutomaticGenerationAvailable_ParamsDataView {
 public:
  PasswordGenerationDriver_AutomaticGenerationAvailable_ParamsDataView() {}

  PasswordGenerationDriver_AutomaticGenerationAvailable_ParamsDataView(
      internal::PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPasswordGenerationUiDataDataView(
      ::autofill::mojom::PasswordGenerationUIDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPasswordGenerationUiData(UserType* output) {
    auto* pointer = data_->password_generation_ui_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::PasswordGenerationUIDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordGenerationDriver_AutomaticGenerationAvailable_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView {
 public:
  PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView() {}

  PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView(
      internal::PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBounds(UserType* output) {
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, context_);
  }
  inline void GetFormDataDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormData(UserType* output) {
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  uint32_t field_renderer_id() const {
    return data_->field_renderer_id;
  }
  inline void GetPasswordValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPasswordValue(UserType* output) {
    auto* pointer = data_->password_value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordGenerationDriver_ShowPasswordEditingPopup_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordGenerationDriver_PasswordGenerationRejectedByTyping_ParamsDataView {
 public:
  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_ParamsDataView() {}

  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_ParamsDataView(
      internal::PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params_Data* data_ = nullptr;
};

class PasswordGenerationDriver_PresaveGeneratedPassword_ParamsDataView {
 public:
  PasswordGenerationDriver_PresaveGeneratedPassword_ParamsDataView() {}

  PasswordGenerationDriver_PresaveGeneratedPassword_ParamsDataView(
      internal::PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormData(UserType* output) {
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
  inline void GetPasswordValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPasswordValue(UserType* output) {
    auto* pointer = data_->password_value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordGenerationDriver_PresaveGeneratedPassword_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordGenerationDriver_PasswordNoLongerGenerated_ParamsDataView {
 public:
  PasswordGenerationDriver_PasswordNoLongerGenerated_ParamsDataView() {}

  PasswordGenerationDriver_PasswordNoLongerGenerated_ParamsDataView(
      internal::PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFormDataDataView(
      ::autofill::mojom::FormDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFormData(UserType* output) {
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::PasswordGenerationDriver_PasswordNoLongerGenerated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PasswordGenerationDriver_FrameWasScrolled_ParamsDataView {
 public:
  PasswordGenerationDriver_FrameWasScrolled_ParamsDataView() {}

  PasswordGenerationDriver_FrameWasScrolled_ParamsDataView(
      internal::PasswordGenerationDriver_FrameWasScrolled_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordGenerationDriver_FrameWasScrolled_Params_Data* data_ = nullptr;
};

class PasswordGenerationDriver_GenerationElementLostFocus_ParamsDataView {
 public:
  PasswordGenerationDriver_GenerationElementLostFocus_ParamsDataView() {}

  PasswordGenerationDriver_GenerationElementLostFocus_ParamsDataView(
      internal::PasswordGenerationDriver_GenerationElementLostFocus_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PasswordGenerationDriver_GenerationElementLostFocus_Params_Data* data_ = nullptr;
};


inline void AutofillDriver_FormsSeen_ParamsDataView::GetFormsDataView(
    mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output) {
  auto pointer = data_->forms.Get();
  *output = mojo::ArrayDataView<::autofill::mojom::FormDataDataView>(pointer, context_);
}
inline void AutofillDriver_FormsSeen_ParamsDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}


inline void AutofillDriver_FormSubmitted_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}


inline void AutofillDriver_TextFieldDidChange_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_TextFieldDidChange_ParamsDataView::GetFieldDataView(
    ::autofill::mojom::FormFieldDataDataView* output) {
  auto pointer = data_->field.Get();
  *output = ::autofill::mojom::FormFieldDataDataView(pointer, context_);
}
inline void AutofillDriver_TextFieldDidChange_ParamsDataView::GetBoundingBoxDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounding_box.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}
inline void AutofillDriver_TextFieldDidChange_ParamsDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}


inline void AutofillDriver_TextFieldDidScroll_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_TextFieldDidScroll_ParamsDataView::GetFieldDataView(
    ::autofill::mojom::FormFieldDataDataView* output) {
  auto pointer = data_->field.Get();
  *output = ::autofill::mojom::FormFieldDataDataView(pointer, context_);
}
inline void AutofillDriver_TextFieldDidScroll_ParamsDataView::GetBoundingBoxDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounding_box.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}


inline void AutofillDriver_SelectControlDidChange_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_SelectControlDidChange_ParamsDataView::GetFieldDataView(
    ::autofill::mojom::FormFieldDataDataView* output) {
  auto pointer = data_->field.Get();
  *output = ::autofill::mojom::FormFieldDataDataView(pointer, context_);
}
inline void AutofillDriver_SelectControlDidChange_ParamsDataView::GetBoundingBoxDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounding_box.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}


inline void AutofillDriver_SelectFieldOptionsDidChange_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}


inline void AutofillDriver_QueryFormFieldAutofill_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_QueryFormFieldAutofill_ParamsDataView::GetFieldDataView(
    ::autofill::mojom::FormFieldDataDataView* output) {
  auto pointer = data_->field.Get();
  *output = ::autofill::mojom::FormFieldDataDataView(pointer, context_);
}
inline void AutofillDriver_QueryFormFieldAutofill_ParamsDataView::GetBoundingBoxDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounding_box.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}






inline void AutofillDriver_FocusOnFormField_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_FocusOnFormField_ParamsDataView::GetFieldDataView(
    ::autofill::mojom::FormFieldDataDataView* output) {
  auto pointer = data_->field.Get();
  *output = ::autofill::mojom::FormFieldDataDataView(pointer, context_);
}
inline void AutofillDriver_FocusOnFormField_ParamsDataView::GetBoundingBoxDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounding_box.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}


inline void AutofillDriver_DidFillAutofillFormData_ParamsDataView::GetFormDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void AutofillDriver_DidFillAutofillFormData_ParamsDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}






inline void AutofillDriver_SetDataList_ParamsDataView::GetValuesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output) {
  auto pointer = data_->values.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::String16DataView>(pointer, context_);
}
inline void AutofillDriver_SetDataList_ParamsDataView::GetLabelsDataView(
    mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output) {
  auto pointer = data_->labels.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::String16DataView>(pointer, context_);
}


inline void PasswordManagerDriver_PasswordFormsParsed_ParamsDataView::GetFormsDataDataView(
    mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output) {
  auto pointer = data_->forms_data.Get();
  *output = mojo::ArrayDataView<::autofill::mojom::FormDataDataView>(pointer, context_);
}


inline void PasswordManagerDriver_PasswordFormsRendered_ParamsDataView::GetVisibleFormsDataDataView(
    mojo::ArrayDataView<::autofill::mojom::FormDataDataView>* output) {
  auto pointer = data_->visible_forms_data.Get();
  *output = mojo::ArrayDataView<::autofill::mojom::FormDataDataView>(pointer, context_);
}


inline void PasswordManagerDriver_PasswordFormSubmitted_ParamsDataView::GetFormDataDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}


inline void PasswordManagerDriver_ShowManualFallbackForSaving_ParamsDataView::GetFormDataDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}






inline void PasswordManagerDriver_RecordSavePasswordProgress_ParamsDataView::GetLogDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->log.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PasswordManagerDriver_UserModifiedNonPasswordField_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void PasswordManagerDriver_ShowPasswordSuggestions_ParamsDataView::GetTypedUsernameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->typed_username.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void PasswordManagerDriver_ShowPasswordSuggestions_ParamsDataView::GetBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}




inline void PasswordManagerDriver_CheckSafeBrowsingReputation_ParamsDataView::GetFormActionDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->form_action.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PasswordManagerDriver_CheckSafeBrowsingReputation_ParamsDataView::GetFrameUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->frame_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}






inline void PasswordGenerationDriver_AutomaticGenerationAvailable_ParamsDataView::GetPasswordGenerationUiDataDataView(
    ::autofill::mojom::PasswordGenerationUIDataDataView* output) {
  auto pointer = data_->password_generation_ui_data.Get();
  *output = ::autofill::mojom::PasswordGenerationUIDataDataView(pointer, context_);
}


inline void PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView::GetBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, context_);
}
inline void PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView::GetFormDataDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void PasswordGenerationDriver_ShowPasswordEditingPopup_ParamsDataView::GetPasswordValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->password_value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}




inline void PasswordGenerationDriver_PresaveGeneratedPassword_ParamsDataView::GetFormDataDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}
inline void PasswordGenerationDriver_PresaveGeneratedPassword_ParamsDataView::GetPasswordValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->password_value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void PasswordGenerationDriver_PasswordNoLongerGenerated_ParamsDataView::GetFormDataDataView(
    ::autofill::mojom::FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = ::autofill::mojom::FormDataDataView(pointer, context_);
}





}  // namespace mojom
}  // namespace autofill

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_PARAMS_DATA_H_