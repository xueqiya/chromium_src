// components/autofill/content/common/mojom/autofill_driver.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_TEST_UTILS_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_TEST_UTILS_H_

#include "components/autofill/content/common/mojom/autofill_driver.mojom.h"


namespace autofill {
namespace mojom {


class  AutofillDriverInterceptorForTesting : public AutofillDriver {
  virtual AutofillDriver* GetForwardingInterface() = 0;
  void FormsSeen(const std::vector<::autofill::FormData>& forms, ::base::TimeTicks timestamp) override;
  void FormSubmitted(const ::autofill::FormData& form, bool known_success, ::autofill::mojom::SubmissionSource source) override;
  void TextFieldDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, ::base::TimeTicks timestamp) override;
  void TextFieldDidScroll(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) override;
  void SelectControlDidChange(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) override;
  void SelectFieldOptionsDidChange(const ::autofill::FormData& form) override;
  void QueryFormFieldAutofill(int32_t id, const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box, bool autoselect_first_suggestion) override;
  void HidePopup() override;
  void FocusNoLongerOnForm() override;
  void FocusOnFormField(const ::autofill::FormData& form, const ::autofill::FormFieldData& field, const ::gfx::RectF& bounding_box) override;
  void DidFillAutofillFormData(const ::autofill::FormData& form, ::base::TimeTicks timestamp) override;
  void DidPreviewAutofillFormData() override;
  void DidEndTextFieldEditing() override;
  void SetDataList(const std::vector<::base::string16>& values, const std::vector<::base::string16>& labels) override;
};
class  AutofillDriverAsyncWaiter {
 public:
  explicit AutofillDriverAsyncWaiter(AutofillDriver* proxy);
  ~AutofillDriverAsyncWaiter();

 private:
  AutofillDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AutofillDriverAsyncWaiter);
};


class  PasswordManagerDriverInterceptorForTesting : public PasswordManagerDriver {
  virtual PasswordManagerDriver* GetForwardingInterface() = 0;
  void PasswordFormsParsed(const std::vector<::autofill::FormData>& forms_data) override;
  void PasswordFormsRendered(const std::vector<::autofill::FormData>& visible_forms_data, bool did_stop_loading) override;
  void PasswordFormSubmitted(const ::autofill::FormData& form_data) override;
  void ShowManualFallbackForSaving(const ::autofill::FormData& form_data) override;
  void HideManualFallbackForSaving() override;
  void SameDocumentNavigation(::autofill::mojom::SubmissionIndicatorEvent submission_indication_event) override;
  void RecordSavePasswordProgress(const std::string& log) override;
  void UserModifiedPasswordField() override;
  void UserModifiedNonPasswordField(uint32_t renderer_id, const ::base::string16& value) override;
  void ShowPasswordSuggestions(::base::i18n::TextDirection text_direction, const ::base::string16& typed_username, int32_t options, const ::gfx::RectF& bounds) override;
  void ShowTouchToFill() override;
  void CheckSafeBrowsingReputation(const ::GURL& form_action, const ::GURL& frame_url) override;
  void FocusedInputChanged(::autofill::mojom::FocusedFieldType focused_field_type) override;
  void LogFirstFillingResult(uint32_t form_renderer_id, int32_t result) override;
};
class  PasswordManagerDriverAsyncWaiter {
 public:
  explicit PasswordManagerDriverAsyncWaiter(PasswordManagerDriver* proxy);
  ~PasswordManagerDriverAsyncWaiter();

 private:
  PasswordManagerDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PasswordManagerDriverAsyncWaiter);
};


class  PasswordGenerationDriverInterceptorForTesting : public PasswordGenerationDriver {
  virtual PasswordGenerationDriver* GetForwardingInterface() = 0;
  void AutomaticGenerationAvailable(const ::autofill::password_generation::PasswordGenerationUIData& password_generation_ui_data) override;
  void ShowPasswordEditingPopup(const ::gfx::RectF& bounds, const ::autofill::FormData& form_data, uint32_t field_renderer_id, const ::base::string16& password_value) override;
  void PasswordGenerationRejectedByTyping() override;
  void PresaveGeneratedPassword(const ::autofill::FormData& form_data, const ::base::string16& password_value) override;
  void PasswordNoLongerGenerated(const ::autofill::FormData& form_data) override;
  void FrameWasScrolled() override;
  void GenerationElementLostFocus() override;
};
class  PasswordGenerationDriverAsyncWaiter {
 public:
  explicit PasswordGenerationDriverAsyncWaiter(PasswordGenerationDriver* proxy);
  ~PasswordGenerationDriverAsyncWaiter();

 private:
  PasswordGenerationDriver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PasswordGenerationDriverAsyncWaiter);
};




}  // namespace mojom
}  // namespace autofill

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_DRIVER_MOJOM_TEST_UTILS_H_