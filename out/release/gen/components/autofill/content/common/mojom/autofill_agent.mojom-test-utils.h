// components/autofill/content/common/mojom/autofill_agent.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_

#include "components/autofill/content/common/mojom/autofill_agent.mojom.h"


namespace autofill {
namespace mojom {


class  AutofillAgentInterceptorForTesting : public AutofillAgent {
  virtual AutofillAgent* GetForwardingInterface() = 0;
  void FillForm(int32_t id, const ::autofill::FormData& form) override;
  void PreviewForm(int32_t id, const ::autofill::FormData& form) override;
  void FieldTypePredictionsAvailable(const std::vector<::autofill::FormDataPredictions>& forms) override;
  void ClearSection() override;
  void ClearPreviewedForm() override;
  void FillFieldWithValue(const ::base::string16& value) override;
  void PreviewFieldWithValue(const ::base::string16& value) override;
  void SetSuggestionAvailability(::autofill::mojom::AutofillState type) override;
  void AcceptDataListSuggestion(const ::base::string16& value) override;
  void FillPasswordSuggestion(const ::base::string16& username, const ::base::string16& password) override;
  void PreviewPasswordSuggestion(const ::base::string16& username, const ::base::string16& password) override;
  void SetUserGestureRequired(bool required) override;
  void SetSecureContextRequired(bool required) override;
  void SetFocusRequiresScroll(bool require) override;
  void SetQueryPasswordSuggestion(bool query) override;
  void GetElementFormAndFieldData(const std::vector<std::string>& selectors, GetElementFormAndFieldDataCallback callback) override;
};
class  AutofillAgentAsyncWaiter {
 public:
  explicit AutofillAgentAsyncWaiter(AutofillAgent* proxy);
  ~AutofillAgentAsyncWaiter();
  void GetElementFormAndFieldData(
      const std::vector<std::string>& selectors, ::autofill::FormData* out_form, ::autofill::FormFieldData* out_field);

 private:
  AutofillAgent* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AutofillAgentAsyncWaiter);
};


class  PasswordAutofillAgentInterceptorForTesting : public PasswordAutofillAgent {
  virtual PasswordAutofillAgent* GetForwardingInterface() = 0;
  void FillPasswordForm(const ::autofill::PasswordFormFillData& form_data) override;
  void InformNoSavedCredentials() override;
  void FillIntoFocusedField(bool is_password, const ::base::string16& credential) override;
  void SetLoggingState(bool active) override;
  void TouchToFillClosed(bool show_virtual_keyboard) override;
  void AnnotateFieldsWithParsingResult(const ::autofill::ParsingResult& parsing_result) override;
};
class  PasswordAutofillAgentAsyncWaiter {
 public:
  explicit PasswordAutofillAgentAsyncWaiter(PasswordAutofillAgent* proxy);
  ~PasswordAutofillAgentAsyncWaiter();

 private:
  PasswordAutofillAgent* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PasswordAutofillAgentAsyncWaiter);
};


class  PasswordGenerationAgentInterceptorForTesting : public PasswordGenerationAgent {
  virtual PasswordGenerationAgent* GetForwardingInterface() = 0;
  void GeneratedPasswordAccepted(const ::base::string16& generated_password) override;
  void UserTriggeredGeneratePassword(UserTriggeredGeneratePasswordCallback callback) override;
  void FoundFormEligibleForGeneration(const ::autofill::PasswordFormGenerationData& form) override;
};
class  PasswordGenerationAgentAsyncWaiter {
 public:
  explicit PasswordGenerationAgentAsyncWaiter(PasswordGenerationAgent* proxy);
  ~PasswordGenerationAgentAsyncWaiter();
  void UserTriggeredGeneratePassword(
      base::Optional<::autofill::password_generation::PasswordGenerationUIData>* out_data);

 private:
  PasswordGenerationAgent* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PasswordGenerationAgentAsyncWaiter);
};




}  // namespace mojom
}  // namespace autofill

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_