// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

#include "fingerprint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Dimension_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Metadata_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Performance_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fingerprint_TransientState_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto;
namespace autofill {
namespace risk {
class Fingerprint_DimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_Dimension> _instance;
} _Fingerprint_Dimension_default_instance_;
class Fingerprint_MachineCharacteristics_PluginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Plugin> _instance;
} _Fingerprint_MachineCharacteristics_Plugin_default_instance_;
class Fingerprint_MachineCharacteristics_CpuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Cpu> _instance;
} _Fingerprint_MachineCharacteristics_Cpu_default_instance_;
class Fingerprint_MachineCharacteristics_GraphicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Graphics> _instance;
} _Fingerprint_MachineCharacteristics_Graphics_default_instance_;
class Fingerprint_MachineCharacteristicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics> _instance;
} _Fingerprint_MachineCharacteristics_default_instance_;
class Fingerprint_TransientStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_TransientState> _instance;
} _Fingerprint_TransientState_default_instance_;
class Fingerprint_PerformanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_Performance> _instance;
} _Fingerprint_Performance_default_instance_;
class Fingerprint_UserCharacteristics_VectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics_Vector> _instance;
} _Fingerprint_UserCharacteristics_Vector_default_instance_;
class Fingerprint_UserCharacteristics_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics_Location> _instance;
} _Fingerprint_UserCharacteristics_Location_default_instance_;
class Fingerprint_UserCharacteristicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics> _instance;
} _Fingerprint_UserCharacteristics_default_instance_;
class Fingerprint_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint_Metadata> _instance;
} _Fingerprint_Metadata_default_instance_;
class FingerprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint> _instance;
} _Fingerprint_default_instance_;
}  // namespace risk
}  // namespace autofill
static void InitDefaultsscc_info_Fingerprint_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Fingerprint_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Fingerprint_fingerprint_2eproto}, {
      &scc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto.base,
      &scc_info_Fingerprint_Performance_fingerprint_2eproto.base,
      &scc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto.base,
      &scc_info_Fingerprint_TransientState_fingerprint_2eproto.base,
      &scc_info_Fingerprint_Metadata_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_Dimension_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_Dimension_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_Dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_Dimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Dimension_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_Dimension_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_MachineCharacteristics_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_MachineCharacteristics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_MachineCharacteristics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto}, {
      &scc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto.base,
      &scc_info_Fingerprint_Dimension_fingerprint_2eproto.base,
      &scc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto.base,
      &scc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_MachineCharacteristics_Cpu_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_MachineCharacteristics_Graphics_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_MachineCharacteristics_Plugin_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_Metadata_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_Metadata_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Metadata_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_Metadata_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_Performance_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_Performance_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_Performance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_Performance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_Performance_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_Performance_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_TransientState_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_TransientState_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_TransientState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_TransientState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fingerprint_TransientState_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Fingerprint_TransientState_fingerprint_2eproto}, {
      &scc_info_Fingerprint_Dimension_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_UserCharacteristics_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_UserCharacteristics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_UserCharacteristics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto}, {
      &scc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto.base,
      &scc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_UserCharacteristics_Location_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_UserCharacteristics_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_UserCharacteristics_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autofill::risk::_Fingerprint_UserCharacteristics_Vector_default_instance_;
    new (ptr) ::autofill::risk::Fingerprint_UserCharacteristics_Vector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autofill::risk::Fingerprint_UserCharacteristics_Vector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto}, {}};

namespace autofill {
namespace risk {
bool Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Fingerprint_MachineCharacteristics_BrowserFeature_strings[3] = {};

static const char Fingerprint_MachineCharacteristics_BrowserFeature_names[] =
  "DEPRECATED_FEATURE_AUTOCHECKOUT"
  "FEATURE_REQUEST_AUTOCOMPLETE"
  "FEATURE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Fingerprint_MachineCharacteristics_BrowserFeature_entries[] = {
  { {Fingerprint_MachineCharacteristics_BrowserFeature_names + 0, 31}, 1 },
  { {Fingerprint_MachineCharacteristics_BrowserFeature_names + 31, 28}, 2 },
  { {Fingerprint_MachineCharacteristics_BrowserFeature_names + 59, 15}, 0 },
};

static const int Fingerprint_MachineCharacteristics_BrowserFeature_entries_by_number[] = {
  2, // 0 -> FEATURE_UNKNOWN
  0, // 1 -> DEPRECATED_FEATURE_AUTOCHECKOUT
  1, // 2 -> FEATURE_REQUEST_AUTOCOMPLETE
};

const std::string& Fingerprint_MachineCharacteristics_BrowserFeature_Name(
    Fingerprint_MachineCharacteristics_BrowserFeature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Fingerprint_MachineCharacteristics_BrowserFeature_entries,
          Fingerprint_MachineCharacteristics_BrowserFeature_entries_by_number,
          3, Fingerprint_MachineCharacteristics_BrowserFeature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Fingerprint_MachineCharacteristics_BrowserFeature_entries,
      Fingerprint_MachineCharacteristics_BrowserFeature_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Fingerprint_MachineCharacteristics_BrowserFeature_strings[idx].get();
}
bool Fingerprint_MachineCharacteristics_BrowserFeature_Parse(
    const std::string& name, Fingerprint_MachineCharacteristics_BrowserFeature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Fingerprint_MachineCharacteristics_BrowserFeature_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Fingerprint_MachineCharacteristics_BrowserFeature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_UNKNOWN;
constexpr Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::DEPRECATED_FEATURE_AUTOCHECKOUT;
constexpr Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_REQUEST_AUTOCOMPLETE;
constexpr Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MIN;
constexpr Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MAX;
constexpr int Fingerprint_MachineCharacteristics::BrowserFeature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Fingerprint_Dimension::InitAsDefaultInstance() {
}
class Fingerprint_Dimension::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_Dimension>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Fingerprint_Dimension::Fingerprint_Dimension()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Dimension)
}
Fingerprint_Dimension::Fingerprint_Dimension(const Fingerprint_Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Dimension)
}

void Fingerprint_Dimension::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Fingerprint_Dimension::~Fingerprint_Dimension() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Dimension)
  SharedDtor();
}

void Fingerprint_Dimension::SharedDtor() {
}

void Fingerprint_Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_Dimension& Fingerprint_Dimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_Dimension_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_Dimension::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Dimension)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Dimension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_Dimension::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Dimension)
}

size_t Fingerprint_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Dimension)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_Dimension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_Dimension*>(
      &from));
}

void Fingerprint_Dimension::MergeFrom(const Fingerprint_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Dimension::CopyFrom(const Fingerprint_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Dimension::IsInitialized() const {
  return true;
}

void Fingerprint_Dimension::InternalSwap(Fingerprint_Dimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

std::string Fingerprint_Dimension::GetTypeName() const {
  return "autofill.risk.Fingerprint.Dimension";
}


// ===================================================================

void Fingerprint_MachineCharacteristics_Plugin::InitAsDefaultInstance() {
}
class Fingerprint_MachineCharacteristics_Plugin::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_MachineCharacteristics_Plugin>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}
Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin(const Fingerprint_MachineCharacteristics_Plugin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mime_type_(from.mime_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}

void Fingerprint_MachineCharacteristics_Plugin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fingerprint_MachineCharacteristics_Plugin::~Fingerprint_MachineCharacteristics_Plugin() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Plugin::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Plugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_MachineCharacteristics_Plugin& Fingerprint_MachineCharacteristics_Plugin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_MachineCharacteristics_Plugin_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_MachineCharacteristics_Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_MachineCharacteristics_Plugin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_mime_type(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_MachineCharacteristics_Plugin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mime_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_mime_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_MachineCharacteristics_Plugin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated string mime_type = 3;
  for (int i = 0, n = this->mime_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->mime_type(i), output);
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}

size_t Fingerprint_MachineCharacteristics_Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mime_type = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mime_type_size());
  for (int i = 0, n = this->mime_type_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->mime_type(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_MachineCharacteristics_Plugin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_MachineCharacteristics_Plugin*>(
      &from));
}

void Fingerprint_MachineCharacteristics_Plugin::MergeFrom(const Fingerprint_MachineCharacteristics_Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mime_type_.MergeFrom(from.mime_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
}

void Fingerprint_MachineCharacteristics_Plugin::CopyFrom(const Fingerprint_MachineCharacteristics_Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Plugin::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Plugin::InternalSwap(Fingerprint_MachineCharacteristics_Plugin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mime_type_.InternalSwap(CastToBase(&other->mime_type_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string Fingerprint_MachineCharacteristics_Plugin::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Plugin";
}


// ===================================================================

void Fingerprint_MachineCharacteristics_Cpu::InitAsDefaultInstance() {
}
class Fingerprint_MachineCharacteristics_Cpu::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_MachineCharacteristics_Cpu>()._has_bits_);
  static void set_has_vendor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}
Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu(const Fingerprint_MachineCharacteristics_Cpu& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor_name()) {
    vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand()) {
    brand_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}

void Fingerprint_MachineCharacteristics_Cpu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto.base);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fingerprint_MachineCharacteristics_Cpu::~Fingerprint_MachineCharacteristics_Cpu() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Cpu::SharedDtor() {
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Cpu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_MachineCharacteristics_Cpu& Fingerprint_MachineCharacteristics_Cpu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_MachineCharacteristics_Cpu_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_MachineCharacteristics_Cpu::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vendor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      brand_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_MachineCharacteristics_Cpu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string vendor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vendor_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string brand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_brand(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_MachineCharacteristics_Cpu::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_MachineCharacteristics_Cpu::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor_name(), output);
  }

  // optional string brand = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}

size_t Fingerprint_MachineCharacteristics_Cpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string vendor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->vendor_name());
    }

    // optional string brand = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->brand());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_MachineCharacteristics_Cpu::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_MachineCharacteristics_Cpu*>(
      &from));
}

void Fingerprint_MachineCharacteristics_Cpu::MergeFrom(const Fingerprint_MachineCharacteristics_Cpu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      brand_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
  }
}

void Fingerprint_MachineCharacteristics_Cpu::CopyFrom(const Fingerprint_MachineCharacteristics_Cpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Cpu::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Cpu::InternalSwap(Fingerprint_MachineCharacteristics_Cpu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string Fingerprint_MachineCharacteristics_Cpu::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Cpu";
}


// ===================================================================

void Fingerprint_MachineCharacteristics_Graphics::InitAsDefaultInstance() {
}
class Fingerprint_MachineCharacteristics_Graphics::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_MachineCharacteristics_Graphics>()._has_bits_);
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driver_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}
Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics(const Fingerprint_MachineCharacteristics_Graphics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  driver_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_version()) {
    driver_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
  }
  driver_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_date()) {
    driver_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
  }
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}

void Fingerprint_MachineCharacteristics_Graphics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto.base);
  driver_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
}

Fingerprint_MachineCharacteristics_Graphics::~Fingerprint_MachineCharacteristics_Graphics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Graphics::SharedDtor() {
  driver_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Graphics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_MachineCharacteristics_Graphics& Fingerprint_MachineCharacteristics_Graphics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_MachineCharacteristics_Graphics_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_MachineCharacteristics_Graphics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      driver_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      driver_date_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_MachineCharacteristics_Graphics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 vendor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vendor_id(&has_bits);
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string driver_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_driver_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string driver_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_driver_date(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_MachineCharacteristics_Graphics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_vendor_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_device_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_date = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_MachineCharacteristics_Graphics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
  }

  // optional uint32 device_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->device_id(), output);
  }

  // optional string driver_version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driver_version(), output);
  }

  // optional string driver_date = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->driver_date(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}

size_t Fingerprint_MachineCharacteristics_Graphics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string driver_version = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->driver_version());
    }

    // optional string driver_date = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->driver_date());
    }

    // optional uint32 vendor_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 device_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->device_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_MachineCharacteristics_Graphics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_MachineCharacteristics_Graphics*>(
      &from));
}

void Fingerprint_MachineCharacteristics_Graphics::MergeFrom(const Fingerprint_MachineCharacteristics_Graphics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      driver_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      driver_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
    }
    if (cached_has_bits & 0x00000004u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_MachineCharacteristics_Graphics::CopyFrom(const Fingerprint_MachineCharacteristics_Graphics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Graphics::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Graphics::InternalSwap(Fingerprint_MachineCharacteristics_Graphics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  driver_version_.Swap(&other->driver_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  driver_date_.Swap(&other->driver_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vendor_id_, other->vendor_id_);
  swap(device_id_, other->device_id_);
}

std::string Fingerprint_MachineCharacteristics_Graphics::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Graphics";
}


// ===================================================================

void Fingerprint_MachineCharacteristics::InitAsDefaultInstance() {
  ::autofill::risk::_Fingerprint_MachineCharacteristics_default_instance_._instance.get_mutable()->screen_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  ::autofill::risk::_Fingerprint_MachineCharacteristics_default_instance_._instance.get_mutable()->unavailable_screen_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  ::autofill::risk::_Fingerprint_MachineCharacteristics_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::internal_default_instance());
  ::autofill::risk::_Fingerprint_MachineCharacteristics_default_instance_._instance.get_mutable()->graphics_card_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::internal_default_instance());
}
class Fingerprint_MachineCharacteristics::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_MachineCharacteristics>()._has_bits_);
  static void set_has_user_and_device_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_operating_system_build(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_browser_install_time_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_utc_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_browser_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_charset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_screen_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::autofill::risk::Fingerprint_Dimension& screen_size(const Fingerprint_MachineCharacteristics* msg);
  static void set_has_screen_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_screen_color_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::autofill::risk::Fingerprint_Dimension& unavailable_screen_size(const Fingerprint_MachineCharacteristics* msg);
  static void set_has_unavailable_screen_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu& cpu(const Fingerprint_MachineCharacteristics* msg);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ram(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics& graphics_card(const Fingerprint_MachineCharacteristics* msg);
  static void set_has_graphics_card(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_browser_build(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_browser_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::autofill::risk::Fingerprint_Dimension&
Fingerprint_MachineCharacteristics::_Internal::screen_size(const Fingerprint_MachineCharacteristics* msg) {
  return *msg->screen_size_;
}
const ::autofill::risk::Fingerprint_Dimension&
Fingerprint_MachineCharacteristics::_Internal::unavailable_screen_size(const Fingerprint_MachineCharacteristics* msg) {
  return *msg->unavailable_screen_size_;
}
const ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu&
Fingerprint_MachineCharacteristics::_Internal::cpu(const Fingerprint_MachineCharacteristics* msg) {
  return *msg->cpu_;
}
const ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics&
Fingerprint_MachineCharacteristics::_Internal::graphics_card(const Fingerprint_MachineCharacteristics* msg) {
  return *msg->graphics_card_;
}
Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics)
}
Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics(const Fingerprint_MachineCharacteristics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      font_(from.font_),
      plugin_(from.plugin_),
      requested_language_(from.requested_language_),
      partition_size_(from.partition_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operating_system_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_operating_system_build()) {
    operating_system_build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operating_system_build_);
  }
  browser_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_language()) {
    browser_language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
  }
  charset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_charset()) {
    charset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charset_);
  }
  user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_agent()) {
    user_agent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  browser_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_build()) {
    browser_build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_build_);
  }
  if (from.has_screen_size()) {
    screen_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.screen_size_);
  } else {
    screen_size_ = nullptr;
  }
  if (from.has_unavailable_screen_size()) {
    unavailable_screen_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.unavailable_screen_size_);
  } else {
    unavailable_screen_size_ = nullptr;
  }
  if (from.has_cpu()) {
    cpu_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from.has_graphics_card()) {
    graphics_card_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics(*from.graphics_card_);
  } else {
    graphics_card_ = nullptr;
  }
  ::memcpy(&user_and_device_name_hash_, &from.user_and_device_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_feature_) -
    reinterpret_cast<char*>(&user_and_device_name_hash_)) + sizeof(browser_feature_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics)
}

void Fingerprint_MachineCharacteristics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto.base);
  operating_system_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&screen_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_feature_) -
      reinterpret_cast<char*>(&screen_size_)) + sizeof(browser_feature_));
}

Fingerprint_MachineCharacteristics::~Fingerprint_MachineCharacteristics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics::SharedDtor() {
  operating_system_build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  browser_build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete screen_size_;
  if (this != internal_default_instance()) delete unavailable_screen_size_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete graphics_card_;
}

void Fingerprint_MachineCharacteristics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_MachineCharacteristics& Fingerprint_MachineCharacteristics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_MachineCharacteristics_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_MachineCharacteristics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  font_.Clear();
  plugin_.Clear();
  requested_language_.Clear();
  partition_size_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      operating_system_build_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      browser_language_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      charset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      user_agent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      browser_build_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(screen_size_ != nullptr);
      screen_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(unavailable_screen_size_ != nullptr);
      unavailable_screen_size_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cpu_ != nullptr);
      cpu_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(graphics_card_ != nullptr);
    graphics_card_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&user_and_device_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_feature_) -
        reinterpret_cast<char*>(&user_and_device_name_hash_)) + sizeof(browser_feature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_MachineCharacteristics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 user_and_device_name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_user_and_device_name_hash(&has_bits);
          user_and_device_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string operating_system_build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_operating_system_build(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 browser_install_time_hours = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_browser_install_time_hours(&has_bits);
          browser_install_time_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string font = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_font(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_plugin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional int64 utc_offset_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_utc_offset_ms(&has_bits);
          utc_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string browser_language = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_browser_language(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string requested_language = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_requested_language(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional string charset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_charset(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_screen_count(&has_bits);
          screen_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_screen_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_color_depth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_screen_color_depth(&has_bits);
          screen_color_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_unavailable_screen_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_agent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_agent(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 partition_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_partition_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 120);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_partition_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ram = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_ram(&has_bits);
          ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_graphics_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string browser_build = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_browser_build(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(val))) {
            set_browser_feature(static_cast<::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_MachineCharacteristics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_and_device_name_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_user_and_device_name_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_and_device_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operating_system_build = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 browser_install_time_hours = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_browser_install_time_hours(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &browser_install_time_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string font = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_font()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utc_offset_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_utc_offset_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_language = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requested_language = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_requested_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string charset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_screen_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_color_depth = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_screen_color_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_color_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unavailable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_agent = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partition_size = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 120u, input, this->mutable_partition_size())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partition_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ram = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_ram(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graphics_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_build = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(value)) {
            set_browser_feature(static_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(160u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_MachineCharacteristics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 user_and_device_name_hash = 1;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->user_and_device_name_hash(), output);
  }

  // optional string operating_system_build = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operating_system_build(), output);
  }

  // optional int64 browser_install_time_hours = 3;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->browser_install_time_hours(), output);
  }

  // repeated string font = 4;
  for (int i = 0, n = this->font_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->font(i), output);
  }

  // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->plugin(static_cast<int>(i)),
      output);
  }

  // optional int64 utc_offset_ms = 6;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->utc_offset_ms(), output);
  }

  // optional string browser_language = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->browser_language(), output);
  }

  // repeated string requested_language = 8;
  for (int i = 0, n = this->requested_language_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->requested_language(i), output);
  }

  // optional string charset = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->charset(), output);
  }

  // optional int32 screen_count = 10;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->screen_count(), output);
  }

  // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::screen_size(this), output);
  }

  // optional int32 screen_color_depth = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->screen_color_depth(), output);
  }

  // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::unavailable_screen_size(this), output);
  }

  // optional string user_agent = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->user_agent(), output);
  }

  // repeated int32 partition_size = 15;
  for (int i = 0, n = this->partition_size_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      15, this->partition_size(i), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::cpu(this), output);
  }

  // optional int64 ram = 17;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->ram(), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::graphics_card(this), output);
  }

  // optional string browser_build = 19;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->browser_build(), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      20, this->browser_feature(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics)
}

size_t Fingerprint_MachineCharacteristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string font = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->font_size());
  for (int i = 0, n = this->font_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->font(i));
  }

  // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->plugin(static_cast<int>(i)));
    }
  }

  // repeated string requested_language = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->requested_language_size());
  for (int i = 0, n = this->requested_language_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->requested_language(i));
  }

  // repeated int32 partition_size = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->partition_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partition_size_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string operating_system_build = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->operating_system_build());
    }

    // optional string browser_language = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->browser_language());
    }

    // optional string charset = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string user_agent = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string browser_build = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->browser_build());
    }

    // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_size_);
    }

    // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unavailable_screen_size_);
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpu_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *graphics_card_);
    }

    // optional fixed64 user_and_device_name_hash = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int64 browser_install_time_hours = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->browser_install_time_hours());
    }

    // optional int64 utc_offset_ms = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->utc_offset_ms());
    }

    // optional int32 screen_count = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_count());
    }

    // optional int32 screen_color_depth = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_color_depth());
    }

    // optional int64 ram = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ram());
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->browser_feature());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_MachineCharacteristics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_MachineCharacteristics*>(
      &from));
}

void Fingerprint_MachineCharacteristics::MergeFrom(const Fingerprint_MachineCharacteristics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  font_.MergeFrom(from.font_);
  plugin_.MergeFrom(from.plugin_);
  requested_language_.MergeFrom(from.requested_language_);
  partition_size_.MergeFrom(from.partition_size_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      operating_system_build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operating_system_build_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      browser_language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      charset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      user_agent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      browser_build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.browser_build_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.screen_size());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_unavailable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.unavailable_screen_size());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cpu()->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::MergeFrom(from.cpu());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_graphics_card()->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::MergeFrom(from.graphics_card());
    }
    if (cached_has_bits & 0x00000200u) {
      user_and_device_name_hash_ = from.user_and_device_name_hash_;
    }
    if (cached_has_bits & 0x00000400u) {
      browser_install_time_hours_ = from.browser_install_time_hours_;
    }
    if (cached_has_bits & 0x00000800u) {
      utc_offset_ms_ = from.utc_offset_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      screen_count_ = from.screen_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      screen_color_depth_ = from.screen_color_depth_;
    }
    if (cached_has_bits & 0x00004000u) {
      ram_ = from.ram_;
    }
    if (cached_has_bits & 0x00008000u) {
      browser_feature_ = from.browser_feature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_MachineCharacteristics::CopyFrom(const Fingerprint_MachineCharacteristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics::InternalSwap(Fingerprint_MachineCharacteristics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  font_.InternalSwap(CastToBase(&other->font_));
  CastToBase(&plugin_)->InternalSwap(CastToBase(&other->plugin_));
  requested_language_.InternalSwap(CastToBase(&other->requested_language_));
  partition_size_.InternalSwap(&other->partition_size_);
  operating_system_build_.Swap(&other->operating_system_build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  browser_language_.Swap(&other->browser_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charset_.Swap(&other->charset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_agent_.Swap(&other->user_agent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  browser_build_.Swap(&other->browser_build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(screen_size_, other->screen_size_);
  swap(unavailable_screen_size_, other->unavailable_screen_size_);
  swap(cpu_, other->cpu_);
  swap(graphics_card_, other->graphics_card_);
  swap(user_and_device_name_hash_, other->user_and_device_name_hash_);
  swap(browser_install_time_hours_, other->browser_install_time_hours_);
  swap(utc_offset_ms_, other->utc_offset_ms_);
  swap(screen_count_, other->screen_count_);
  swap(screen_color_depth_, other->screen_color_depth_);
  swap(ram_, other->ram_);
  swap(browser_feature_, other->browser_feature_);
}

std::string Fingerprint_MachineCharacteristics::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics";
}


// ===================================================================

void Fingerprint_TransientState::InitAsDefaultInstance() {
  ::autofill::risk::_Fingerprint_TransientState_default_instance_._instance.get_mutable()->inner_window_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  ::autofill::risk::_Fingerprint_TransientState_default_instance_._instance.get_mutable()->outer_window_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
}
class Fingerprint_TransientState::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_TransientState>()._has_bits_);
  static const ::autofill::risk::Fingerprint_Dimension& inner_window_size(const Fingerprint_TransientState* msg);
  static void set_has_inner_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::risk::Fingerprint_Dimension& outer_window_size(const Fingerprint_TransientState* msg);
  static void set_has_outer_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill::risk::Fingerprint_Dimension&
Fingerprint_TransientState::_Internal::inner_window_size(const Fingerprint_TransientState* msg) {
  return *msg->inner_window_size_;
}
const ::autofill::risk::Fingerprint_Dimension&
Fingerprint_TransientState::_Internal::outer_window_size(const Fingerprint_TransientState* msg) {
  return *msg->outer_window_size_;
}
Fingerprint_TransientState::Fingerprint_TransientState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.TransientState)
}
Fingerprint_TransientState::Fingerprint_TransientState(const Fingerprint_TransientState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inner_window_size()) {
    inner_window_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.inner_window_size_);
  } else {
    inner_window_size_ = nullptr;
  }
  if (from.has_outer_window_size()) {
    outer_window_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.outer_window_size_);
  } else {
    outer_window_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.TransientState)
}

void Fingerprint_TransientState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_TransientState_fingerprint_2eproto.base);
  ::memset(&inner_window_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_window_size_) -
      reinterpret_cast<char*>(&inner_window_size_)) + sizeof(outer_window_size_));
}

Fingerprint_TransientState::~Fingerprint_TransientState() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.TransientState)
  SharedDtor();
}

void Fingerprint_TransientState::SharedDtor() {
  if (this != internal_default_instance()) delete inner_window_size_;
  if (this != internal_default_instance()) delete outer_window_size_;
}

void Fingerprint_TransientState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_TransientState& Fingerprint_TransientState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_TransientState_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_TransientState::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.TransientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inner_window_size_ != nullptr);
      inner_window_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outer_window_size_ != nullptr);
      outer_window_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_TransientState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_inner_window_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_outer_window_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_TransientState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.TransientState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inner_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_outer_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.TransientState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.TransientState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_TransientState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.TransientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::inner_window_size(this), output);
  }

  // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::outer_window_size(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.TransientState)
}

size_t Fingerprint_TransientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.TransientState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_window_size_);
    }

    // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outer_window_size_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_TransientState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_TransientState*>(
      &from));
}

void Fingerprint_TransientState::MergeFrom(const Fingerprint_TransientState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.TransientState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inner_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.inner_window_size());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outer_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.outer_window_size());
    }
  }
}

void Fingerprint_TransientState::CopyFrom(const Fingerprint_TransientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.TransientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_TransientState::IsInitialized() const {
  return true;
}

void Fingerprint_TransientState::InternalSwap(Fingerprint_TransientState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inner_window_size_, other->inner_window_size_);
  swap(outer_window_size_, other->outer_window_size_);
}

std::string Fingerprint_TransientState::GetTypeName() const {
  return "autofill.risk.Fingerprint.TransientState";
}


// ===================================================================

void Fingerprint_Performance::InitAsDefaultInstance() {
}
class Fingerprint_Performance::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_Performance>()._has_bits_);
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Fingerprint_Performance::Fingerprint_Performance()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Performance)
}
Fingerprint_Performance::Fingerprint_Performance(const Fingerprint_Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_type()) {
    network_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_type_);
  }
  ::memcpy(&bandwidth_, &from.bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&metered_) -
    reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Performance)
}

void Fingerprint_Performance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_Performance_fingerprint_2eproto.base);
  network_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metered_) -
      reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
}

Fingerprint_Performance::~Fingerprint_Performance() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Performance)
  SharedDtor();
}

void Fingerprint_Performance::SharedDtor() {
  network_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_Performance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_Performance& Fingerprint_Performance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_Performance_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    network_type_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metered_) -
        reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_Performance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool metered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_metered(&has_bits);
          metered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string network_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_network_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_Performance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Performance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bandwidth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_bandwidth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool metered = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_metered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_network_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Performance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Performance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_Performance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bandwidth = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->bandwidth(), output);
  }

  // optional bool metered = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->metered(), output);
  }

  // optional string network_type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->network_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Performance)
}

size_t Fingerprint_Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Performance)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string network_type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->network_type());
    }

    // optional float bandwidth = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool metered = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_Performance::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_Performance*>(
      &from));
}

void Fingerprint_Performance::MergeFrom(const Fingerprint_Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      network_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000004u) {
      metered_ = from.metered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Performance::CopyFrom(const Fingerprint_Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Performance::IsInitialized() const {
  return true;
}

void Fingerprint_Performance::InternalSwap(Fingerprint_Performance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  network_type_.Swap(&other->network_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bandwidth_, other->bandwidth_);
  swap(metered_, other->metered_);
}

std::string Fingerprint_Performance::GetTypeName() const {
  return "autofill.risk.Fingerprint.Performance";
}


// ===================================================================

void Fingerprint_UserCharacteristics_Vector::InitAsDefaultInstance() {
}
class Fingerprint_UserCharacteristics_Vector::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_UserCharacteristics_Vector>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}
Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector(const Fingerprint_UserCharacteristics_Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}

void Fingerprint_UserCharacteristics_Vector::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Fingerprint_UserCharacteristics_Vector::~Fingerprint_UserCharacteristics_Vector() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  SharedDtor();
}

void Fingerprint_UserCharacteristics_Vector::SharedDtor() {
}

void Fingerprint_UserCharacteristics_Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics_Vector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_UserCharacteristics_Vector_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_UserCharacteristics_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_UserCharacteristics_Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_UserCharacteristics_Vector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_UserCharacteristics_Vector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}

size_t Fingerprint_UserCharacteristics_Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_UserCharacteristics_Vector::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_UserCharacteristics_Vector*>(
      &from));
}

void Fingerprint_UserCharacteristics_Vector::MergeFrom(const Fingerprint_UserCharacteristics_Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics_Vector::CopyFrom(const Fingerprint_UserCharacteristics_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics_Vector::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics_Vector::InternalSwap(Fingerprint_UserCharacteristics_Vector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

std::string Fingerprint_UserCharacteristics_Vector::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics.Vector";
}


// ===================================================================

void Fingerprint_UserCharacteristics_Location::InitAsDefaultInstance() {
}
class Fingerprint_UserCharacteristics_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_UserCharacteristics_Location>()._has_bits_);
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
}
Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location(const Fingerprint_UserCharacteristics_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&altitude_, &from.altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_in_ms_) -
    reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
}

void Fingerprint_UserCharacteristics_Location::SharedCtor() {
  ::memset(&altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_in_ms_) -
      reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
}

Fingerprint_UserCharacteristics_Location::~Fingerprint_UserCharacteristics_Location() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
  SharedDtor();
}

void Fingerprint_UserCharacteristics_Location::SharedDtor() {
}

void Fingerprint_UserCharacteristics_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_UserCharacteristics_Location& Fingerprint_UserCharacteristics_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_UserCharacteristics_Location_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_UserCharacteristics_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_in_ms_) -
        reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_UserCharacteristics_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double altitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accuracy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_accuracy(&has_bits);
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 time_in_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_in_ms(&has_bits);
          time_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_UserCharacteristics_Location::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double altitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_altitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accuracy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_accuracy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_in_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_time_in_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_in_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_UserCharacteristics_Location::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double altitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->altitude(), output);
  }

  // optional double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional double accuracy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->accuracy(), output);
  }

  // optional int64 time_in_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->time_in_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Location)
}

size_t Fingerprint_UserCharacteristics_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double altitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double accuracy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int64 time_in_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_in_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_UserCharacteristics_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_UserCharacteristics_Location*>(
      &from));
}

void Fingerprint_UserCharacteristics_Location::MergeFrom(const Fingerprint_UserCharacteristics_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_in_ms_ = from.time_in_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics_Location::CopyFrom(const Fingerprint_UserCharacteristics_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics_Location::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics_Location::InternalSwap(Fingerprint_UserCharacteristics_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(altitude_, other->altitude_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(accuracy_, other->accuracy_);
  swap(time_in_ms_, other->time_in_ms_);
}

std::string Fingerprint_UserCharacteristics_Location::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics.Location";
}


// ===================================================================

void Fingerprint_UserCharacteristics::InitAsDefaultInstance() {
  ::autofill::risk::_Fingerprint_UserCharacteristics_default_instance_._instance.get_mutable()->device_orientation_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
  ::autofill::risk::_Fingerprint_UserCharacteristics_default_instance_._instance.get_mutable()->device_acceleration_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
  ::autofill::risk::_Fingerprint_UserCharacteristics_default_instance_._instance.get_mutable()->location_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Location*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Location::internal_default_instance());
}
class Fingerprint_UserCharacteristics::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_UserCharacteristics>()._has_bits_);
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_touch_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_touch_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_touch_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& device_orientation(const Fingerprint_UserCharacteristics* msg);
  static void set_has_device_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& device_acceleration(const Fingerprint_UserCharacteristics* msg);
  static void set_has_device_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::risk::Fingerprint_UserCharacteristics_Location& location(const Fingerprint_UserCharacteristics* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill::risk::Fingerprint_UserCharacteristics_Vector&
Fingerprint_UserCharacteristics::_Internal::device_orientation(const Fingerprint_UserCharacteristics* msg) {
  return *msg->device_orientation_;
}
const ::autofill::risk::Fingerprint_UserCharacteristics_Vector&
Fingerprint_UserCharacteristics::_Internal::device_acceleration(const Fingerprint_UserCharacteristics* msg) {
  return *msg->device_acceleration_;
}
const ::autofill::risk::Fingerprint_UserCharacteristics_Location&
Fingerprint_UserCharacteristics::_Internal::location(const Fingerprint_UserCharacteristics* msg) {
  return *msg->location_;
}
Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics)
}
Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics(const Fingerprint_UserCharacteristics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_orientation()) {
    device_orientation_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector(*from.device_orientation_);
  } else {
    device_orientation_ = nullptr;
  }
  if (from.has_device_acceleration()) {
    device_acceleration_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector(*from.device_acceleration_);
  } else {
    device_acceleration_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&force_, &from.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&touch_rotation_) -
    reinterpret_cast<char*>(&force_)) + sizeof(touch_rotation_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics)
}

void Fingerprint_UserCharacteristics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto.base);
  ::memset(&device_orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_rotation_) -
      reinterpret_cast<char*>(&device_orientation_)) + sizeof(touch_rotation_));
}

Fingerprint_UserCharacteristics::~Fingerprint_UserCharacteristics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics)
  SharedDtor();
}

void Fingerprint_UserCharacteristics::SharedDtor() {
  if (this != internal_default_instance()) delete device_orientation_;
  if (this != internal_default_instance()) delete device_acceleration_;
  if (this != internal_default_instance()) delete location_;
}

void Fingerprint_UserCharacteristics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_UserCharacteristics& Fingerprint_UserCharacteristics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_UserCharacteristics_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_UserCharacteristics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(device_orientation_ != nullptr);
      device_orientation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_acceleration_ != nullptr);
      device_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touch_rotation_) -
        reinterpret_cast<char*>(&force_)) + sizeof(touch_rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_UserCharacteristics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_force(&has_bits);
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float touch_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_touch_width(&has_bits);
          touch_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float touch_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_touch_height(&has_bits);
          touch_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 touch_rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_touch_rotation(&has_bits);
          touch_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_device_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_device_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_UserCharacteristics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float force = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_force(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float touch_width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_touch_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &touch_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float touch_height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_touch_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &touch_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 touch_rotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_touch_rotation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &touch_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_UserCharacteristics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float force = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->force(), output);
  }

  // optional float touch_width = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->touch_width(), output);
  }

  // optional float touch_height = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->touch_height(), output);
  }

  // optional int32 touch_rotation = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->touch_rotation(), output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::device_orientation(this), output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::device_acceleration(this), output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::location(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics)
}

size_t Fingerprint_UserCharacteristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_orientation_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_acceleration_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional float force = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float touch_width = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float touch_height = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 touch_rotation = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->touch_rotation());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_UserCharacteristics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_UserCharacteristics*>(
      &from));
}

void Fingerprint_UserCharacteristics::MergeFrom(const Fingerprint_UserCharacteristics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_device_orientation()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_orientation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_acceleration()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location()->::autofill::risk::Fingerprint_UserCharacteristics_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000008u) {
      force_ = from.force_;
    }
    if (cached_has_bits & 0x00000010u) {
      touch_width_ = from.touch_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      touch_height_ = from.touch_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      touch_rotation_ = from.touch_rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics::CopyFrom(const Fingerprint_UserCharacteristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics::InternalSwap(Fingerprint_UserCharacteristics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_orientation_, other->device_orientation_);
  swap(device_acceleration_, other->device_acceleration_);
  swap(location_, other->location_);
  swap(force_, other->force_);
  swap(touch_width_, other->touch_width_);
  swap(touch_height_, other->touch_height_);
  swap(touch_rotation_, other->touch_rotation_);
}

std::string Fingerprint_UserCharacteristics::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics";
}


// ===================================================================

void Fingerprint_Metadata::InitAsDefaultInstance() {
}
class Fingerprint_Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint_Metadata>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obfuscated_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fingerprinter_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Fingerprint_Metadata::Fingerprint_Metadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Metadata)
}
Fingerprint_Metadata::Fingerprint_Metadata(const Fingerprint_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&fingerprinter_version_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Metadata)
}

void Fingerprint_Metadata::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fingerprinter_version_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
}

Fingerprint_Metadata::~Fingerprint_Metadata() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Metadata)
  SharedDtor();
}

void Fingerprint_Metadata::SharedDtor() {
}

void Fingerprint_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint_Metadata& Fingerprint_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_Metadata_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fingerprinter_version_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 obfuscated_gaia_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_obfuscated_gaia_id(&has_bits);
          obfuscated_gaia_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fingerprinter_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fingerprinter_version(&has_bits);
          fingerprinter_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint_Metadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Metadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 obfuscated_gaia_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_obfuscated_gaia_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obfuscated_gaia_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fingerprinter_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fingerprinter_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fingerprinter_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint_Metadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint64 obfuscated_gaia_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->obfuscated_gaia_id(), output);
  }

  // optional int32 fingerprinter_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->fingerprinter_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Metadata)
}

size_t Fingerprint_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Metadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint64 obfuscated_gaia_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->obfuscated_gaia_id());
    }

    // optional int32 fingerprinter_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fingerprinter_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint_Metadata*>(
      &from));
}

void Fingerprint_Metadata::MergeFrom(const Fingerprint_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      obfuscated_gaia_id_ = from.obfuscated_gaia_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fingerprinter_version_ = from.fingerprinter_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Metadata::CopyFrom(const Fingerprint_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Metadata::IsInitialized() const {
  return true;
}

void Fingerprint_Metadata::InternalSwap(Fingerprint_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(obfuscated_gaia_id_, other->obfuscated_gaia_id_);
  swap(fingerprinter_version_, other->fingerprinter_version_);
}

std::string Fingerprint_Metadata::GetTypeName() const {
  return "autofill.risk.Fingerprint.Metadata";
}


// ===================================================================

void Fingerprint::InitAsDefaultInstance() {
  ::autofill::risk::_Fingerprint_default_instance_._instance.get_mutable()->machine_characteristics_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics::internal_default_instance());
  ::autofill::risk::_Fingerprint_default_instance_._instance.get_mutable()->performance_ = const_cast< ::autofill::risk::Fingerprint_Performance*>(
      ::autofill::risk::Fingerprint_Performance::internal_default_instance());
  ::autofill::risk::_Fingerprint_default_instance_._instance.get_mutable()->user_characteristics_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics*>(
      ::autofill::risk::Fingerprint_UserCharacteristics::internal_default_instance());
  ::autofill::risk::_Fingerprint_default_instance_._instance.get_mutable()->transient_state_ = const_cast< ::autofill::risk::Fingerprint_TransientState*>(
      ::autofill::risk::Fingerprint_TransientState::internal_default_instance());
  ::autofill::risk::_Fingerprint_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::autofill::risk::Fingerprint_Metadata*>(
      ::autofill::risk::Fingerprint_Metadata::internal_default_instance());
}
class Fingerprint::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint>()._has_bits_);
  static const ::autofill::risk::Fingerprint_MachineCharacteristics& machine_characteristics(const Fingerprint* msg);
  static void set_has_machine_characteristics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::risk::Fingerprint_Performance& performance(const Fingerprint* msg);
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::risk::Fingerprint_UserCharacteristics& user_characteristics(const Fingerprint* msg);
  static void set_has_user_characteristics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::risk::Fingerprint_TransientState& transient_state(const Fingerprint* msg);
  static void set_has_transient_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::risk::Fingerprint_Metadata& metadata(const Fingerprint* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::autofill::risk::Fingerprint_MachineCharacteristics&
Fingerprint::_Internal::machine_characteristics(const Fingerprint* msg) {
  return *msg->machine_characteristics_;
}
const ::autofill::risk::Fingerprint_Performance&
Fingerprint::_Internal::performance(const Fingerprint* msg) {
  return *msg->performance_;
}
const ::autofill::risk::Fingerprint_UserCharacteristics&
Fingerprint::_Internal::user_characteristics(const Fingerprint* msg) {
  return *msg->user_characteristics_;
}
const ::autofill::risk::Fingerprint_TransientState&
Fingerprint::_Internal::transient_state(const Fingerprint* msg) {
  return *msg->transient_state_;
}
const ::autofill::risk::Fingerprint_Metadata&
Fingerprint::_Internal::metadata(const Fingerprint* msg) {
  return *msg->metadata_;
}
Fingerprint::Fingerprint()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint)
}
Fingerprint::Fingerprint(const Fingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_machine_characteristics()) {
    machine_characteristics_ = new ::autofill::risk::Fingerprint_MachineCharacteristics(*from.machine_characteristics_);
  } else {
    machine_characteristics_ = nullptr;
  }
  if (from.has_performance()) {
    performance_ = new ::autofill::risk::Fingerprint_Performance(*from.performance_);
  } else {
    performance_ = nullptr;
  }
  if (from.has_user_characteristics()) {
    user_characteristics_ = new ::autofill::risk::Fingerprint_UserCharacteristics(*from.user_characteristics_);
  } else {
    user_characteristics_ = nullptr;
  }
  if (from.has_transient_state()) {
    transient_state_ = new ::autofill::risk::Fingerprint_TransientState(*from.transient_state_);
  } else {
    transient_state_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::autofill::risk::Fingerprint_Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint)
}

void Fingerprint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_fingerprint_2eproto.base);
  ::memset(&machine_characteristics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&machine_characteristics_)) + sizeof(metadata_));
}

Fingerprint::~Fingerprint() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint)
  SharedDtor();
}

void Fingerprint::SharedDtor() {
  if (this != internal_default_instance()) delete machine_characteristics_;
  if (this != internal_default_instance()) delete performance_;
  if (this != internal_default_instance()) delete user_characteristics_;
  if (this != internal_default_instance()) delete transient_state_;
  if (this != internal_default_instance()) delete metadata_;
}

void Fingerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint& Fingerprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(machine_characteristics_ != nullptr);
      machine_characteristics_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(performance_ != nullptr);
      performance_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_characteristics_ != nullptr);
      user_characteristics_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transient_state_ != nullptr);
      transient_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fingerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_machine_characteristics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.Performance performance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_user_characteristics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_transient_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fingerprint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_machine_characteristics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Performance performance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_characteristics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transient_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fingerprint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::machine_characteristics(this), output);
  }

  // optional .autofill.risk.Fingerprint.Performance performance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::performance(this), output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::user_characteristics(this), output);
  }

  // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::transient_state(this), output);
  }

  // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint)
}

size_t Fingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *machine_characteristics_);
    }

    // optional .autofill.risk.Fingerprint.Performance performance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *performance_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_characteristics_);
    }

    // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transient_state_);
    }

    // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fingerprint*>(
      &from));
}

void Fingerprint::MergeFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_machine_characteristics()->::autofill::risk::Fingerprint_MachineCharacteristics::MergeFrom(from.machine_characteristics());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_performance()->::autofill::risk::Fingerprint_Performance::MergeFrom(from.performance());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_characteristics()->::autofill::risk::Fingerprint_UserCharacteristics::MergeFrom(from.user_characteristics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_transient_state()->::autofill::risk::Fingerprint_TransientState::MergeFrom(from.transient_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_metadata()->::autofill::risk::Fingerprint_Metadata::MergeFrom(from.metadata());
    }
  }
}

void Fingerprint::CopyFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint::IsInitialized() const {
  return true;
}

void Fingerprint::InternalSwap(Fingerprint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(machine_characteristics_, other->machine_characteristics_);
  swap(performance_, other->performance_);
  swap(user_characteristics_, other->user_characteristics_);
  swap(transient_state_, other->transient_state_);
  swap(metadata_, other->metadata_);
}

std::string Fingerprint::GetTypeName() const {
  return "autofill.risk.Fingerprint";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace risk
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_Dimension* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_Dimension >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_MachineCharacteristics* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_MachineCharacteristics >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_MachineCharacteristics >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_TransientState* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_TransientState >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_TransientState >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_Performance* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_Performance >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_UserCharacteristics_Vector* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_UserCharacteristics_Vector >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_UserCharacteristics_Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_UserCharacteristics_Location* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_UserCharacteristics_Location >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_UserCharacteristics_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_UserCharacteristics* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_UserCharacteristics >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_UserCharacteristics >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint_Metadata* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint_Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::risk::Fingerprint* Arena::CreateMaybeMessage< ::autofill::risk::Fingerprint >(Arena* arena) {
  return Arena::CreateInternal< ::autofill::risk::Fingerprint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
