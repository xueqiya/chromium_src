# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rappor_metric.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='rappor_metric.proto',
  package='rappor',
  syntax='proto2',
  serialized_options=_b('H\003'),
  serialized_pb=_b('\n\x13rappor_metric.proto\x12\x06rappor\"x\n\rRapporReports\x12\x0e\n\x06\x63ohort\x18\x01 \x01(\x05\x12,\n\x06report\x18\x02 \x03(\x0b\x32\x1c.rappor.RapporReports.Report\x1a)\n\x06Report\x12\x11\n\tname_hash\x18\x01 \x01(\x06\x12\x0c\n\x04\x62its\x18\x02 \x01(\x0c\x42\x02H\x03')
)




_RAPPORREPORTS_REPORT = _descriptor.Descriptor(
  name='Report',
  full_name='rappor.RapporReports.Report',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name_hash', full_name='rappor.RapporReports.Report.name_hash', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bits', full_name='rappor.RapporReports.Report.bits', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=110,
  serialized_end=151,
)

_RAPPORREPORTS = _descriptor.Descriptor(
  name='RapporReports',
  full_name='rappor.RapporReports',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cohort', full_name='rappor.RapporReports.cohort', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='report', full_name='rappor.RapporReports.report', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_RAPPORREPORTS_REPORT, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=151,
)

_RAPPORREPORTS_REPORT.containing_type = _RAPPORREPORTS
_RAPPORREPORTS.fields_by_name['report'].message_type = _RAPPORREPORTS_REPORT
DESCRIPTOR.message_types_by_name['RapporReports'] = _RAPPORREPORTS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

RapporReports = _reflection.GeneratedProtocolMessageType('RapporReports', (_message.Message,), {

  'Report' : _reflection.GeneratedProtocolMessageType('Report', (_message.Message,), {
    'DESCRIPTOR' : _RAPPORREPORTS_REPORT,
    '__module__' : 'rappor_metric_pb2'
    # @@protoc_insertion_point(class_scope:rappor.RapporReports.Report)
    })
  ,
  'DESCRIPTOR' : _RAPPORREPORTS,
  '__module__' : 'rappor_metric_pb2'
  # @@protoc_insertion_point(class_scope:rappor.RapporReports)
  })
_sym_db.RegisterMessage(RapporReports)
_sym_db.RegisterMessage(RapporReports.Report)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
