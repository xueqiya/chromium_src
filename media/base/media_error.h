// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_BASE_MEDIA_ERROR_H_
#define MEDIA_BASE_MEDIA_ERROR_H_

#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "base/location.h"
#include "base/strings/string_piece.h"
#include "base/values.h"
#include "media/base/media_error_codes.h"
#include "media/base/media_export.h"
#include "media/base/media_serializers_base.h"

namespace media {

// MediaError is meant to be a relatively small (sizeof(void*) bytes) object
// that can be returned as an error value from functions or passed to callbacks
// that want a report of status. MediaError allows attaching of arbitrary named
// data, other MediaErrors as causes, and stack frames, which can all be logged
// and reported throughout the media stack. The error code and message are
// immutable and can be used to give a stable numeric ID for any error
// generated by media code.
// There is also an OK state which can't hold any data and is only for
// successful returns.
class MEDIA_EXPORT MediaError {
 public:
  // Convenience function to return |kOk|.
  // OK won't have a message, trace, or data associated with them, and DCHECK
  // if they are added.
  static MediaError Ok() { return MediaError(ErrorCode::kOk); }

  // Constructor to create a new MediaError from a numeric code & message.
  // These are immutable; if you'd like to change them, then you likely should
  // create a new MediaError.
  // NOTE: This should never be given a location parameter when called - It is
  // defaulted in order to grab the caller location.
  MediaError(ErrorCode code,
             base::StringPiece message = "",
             const base::Location& location = base::Location::Current());

  // Copy Constructor
  MediaError(const MediaError& copy);

  // Allows move.
  MediaError(MediaError&&);
  MediaError& operator=(MediaError&&);

  // Needs an out of line destructor...
  ~MediaError();

  bool IsOk() const { return !data_; }

  // Getters for internal fields
  base::StringPiece GetErrorMessage() const {
    return data_ ? data_->message : "";
  }
  ErrorCode GetErrorCode() const {
    return data_ ? data_->code : ErrorCode::kOk;
  }

  // Adds the current location to MediaError as itâ€™s passed upwards.
  // This does not need to be called at every location that touches it, but
  // should be called for those locations where the path is ambiguous or
  // critical. This can be especially helpful across IPC boundaries. This will
  // fail on an OK status.
  // NOTE: This should never be given a parameter when called - It is defaulted
  // in order to grab the caller location.
  MediaError&& AddHere(
      const base::Location& location = base::Location::Current()) &&;

  // Add |cause| as the error that triggered this one.  For example,
  // DecoderStream might return kDecoderSelectionFailed with one or more causes
  // that are the specific errors from the decoders that it tried.
  MediaError&& AddCause(MediaError&& cause) &&;
  void AddCause(MediaError&& cause) &;

  // Allows us to append any datatype which can be converted to
  // an int/bool/string/base::Value. Any existing data associated with |key|
  // will be overwritten by |value|. This will fail on an OK status.
  template <typename T>
  MediaError&& WithData(const char* key, const T& value) && {
    DCHECK(data_);
    data_->data.SetKey(key, MediaSerialize(value));
    return std::move(*this);
  }

  template <typename T>
  void WithData(const char* key, const T& value) & {
    DCHECK(data_);
    data_->data.SetKey(key, MediaSerialize(value));
  }

 private:
  // Private helper to add the current stack frame to the error trace.
  void AddFrame(const base::Location& location);

  // Keep the internal data in a unique ptr to minimize size of OK errors.
  struct MediaErrorInternal {
    MediaErrorInternal(ErrorCode code, base::StringPiece message);
    ~MediaErrorInternal();

    // The current error code
    ErrorCode code = ErrorCode::kOk;

    // The current error message (Can be used for
    // https://developer.mozilla.org/en-US/docs/Web/API/MediaError)
    base::StringPiece message;

    // Stack frames
    std::vector<base::Value> frames;

    // Causes
    std::vector<MediaError> causes;

    // Data attached to the error
    base::Value data;
  };

  // Allow self-serialization
  friend struct internal::MediaSerializer<MediaError>;

  // A null internals is an implicit OK.
  std::unique_ptr<MediaErrorInternal> data_;
};

// We need this two step macro to allow calling with no extra args - in a single
// step macro we would have no way of removing the trailing comma after the
// code.
#define MEDIA_ERROR(CODE_TRUNC, ...) \
  MEDIA_ERROR_INTERNAL(::media::ErrorCode::CODE_TRUNC, ##__VA_ARGS__)

#define MEDIA_ERROR_INTERNAL(...) ::media::MediaError(__VA_ARGS__)

}  // namespace media

#endif  // MEDIA_BASE_MEDIA_ERROR_H_
